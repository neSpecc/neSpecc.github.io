(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["Telegramjs"] = factory();
	else
		root["Telegramjs"] = factory();
})(window, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	function webpackJsonpCallback(data) {
/******/ 		var chunkIds = data[0];
/******/ 		var moreModules = data[1];
/******/
/******/
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, resolves = [];
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 				resolves.push(installedChunks[chunkId][0]);
/******/ 			}
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				modules[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(data);
/******/
/******/ 		while(resolves.length) {
/******/ 			resolves.shift()();
/******/ 		}
/******/
/******/ 	};
/******/
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// object to store loaded and loading chunks
/******/ 	// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 	// Promise = chunk loading, 0 = chunk loaded
/******/ 	var installedChunks = {
/******/ 		"main": 0
/******/ 	};
/******/
/******/
/******/
/******/ 	// script path function
/******/ 	function jsonpScriptSrc(chunkId) {
/******/ 		return __webpack_require__.p + "" + ({"countries":"countries","monkey":"monkey"}[chunkId]||chunkId) + ".js"
/******/ 	}
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/ 	// This file contains only the entry chunk.
/******/ 	// The chunk loading function for additional chunks
/******/ 	__webpack_require__.e = function requireEnsure(chunkId) {
/******/ 		var promises = [];
/******/
/******/
/******/ 		// JSONP chunk loading for javascript
/******/
/******/ 		var installedChunkData = installedChunks[chunkId];
/******/ 		if(installedChunkData !== 0) { // 0 means "already installed".
/******/
/******/ 			// a Promise means "currently loading".
/******/ 			if(installedChunkData) {
/******/ 				promises.push(installedChunkData[2]);
/******/ 			} else {
/******/ 				// setup Promise in chunk cache
/******/ 				var promise = new Promise(function(resolve, reject) {
/******/ 					installedChunkData = installedChunks[chunkId] = [resolve, reject];
/******/ 				});
/******/ 				promises.push(installedChunkData[2] = promise);
/******/
/******/ 				// start chunk loading
/******/ 				var script = document.createElement('script');
/******/ 				var onScriptComplete;
/******/
/******/ 				script.charset = 'utf-8';
/******/ 				script.timeout = 120;
/******/ 				if (__webpack_require__.nc) {
/******/ 					script.setAttribute("nonce", __webpack_require__.nc);
/******/ 				}
/******/ 				script.src = jsonpScriptSrc(chunkId);
/******/
/******/ 				// create error before stack unwound to get useful stacktrace later
/******/ 				var error = new Error();
/******/ 				onScriptComplete = function (event) {
/******/ 					// avoid mem leaks in IE.
/******/ 					script.onerror = script.onload = null;
/******/ 					clearTimeout(timeout);
/******/ 					var chunk = installedChunks[chunkId];
/******/ 					if(chunk !== 0) {
/******/ 						if(chunk) {
/******/ 							var errorType = event && (event.type === 'load' ? 'missing' : event.type);
/******/ 							var realSrc = event && event.target && event.target.src;
/******/ 							error.message = 'Loading chunk ' + chunkId + ' failed.\n(' + errorType + ': ' + realSrc + ')';
/******/ 							error.name = 'ChunkLoadError';
/******/ 							error.type = errorType;
/******/ 							error.request = realSrc;
/******/ 							chunk[1](error);
/******/ 						}
/******/ 						installedChunks[chunkId] = undefined;
/******/ 					}
/******/ 				};
/******/ 				var timeout = setTimeout(function(){
/******/ 					onScriptComplete({ type: 'timeout', target: script });
/******/ 				}, 120000);
/******/ 				script.onerror = script.onload = onScriptComplete;
/******/ 				document.head.appendChild(script);
/******/ 			}
/******/ 		}
/******/ 		return Promise.all(promises);
/******/ 	};
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// on error function for async loading
/******/ 	__webpack_require__.oe = function(err) { console.error(err); throw err; };
/******/
/******/ 	var jsonpArray = window["webpackJsonpTelegramjs"] = window["webpackJsonpTelegramjs"] || [];
/******/ 	var oldJsonpFunction = jsonpArray.push.bind(jsonpArray);
/******/ 	jsonpArray.push = webpackJsonpCallback;
/******/ 	jsonpArray = jsonpArray.slice();
/******/ 	for(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);
/******/ 	var parentJsonpFunction = oldJsonpFunction;
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/aes-js/index.js":
/*!**************************************!*\
  !*** ./node_modules/aes-js/index.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/*! MIT License. Copyright 2015-2018 Richard Moore <me@ricmoo.com>. See LICENSE.txt. */\n(function(root) {\n    \"use strict\";\n\n    function checkInt(value) {\n        return (parseInt(value) === value);\n    }\n\n    function checkInts(arrayish) {\n        if (!checkInt(arrayish.length)) { return false; }\n\n        for (var i = 0; i < arrayish.length; i++) {\n            if (!checkInt(arrayish[i]) || arrayish[i] < 0 || arrayish[i] > 255) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    function coerceArray(arg, copy) {\n\n        // ArrayBuffer view\n        if (arg.buffer && arg.name === 'Uint8Array') {\n\n            if (copy) {\n                if (arg.slice) {\n                    arg = arg.slice();\n                } else {\n                    arg = Array.prototype.slice.call(arg);\n                }\n            }\n\n            return arg;\n        }\n\n        // It's an array; check it is a valid representation of a byte\n        if (Array.isArray(arg)) {\n            if (!checkInts(arg)) {\n                throw new Error('Array contains invalid value: ' + arg);\n            }\n\n            return new Uint8Array(arg);\n        }\n\n        // Something else, but behaves like an array (maybe a Buffer? Arguments?)\n        if (checkInt(arg.length) && checkInts(arg)) {\n            return new Uint8Array(arg);\n        }\n\n        throw new Error('unsupported array-like object');\n    }\n\n    function createArray(length) {\n        return new Uint8Array(length);\n    }\n\n    function copyArray(sourceArray, targetArray, targetStart, sourceStart, sourceEnd) {\n        if (sourceStart != null || sourceEnd != null) {\n            if (sourceArray.slice) {\n                sourceArray = sourceArray.slice(sourceStart, sourceEnd);\n            } else {\n                sourceArray = Array.prototype.slice.call(sourceArray, sourceStart, sourceEnd);\n            }\n        }\n        targetArray.set(sourceArray, targetStart);\n    }\n\n\n\n    var convertUtf8 = (function() {\n        function toBytes(text) {\n            var result = [], i = 0;\n            text = encodeURI(text);\n            while (i < text.length) {\n                var c = text.charCodeAt(i++);\n\n                // if it is a % sign, encode the following 2 bytes as a hex value\n                if (c === 37) {\n                    result.push(parseInt(text.substr(i, 2), 16))\n                    i += 2;\n\n                // otherwise, just the actual byte\n                } else {\n                    result.push(c)\n                }\n            }\n\n            return coerceArray(result);\n        }\n\n        function fromBytes(bytes) {\n            var result = [], i = 0;\n\n            while (i < bytes.length) {\n                var c = bytes[i];\n\n                if (c < 128) {\n                    result.push(String.fromCharCode(c));\n                    i++;\n                } else if (c > 191 && c < 224) {\n                    result.push(String.fromCharCode(((c & 0x1f) << 6) | (bytes[i + 1] & 0x3f)));\n                    i += 2;\n                } else {\n                    result.push(String.fromCharCode(((c & 0x0f) << 12) | ((bytes[i + 1] & 0x3f) << 6) | (bytes[i + 2] & 0x3f)));\n                    i += 3;\n                }\n            }\n\n            return result.join('');\n        }\n\n        return {\n            toBytes: toBytes,\n            fromBytes: fromBytes,\n        }\n    })();\n\n    var convertHex = (function() {\n        function toBytes(text) {\n            var result = [];\n            for (var i = 0; i < text.length; i += 2) {\n                result.push(parseInt(text.substr(i, 2), 16));\n            }\n\n            return result;\n        }\n\n        // http://ixti.net/development/javascript/2011/11/11/base64-encodedecode-of-utf8-in-browser-with-js.html\n        var Hex = '0123456789abcdef';\n\n        function fromBytes(bytes) {\n                var result = [];\n                for (var i = 0; i < bytes.length; i++) {\n                    var v = bytes[i];\n                    result.push(Hex[(v & 0xf0) >> 4] + Hex[v & 0x0f]);\n                }\n                return result.join('');\n        }\n\n        return {\n            toBytes: toBytes,\n            fromBytes: fromBytes,\n        }\n    })();\n\n\n    // Number of rounds by keysize\n    var numberOfRounds = {16: 10, 24: 12, 32: 14}\n\n    // Round constant words\n    var rcon = [0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91];\n\n    // S-box and Inverse S-box (S is for Substitution)\n    var S = [0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, 0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16];\n    var Si =[0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb, 0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb, 0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e, 0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25, 0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92, 0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84, 0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06, 0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b, 0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73, 0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e, 0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b, 0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4, 0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f, 0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef, 0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61, 0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d];\n\n    // Transformations for encryption\n    var T1 = [0xc66363a5, 0xf87c7c84, 0xee777799, 0xf67b7b8d, 0xfff2f20d, 0xd66b6bbd, 0xde6f6fb1, 0x91c5c554, 0x60303050, 0x02010103, 0xce6767a9, 0x562b2b7d, 0xe7fefe19, 0xb5d7d762, 0x4dababe6, 0xec76769a, 0x8fcaca45, 0x1f82829d, 0x89c9c940, 0xfa7d7d87, 0xeffafa15, 0xb25959eb, 0x8e4747c9, 0xfbf0f00b, 0x41adadec, 0xb3d4d467, 0x5fa2a2fd, 0x45afafea, 0x239c9cbf, 0x53a4a4f7, 0xe4727296, 0x9bc0c05b, 0x75b7b7c2, 0xe1fdfd1c, 0x3d9393ae, 0x4c26266a, 0x6c36365a, 0x7e3f3f41, 0xf5f7f702, 0x83cccc4f, 0x6834345c, 0x51a5a5f4, 0xd1e5e534, 0xf9f1f108, 0xe2717193, 0xabd8d873, 0x62313153, 0x2a15153f, 0x0804040c, 0x95c7c752, 0x46232365, 0x9dc3c35e, 0x30181828, 0x379696a1, 0x0a05050f, 0x2f9a9ab5, 0x0e070709, 0x24121236, 0x1b80809b, 0xdfe2e23d, 0xcdebeb26, 0x4e272769, 0x7fb2b2cd, 0xea75759f, 0x1209091b, 0x1d83839e, 0x582c2c74, 0x341a1a2e, 0x361b1b2d, 0xdc6e6eb2, 0xb45a5aee, 0x5ba0a0fb, 0xa45252f6, 0x763b3b4d, 0xb7d6d661, 0x7db3b3ce, 0x5229297b, 0xdde3e33e, 0x5e2f2f71, 0x13848497, 0xa65353f5, 0xb9d1d168, 0x00000000, 0xc1eded2c, 0x40202060, 0xe3fcfc1f, 0x79b1b1c8, 0xb65b5bed, 0xd46a6abe, 0x8dcbcb46, 0x67bebed9, 0x7239394b, 0x944a4ade, 0x984c4cd4, 0xb05858e8, 0x85cfcf4a, 0xbbd0d06b, 0xc5efef2a, 0x4faaaae5, 0xedfbfb16, 0x864343c5, 0x9a4d4dd7, 0x66333355, 0x11858594, 0x8a4545cf, 0xe9f9f910, 0x04020206, 0xfe7f7f81, 0xa05050f0, 0x783c3c44, 0x259f9fba, 0x4ba8a8e3, 0xa25151f3, 0x5da3a3fe, 0x804040c0, 0x058f8f8a, 0x3f9292ad, 0x219d9dbc, 0x70383848, 0xf1f5f504, 0x63bcbcdf, 0x77b6b6c1, 0xafdada75, 0x42212163, 0x20101030, 0xe5ffff1a, 0xfdf3f30e, 0xbfd2d26d, 0x81cdcd4c, 0x180c0c14, 0x26131335, 0xc3ecec2f, 0xbe5f5fe1, 0x359797a2, 0x884444cc, 0x2e171739, 0x93c4c457, 0x55a7a7f2, 0xfc7e7e82, 0x7a3d3d47, 0xc86464ac, 0xba5d5de7, 0x3219192b, 0xe6737395, 0xc06060a0, 0x19818198, 0x9e4f4fd1, 0xa3dcdc7f, 0x44222266, 0x542a2a7e, 0x3b9090ab, 0x0b888883, 0x8c4646ca, 0xc7eeee29, 0x6bb8b8d3, 0x2814143c, 0xa7dede79, 0xbc5e5ee2, 0x160b0b1d, 0xaddbdb76, 0xdbe0e03b, 0x64323256, 0x743a3a4e, 0x140a0a1e, 0x924949db, 0x0c06060a, 0x4824246c, 0xb85c5ce4, 0x9fc2c25d, 0xbdd3d36e, 0x43acacef, 0xc46262a6, 0x399191a8, 0x319595a4, 0xd3e4e437, 0xf279798b, 0xd5e7e732, 0x8bc8c843, 0x6e373759, 0xda6d6db7, 0x018d8d8c, 0xb1d5d564, 0x9c4e4ed2, 0x49a9a9e0, 0xd86c6cb4, 0xac5656fa, 0xf3f4f407, 0xcfeaea25, 0xca6565af, 0xf47a7a8e, 0x47aeaee9, 0x10080818, 0x6fbabad5, 0xf0787888, 0x4a25256f, 0x5c2e2e72, 0x381c1c24, 0x57a6a6f1, 0x73b4b4c7, 0x97c6c651, 0xcbe8e823, 0xa1dddd7c, 0xe874749c, 0x3e1f1f21, 0x964b4bdd, 0x61bdbddc, 0x0d8b8b86, 0x0f8a8a85, 0xe0707090, 0x7c3e3e42, 0x71b5b5c4, 0xcc6666aa, 0x904848d8, 0x06030305, 0xf7f6f601, 0x1c0e0e12, 0xc26161a3, 0x6a35355f, 0xae5757f9, 0x69b9b9d0, 0x17868691, 0x99c1c158, 0x3a1d1d27, 0x279e9eb9, 0xd9e1e138, 0xebf8f813, 0x2b9898b3, 0x22111133, 0xd26969bb, 0xa9d9d970, 0x078e8e89, 0x339494a7, 0x2d9b9bb6, 0x3c1e1e22, 0x15878792, 0xc9e9e920, 0x87cece49, 0xaa5555ff, 0x50282878, 0xa5dfdf7a, 0x038c8c8f, 0x59a1a1f8, 0x09898980, 0x1a0d0d17, 0x65bfbfda, 0xd7e6e631, 0x844242c6, 0xd06868b8, 0x824141c3, 0x299999b0, 0x5a2d2d77, 0x1e0f0f11, 0x7bb0b0cb, 0xa85454fc, 0x6dbbbbd6, 0x2c16163a];\n    var T2 = [0xa5c66363, 0x84f87c7c, 0x99ee7777, 0x8df67b7b, 0x0dfff2f2, 0xbdd66b6b, 0xb1de6f6f, 0x5491c5c5, 0x50603030, 0x03020101, 0xa9ce6767, 0x7d562b2b, 0x19e7fefe, 0x62b5d7d7, 0xe64dabab, 0x9aec7676, 0x458fcaca, 0x9d1f8282, 0x4089c9c9, 0x87fa7d7d, 0x15effafa, 0xebb25959, 0xc98e4747, 0x0bfbf0f0, 0xec41adad, 0x67b3d4d4, 0xfd5fa2a2, 0xea45afaf, 0xbf239c9c, 0xf753a4a4, 0x96e47272, 0x5b9bc0c0, 0xc275b7b7, 0x1ce1fdfd, 0xae3d9393, 0x6a4c2626, 0x5a6c3636, 0x417e3f3f, 0x02f5f7f7, 0x4f83cccc, 0x5c683434, 0xf451a5a5, 0x34d1e5e5, 0x08f9f1f1, 0x93e27171, 0x73abd8d8, 0x53623131, 0x3f2a1515, 0x0c080404, 0x5295c7c7, 0x65462323, 0x5e9dc3c3, 0x28301818, 0xa1379696, 0x0f0a0505, 0xb52f9a9a, 0x090e0707, 0x36241212, 0x9b1b8080, 0x3ddfe2e2, 0x26cdebeb, 0x694e2727, 0xcd7fb2b2, 0x9fea7575, 0x1b120909, 0x9e1d8383, 0x74582c2c, 0x2e341a1a, 0x2d361b1b, 0xb2dc6e6e, 0xeeb45a5a, 0xfb5ba0a0, 0xf6a45252, 0x4d763b3b, 0x61b7d6d6, 0xce7db3b3, 0x7b522929, 0x3edde3e3, 0x715e2f2f, 0x97138484, 0xf5a65353, 0x68b9d1d1, 0x00000000, 0x2cc1eded, 0x60402020, 0x1fe3fcfc, 0xc879b1b1, 0xedb65b5b, 0xbed46a6a, 0x468dcbcb, 0xd967bebe, 0x4b723939, 0xde944a4a, 0xd4984c4c, 0xe8b05858, 0x4a85cfcf, 0x6bbbd0d0, 0x2ac5efef, 0xe54faaaa, 0x16edfbfb, 0xc5864343, 0xd79a4d4d, 0x55663333, 0x94118585, 0xcf8a4545, 0x10e9f9f9, 0x06040202, 0x81fe7f7f, 0xf0a05050, 0x44783c3c, 0xba259f9f, 0xe34ba8a8, 0xf3a25151, 0xfe5da3a3, 0xc0804040, 0x8a058f8f, 0xad3f9292, 0xbc219d9d, 0x48703838, 0x04f1f5f5, 0xdf63bcbc, 0xc177b6b6, 0x75afdada, 0x63422121, 0x30201010, 0x1ae5ffff, 0x0efdf3f3, 0x6dbfd2d2, 0x4c81cdcd, 0x14180c0c, 0x35261313, 0x2fc3ecec, 0xe1be5f5f, 0xa2359797, 0xcc884444, 0x392e1717, 0x5793c4c4, 0xf255a7a7, 0x82fc7e7e, 0x477a3d3d, 0xacc86464, 0xe7ba5d5d, 0x2b321919, 0x95e67373, 0xa0c06060, 0x98198181, 0xd19e4f4f, 0x7fa3dcdc, 0x66442222, 0x7e542a2a, 0xab3b9090, 0x830b8888, 0xca8c4646, 0x29c7eeee, 0xd36bb8b8, 0x3c281414, 0x79a7dede, 0xe2bc5e5e, 0x1d160b0b, 0x76addbdb, 0x3bdbe0e0, 0x56643232, 0x4e743a3a, 0x1e140a0a, 0xdb924949, 0x0a0c0606, 0x6c482424, 0xe4b85c5c, 0x5d9fc2c2, 0x6ebdd3d3, 0xef43acac, 0xa6c46262, 0xa8399191, 0xa4319595, 0x37d3e4e4, 0x8bf27979, 0x32d5e7e7, 0x438bc8c8, 0x596e3737, 0xb7da6d6d, 0x8c018d8d, 0x64b1d5d5, 0xd29c4e4e, 0xe049a9a9, 0xb4d86c6c, 0xfaac5656, 0x07f3f4f4, 0x25cfeaea, 0xafca6565, 0x8ef47a7a, 0xe947aeae, 0x18100808, 0xd56fbaba, 0x88f07878, 0x6f4a2525, 0x725c2e2e, 0x24381c1c, 0xf157a6a6, 0xc773b4b4, 0x5197c6c6, 0x23cbe8e8, 0x7ca1dddd, 0x9ce87474, 0x213e1f1f, 0xdd964b4b, 0xdc61bdbd, 0x860d8b8b, 0x850f8a8a, 0x90e07070, 0x427c3e3e, 0xc471b5b5, 0xaacc6666, 0xd8904848, 0x05060303, 0x01f7f6f6, 0x121c0e0e, 0xa3c26161, 0x5f6a3535, 0xf9ae5757, 0xd069b9b9, 0x91178686, 0x5899c1c1, 0x273a1d1d, 0xb9279e9e, 0x38d9e1e1, 0x13ebf8f8, 0xb32b9898, 0x33221111, 0xbbd26969, 0x70a9d9d9, 0x89078e8e, 0xa7339494, 0xb62d9b9b, 0x223c1e1e, 0x92158787, 0x20c9e9e9, 0x4987cece, 0xffaa5555, 0x78502828, 0x7aa5dfdf, 0x8f038c8c, 0xf859a1a1, 0x80098989, 0x171a0d0d, 0xda65bfbf, 0x31d7e6e6, 0xc6844242, 0xb8d06868, 0xc3824141, 0xb0299999, 0x775a2d2d, 0x111e0f0f, 0xcb7bb0b0, 0xfca85454, 0xd66dbbbb, 0x3a2c1616];\n    var T3 = [0x63a5c663, 0x7c84f87c, 0x7799ee77, 0x7b8df67b, 0xf20dfff2, 0x6bbdd66b, 0x6fb1de6f, 0xc55491c5, 0x30506030, 0x01030201, 0x67a9ce67, 0x2b7d562b, 0xfe19e7fe, 0xd762b5d7, 0xabe64dab, 0x769aec76, 0xca458fca, 0x829d1f82, 0xc94089c9, 0x7d87fa7d, 0xfa15effa, 0x59ebb259, 0x47c98e47, 0xf00bfbf0, 0xadec41ad, 0xd467b3d4, 0xa2fd5fa2, 0xafea45af, 0x9cbf239c, 0xa4f753a4, 0x7296e472, 0xc05b9bc0, 0xb7c275b7, 0xfd1ce1fd, 0x93ae3d93, 0x266a4c26, 0x365a6c36, 0x3f417e3f, 0xf702f5f7, 0xcc4f83cc, 0x345c6834, 0xa5f451a5, 0xe534d1e5, 0xf108f9f1, 0x7193e271, 0xd873abd8, 0x31536231, 0x153f2a15, 0x040c0804, 0xc75295c7, 0x23654623, 0xc35e9dc3, 0x18283018, 0x96a13796, 0x050f0a05, 0x9ab52f9a, 0x07090e07, 0x12362412, 0x809b1b80, 0xe23ddfe2, 0xeb26cdeb, 0x27694e27, 0xb2cd7fb2, 0x759fea75, 0x091b1209, 0x839e1d83, 0x2c74582c, 0x1a2e341a, 0x1b2d361b, 0x6eb2dc6e, 0x5aeeb45a, 0xa0fb5ba0, 0x52f6a452, 0x3b4d763b, 0xd661b7d6, 0xb3ce7db3, 0x297b5229, 0xe33edde3, 0x2f715e2f, 0x84971384, 0x53f5a653, 0xd168b9d1, 0x00000000, 0xed2cc1ed, 0x20604020, 0xfc1fe3fc, 0xb1c879b1, 0x5bedb65b, 0x6abed46a, 0xcb468dcb, 0xbed967be, 0x394b7239, 0x4ade944a, 0x4cd4984c, 0x58e8b058, 0xcf4a85cf, 0xd06bbbd0, 0xef2ac5ef, 0xaae54faa, 0xfb16edfb, 0x43c58643, 0x4dd79a4d, 0x33556633, 0x85941185, 0x45cf8a45, 0xf910e9f9, 0x02060402, 0x7f81fe7f, 0x50f0a050, 0x3c44783c, 0x9fba259f, 0xa8e34ba8, 0x51f3a251, 0xa3fe5da3, 0x40c08040, 0x8f8a058f, 0x92ad3f92, 0x9dbc219d, 0x38487038, 0xf504f1f5, 0xbcdf63bc, 0xb6c177b6, 0xda75afda, 0x21634221, 0x10302010, 0xff1ae5ff, 0xf30efdf3, 0xd26dbfd2, 0xcd4c81cd, 0x0c14180c, 0x13352613, 0xec2fc3ec, 0x5fe1be5f, 0x97a23597, 0x44cc8844, 0x17392e17, 0xc45793c4, 0xa7f255a7, 0x7e82fc7e, 0x3d477a3d, 0x64acc864, 0x5de7ba5d, 0x192b3219, 0x7395e673, 0x60a0c060, 0x81981981, 0x4fd19e4f, 0xdc7fa3dc, 0x22664422, 0x2a7e542a, 0x90ab3b90, 0x88830b88, 0x46ca8c46, 0xee29c7ee, 0xb8d36bb8, 0x143c2814, 0xde79a7de, 0x5ee2bc5e, 0x0b1d160b, 0xdb76addb, 0xe03bdbe0, 0x32566432, 0x3a4e743a, 0x0a1e140a, 0x49db9249, 0x060a0c06, 0x246c4824, 0x5ce4b85c, 0xc25d9fc2, 0xd36ebdd3, 0xacef43ac, 0x62a6c462, 0x91a83991, 0x95a43195, 0xe437d3e4, 0x798bf279, 0xe732d5e7, 0xc8438bc8, 0x37596e37, 0x6db7da6d, 0x8d8c018d, 0xd564b1d5, 0x4ed29c4e, 0xa9e049a9, 0x6cb4d86c, 0x56faac56, 0xf407f3f4, 0xea25cfea, 0x65afca65, 0x7a8ef47a, 0xaee947ae, 0x08181008, 0xbad56fba, 0x7888f078, 0x256f4a25, 0x2e725c2e, 0x1c24381c, 0xa6f157a6, 0xb4c773b4, 0xc65197c6, 0xe823cbe8, 0xdd7ca1dd, 0x749ce874, 0x1f213e1f, 0x4bdd964b, 0xbddc61bd, 0x8b860d8b, 0x8a850f8a, 0x7090e070, 0x3e427c3e, 0xb5c471b5, 0x66aacc66, 0x48d89048, 0x03050603, 0xf601f7f6, 0x0e121c0e, 0x61a3c261, 0x355f6a35, 0x57f9ae57, 0xb9d069b9, 0x86911786, 0xc15899c1, 0x1d273a1d, 0x9eb9279e, 0xe138d9e1, 0xf813ebf8, 0x98b32b98, 0x11332211, 0x69bbd269, 0xd970a9d9, 0x8e89078e, 0x94a73394, 0x9bb62d9b, 0x1e223c1e, 0x87921587, 0xe920c9e9, 0xce4987ce, 0x55ffaa55, 0x28785028, 0xdf7aa5df, 0x8c8f038c, 0xa1f859a1, 0x89800989, 0x0d171a0d, 0xbfda65bf, 0xe631d7e6, 0x42c68442, 0x68b8d068, 0x41c38241, 0x99b02999, 0x2d775a2d, 0x0f111e0f, 0xb0cb7bb0, 0x54fca854, 0xbbd66dbb, 0x163a2c16];\n    var T4 = [0x6363a5c6, 0x7c7c84f8, 0x777799ee, 0x7b7b8df6, 0xf2f20dff, 0x6b6bbdd6, 0x6f6fb1de, 0xc5c55491, 0x30305060, 0x01010302, 0x6767a9ce, 0x2b2b7d56, 0xfefe19e7, 0xd7d762b5, 0xababe64d, 0x76769aec, 0xcaca458f, 0x82829d1f, 0xc9c94089, 0x7d7d87fa, 0xfafa15ef, 0x5959ebb2, 0x4747c98e, 0xf0f00bfb, 0xadadec41, 0xd4d467b3, 0xa2a2fd5f, 0xafafea45, 0x9c9cbf23, 0xa4a4f753, 0x727296e4, 0xc0c05b9b, 0xb7b7c275, 0xfdfd1ce1, 0x9393ae3d, 0x26266a4c, 0x36365a6c, 0x3f3f417e, 0xf7f702f5, 0xcccc4f83, 0x34345c68, 0xa5a5f451, 0xe5e534d1, 0xf1f108f9, 0x717193e2, 0xd8d873ab, 0x31315362, 0x15153f2a, 0x04040c08, 0xc7c75295, 0x23236546, 0xc3c35e9d, 0x18182830, 0x9696a137, 0x05050f0a, 0x9a9ab52f, 0x0707090e, 0x12123624, 0x80809b1b, 0xe2e23ddf, 0xebeb26cd, 0x2727694e, 0xb2b2cd7f, 0x75759fea, 0x09091b12, 0x83839e1d, 0x2c2c7458, 0x1a1a2e34, 0x1b1b2d36, 0x6e6eb2dc, 0x5a5aeeb4, 0xa0a0fb5b, 0x5252f6a4, 0x3b3b4d76, 0xd6d661b7, 0xb3b3ce7d, 0x29297b52, 0xe3e33edd, 0x2f2f715e, 0x84849713, 0x5353f5a6, 0xd1d168b9, 0x00000000, 0xeded2cc1, 0x20206040, 0xfcfc1fe3, 0xb1b1c879, 0x5b5bedb6, 0x6a6abed4, 0xcbcb468d, 0xbebed967, 0x39394b72, 0x4a4ade94, 0x4c4cd498, 0x5858e8b0, 0xcfcf4a85, 0xd0d06bbb, 0xefef2ac5, 0xaaaae54f, 0xfbfb16ed, 0x4343c586, 0x4d4dd79a, 0x33335566, 0x85859411, 0x4545cf8a, 0xf9f910e9, 0x02020604, 0x7f7f81fe, 0x5050f0a0, 0x3c3c4478, 0x9f9fba25, 0xa8a8e34b, 0x5151f3a2, 0xa3a3fe5d, 0x4040c080, 0x8f8f8a05, 0x9292ad3f, 0x9d9dbc21, 0x38384870, 0xf5f504f1, 0xbcbcdf63, 0xb6b6c177, 0xdada75af, 0x21216342, 0x10103020, 0xffff1ae5, 0xf3f30efd, 0xd2d26dbf, 0xcdcd4c81, 0x0c0c1418, 0x13133526, 0xecec2fc3, 0x5f5fe1be, 0x9797a235, 0x4444cc88, 0x1717392e, 0xc4c45793, 0xa7a7f255, 0x7e7e82fc, 0x3d3d477a, 0x6464acc8, 0x5d5de7ba, 0x19192b32, 0x737395e6, 0x6060a0c0, 0x81819819, 0x4f4fd19e, 0xdcdc7fa3, 0x22226644, 0x2a2a7e54, 0x9090ab3b, 0x8888830b, 0x4646ca8c, 0xeeee29c7, 0xb8b8d36b, 0x14143c28, 0xdede79a7, 0x5e5ee2bc, 0x0b0b1d16, 0xdbdb76ad, 0xe0e03bdb, 0x32325664, 0x3a3a4e74, 0x0a0a1e14, 0x4949db92, 0x06060a0c, 0x24246c48, 0x5c5ce4b8, 0xc2c25d9f, 0xd3d36ebd, 0xacacef43, 0x6262a6c4, 0x9191a839, 0x9595a431, 0xe4e437d3, 0x79798bf2, 0xe7e732d5, 0xc8c8438b, 0x3737596e, 0x6d6db7da, 0x8d8d8c01, 0xd5d564b1, 0x4e4ed29c, 0xa9a9e049, 0x6c6cb4d8, 0x5656faac, 0xf4f407f3, 0xeaea25cf, 0x6565afca, 0x7a7a8ef4, 0xaeaee947, 0x08081810, 0xbabad56f, 0x787888f0, 0x25256f4a, 0x2e2e725c, 0x1c1c2438, 0xa6a6f157, 0xb4b4c773, 0xc6c65197, 0xe8e823cb, 0xdddd7ca1, 0x74749ce8, 0x1f1f213e, 0x4b4bdd96, 0xbdbddc61, 0x8b8b860d, 0x8a8a850f, 0x707090e0, 0x3e3e427c, 0xb5b5c471, 0x6666aacc, 0x4848d890, 0x03030506, 0xf6f601f7, 0x0e0e121c, 0x6161a3c2, 0x35355f6a, 0x5757f9ae, 0xb9b9d069, 0x86869117, 0xc1c15899, 0x1d1d273a, 0x9e9eb927, 0xe1e138d9, 0xf8f813eb, 0x9898b32b, 0x11113322, 0x6969bbd2, 0xd9d970a9, 0x8e8e8907, 0x9494a733, 0x9b9bb62d, 0x1e1e223c, 0x87879215, 0xe9e920c9, 0xcece4987, 0x5555ffaa, 0x28287850, 0xdfdf7aa5, 0x8c8c8f03, 0xa1a1f859, 0x89898009, 0x0d0d171a, 0xbfbfda65, 0xe6e631d7, 0x4242c684, 0x6868b8d0, 0x4141c382, 0x9999b029, 0x2d2d775a, 0x0f0f111e, 0xb0b0cb7b, 0x5454fca8, 0xbbbbd66d, 0x16163a2c];\n\n    // Transformations for decryption\n    var T5 = [0x51f4a750, 0x7e416553, 0x1a17a4c3, 0x3a275e96, 0x3bab6bcb, 0x1f9d45f1, 0xacfa58ab, 0x4be30393, 0x2030fa55, 0xad766df6, 0x88cc7691, 0xf5024c25, 0x4fe5d7fc, 0xc52acbd7, 0x26354480, 0xb562a38f, 0xdeb15a49, 0x25ba1b67, 0x45ea0e98, 0x5dfec0e1, 0xc32f7502, 0x814cf012, 0x8d4697a3, 0x6bd3f9c6, 0x038f5fe7, 0x15929c95, 0xbf6d7aeb, 0x955259da, 0xd4be832d, 0x587421d3, 0x49e06929, 0x8ec9c844, 0x75c2896a, 0xf48e7978, 0x99583e6b, 0x27b971dd, 0xbee14fb6, 0xf088ad17, 0xc920ac66, 0x7dce3ab4, 0x63df4a18, 0xe51a3182, 0x97513360, 0x62537f45, 0xb16477e0, 0xbb6bae84, 0xfe81a01c, 0xf9082b94, 0x70486858, 0x8f45fd19, 0x94de6c87, 0x527bf8b7, 0xab73d323, 0x724b02e2, 0xe31f8f57, 0x6655ab2a, 0xb2eb2807, 0x2fb5c203, 0x86c57b9a, 0xd33708a5, 0x302887f2, 0x23bfa5b2, 0x02036aba, 0xed16825c, 0x8acf1c2b, 0xa779b492, 0xf307f2f0, 0x4e69e2a1, 0x65daf4cd, 0x0605bed5, 0xd134621f, 0xc4a6fe8a, 0x342e539d, 0xa2f355a0, 0x058ae132, 0xa4f6eb75, 0x0b83ec39, 0x4060efaa, 0x5e719f06, 0xbd6e1051, 0x3e218af9, 0x96dd063d, 0xdd3e05ae, 0x4de6bd46, 0x91548db5, 0x71c45d05, 0x0406d46f, 0x605015ff, 0x1998fb24, 0xd6bde997, 0x894043cc, 0x67d99e77, 0xb0e842bd, 0x07898b88, 0xe7195b38, 0x79c8eedb, 0xa17c0a47, 0x7c420fe9, 0xf8841ec9, 0x00000000, 0x09808683, 0x322bed48, 0x1e1170ac, 0x6c5a724e, 0xfd0efffb, 0x0f853856, 0x3daed51e, 0x362d3927, 0x0a0fd964, 0x685ca621, 0x9b5b54d1, 0x24362e3a, 0x0c0a67b1, 0x9357e70f, 0xb4ee96d2, 0x1b9b919e, 0x80c0c54f, 0x61dc20a2, 0x5a774b69, 0x1c121a16, 0xe293ba0a, 0xc0a02ae5, 0x3c22e043, 0x121b171d, 0x0e090d0b, 0xf28bc7ad, 0x2db6a8b9, 0x141ea9c8, 0x57f11985, 0xaf75074c, 0xee99ddbb, 0xa37f60fd, 0xf701269f, 0x5c72f5bc, 0x44663bc5, 0x5bfb7e34, 0x8b432976, 0xcb23c6dc, 0xb6edfc68, 0xb8e4f163, 0xd731dcca, 0x42638510, 0x13972240, 0x84c61120, 0x854a247d, 0xd2bb3df8, 0xaef93211, 0xc729a16d, 0x1d9e2f4b, 0xdcb230f3, 0x0d8652ec, 0x77c1e3d0, 0x2bb3166c, 0xa970b999, 0x119448fa, 0x47e96422, 0xa8fc8cc4, 0xa0f03f1a, 0x567d2cd8, 0x223390ef, 0x87494ec7, 0xd938d1c1, 0x8ccaa2fe, 0x98d40b36, 0xa6f581cf, 0xa57ade28, 0xdab78e26, 0x3fadbfa4, 0x2c3a9de4, 0x5078920d, 0x6a5fcc9b, 0x547e4662, 0xf68d13c2, 0x90d8b8e8, 0x2e39f75e, 0x82c3aff5, 0x9f5d80be, 0x69d0937c, 0x6fd52da9, 0xcf2512b3, 0xc8ac993b, 0x10187da7, 0xe89c636e, 0xdb3bbb7b, 0xcd267809, 0x6e5918f4, 0xec9ab701, 0x834f9aa8, 0xe6956e65, 0xaaffe67e, 0x21bccf08, 0xef15e8e6, 0xbae79bd9, 0x4a6f36ce, 0xea9f09d4, 0x29b07cd6, 0x31a4b2af, 0x2a3f2331, 0xc6a59430, 0x35a266c0, 0x744ebc37, 0xfc82caa6, 0xe090d0b0, 0x33a7d815, 0xf104984a, 0x41ecdaf7, 0x7fcd500e, 0x1791f62f, 0x764dd68d, 0x43efb04d, 0xccaa4d54, 0xe49604df, 0x9ed1b5e3, 0x4c6a881b, 0xc12c1fb8, 0x4665517f, 0x9d5eea04, 0x018c355d, 0xfa877473, 0xfb0b412e, 0xb3671d5a, 0x92dbd252, 0xe9105633, 0x6dd64713, 0x9ad7618c, 0x37a10c7a, 0x59f8148e, 0xeb133c89, 0xcea927ee, 0xb761c935, 0xe11ce5ed, 0x7a47b13c, 0x9cd2df59, 0x55f2733f, 0x1814ce79, 0x73c737bf, 0x53f7cdea, 0x5ffdaa5b, 0xdf3d6f14, 0x7844db86, 0xcaaff381, 0xb968c43e, 0x3824342c, 0xc2a3405f, 0x161dc372, 0xbce2250c, 0x283c498b, 0xff0d9541, 0x39a80171, 0x080cb3de, 0xd8b4e49c, 0x6456c190, 0x7bcb8461, 0xd532b670, 0x486c5c74, 0xd0b85742];\n    var T6 = [0x5051f4a7, 0x537e4165, 0xc31a17a4, 0x963a275e, 0xcb3bab6b, 0xf11f9d45, 0xabacfa58, 0x934be303, 0x552030fa, 0xf6ad766d, 0x9188cc76, 0x25f5024c, 0xfc4fe5d7, 0xd7c52acb, 0x80263544, 0x8fb562a3, 0x49deb15a, 0x6725ba1b, 0x9845ea0e, 0xe15dfec0, 0x02c32f75, 0x12814cf0, 0xa38d4697, 0xc66bd3f9, 0xe7038f5f, 0x9515929c, 0xebbf6d7a, 0xda955259, 0x2dd4be83, 0xd3587421, 0x2949e069, 0x448ec9c8, 0x6a75c289, 0x78f48e79, 0x6b99583e, 0xdd27b971, 0xb6bee14f, 0x17f088ad, 0x66c920ac, 0xb47dce3a, 0x1863df4a, 0x82e51a31, 0x60975133, 0x4562537f, 0xe0b16477, 0x84bb6bae, 0x1cfe81a0, 0x94f9082b, 0x58704868, 0x198f45fd, 0x8794de6c, 0xb7527bf8, 0x23ab73d3, 0xe2724b02, 0x57e31f8f, 0x2a6655ab, 0x07b2eb28, 0x032fb5c2, 0x9a86c57b, 0xa5d33708, 0xf2302887, 0xb223bfa5, 0xba02036a, 0x5ced1682, 0x2b8acf1c, 0x92a779b4, 0xf0f307f2, 0xa14e69e2, 0xcd65daf4, 0xd50605be, 0x1fd13462, 0x8ac4a6fe, 0x9d342e53, 0xa0a2f355, 0x32058ae1, 0x75a4f6eb, 0x390b83ec, 0xaa4060ef, 0x065e719f, 0x51bd6e10, 0xf93e218a, 0x3d96dd06, 0xaedd3e05, 0x464de6bd, 0xb591548d, 0x0571c45d, 0x6f0406d4, 0xff605015, 0x241998fb, 0x97d6bde9, 0xcc894043, 0x7767d99e, 0xbdb0e842, 0x8807898b, 0x38e7195b, 0xdb79c8ee, 0x47a17c0a, 0xe97c420f, 0xc9f8841e, 0x00000000, 0x83098086, 0x48322bed, 0xac1e1170, 0x4e6c5a72, 0xfbfd0eff, 0x560f8538, 0x1e3daed5, 0x27362d39, 0x640a0fd9, 0x21685ca6, 0xd19b5b54, 0x3a24362e, 0xb10c0a67, 0x0f9357e7, 0xd2b4ee96, 0x9e1b9b91, 0x4f80c0c5, 0xa261dc20, 0x695a774b, 0x161c121a, 0x0ae293ba, 0xe5c0a02a, 0x433c22e0, 0x1d121b17, 0x0b0e090d, 0xadf28bc7, 0xb92db6a8, 0xc8141ea9, 0x8557f119, 0x4caf7507, 0xbbee99dd, 0xfda37f60, 0x9ff70126, 0xbc5c72f5, 0xc544663b, 0x345bfb7e, 0x768b4329, 0xdccb23c6, 0x68b6edfc, 0x63b8e4f1, 0xcad731dc, 0x10426385, 0x40139722, 0x2084c611, 0x7d854a24, 0xf8d2bb3d, 0x11aef932, 0x6dc729a1, 0x4b1d9e2f, 0xf3dcb230, 0xec0d8652, 0xd077c1e3, 0x6c2bb316, 0x99a970b9, 0xfa119448, 0x2247e964, 0xc4a8fc8c, 0x1aa0f03f, 0xd8567d2c, 0xef223390, 0xc787494e, 0xc1d938d1, 0xfe8ccaa2, 0x3698d40b, 0xcfa6f581, 0x28a57ade, 0x26dab78e, 0xa43fadbf, 0xe42c3a9d, 0x0d507892, 0x9b6a5fcc, 0x62547e46, 0xc2f68d13, 0xe890d8b8, 0x5e2e39f7, 0xf582c3af, 0xbe9f5d80, 0x7c69d093, 0xa96fd52d, 0xb3cf2512, 0x3bc8ac99, 0xa710187d, 0x6ee89c63, 0x7bdb3bbb, 0x09cd2678, 0xf46e5918, 0x01ec9ab7, 0xa8834f9a, 0x65e6956e, 0x7eaaffe6, 0x0821bccf, 0xe6ef15e8, 0xd9bae79b, 0xce4a6f36, 0xd4ea9f09, 0xd629b07c, 0xaf31a4b2, 0x312a3f23, 0x30c6a594, 0xc035a266, 0x37744ebc, 0xa6fc82ca, 0xb0e090d0, 0x1533a7d8, 0x4af10498, 0xf741ecda, 0x0e7fcd50, 0x2f1791f6, 0x8d764dd6, 0x4d43efb0, 0x54ccaa4d, 0xdfe49604, 0xe39ed1b5, 0x1b4c6a88, 0xb8c12c1f, 0x7f466551, 0x049d5eea, 0x5d018c35, 0x73fa8774, 0x2efb0b41, 0x5ab3671d, 0x5292dbd2, 0x33e91056, 0x136dd647, 0x8c9ad761, 0x7a37a10c, 0x8e59f814, 0x89eb133c, 0xeecea927, 0x35b761c9, 0xede11ce5, 0x3c7a47b1, 0x599cd2df, 0x3f55f273, 0x791814ce, 0xbf73c737, 0xea53f7cd, 0x5b5ffdaa, 0x14df3d6f, 0x867844db, 0x81caaff3, 0x3eb968c4, 0x2c382434, 0x5fc2a340, 0x72161dc3, 0x0cbce225, 0x8b283c49, 0x41ff0d95, 0x7139a801, 0xde080cb3, 0x9cd8b4e4, 0x906456c1, 0x617bcb84, 0x70d532b6, 0x74486c5c, 0x42d0b857];\n    var T7 = [0xa75051f4, 0x65537e41, 0xa4c31a17, 0x5e963a27, 0x6bcb3bab, 0x45f11f9d, 0x58abacfa, 0x03934be3, 0xfa552030, 0x6df6ad76, 0x769188cc, 0x4c25f502, 0xd7fc4fe5, 0xcbd7c52a, 0x44802635, 0xa38fb562, 0x5a49deb1, 0x1b6725ba, 0x0e9845ea, 0xc0e15dfe, 0x7502c32f, 0xf012814c, 0x97a38d46, 0xf9c66bd3, 0x5fe7038f, 0x9c951592, 0x7aebbf6d, 0x59da9552, 0x832dd4be, 0x21d35874, 0x692949e0, 0xc8448ec9, 0x896a75c2, 0x7978f48e, 0x3e6b9958, 0x71dd27b9, 0x4fb6bee1, 0xad17f088, 0xac66c920, 0x3ab47dce, 0x4a1863df, 0x3182e51a, 0x33609751, 0x7f456253, 0x77e0b164, 0xae84bb6b, 0xa01cfe81, 0x2b94f908, 0x68587048, 0xfd198f45, 0x6c8794de, 0xf8b7527b, 0xd323ab73, 0x02e2724b, 0x8f57e31f, 0xab2a6655, 0x2807b2eb, 0xc2032fb5, 0x7b9a86c5, 0x08a5d337, 0x87f23028, 0xa5b223bf, 0x6aba0203, 0x825ced16, 0x1c2b8acf, 0xb492a779, 0xf2f0f307, 0xe2a14e69, 0xf4cd65da, 0xbed50605, 0x621fd134, 0xfe8ac4a6, 0x539d342e, 0x55a0a2f3, 0xe132058a, 0xeb75a4f6, 0xec390b83, 0xefaa4060, 0x9f065e71, 0x1051bd6e, 0x8af93e21, 0x063d96dd, 0x05aedd3e, 0xbd464de6, 0x8db59154, 0x5d0571c4, 0xd46f0406, 0x15ff6050, 0xfb241998, 0xe997d6bd, 0x43cc8940, 0x9e7767d9, 0x42bdb0e8, 0x8b880789, 0x5b38e719, 0xeedb79c8, 0x0a47a17c, 0x0fe97c42, 0x1ec9f884, 0x00000000, 0x86830980, 0xed48322b, 0x70ac1e11, 0x724e6c5a, 0xfffbfd0e, 0x38560f85, 0xd51e3dae, 0x3927362d, 0xd9640a0f, 0xa621685c, 0x54d19b5b, 0x2e3a2436, 0x67b10c0a, 0xe70f9357, 0x96d2b4ee, 0x919e1b9b, 0xc54f80c0, 0x20a261dc, 0x4b695a77, 0x1a161c12, 0xba0ae293, 0x2ae5c0a0, 0xe0433c22, 0x171d121b, 0x0d0b0e09, 0xc7adf28b, 0xa8b92db6, 0xa9c8141e, 0x198557f1, 0x074caf75, 0xddbbee99, 0x60fda37f, 0x269ff701, 0xf5bc5c72, 0x3bc54466, 0x7e345bfb, 0x29768b43, 0xc6dccb23, 0xfc68b6ed, 0xf163b8e4, 0xdccad731, 0x85104263, 0x22401397, 0x112084c6, 0x247d854a, 0x3df8d2bb, 0x3211aef9, 0xa16dc729, 0x2f4b1d9e, 0x30f3dcb2, 0x52ec0d86, 0xe3d077c1, 0x166c2bb3, 0xb999a970, 0x48fa1194, 0x642247e9, 0x8cc4a8fc, 0x3f1aa0f0, 0x2cd8567d, 0x90ef2233, 0x4ec78749, 0xd1c1d938, 0xa2fe8cca, 0x0b3698d4, 0x81cfa6f5, 0xde28a57a, 0x8e26dab7, 0xbfa43fad, 0x9de42c3a, 0x920d5078, 0xcc9b6a5f, 0x4662547e, 0x13c2f68d, 0xb8e890d8, 0xf75e2e39, 0xaff582c3, 0x80be9f5d, 0x937c69d0, 0x2da96fd5, 0x12b3cf25, 0x993bc8ac, 0x7da71018, 0x636ee89c, 0xbb7bdb3b, 0x7809cd26, 0x18f46e59, 0xb701ec9a, 0x9aa8834f, 0x6e65e695, 0xe67eaaff, 0xcf0821bc, 0xe8e6ef15, 0x9bd9bae7, 0x36ce4a6f, 0x09d4ea9f, 0x7cd629b0, 0xb2af31a4, 0x23312a3f, 0x9430c6a5, 0x66c035a2, 0xbc37744e, 0xcaa6fc82, 0xd0b0e090, 0xd81533a7, 0x984af104, 0xdaf741ec, 0x500e7fcd, 0xf62f1791, 0xd68d764d, 0xb04d43ef, 0x4d54ccaa, 0x04dfe496, 0xb5e39ed1, 0x881b4c6a, 0x1fb8c12c, 0x517f4665, 0xea049d5e, 0x355d018c, 0x7473fa87, 0x412efb0b, 0x1d5ab367, 0xd25292db, 0x5633e910, 0x47136dd6, 0x618c9ad7, 0x0c7a37a1, 0x148e59f8, 0x3c89eb13, 0x27eecea9, 0xc935b761, 0xe5ede11c, 0xb13c7a47, 0xdf599cd2, 0x733f55f2, 0xce791814, 0x37bf73c7, 0xcdea53f7, 0xaa5b5ffd, 0x6f14df3d, 0xdb867844, 0xf381caaf, 0xc43eb968, 0x342c3824, 0x405fc2a3, 0xc372161d, 0x250cbce2, 0x498b283c, 0x9541ff0d, 0x017139a8, 0xb3de080c, 0xe49cd8b4, 0xc1906456, 0x84617bcb, 0xb670d532, 0x5c74486c, 0x5742d0b8];\n    var T8 = [0xf4a75051, 0x4165537e, 0x17a4c31a, 0x275e963a, 0xab6bcb3b, 0x9d45f11f, 0xfa58abac, 0xe303934b, 0x30fa5520, 0x766df6ad, 0xcc769188, 0x024c25f5, 0xe5d7fc4f, 0x2acbd7c5, 0x35448026, 0x62a38fb5, 0xb15a49de, 0xba1b6725, 0xea0e9845, 0xfec0e15d, 0x2f7502c3, 0x4cf01281, 0x4697a38d, 0xd3f9c66b, 0x8f5fe703, 0x929c9515, 0x6d7aebbf, 0x5259da95, 0xbe832dd4, 0x7421d358, 0xe0692949, 0xc9c8448e, 0xc2896a75, 0x8e7978f4, 0x583e6b99, 0xb971dd27, 0xe14fb6be, 0x88ad17f0, 0x20ac66c9, 0xce3ab47d, 0xdf4a1863, 0x1a3182e5, 0x51336097, 0x537f4562, 0x6477e0b1, 0x6bae84bb, 0x81a01cfe, 0x082b94f9, 0x48685870, 0x45fd198f, 0xde6c8794, 0x7bf8b752, 0x73d323ab, 0x4b02e272, 0x1f8f57e3, 0x55ab2a66, 0xeb2807b2, 0xb5c2032f, 0xc57b9a86, 0x3708a5d3, 0x2887f230, 0xbfa5b223, 0x036aba02, 0x16825ced, 0xcf1c2b8a, 0x79b492a7, 0x07f2f0f3, 0x69e2a14e, 0xdaf4cd65, 0x05bed506, 0x34621fd1, 0xa6fe8ac4, 0x2e539d34, 0xf355a0a2, 0x8ae13205, 0xf6eb75a4, 0x83ec390b, 0x60efaa40, 0x719f065e, 0x6e1051bd, 0x218af93e, 0xdd063d96, 0x3e05aedd, 0xe6bd464d, 0x548db591, 0xc45d0571, 0x06d46f04, 0x5015ff60, 0x98fb2419, 0xbde997d6, 0x4043cc89, 0xd99e7767, 0xe842bdb0, 0x898b8807, 0x195b38e7, 0xc8eedb79, 0x7c0a47a1, 0x420fe97c, 0x841ec9f8, 0x00000000, 0x80868309, 0x2bed4832, 0x1170ac1e, 0x5a724e6c, 0x0efffbfd, 0x8538560f, 0xaed51e3d, 0x2d392736, 0x0fd9640a, 0x5ca62168, 0x5b54d19b, 0x362e3a24, 0x0a67b10c, 0x57e70f93, 0xee96d2b4, 0x9b919e1b, 0xc0c54f80, 0xdc20a261, 0x774b695a, 0x121a161c, 0x93ba0ae2, 0xa02ae5c0, 0x22e0433c, 0x1b171d12, 0x090d0b0e, 0x8bc7adf2, 0xb6a8b92d, 0x1ea9c814, 0xf1198557, 0x75074caf, 0x99ddbbee, 0x7f60fda3, 0x01269ff7, 0x72f5bc5c, 0x663bc544, 0xfb7e345b, 0x4329768b, 0x23c6dccb, 0xedfc68b6, 0xe4f163b8, 0x31dccad7, 0x63851042, 0x97224013, 0xc6112084, 0x4a247d85, 0xbb3df8d2, 0xf93211ae, 0x29a16dc7, 0x9e2f4b1d, 0xb230f3dc, 0x8652ec0d, 0xc1e3d077, 0xb3166c2b, 0x70b999a9, 0x9448fa11, 0xe9642247, 0xfc8cc4a8, 0xf03f1aa0, 0x7d2cd856, 0x3390ef22, 0x494ec787, 0x38d1c1d9, 0xcaa2fe8c, 0xd40b3698, 0xf581cfa6, 0x7ade28a5, 0xb78e26da, 0xadbfa43f, 0x3a9de42c, 0x78920d50, 0x5fcc9b6a, 0x7e466254, 0x8d13c2f6, 0xd8b8e890, 0x39f75e2e, 0xc3aff582, 0x5d80be9f, 0xd0937c69, 0xd52da96f, 0x2512b3cf, 0xac993bc8, 0x187da710, 0x9c636ee8, 0x3bbb7bdb, 0x267809cd, 0x5918f46e, 0x9ab701ec, 0x4f9aa883, 0x956e65e6, 0xffe67eaa, 0xbccf0821, 0x15e8e6ef, 0xe79bd9ba, 0x6f36ce4a, 0x9f09d4ea, 0xb07cd629, 0xa4b2af31, 0x3f23312a, 0xa59430c6, 0xa266c035, 0x4ebc3774, 0x82caa6fc, 0x90d0b0e0, 0xa7d81533, 0x04984af1, 0xecdaf741, 0xcd500e7f, 0x91f62f17, 0x4dd68d76, 0xefb04d43, 0xaa4d54cc, 0x9604dfe4, 0xd1b5e39e, 0x6a881b4c, 0x2c1fb8c1, 0x65517f46, 0x5eea049d, 0x8c355d01, 0x877473fa, 0x0b412efb, 0x671d5ab3, 0xdbd25292, 0x105633e9, 0xd647136d, 0xd7618c9a, 0xa10c7a37, 0xf8148e59, 0x133c89eb, 0xa927eece, 0x61c935b7, 0x1ce5ede1, 0x47b13c7a, 0xd2df599c, 0xf2733f55, 0x14ce7918, 0xc737bf73, 0xf7cdea53, 0xfdaa5b5f, 0x3d6f14df, 0x44db8678, 0xaff381ca, 0x68c43eb9, 0x24342c38, 0xa3405fc2, 0x1dc37216, 0xe2250cbc, 0x3c498b28, 0x0d9541ff, 0xa8017139, 0x0cb3de08, 0xb4e49cd8, 0x56c19064, 0xcb84617b, 0x32b670d5, 0x6c5c7448, 0xb85742d0];\n\n    // Transformations for decryption key expansion\n    var U1 = [0x00000000, 0x0e090d0b, 0x1c121a16, 0x121b171d, 0x3824342c, 0x362d3927, 0x24362e3a, 0x2a3f2331, 0x70486858, 0x7e416553, 0x6c5a724e, 0x62537f45, 0x486c5c74, 0x4665517f, 0x547e4662, 0x5a774b69, 0xe090d0b0, 0xee99ddbb, 0xfc82caa6, 0xf28bc7ad, 0xd8b4e49c, 0xd6bde997, 0xc4a6fe8a, 0xcaaff381, 0x90d8b8e8, 0x9ed1b5e3, 0x8ccaa2fe, 0x82c3aff5, 0xa8fc8cc4, 0xa6f581cf, 0xb4ee96d2, 0xbae79bd9, 0xdb3bbb7b, 0xd532b670, 0xc729a16d, 0xc920ac66, 0xe31f8f57, 0xed16825c, 0xff0d9541, 0xf104984a, 0xab73d323, 0xa57ade28, 0xb761c935, 0xb968c43e, 0x9357e70f, 0x9d5eea04, 0x8f45fd19, 0x814cf012, 0x3bab6bcb, 0x35a266c0, 0x27b971dd, 0x29b07cd6, 0x038f5fe7, 0x0d8652ec, 0x1f9d45f1, 0x119448fa, 0x4be30393, 0x45ea0e98, 0x57f11985, 0x59f8148e, 0x73c737bf, 0x7dce3ab4, 0x6fd52da9, 0x61dc20a2, 0xad766df6, 0xa37f60fd, 0xb16477e0, 0xbf6d7aeb, 0x955259da, 0x9b5b54d1, 0x894043cc, 0x87494ec7, 0xdd3e05ae, 0xd33708a5, 0xc12c1fb8, 0xcf2512b3, 0xe51a3182, 0xeb133c89, 0xf9082b94, 0xf701269f, 0x4de6bd46, 0x43efb04d, 0x51f4a750, 0x5ffdaa5b, 0x75c2896a, 0x7bcb8461, 0x69d0937c, 0x67d99e77, 0x3daed51e, 0x33a7d815, 0x21bccf08, 0x2fb5c203, 0x058ae132, 0x0b83ec39, 0x1998fb24, 0x1791f62f, 0x764dd68d, 0x7844db86, 0x6a5fcc9b, 0x6456c190, 0x4e69e2a1, 0x4060efaa, 0x527bf8b7, 0x5c72f5bc, 0x0605bed5, 0x080cb3de, 0x1a17a4c3, 0x141ea9c8, 0x3e218af9, 0x302887f2, 0x223390ef, 0x2c3a9de4, 0x96dd063d, 0x98d40b36, 0x8acf1c2b, 0x84c61120, 0xaef93211, 0xa0f03f1a, 0xb2eb2807, 0xbce2250c, 0xe6956e65, 0xe89c636e, 0xfa877473, 0xf48e7978, 0xdeb15a49, 0xd0b85742, 0xc2a3405f, 0xccaa4d54, 0x41ecdaf7, 0x4fe5d7fc, 0x5dfec0e1, 0x53f7cdea, 0x79c8eedb, 0x77c1e3d0, 0x65daf4cd, 0x6bd3f9c6, 0x31a4b2af, 0x3fadbfa4, 0x2db6a8b9, 0x23bfa5b2, 0x09808683, 0x07898b88, 0x15929c95, 0x1b9b919e, 0xa17c0a47, 0xaf75074c, 0xbd6e1051, 0xb3671d5a, 0x99583e6b, 0x97513360, 0x854a247d, 0x8b432976, 0xd134621f, 0xdf3d6f14, 0xcd267809, 0xc32f7502, 0xe9105633, 0xe7195b38, 0xf5024c25, 0xfb0b412e, 0x9ad7618c, 0x94de6c87, 0x86c57b9a, 0x88cc7691, 0xa2f355a0, 0xacfa58ab, 0xbee14fb6, 0xb0e842bd, 0xea9f09d4, 0xe49604df, 0xf68d13c2, 0xf8841ec9, 0xd2bb3df8, 0xdcb230f3, 0xcea927ee, 0xc0a02ae5, 0x7a47b13c, 0x744ebc37, 0x6655ab2a, 0x685ca621, 0x42638510, 0x4c6a881b, 0x5e719f06, 0x5078920d, 0x0a0fd964, 0x0406d46f, 0x161dc372, 0x1814ce79, 0x322bed48, 0x3c22e043, 0x2e39f75e, 0x2030fa55, 0xec9ab701, 0xe293ba0a, 0xf088ad17, 0xfe81a01c, 0xd4be832d, 0xdab78e26, 0xc8ac993b, 0xc6a59430, 0x9cd2df59, 0x92dbd252, 0x80c0c54f, 0x8ec9c844, 0xa4f6eb75, 0xaaffe67e, 0xb8e4f163, 0xb6edfc68, 0x0c0a67b1, 0x02036aba, 0x10187da7, 0x1e1170ac, 0x342e539d, 0x3a275e96, 0x283c498b, 0x26354480, 0x7c420fe9, 0x724b02e2, 0x605015ff, 0x6e5918f4, 0x44663bc5, 0x4a6f36ce, 0x587421d3, 0x567d2cd8, 0x37a10c7a, 0x39a80171, 0x2bb3166c, 0x25ba1b67, 0x0f853856, 0x018c355d, 0x13972240, 0x1d9e2f4b, 0x47e96422, 0x49e06929, 0x5bfb7e34, 0x55f2733f, 0x7fcd500e, 0x71c45d05, 0x63df4a18, 0x6dd64713, 0xd731dcca, 0xd938d1c1, 0xcb23c6dc, 0xc52acbd7, 0xef15e8e6, 0xe11ce5ed, 0xf307f2f0, 0xfd0efffb, 0xa779b492, 0xa970b999, 0xbb6bae84, 0xb562a38f, 0x9f5d80be, 0x91548db5, 0x834f9aa8, 0x8d4697a3];\n    var U2 = [0x00000000, 0x0b0e090d, 0x161c121a, 0x1d121b17, 0x2c382434, 0x27362d39, 0x3a24362e, 0x312a3f23, 0x58704868, 0x537e4165, 0x4e6c5a72, 0x4562537f, 0x74486c5c, 0x7f466551, 0x62547e46, 0x695a774b, 0xb0e090d0, 0xbbee99dd, 0xa6fc82ca, 0xadf28bc7, 0x9cd8b4e4, 0x97d6bde9, 0x8ac4a6fe, 0x81caaff3, 0xe890d8b8, 0xe39ed1b5, 0xfe8ccaa2, 0xf582c3af, 0xc4a8fc8c, 0xcfa6f581, 0xd2b4ee96, 0xd9bae79b, 0x7bdb3bbb, 0x70d532b6, 0x6dc729a1, 0x66c920ac, 0x57e31f8f, 0x5ced1682, 0x41ff0d95, 0x4af10498, 0x23ab73d3, 0x28a57ade, 0x35b761c9, 0x3eb968c4, 0x0f9357e7, 0x049d5eea, 0x198f45fd, 0x12814cf0, 0xcb3bab6b, 0xc035a266, 0xdd27b971, 0xd629b07c, 0xe7038f5f, 0xec0d8652, 0xf11f9d45, 0xfa119448, 0x934be303, 0x9845ea0e, 0x8557f119, 0x8e59f814, 0xbf73c737, 0xb47dce3a, 0xa96fd52d, 0xa261dc20, 0xf6ad766d, 0xfda37f60, 0xe0b16477, 0xebbf6d7a, 0xda955259, 0xd19b5b54, 0xcc894043, 0xc787494e, 0xaedd3e05, 0xa5d33708, 0xb8c12c1f, 0xb3cf2512, 0x82e51a31, 0x89eb133c, 0x94f9082b, 0x9ff70126, 0x464de6bd, 0x4d43efb0, 0x5051f4a7, 0x5b5ffdaa, 0x6a75c289, 0x617bcb84, 0x7c69d093, 0x7767d99e, 0x1e3daed5, 0x1533a7d8, 0x0821bccf, 0x032fb5c2, 0x32058ae1, 0x390b83ec, 0x241998fb, 0x2f1791f6, 0x8d764dd6, 0x867844db, 0x9b6a5fcc, 0x906456c1, 0xa14e69e2, 0xaa4060ef, 0xb7527bf8, 0xbc5c72f5, 0xd50605be, 0xde080cb3, 0xc31a17a4, 0xc8141ea9, 0xf93e218a, 0xf2302887, 0xef223390, 0xe42c3a9d, 0x3d96dd06, 0x3698d40b, 0x2b8acf1c, 0x2084c611, 0x11aef932, 0x1aa0f03f, 0x07b2eb28, 0x0cbce225, 0x65e6956e, 0x6ee89c63, 0x73fa8774, 0x78f48e79, 0x49deb15a, 0x42d0b857, 0x5fc2a340, 0x54ccaa4d, 0xf741ecda, 0xfc4fe5d7, 0xe15dfec0, 0xea53f7cd, 0xdb79c8ee, 0xd077c1e3, 0xcd65daf4, 0xc66bd3f9, 0xaf31a4b2, 0xa43fadbf, 0xb92db6a8, 0xb223bfa5, 0x83098086, 0x8807898b, 0x9515929c, 0x9e1b9b91, 0x47a17c0a, 0x4caf7507, 0x51bd6e10, 0x5ab3671d, 0x6b99583e, 0x60975133, 0x7d854a24, 0x768b4329, 0x1fd13462, 0x14df3d6f, 0x09cd2678, 0x02c32f75, 0x33e91056, 0x38e7195b, 0x25f5024c, 0x2efb0b41, 0x8c9ad761, 0x8794de6c, 0x9a86c57b, 0x9188cc76, 0xa0a2f355, 0xabacfa58, 0xb6bee14f, 0xbdb0e842, 0xd4ea9f09, 0xdfe49604, 0xc2f68d13, 0xc9f8841e, 0xf8d2bb3d, 0xf3dcb230, 0xeecea927, 0xe5c0a02a, 0x3c7a47b1, 0x37744ebc, 0x2a6655ab, 0x21685ca6, 0x10426385, 0x1b4c6a88, 0x065e719f, 0x0d507892, 0x640a0fd9, 0x6f0406d4, 0x72161dc3, 0x791814ce, 0x48322bed, 0x433c22e0, 0x5e2e39f7, 0x552030fa, 0x01ec9ab7, 0x0ae293ba, 0x17f088ad, 0x1cfe81a0, 0x2dd4be83, 0x26dab78e, 0x3bc8ac99, 0x30c6a594, 0x599cd2df, 0x5292dbd2, 0x4f80c0c5, 0x448ec9c8, 0x75a4f6eb, 0x7eaaffe6, 0x63b8e4f1, 0x68b6edfc, 0xb10c0a67, 0xba02036a, 0xa710187d, 0xac1e1170, 0x9d342e53, 0x963a275e, 0x8b283c49, 0x80263544, 0xe97c420f, 0xe2724b02, 0xff605015, 0xf46e5918, 0xc544663b, 0xce4a6f36, 0xd3587421, 0xd8567d2c, 0x7a37a10c, 0x7139a801, 0x6c2bb316, 0x6725ba1b, 0x560f8538, 0x5d018c35, 0x40139722, 0x4b1d9e2f, 0x2247e964, 0x2949e069, 0x345bfb7e, 0x3f55f273, 0x0e7fcd50, 0x0571c45d, 0x1863df4a, 0x136dd647, 0xcad731dc, 0xc1d938d1, 0xdccb23c6, 0xd7c52acb, 0xe6ef15e8, 0xede11ce5, 0xf0f307f2, 0xfbfd0eff, 0x92a779b4, 0x99a970b9, 0x84bb6bae, 0x8fb562a3, 0xbe9f5d80, 0xb591548d, 0xa8834f9a, 0xa38d4697];\n    var U3 = [0x00000000, 0x0d0b0e09, 0x1a161c12, 0x171d121b, 0x342c3824, 0x3927362d, 0x2e3a2436, 0x23312a3f, 0x68587048, 0x65537e41, 0x724e6c5a, 0x7f456253, 0x5c74486c, 0x517f4665, 0x4662547e, 0x4b695a77, 0xd0b0e090, 0xddbbee99, 0xcaa6fc82, 0xc7adf28b, 0xe49cd8b4, 0xe997d6bd, 0xfe8ac4a6, 0xf381caaf, 0xb8e890d8, 0xb5e39ed1, 0xa2fe8cca, 0xaff582c3, 0x8cc4a8fc, 0x81cfa6f5, 0x96d2b4ee, 0x9bd9bae7, 0xbb7bdb3b, 0xb670d532, 0xa16dc729, 0xac66c920, 0x8f57e31f, 0x825ced16, 0x9541ff0d, 0x984af104, 0xd323ab73, 0xde28a57a, 0xc935b761, 0xc43eb968, 0xe70f9357, 0xea049d5e, 0xfd198f45, 0xf012814c, 0x6bcb3bab, 0x66c035a2, 0x71dd27b9, 0x7cd629b0, 0x5fe7038f, 0x52ec0d86, 0x45f11f9d, 0x48fa1194, 0x03934be3, 0x0e9845ea, 0x198557f1, 0x148e59f8, 0x37bf73c7, 0x3ab47dce, 0x2da96fd5, 0x20a261dc, 0x6df6ad76, 0x60fda37f, 0x77e0b164, 0x7aebbf6d, 0x59da9552, 0x54d19b5b, 0x43cc8940, 0x4ec78749, 0x05aedd3e, 0x08a5d337, 0x1fb8c12c, 0x12b3cf25, 0x3182e51a, 0x3c89eb13, 0x2b94f908, 0x269ff701, 0xbd464de6, 0xb04d43ef, 0xa75051f4, 0xaa5b5ffd, 0x896a75c2, 0x84617bcb, 0x937c69d0, 0x9e7767d9, 0xd51e3dae, 0xd81533a7, 0xcf0821bc, 0xc2032fb5, 0xe132058a, 0xec390b83, 0xfb241998, 0xf62f1791, 0xd68d764d, 0xdb867844, 0xcc9b6a5f, 0xc1906456, 0xe2a14e69, 0xefaa4060, 0xf8b7527b, 0xf5bc5c72, 0xbed50605, 0xb3de080c, 0xa4c31a17, 0xa9c8141e, 0x8af93e21, 0x87f23028, 0x90ef2233, 0x9de42c3a, 0x063d96dd, 0x0b3698d4, 0x1c2b8acf, 0x112084c6, 0x3211aef9, 0x3f1aa0f0, 0x2807b2eb, 0x250cbce2, 0x6e65e695, 0x636ee89c, 0x7473fa87, 0x7978f48e, 0x5a49deb1, 0x5742d0b8, 0x405fc2a3, 0x4d54ccaa, 0xdaf741ec, 0xd7fc4fe5, 0xc0e15dfe, 0xcdea53f7, 0xeedb79c8, 0xe3d077c1, 0xf4cd65da, 0xf9c66bd3, 0xb2af31a4, 0xbfa43fad, 0xa8b92db6, 0xa5b223bf, 0x86830980, 0x8b880789, 0x9c951592, 0x919e1b9b, 0x0a47a17c, 0x074caf75, 0x1051bd6e, 0x1d5ab367, 0x3e6b9958, 0x33609751, 0x247d854a, 0x29768b43, 0x621fd134, 0x6f14df3d, 0x7809cd26, 0x7502c32f, 0x5633e910, 0x5b38e719, 0x4c25f502, 0x412efb0b, 0x618c9ad7, 0x6c8794de, 0x7b9a86c5, 0x769188cc, 0x55a0a2f3, 0x58abacfa, 0x4fb6bee1, 0x42bdb0e8, 0x09d4ea9f, 0x04dfe496, 0x13c2f68d, 0x1ec9f884, 0x3df8d2bb, 0x30f3dcb2, 0x27eecea9, 0x2ae5c0a0, 0xb13c7a47, 0xbc37744e, 0xab2a6655, 0xa621685c, 0x85104263, 0x881b4c6a, 0x9f065e71, 0x920d5078, 0xd9640a0f, 0xd46f0406, 0xc372161d, 0xce791814, 0xed48322b, 0xe0433c22, 0xf75e2e39, 0xfa552030, 0xb701ec9a, 0xba0ae293, 0xad17f088, 0xa01cfe81, 0x832dd4be, 0x8e26dab7, 0x993bc8ac, 0x9430c6a5, 0xdf599cd2, 0xd25292db, 0xc54f80c0, 0xc8448ec9, 0xeb75a4f6, 0xe67eaaff, 0xf163b8e4, 0xfc68b6ed, 0x67b10c0a, 0x6aba0203, 0x7da71018, 0x70ac1e11, 0x539d342e, 0x5e963a27, 0x498b283c, 0x44802635, 0x0fe97c42, 0x02e2724b, 0x15ff6050, 0x18f46e59, 0x3bc54466, 0x36ce4a6f, 0x21d35874, 0x2cd8567d, 0x0c7a37a1, 0x017139a8, 0x166c2bb3, 0x1b6725ba, 0x38560f85, 0x355d018c, 0x22401397, 0x2f4b1d9e, 0x642247e9, 0x692949e0, 0x7e345bfb, 0x733f55f2, 0x500e7fcd, 0x5d0571c4, 0x4a1863df, 0x47136dd6, 0xdccad731, 0xd1c1d938, 0xc6dccb23, 0xcbd7c52a, 0xe8e6ef15, 0xe5ede11c, 0xf2f0f307, 0xfffbfd0e, 0xb492a779, 0xb999a970, 0xae84bb6b, 0xa38fb562, 0x80be9f5d, 0x8db59154, 0x9aa8834f, 0x97a38d46];\n    var U4 = [0x00000000, 0x090d0b0e, 0x121a161c, 0x1b171d12, 0x24342c38, 0x2d392736, 0x362e3a24, 0x3f23312a, 0x48685870, 0x4165537e, 0x5a724e6c, 0x537f4562, 0x6c5c7448, 0x65517f46, 0x7e466254, 0x774b695a, 0x90d0b0e0, 0x99ddbbee, 0x82caa6fc, 0x8bc7adf2, 0xb4e49cd8, 0xbde997d6, 0xa6fe8ac4, 0xaff381ca, 0xd8b8e890, 0xd1b5e39e, 0xcaa2fe8c, 0xc3aff582, 0xfc8cc4a8, 0xf581cfa6, 0xee96d2b4, 0xe79bd9ba, 0x3bbb7bdb, 0x32b670d5, 0x29a16dc7, 0x20ac66c9, 0x1f8f57e3, 0x16825ced, 0x0d9541ff, 0x04984af1, 0x73d323ab, 0x7ade28a5, 0x61c935b7, 0x68c43eb9, 0x57e70f93, 0x5eea049d, 0x45fd198f, 0x4cf01281, 0xab6bcb3b, 0xa266c035, 0xb971dd27, 0xb07cd629, 0x8f5fe703, 0x8652ec0d, 0x9d45f11f, 0x9448fa11, 0xe303934b, 0xea0e9845, 0xf1198557, 0xf8148e59, 0xc737bf73, 0xce3ab47d, 0xd52da96f, 0xdc20a261, 0x766df6ad, 0x7f60fda3, 0x6477e0b1, 0x6d7aebbf, 0x5259da95, 0x5b54d19b, 0x4043cc89, 0x494ec787, 0x3e05aedd, 0x3708a5d3, 0x2c1fb8c1, 0x2512b3cf, 0x1a3182e5, 0x133c89eb, 0x082b94f9, 0x01269ff7, 0xe6bd464d, 0xefb04d43, 0xf4a75051, 0xfdaa5b5f, 0xc2896a75, 0xcb84617b, 0xd0937c69, 0xd99e7767, 0xaed51e3d, 0xa7d81533, 0xbccf0821, 0xb5c2032f, 0x8ae13205, 0x83ec390b, 0x98fb2419, 0x91f62f17, 0x4dd68d76, 0x44db8678, 0x5fcc9b6a, 0x56c19064, 0x69e2a14e, 0x60efaa40, 0x7bf8b752, 0x72f5bc5c, 0x05bed506, 0x0cb3de08, 0x17a4c31a, 0x1ea9c814, 0x218af93e, 0x2887f230, 0x3390ef22, 0x3a9de42c, 0xdd063d96, 0xd40b3698, 0xcf1c2b8a, 0xc6112084, 0xf93211ae, 0xf03f1aa0, 0xeb2807b2, 0xe2250cbc, 0x956e65e6, 0x9c636ee8, 0x877473fa, 0x8e7978f4, 0xb15a49de, 0xb85742d0, 0xa3405fc2, 0xaa4d54cc, 0xecdaf741, 0xe5d7fc4f, 0xfec0e15d, 0xf7cdea53, 0xc8eedb79, 0xc1e3d077, 0xdaf4cd65, 0xd3f9c66b, 0xa4b2af31, 0xadbfa43f, 0xb6a8b92d, 0xbfa5b223, 0x80868309, 0x898b8807, 0x929c9515, 0x9b919e1b, 0x7c0a47a1, 0x75074caf, 0x6e1051bd, 0x671d5ab3, 0x583e6b99, 0x51336097, 0x4a247d85, 0x4329768b, 0x34621fd1, 0x3d6f14df, 0x267809cd, 0x2f7502c3, 0x105633e9, 0x195b38e7, 0x024c25f5, 0x0b412efb, 0xd7618c9a, 0xde6c8794, 0xc57b9a86, 0xcc769188, 0xf355a0a2, 0xfa58abac, 0xe14fb6be, 0xe842bdb0, 0x9f09d4ea, 0x9604dfe4, 0x8d13c2f6, 0x841ec9f8, 0xbb3df8d2, 0xb230f3dc, 0xa927eece, 0xa02ae5c0, 0x47b13c7a, 0x4ebc3774, 0x55ab2a66, 0x5ca62168, 0x63851042, 0x6a881b4c, 0x719f065e, 0x78920d50, 0x0fd9640a, 0x06d46f04, 0x1dc37216, 0x14ce7918, 0x2bed4832, 0x22e0433c, 0x39f75e2e, 0x30fa5520, 0x9ab701ec, 0x93ba0ae2, 0x88ad17f0, 0x81a01cfe, 0xbe832dd4, 0xb78e26da, 0xac993bc8, 0xa59430c6, 0xd2df599c, 0xdbd25292, 0xc0c54f80, 0xc9c8448e, 0xf6eb75a4, 0xffe67eaa, 0xe4f163b8, 0xedfc68b6, 0x0a67b10c, 0x036aba02, 0x187da710, 0x1170ac1e, 0x2e539d34, 0x275e963a, 0x3c498b28, 0x35448026, 0x420fe97c, 0x4b02e272, 0x5015ff60, 0x5918f46e, 0x663bc544, 0x6f36ce4a, 0x7421d358, 0x7d2cd856, 0xa10c7a37, 0xa8017139, 0xb3166c2b, 0xba1b6725, 0x8538560f, 0x8c355d01, 0x97224013, 0x9e2f4b1d, 0xe9642247, 0xe0692949, 0xfb7e345b, 0xf2733f55, 0xcd500e7f, 0xc45d0571, 0xdf4a1863, 0xd647136d, 0x31dccad7, 0x38d1c1d9, 0x23c6dccb, 0x2acbd7c5, 0x15e8e6ef, 0x1ce5ede1, 0x07f2f0f3, 0x0efffbfd, 0x79b492a7, 0x70b999a9, 0x6bae84bb, 0x62a38fb5, 0x5d80be9f, 0x548db591, 0x4f9aa883, 0x4697a38d];\n\n    function convertToInt32(bytes) {\n        var result = [];\n        for (var i = 0; i < bytes.length; i += 4) {\n            result.push(\n                (bytes[i    ] << 24) |\n                (bytes[i + 1] << 16) |\n                (bytes[i + 2] <<  8) |\n                 bytes[i + 3]\n            );\n        }\n        return result;\n    }\n\n    var AES = function(key) {\n        if (!(this instanceof AES)) {\n            throw Error('AES must be instanitated with `new`');\n        }\n\n        Object.defineProperty(this, 'key', {\n            value: coerceArray(key, true)\n        });\n\n        this._prepare();\n    }\n\n\n    AES.prototype._prepare = function() {\n\n        var rounds = numberOfRounds[this.key.length];\n        if (rounds == null) {\n            throw new Error('invalid key size (must be 16, 24 or 32 bytes)');\n        }\n\n        // encryption round keys\n        this._Ke = [];\n\n        // decryption round keys\n        this._Kd = [];\n\n        for (var i = 0; i <= rounds; i++) {\n            this._Ke.push([0, 0, 0, 0]);\n            this._Kd.push([0, 0, 0, 0]);\n        }\n\n        var roundKeyCount = (rounds + 1) * 4;\n        var KC = this.key.length / 4;\n\n        // convert the key into ints\n        var tk = convertToInt32(this.key);\n\n        // copy values into round key arrays\n        var index;\n        for (var i = 0; i < KC; i++) {\n            index = i >> 2;\n            this._Ke[index][i % 4] = tk[i];\n            this._Kd[rounds - index][i % 4] = tk[i];\n        }\n\n        // key expansion (fips-197 section 5.2)\n        var rconpointer = 0;\n        var t = KC, tt;\n        while (t < roundKeyCount) {\n            tt = tk[KC - 1];\n            tk[0] ^= ((S[(tt >> 16) & 0xFF] << 24) ^\n                      (S[(tt >>  8) & 0xFF] << 16) ^\n                      (S[ tt        & 0xFF] <<  8) ^\n                       S[(tt >> 24) & 0xFF]        ^\n                      (rcon[rconpointer] << 24));\n            rconpointer += 1;\n\n            // key expansion (for non-256 bit)\n            if (KC != 8) {\n                for (var i = 1; i < KC; i++) {\n                    tk[i] ^= tk[i - 1];\n                }\n\n            // key expansion for 256-bit keys is \"slightly different\" (fips-197)\n            } else {\n                for (var i = 1; i < (KC / 2); i++) {\n                    tk[i] ^= tk[i - 1];\n                }\n                tt = tk[(KC / 2) - 1];\n\n                tk[KC / 2] ^= (S[ tt        & 0xFF]        ^\n                              (S[(tt >>  8) & 0xFF] <<  8) ^\n                              (S[(tt >> 16) & 0xFF] << 16) ^\n                              (S[(tt >> 24) & 0xFF] << 24));\n\n                for (var i = (KC / 2) + 1; i < KC; i++) {\n                    tk[i] ^= tk[i - 1];\n                }\n            }\n\n            // copy values into round key arrays\n            var i = 0, r, c;\n            while (i < KC && t < roundKeyCount) {\n                r = t >> 2;\n                c = t % 4;\n                this._Ke[r][c] = tk[i];\n                this._Kd[rounds - r][c] = tk[i++];\n                t++;\n            }\n        }\n\n        // inverse-cipher-ify the decryption round key (fips-197 section 5.3)\n        for (var r = 1; r < rounds; r++) {\n            for (var c = 0; c < 4; c++) {\n                tt = this._Kd[r][c];\n                this._Kd[r][c] = (U1[(tt >> 24) & 0xFF] ^\n                                  U2[(tt >> 16) & 0xFF] ^\n                                  U3[(tt >>  8) & 0xFF] ^\n                                  U4[ tt        & 0xFF]);\n            }\n        }\n    }\n\n    AES.prototype.encrypt = function(plaintext) {\n        if (plaintext.length != 16) {\n            throw new Error('invalid plaintext size (must be 16 bytes)');\n        }\n\n        var rounds = this._Ke.length - 1;\n        var a = [0, 0, 0, 0];\n\n        // convert plaintext to (ints ^ key)\n        var t = convertToInt32(plaintext);\n        for (var i = 0; i < 4; i++) {\n            t[i] ^= this._Ke[0][i];\n        }\n\n        // apply round transforms\n        for (var r = 1; r < rounds; r++) {\n            for (var i = 0; i < 4; i++) {\n                a[i] = (T1[(t[ i         ] >> 24) & 0xff] ^\n                        T2[(t[(i + 1) % 4] >> 16) & 0xff] ^\n                        T3[(t[(i + 2) % 4] >>  8) & 0xff] ^\n                        T4[ t[(i + 3) % 4]        & 0xff] ^\n                        this._Ke[r][i]);\n            }\n            t = a.slice();\n        }\n\n        // the last round is special\n        var result = createArray(16), tt;\n        for (var i = 0; i < 4; i++) {\n            tt = this._Ke[rounds][i];\n            result[4 * i    ] = (S[(t[ i         ] >> 24) & 0xff] ^ (tt >> 24)) & 0xff;\n            result[4 * i + 1] = (S[(t[(i + 1) % 4] >> 16) & 0xff] ^ (tt >> 16)) & 0xff;\n            result[4 * i + 2] = (S[(t[(i + 2) % 4] >>  8) & 0xff] ^ (tt >>  8)) & 0xff;\n            result[4 * i + 3] = (S[ t[(i + 3) % 4]        & 0xff] ^  tt       ) & 0xff;\n        }\n\n        return result;\n    }\n\n    AES.prototype.decrypt = function(ciphertext) {\n        if (ciphertext.length != 16) {\n            throw new Error('invalid ciphertext size (must be 16 bytes)');\n        }\n\n        var rounds = this._Kd.length - 1;\n        var a = [0, 0, 0, 0];\n\n        // convert plaintext to (ints ^ key)\n        var t = convertToInt32(ciphertext);\n        for (var i = 0; i < 4; i++) {\n            t[i] ^= this._Kd[0][i];\n        }\n\n        // apply round transforms\n        for (var r = 1; r < rounds; r++) {\n            for (var i = 0; i < 4; i++) {\n                a[i] = (T5[(t[ i          ] >> 24) & 0xff] ^\n                        T6[(t[(i + 3) % 4] >> 16) & 0xff] ^\n                        T7[(t[(i + 2) % 4] >>  8) & 0xff] ^\n                        T8[ t[(i + 1) % 4]        & 0xff] ^\n                        this._Kd[r][i]);\n            }\n            t = a.slice();\n        }\n\n        // the last round is special\n        var result = createArray(16), tt;\n        for (var i = 0; i < 4; i++) {\n            tt = this._Kd[rounds][i];\n            result[4 * i    ] = (Si[(t[ i         ] >> 24) & 0xff] ^ (tt >> 24)) & 0xff;\n            result[4 * i + 1] = (Si[(t[(i + 3) % 4] >> 16) & 0xff] ^ (tt >> 16)) & 0xff;\n            result[4 * i + 2] = (Si[(t[(i + 2) % 4] >>  8) & 0xff] ^ (tt >>  8)) & 0xff;\n            result[4 * i + 3] = (Si[ t[(i + 1) % 4]        & 0xff] ^  tt       ) & 0xff;\n        }\n\n        return result;\n    }\n\n\n    /**\n     *  Mode Of Operation - Electonic Codebook (ECB)\n     */\n    var ModeOfOperationECB = function(key) {\n        if (!(this instanceof ModeOfOperationECB)) {\n            throw Error('AES must be instanitated with `new`');\n        }\n\n        this.description = \"Electronic Code Block\";\n        this.name = \"ecb\";\n\n        this._aes = new AES(key);\n    }\n\n    ModeOfOperationECB.prototype.encrypt = function(plaintext) {\n        plaintext = coerceArray(plaintext);\n\n        if ((plaintext.length % 16) !== 0) {\n            throw new Error('invalid plaintext size (must be multiple of 16 bytes)');\n        }\n\n        var ciphertext = createArray(plaintext.length);\n        var block = createArray(16);\n\n        for (var i = 0; i < plaintext.length; i += 16) {\n            copyArray(plaintext, block, 0, i, i + 16);\n            block = this._aes.encrypt(block);\n            copyArray(block, ciphertext, i);\n        }\n\n        return ciphertext;\n    }\n\n    ModeOfOperationECB.prototype.decrypt = function(ciphertext) {\n        ciphertext = coerceArray(ciphertext);\n\n        if ((ciphertext.length % 16) !== 0) {\n            throw new Error('invalid ciphertext size (must be multiple of 16 bytes)');\n        }\n\n        var plaintext = createArray(ciphertext.length);\n        var block = createArray(16);\n\n        for (var i = 0; i < ciphertext.length; i += 16) {\n            copyArray(ciphertext, block, 0, i, i + 16);\n            block = this._aes.decrypt(block);\n            copyArray(block, plaintext, i);\n        }\n\n        return plaintext;\n    }\n\n\n    /**\n     *  Mode Of Operation - Cipher Block Chaining (CBC)\n     */\n    var ModeOfOperationCBC = function(key, iv) {\n        if (!(this instanceof ModeOfOperationCBC)) {\n            throw Error('AES must be instanitated with `new`');\n        }\n\n        this.description = \"Cipher Block Chaining\";\n        this.name = \"cbc\";\n\n        if (!iv) {\n            iv = createArray(16);\n\n        } else if (iv.length != 16) {\n            throw new Error('invalid initialation vector size (must be 16 bytes)');\n        }\n\n        this._lastCipherblock = coerceArray(iv, true);\n\n        this._aes = new AES(key);\n    }\n\n    ModeOfOperationCBC.prototype.encrypt = function(plaintext) {\n        plaintext = coerceArray(plaintext);\n\n        if ((plaintext.length % 16) !== 0) {\n            throw new Error('invalid plaintext size (must be multiple of 16 bytes)');\n        }\n\n        var ciphertext = createArray(plaintext.length);\n        var block = createArray(16);\n\n        for (var i = 0; i < plaintext.length; i += 16) {\n            copyArray(plaintext, block, 0, i, i + 16);\n\n            for (var j = 0; j < 16; j++) {\n                block[j] ^= this._lastCipherblock[j];\n            }\n\n            this._lastCipherblock = this._aes.encrypt(block);\n            copyArray(this._lastCipherblock, ciphertext, i);\n        }\n\n        return ciphertext;\n    }\n\n    ModeOfOperationCBC.prototype.decrypt = function(ciphertext) {\n        ciphertext = coerceArray(ciphertext);\n\n        if ((ciphertext.length % 16) !== 0) {\n            throw new Error('invalid ciphertext size (must be multiple of 16 bytes)');\n        }\n\n        var plaintext = createArray(ciphertext.length);\n        var block = createArray(16);\n\n        for (var i = 0; i < ciphertext.length; i += 16) {\n            copyArray(ciphertext, block, 0, i, i + 16);\n            block = this._aes.decrypt(block);\n\n            for (var j = 0; j < 16; j++) {\n                plaintext[i + j] = block[j] ^ this._lastCipherblock[j];\n            }\n\n            copyArray(ciphertext, this._lastCipherblock, 0, i, i + 16);\n        }\n\n        return plaintext;\n    }\n\n\n    /**\n     *  Mode Of Operation - Cipher Feedback (CFB)\n     */\n    var ModeOfOperationCFB = function(key, iv, segmentSize) {\n        if (!(this instanceof ModeOfOperationCFB)) {\n            throw Error('AES must be instanitated with `new`');\n        }\n\n        this.description = \"Cipher Feedback\";\n        this.name = \"cfb\";\n\n        if (!iv) {\n            iv = createArray(16);\n\n        } else if (iv.length != 16) {\n            throw new Error('invalid initialation vector size (must be 16 size)');\n        }\n\n        if (!segmentSize) { segmentSize = 1; }\n\n        this.segmentSize = segmentSize;\n\n        this._shiftRegister = coerceArray(iv, true);\n\n        this._aes = new AES(key);\n    }\n\n    ModeOfOperationCFB.prototype.encrypt = function(plaintext) {\n        if ((plaintext.length % this.segmentSize) != 0) {\n            throw new Error('invalid plaintext size (must be segmentSize bytes)');\n        }\n\n        var encrypted = coerceArray(plaintext, true);\n\n        var xorSegment;\n        for (var i = 0; i < encrypted.length; i += this.segmentSize) {\n            xorSegment = this._aes.encrypt(this._shiftRegister);\n            for (var j = 0; j < this.segmentSize; j++) {\n                encrypted[i + j] ^= xorSegment[j];\n            }\n\n            // Shift the register\n            copyArray(this._shiftRegister, this._shiftRegister, 0, this.segmentSize);\n            copyArray(encrypted, this._shiftRegister, 16 - this.segmentSize, i, i + this.segmentSize);\n        }\n\n        return encrypted;\n    }\n\n    ModeOfOperationCFB.prototype.decrypt = function(ciphertext) {\n        if ((ciphertext.length % this.segmentSize) != 0) {\n            throw new Error('invalid ciphertext size (must be segmentSize bytes)');\n        }\n\n        var plaintext = coerceArray(ciphertext, true);\n\n        var xorSegment;\n        for (var i = 0; i < plaintext.length; i += this.segmentSize) {\n            xorSegment = this._aes.encrypt(this._shiftRegister);\n\n            for (var j = 0; j < this.segmentSize; j++) {\n                plaintext[i + j] ^= xorSegment[j];\n            }\n\n            // Shift the register\n            copyArray(this._shiftRegister, this._shiftRegister, 0, this.segmentSize);\n            copyArray(ciphertext, this._shiftRegister, 16 - this.segmentSize, i, i + this.segmentSize);\n        }\n\n        return plaintext;\n    }\n\n    /**\n     *  Mode Of Operation - Output Feedback (OFB)\n     */\n    var ModeOfOperationOFB = function(key, iv) {\n        if (!(this instanceof ModeOfOperationOFB)) {\n            throw Error('AES must be instanitated with `new`');\n        }\n\n        this.description = \"Output Feedback\";\n        this.name = \"ofb\";\n\n        if (!iv) {\n            iv = createArray(16);\n\n        } else if (iv.length != 16) {\n            throw new Error('invalid initialation vector size (must be 16 bytes)');\n        }\n\n        this._lastPrecipher = coerceArray(iv, true);\n        this._lastPrecipherIndex = 16;\n\n        this._aes = new AES(key);\n    }\n\n    ModeOfOperationOFB.prototype.encrypt = function(plaintext) {\n        var encrypted = coerceArray(plaintext, true);\n\n        for (var i = 0; i < encrypted.length; i++) {\n            if (this._lastPrecipherIndex === 16) {\n                this._lastPrecipher = this._aes.encrypt(this._lastPrecipher);\n                this._lastPrecipherIndex = 0;\n            }\n            encrypted[i] ^= this._lastPrecipher[this._lastPrecipherIndex++];\n        }\n\n        return encrypted;\n    }\n\n    // Decryption is symetric\n    ModeOfOperationOFB.prototype.decrypt = ModeOfOperationOFB.prototype.encrypt;\n\n\n    /**\n     *  Counter object for CTR common mode of operation\n     */\n    var Counter = function(initialValue) {\n        if (!(this instanceof Counter)) {\n            throw Error('Counter must be instanitated with `new`');\n        }\n\n        // We allow 0, but anything false-ish uses the default 1\n        if (initialValue !== 0 && !initialValue) { initialValue = 1; }\n\n        if (typeof(initialValue) === 'number') {\n            this._counter = createArray(16);\n            this.setValue(initialValue);\n\n        } else {\n            this.setBytes(initialValue);\n        }\n    }\n\n    Counter.prototype.setValue = function(value) {\n        if (typeof(value) !== 'number' || parseInt(value) != value) {\n            throw new Error('invalid counter value (must be an integer)');\n        }\n\n        // We cannot safely handle numbers beyond the safe range for integers\n        if (value > Number.MAX_SAFE_INTEGER) {\n            throw new Error('integer value out of safe range');\n        }\n\n        for (var index = 15; index >= 0; --index) {\n            this._counter[index] = value % 256;\n            value = parseInt(value / 256);\n        }\n    }\n\n    Counter.prototype.setBytes = function(bytes) {\n        bytes = coerceArray(bytes, true);\n\n        if (bytes.length != 16) {\n            throw new Error('invalid counter bytes size (must be 16 bytes)');\n        }\n\n        this._counter = bytes;\n    };\n\n    Counter.prototype.increment = function() {\n        for (var i = 15; i >= 0; i--) {\n            if (this._counter[i] === 255) {\n                this._counter[i] = 0;\n            } else {\n                this._counter[i]++;\n                break;\n            }\n        }\n    }\n\n\n    /**\n     *  Mode Of Operation - Counter (CTR)\n     */\n    var ModeOfOperationCTR = function(key, counter) {\n        if (!(this instanceof ModeOfOperationCTR)) {\n            throw Error('AES must be instanitated with `new`');\n        }\n\n        this.description = \"Counter\";\n        this.name = \"ctr\";\n\n        if (!(counter instanceof Counter)) {\n            counter = new Counter(counter)\n        }\n\n        this._counter = counter;\n\n        this._remainingCounter = null;\n        this._remainingCounterIndex = 16;\n\n        this._aes = new AES(key);\n    }\n\n    ModeOfOperationCTR.prototype.encrypt = function(plaintext) {\n        var encrypted = coerceArray(plaintext, true);\n\n        for (var i = 0; i < encrypted.length; i++) {\n            if (this._remainingCounterIndex === 16) {\n                this._remainingCounter = this._aes.encrypt(this._counter._counter);\n                this._remainingCounterIndex = 0;\n                this._counter.increment();\n            }\n            encrypted[i] ^= this._remainingCounter[this._remainingCounterIndex++];\n        }\n\n        return encrypted;\n    }\n\n    // Decryption is symetric\n    ModeOfOperationCTR.prototype.decrypt = ModeOfOperationCTR.prototype.encrypt;\n\n\n    ///////////////////////\n    // Padding\n\n    // See:https://tools.ietf.org/html/rfc2315\n    function pkcs7pad(data) {\n        data = coerceArray(data, true);\n        var padder = 16 - (data.length % 16);\n        var result = createArray(data.length + padder);\n        copyArray(data, result);\n        for (var i = data.length; i < result.length; i++) {\n            result[i] = padder;\n        }\n        return result;\n    }\n\n    function pkcs7strip(data) {\n        data = coerceArray(data, true);\n        if (data.length < 16) { throw new Error('PKCS#7 invalid length'); }\n\n        var padder = data[data.length - 1];\n        if (padder > 16) { throw new Error('PKCS#7 padding byte out of range'); }\n\n        var length = data.length - padder;\n        for (var i = 0; i < padder; i++) {\n            if (data[length + i] !== padder) {\n                throw new Error('PKCS#7 invalid padding byte');\n            }\n        }\n\n        var result = createArray(length);\n        copyArray(data, result, 0, 0, length);\n        return result;\n    }\n\n    ///////////////////////\n    // Exporting\n\n\n    // The block cipher\n    var aesjs = {\n        AES: AES,\n        Counter: Counter,\n\n        ModeOfOperation: {\n            ecb: ModeOfOperationECB,\n            cbc: ModeOfOperationCBC,\n            cfb: ModeOfOperationCFB,\n            ofb: ModeOfOperationOFB,\n            ctr: ModeOfOperationCTR\n        },\n\n        utils: {\n            hex: convertHex,\n            utf8: convertUtf8\n        },\n\n        padding: {\n            pkcs7: {\n                pad: pkcs7pad,\n                strip: pkcs7strip\n            }\n        },\n\n        _arrayTest: {\n            coerceArray: coerceArray,\n            createArray: createArray,\n            copyArray: copyArray,\n        }\n    };\n\n\n    // node.js\n    if (true) {\n        module.exports = aesjs\n\n    // RequireJS/AMD\n    // http://www.requirejs.org/docs/api.html\n    // https://github.com/amdjs/amdjs-api/wiki/AMD\n    } else {}\n\n\n})(this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/aes-js/index.js\n");

/***/ }),

/***/ "./node_modules/big-integer/BigInteger.js":
/*!************************************************!*\
  !*** ./node_modules/big-integer/BigInteger.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(module) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var bigInt = (function (undefined) {\r\n    \"use strict\";\r\n\r\n    var BASE = 1e7,\r\n        LOG_BASE = 7,\r\n        MAX_INT = 9007199254740992,\r\n        MAX_INT_ARR = smallToArray(MAX_INT),\r\n        DEFAULT_ALPHABET = \"0123456789abcdefghijklmnopqrstuvwxyz\";\r\n\r\n    var supportsNativeBigInt = typeof BigInt === \"function\";\r\n\r\n    function Integer(v, radix, alphabet, caseSensitive) {\r\n        if (typeof v === \"undefined\") return Integer[0];\r\n        if (typeof radix !== \"undefined\") return +radix === 10 && !alphabet ? parseValue(v) : parseBase(v, radix, alphabet, caseSensitive);\r\n        return parseValue(v);\r\n    }\r\n\r\n    function BigInteger(value, sign) {\r\n        this.value = value;\r\n        this.sign = sign;\r\n        this.isSmall = false;\r\n    }\r\n    BigInteger.prototype = Object.create(Integer.prototype);\r\n\r\n    function SmallInteger(value) {\r\n        this.value = value;\r\n        this.sign = value < 0;\r\n        this.isSmall = true;\r\n    }\r\n    SmallInteger.prototype = Object.create(Integer.prototype);\r\n\r\n    function NativeBigInt(value) {\r\n        this.value = value;\r\n    }\r\n    NativeBigInt.prototype = Object.create(Integer.prototype);\r\n\r\n    function isPrecise(n) {\r\n        return -MAX_INT < n && n < MAX_INT;\r\n    }\r\n\r\n    function smallToArray(n) { // For performance reasons doesn't reference BASE, need to change this function if BASE changes\r\n        if (n < 1e7)\r\n            return [n];\r\n        if (n < 1e14)\r\n            return [n % 1e7, Math.floor(n / 1e7)];\r\n        return [n % 1e7, Math.floor(n / 1e7) % 1e7, Math.floor(n / 1e14)];\r\n    }\r\n\r\n    function arrayToSmall(arr) { // If BASE changes this function may need to change\r\n        trim(arr);\r\n        var length = arr.length;\r\n        if (length < 4 && compareAbs(arr, MAX_INT_ARR) < 0) {\r\n            switch (length) {\r\n                case 0: return 0;\r\n                case 1: return arr[0];\r\n                case 2: return arr[0] + arr[1] * BASE;\r\n                default: return arr[0] + (arr[1] + arr[2] * BASE) * BASE;\r\n            }\r\n        }\r\n        return arr;\r\n    }\r\n\r\n    function trim(v) {\r\n        var i = v.length;\r\n        while (v[--i] === 0);\r\n        v.length = i + 1;\r\n    }\r\n\r\n    function createArray(length) { // function shamelessly stolen from Yaffle's library https://github.com/Yaffle/BigInteger\r\n        var x = new Array(length);\r\n        var i = -1;\r\n        while (++i < length) {\r\n            x[i] = 0;\r\n        }\r\n        return x;\r\n    }\r\n\r\n    function truncate(n) {\r\n        if (n > 0) return Math.floor(n);\r\n        return Math.ceil(n);\r\n    }\r\n\r\n    function add(a, b) { // assumes a and b are arrays with a.length >= b.length\r\n        var l_a = a.length,\r\n            l_b = b.length,\r\n            r = new Array(l_a),\r\n            carry = 0,\r\n            base = BASE,\r\n            sum, i;\r\n        for (i = 0; i < l_b; i++) {\r\n            sum = a[i] + b[i] + carry;\r\n            carry = sum >= base ? 1 : 0;\r\n            r[i] = sum - carry * base;\r\n        }\r\n        while (i < l_a) {\r\n            sum = a[i] + carry;\r\n            carry = sum === base ? 1 : 0;\r\n            r[i++] = sum - carry * base;\r\n        }\r\n        if (carry > 0) r.push(carry);\r\n        return r;\r\n    }\r\n\r\n    function addAny(a, b) {\r\n        if (a.length >= b.length) return add(a, b);\r\n        return add(b, a);\r\n    }\r\n\r\n    function addSmall(a, carry) { // assumes a is array, carry is number with 0 <= carry < MAX_INT\r\n        var l = a.length,\r\n            r = new Array(l),\r\n            base = BASE,\r\n            sum, i;\r\n        for (i = 0; i < l; i++) {\r\n            sum = a[i] - base + carry;\r\n            carry = Math.floor(sum / base);\r\n            r[i] = sum - carry * base;\r\n            carry += 1;\r\n        }\r\n        while (carry > 0) {\r\n            r[i++] = carry % base;\r\n            carry = Math.floor(carry / base);\r\n        }\r\n        return r;\r\n    }\r\n\r\n    BigInteger.prototype.add = function (v) {\r\n        var n = parseValue(v);\r\n        if (this.sign !== n.sign) {\r\n            return this.subtract(n.negate());\r\n        }\r\n        var a = this.value, b = n.value;\r\n        if (n.isSmall) {\r\n            return new BigInteger(addSmall(a, Math.abs(b)), this.sign);\r\n        }\r\n        return new BigInteger(addAny(a, b), this.sign);\r\n    };\r\n    BigInteger.prototype.plus = BigInteger.prototype.add;\r\n\r\n    SmallInteger.prototype.add = function (v) {\r\n        var n = parseValue(v);\r\n        var a = this.value;\r\n        if (a < 0 !== n.sign) {\r\n            return this.subtract(n.negate());\r\n        }\r\n        var b = n.value;\r\n        if (n.isSmall) {\r\n            if (isPrecise(a + b)) return new SmallInteger(a + b);\r\n            b = smallToArray(Math.abs(b));\r\n        }\r\n        return new BigInteger(addSmall(b, Math.abs(a)), a < 0);\r\n    };\r\n    SmallInteger.prototype.plus = SmallInteger.prototype.add;\r\n\r\n    NativeBigInt.prototype.add = function (v) {\r\n        return new NativeBigInt(this.value + parseValue(v).value);\r\n    }\r\n    NativeBigInt.prototype.plus = NativeBigInt.prototype.add;\r\n\r\n    function subtract(a, b) { // assumes a and b are arrays with a >= b\r\n        var a_l = a.length,\r\n            b_l = b.length,\r\n            r = new Array(a_l),\r\n            borrow = 0,\r\n            base = BASE,\r\n            i, difference;\r\n        for (i = 0; i < b_l; i++) {\r\n            difference = a[i] - borrow - b[i];\r\n            if (difference < 0) {\r\n                difference += base;\r\n                borrow = 1;\r\n            } else borrow = 0;\r\n            r[i] = difference;\r\n        }\r\n        for (i = b_l; i < a_l; i++) {\r\n            difference = a[i] - borrow;\r\n            if (difference < 0) difference += base;\r\n            else {\r\n                r[i++] = difference;\r\n                break;\r\n            }\r\n            r[i] = difference;\r\n        }\r\n        for (; i < a_l; i++) {\r\n            r[i] = a[i];\r\n        }\r\n        trim(r);\r\n        return r;\r\n    }\r\n\r\n    function subtractAny(a, b, sign) {\r\n        var value;\r\n        if (compareAbs(a, b) >= 0) {\r\n            value = subtract(a, b);\r\n        } else {\r\n            value = subtract(b, a);\r\n            sign = !sign;\r\n        }\r\n        value = arrayToSmall(value);\r\n        if (typeof value === \"number\") {\r\n            if (sign) value = -value;\r\n            return new SmallInteger(value);\r\n        }\r\n        return new BigInteger(value, sign);\r\n    }\r\n\r\n    function subtractSmall(a, b, sign) { // assumes a is array, b is number with 0 <= b < MAX_INT\r\n        var l = a.length,\r\n            r = new Array(l),\r\n            carry = -b,\r\n            base = BASE,\r\n            i, difference;\r\n        for (i = 0; i < l; i++) {\r\n            difference = a[i] + carry;\r\n            carry = Math.floor(difference / base);\r\n            difference %= base;\r\n            r[i] = difference < 0 ? difference + base : difference;\r\n        }\r\n        r = arrayToSmall(r);\r\n        if (typeof r === \"number\") {\r\n            if (sign) r = -r;\r\n            return new SmallInteger(r);\r\n        } return new BigInteger(r, sign);\r\n    }\r\n\r\n    BigInteger.prototype.subtract = function (v) {\r\n        var n = parseValue(v);\r\n        if (this.sign !== n.sign) {\r\n            return this.add(n.negate());\r\n        }\r\n        var a = this.value, b = n.value;\r\n        if (n.isSmall)\r\n            return subtractSmall(a, Math.abs(b), this.sign);\r\n        return subtractAny(a, b, this.sign);\r\n    };\r\n    BigInteger.prototype.minus = BigInteger.prototype.subtract;\r\n\r\n    SmallInteger.prototype.subtract = function (v) {\r\n        var n = parseValue(v);\r\n        var a = this.value;\r\n        if (a < 0 !== n.sign) {\r\n            return this.add(n.negate());\r\n        }\r\n        var b = n.value;\r\n        if (n.isSmall) {\r\n            return new SmallInteger(a - b);\r\n        }\r\n        return subtractSmall(b, Math.abs(a), a >= 0);\r\n    };\r\n    SmallInteger.prototype.minus = SmallInteger.prototype.subtract;\r\n\r\n    NativeBigInt.prototype.subtract = function (v) {\r\n        return new NativeBigInt(this.value - parseValue(v).value);\r\n    }\r\n    NativeBigInt.prototype.minus = NativeBigInt.prototype.subtract;\r\n\r\n    BigInteger.prototype.negate = function () {\r\n        return new BigInteger(this.value, !this.sign);\r\n    };\r\n    SmallInteger.prototype.negate = function () {\r\n        var sign = this.sign;\r\n        var small = new SmallInteger(-this.value);\r\n        small.sign = !sign;\r\n        return small;\r\n    };\r\n    NativeBigInt.prototype.negate = function () {\r\n        return new NativeBigInt(-this.value);\r\n    }\r\n\r\n    BigInteger.prototype.abs = function () {\r\n        return new BigInteger(this.value, false);\r\n    };\r\n    SmallInteger.prototype.abs = function () {\r\n        return new SmallInteger(Math.abs(this.value));\r\n    };\r\n    NativeBigInt.prototype.abs = function () {\r\n        return new NativeBigInt(this.value >= 0 ? this.value : -this.value);\r\n    }\r\n\r\n\r\n    function multiplyLong(a, b) {\r\n        var a_l = a.length,\r\n            b_l = b.length,\r\n            l = a_l + b_l,\r\n            r = createArray(l),\r\n            base = BASE,\r\n            product, carry, i, a_i, b_j;\r\n        for (i = 0; i < a_l; ++i) {\r\n            a_i = a[i];\r\n            for (var j = 0; j < b_l; ++j) {\r\n                b_j = b[j];\r\n                product = a_i * b_j + r[i + j];\r\n                carry = Math.floor(product / base);\r\n                r[i + j] = product - carry * base;\r\n                r[i + j + 1] += carry;\r\n            }\r\n        }\r\n        trim(r);\r\n        return r;\r\n    }\r\n\r\n    function multiplySmall(a, b) { // assumes a is array, b is number with |b| < BASE\r\n        var l = a.length,\r\n            r = new Array(l),\r\n            base = BASE,\r\n            carry = 0,\r\n            product, i;\r\n        for (i = 0; i < l; i++) {\r\n            product = a[i] * b + carry;\r\n            carry = Math.floor(product / base);\r\n            r[i] = product - carry * base;\r\n        }\r\n        while (carry > 0) {\r\n            r[i++] = carry % base;\r\n            carry = Math.floor(carry / base);\r\n        }\r\n        return r;\r\n    }\r\n\r\n    function shiftLeft(x, n) {\r\n        var r = [];\r\n        while (n-- > 0) r.push(0);\r\n        return r.concat(x);\r\n    }\r\n\r\n    function multiplyKaratsuba(x, y) {\r\n        var n = Math.max(x.length, y.length);\r\n\r\n        if (n <= 30) return multiplyLong(x, y);\r\n        n = Math.ceil(n / 2);\r\n\r\n        var b = x.slice(n),\r\n            a = x.slice(0, n),\r\n            d = y.slice(n),\r\n            c = y.slice(0, n);\r\n\r\n        var ac = multiplyKaratsuba(a, c),\r\n            bd = multiplyKaratsuba(b, d),\r\n            abcd = multiplyKaratsuba(addAny(a, b), addAny(c, d));\r\n\r\n        var product = addAny(addAny(ac, shiftLeft(subtract(subtract(abcd, ac), bd), n)), shiftLeft(bd, 2 * n));\r\n        trim(product);\r\n        return product;\r\n    }\r\n\r\n    // The following function is derived from a surface fit of a graph plotting the performance difference\r\n    // between long multiplication and karatsuba multiplication versus the lengths of the two arrays.\r\n    function useKaratsuba(l1, l2) {\r\n        return -0.012 * l1 - 0.012 * l2 + 0.000015 * l1 * l2 > 0;\r\n    }\r\n\r\n    BigInteger.prototype.multiply = function (v) {\r\n        var n = parseValue(v),\r\n            a = this.value, b = n.value,\r\n            sign = this.sign !== n.sign,\r\n            abs;\r\n        if (n.isSmall) {\r\n            if (b === 0) return Integer[0];\r\n            if (b === 1) return this;\r\n            if (b === -1) return this.negate();\r\n            abs = Math.abs(b);\r\n            if (abs < BASE) {\r\n                return new BigInteger(multiplySmall(a, abs), sign);\r\n            }\r\n            b = smallToArray(abs);\r\n        }\r\n        if (useKaratsuba(a.length, b.length)) // Karatsuba is only faster for certain array sizes\r\n            return new BigInteger(multiplyKaratsuba(a, b), sign);\r\n        return new BigInteger(multiplyLong(a, b), sign);\r\n    };\r\n\r\n    BigInteger.prototype.times = BigInteger.prototype.multiply;\r\n\r\n    function multiplySmallAndArray(a, b, sign) { // a >= 0\r\n        if (a < BASE) {\r\n            return new BigInteger(multiplySmall(b, a), sign);\r\n        }\r\n        return new BigInteger(multiplyLong(b, smallToArray(a)), sign);\r\n    }\r\n    SmallInteger.prototype._multiplyBySmall = function (a) {\r\n        if (isPrecise(a.value * this.value)) {\r\n            return new SmallInteger(a.value * this.value);\r\n        }\r\n        return multiplySmallAndArray(Math.abs(a.value), smallToArray(Math.abs(this.value)), this.sign !== a.sign);\r\n    };\r\n    BigInteger.prototype._multiplyBySmall = function (a) {\r\n        if (a.value === 0) return Integer[0];\r\n        if (a.value === 1) return this;\r\n        if (a.value === -1) return this.negate();\r\n        return multiplySmallAndArray(Math.abs(a.value), this.value, this.sign !== a.sign);\r\n    };\r\n    SmallInteger.prototype.multiply = function (v) {\r\n        return parseValue(v)._multiplyBySmall(this);\r\n    };\r\n    SmallInteger.prototype.times = SmallInteger.prototype.multiply;\r\n\r\n    NativeBigInt.prototype.multiply = function (v) {\r\n        return new NativeBigInt(this.value * parseValue(v).value);\r\n    }\r\n    NativeBigInt.prototype.times = NativeBigInt.prototype.multiply;\r\n\r\n    function square(a) {\r\n        //console.assert(2 * BASE * BASE < MAX_INT);\r\n        var l = a.length,\r\n            r = createArray(l + l),\r\n            base = BASE,\r\n            product, carry, i, a_i, a_j;\r\n        for (i = 0; i < l; i++) {\r\n            a_i = a[i];\r\n            carry = 0 - a_i * a_i;\r\n            for (var j = i; j < l; j++) {\r\n                a_j = a[j];\r\n                product = 2 * (a_i * a_j) + r[i + j] + carry;\r\n                carry = Math.floor(product / base);\r\n                r[i + j] = product - carry * base;\r\n            }\r\n            r[i + l] = carry;\r\n        }\r\n        trim(r);\r\n        return r;\r\n    }\r\n\r\n    BigInteger.prototype.square = function () {\r\n        return new BigInteger(square(this.value), false);\r\n    };\r\n\r\n    SmallInteger.prototype.square = function () {\r\n        var value = this.value * this.value;\r\n        if (isPrecise(value)) return new SmallInteger(value);\r\n        return new BigInteger(square(smallToArray(Math.abs(this.value))), false);\r\n    };\r\n\r\n    NativeBigInt.prototype.square = function (v) {\r\n        return new NativeBigInt(this.value * this.value);\r\n    }\r\n\r\n    function divMod1(a, b) { // Left over from previous version. Performs faster than divMod2 on smaller input sizes.\r\n        var a_l = a.length,\r\n            b_l = b.length,\r\n            base = BASE,\r\n            result = createArray(b.length),\r\n            divisorMostSignificantDigit = b[b_l - 1],\r\n            // normalization\r\n            lambda = Math.ceil(base / (2 * divisorMostSignificantDigit)),\r\n            remainder = multiplySmall(a, lambda),\r\n            divisor = multiplySmall(b, lambda),\r\n            quotientDigit, shift, carry, borrow, i, l, q;\r\n        if (remainder.length <= a_l) remainder.push(0);\r\n        divisor.push(0);\r\n        divisorMostSignificantDigit = divisor[b_l - 1];\r\n        for (shift = a_l - b_l; shift >= 0; shift--) {\r\n            quotientDigit = base - 1;\r\n            if (remainder[shift + b_l] !== divisorMostSignificantDigit) {\r\n                quotientDigit = Math.floor((remainder[shift + b_l] * base + remainder[shift + b_l - 1]) / divisorMostSignificantDigit);\r\n            }\r\n            // quotientDigit <= base - 1\r\n            carry = 0;\r\n            borrow = 0;\r\n            l = divisor.length;\r\n            for (i = 0; i < l; i++) {\r\n                carry += quotientDigit * divisor[i];\r\n                q = Math.floor(carry / base);\r\n                borrow += remainder[shift + i] - (carry - q * base);\r\n                carry = q;\r\n                if (borrow < 0) {\r\n                    remainder[shift + i] = borrow + base;\r\n                    borrow = -1;\r\n                } else {\r\n                    remainder[shift + i] = borrow;\r\n                    borrow = 0;\r\n                }\r\n            }\r\n            while (borrow !== 0) {\r\n                quotientDigit -= 1;\r\n                carry = 0;\r\n                for (i = 0; i < l; i++) {\r\n                    carry += remainder[shift + i] - base + divisor[i];\r\n                    if (carry < 0) {\r\n                        remainder[shift + i] = carry + base;\r\n                        carry = 0;\r\n                    } else {\r\n                        remainder[shift + i] = carry;\r\n                        carry = 1;\r\n                    }\r\n                }\r\n                borrow += carry;\r\n            }\r\n            result[shift] = quotientDigit;\r\n        }\r\n        // denormalization\r\n        remainder = divModSmall(remainder, lambda)[0];\r\n        return [arrayToSmall(result), arrayToSmall(remainder)];\r\n    }\r\n\r\n    function divMod2(a, b) { // Implementation idea shamelessly stolen from Silent Matt's library http://silentmatt.com/biginteger/\r\n        // Performs faster than divMod1 on larger input sizes.\r\n        var a_l = a.length,\r\n            b_l = b.length,\r\n            result = [],\r\n            part = [],\r\n            base = BASE,\r\n            guess, xlen, highx, highy, check;\r\n        while (a_l) {\r\n            part.unshift(a[--a_l]);\r\n            trim(part);\r\n            if (compareAbs(part, b) < 0) {\r\n                result.push(0);\r\n                continue;\r\n            }\r\n            xlen = part.length;\r\n            highx = part[xlen - 1] * base + part[xlen - 2];\r\n            highy = b[b_l - 1] * base + b[b_l - 2];\r\n            if (xlen > b_l) {\r\n                highx = (highx + 1) * base;\r\n            }\r\n            guess = Math.ceil(highx / highy);\r\n            do {\r\n                check = multiplySmall(b, guess);\r\n                if (compareAbs(check, part) <= 0) break;\r\n                guess--;\r\n            } while (guess);\r\n            result.push(guess);\r\n            part = subtract(part, check);\r\n        }\r\n        result.reverse();\r\n        return [arrayToSmall(result), arrayToSmall(part)];\r\n    }\r\n\r\n    function divModSmall(value, lambda) {\r\n        var length = value.length,\r\n            quotient = createArray(length),\r\n            base = BASE,\r\n            i, q, remainder, divisor;\r\n        remainder = 0;\r\n        for (i = length - 1; i >= 0; --i) {\r\n            divisor = remainder * base + value[i];\r\n            q = truncate(divisor / lambda);\r\n            remainder = divisor - q * lambda;\r\n            quotient[i] = q | 0;\r\n        }\r\n        return [quotient, remainder | 0];\r\n    }\r\n\r\n    function divModAny(self, v) {\r\n        var value, n = parseValue(v);\r\n        if (supportsNativeBigInt) {\r\n            return [new NativeBigInt(self.value / n.value), new NativeBigInt(self.value % n.value)];\r\n        }\r\n        var a = self.value, b = n.value;\r\n        var quotient;\r\n        if (b === 0) throw new Error(\"Cannot divide by zero\");\r\n        if (self.isSmall) {\r\n            if (n.isSmall) {\r\n                return [new SmallInteger(truncate(a / b)), new SmallInteger(a % b)];\r\n            }\r\n            return [Integer[0], self];\r\n        }\r\n        if (n.isSmall) {\r\n            if (b === 1) return [self, Integer[0]];\r\n            if (b == -1) return [self.negate(), Integer[0]];\r\n            var abs = Math.abs(b);\r\n            if (abs < BASE) {\r\n                value = divModSmall(a, abs);\r\n                quotient = arrayToSmall(value[0]);\r\n                var remainder = value[1];\r\n                if (self.sign) remainder = -remainder;\r\n                if (typeof quotient === \"number\") {\r\n                    if (self.sign !== n.sign) quotient = -quotient;\r\n                    return [new SmallInteger(quotient), new SmallInteger(remainder)];\r\n                }\r\n                return [new BigInteger(quotient, self.sign !== n.sign), new SmallInteger(remainder)];\r\n            }\r\n            b = smallToArray(abs);\r\n        }\r\n        var comparison = compareAbs(a, b);\r\n        if (comparison === -1) return [Integer[0], self];\r\n        if (comparison === 0) return [Integer[self.sign === n.sign ? 1 : -1], Integer[0]];\r\n\r\n        // divMod1 is faster on smaller input sizes\r\n        if (a.length + b.length <= 200)\r\n            value = divMod1(a, b);\r\n        else value = divMod2(a, b);\r\n\r\n        quotient = value[0];\r\n        var qSign = self.sign !== n.sign,\r\n            mod = value[1],\r\n            mSign = self.sign;\r\n        if (typeof quotient === \"number\") {\r\n            if (qSign) quotient = -quotient;\r\n            quotient = new SmallInteger(quotient);\r\n        } else quotient = new BigInteger(quotient, qSign);\r\n        if (typeof mod === \"number\") {\r\n            if (mSign) mod = -mod;\r\n            mod = new SmallInteger(mod);\r\n        } else mod = new BigInteger(mod, mSign);\r\n        return [quotient, mod];\r\n    }\r\n\r\n    BigInteger.prototype.divmod = function (v) {\r\n        var result = divModAny(this, v);\r\n        return {\r\n            quotient: result[0],\r\n            remainder: result[1]\r\n        };\r\n    };\r\n    NativeBigInt.prototype.divmod = SmallInteger.prototype.divmod = BigInteger.prototype.divmod;\r\n\r\n\r\n    BigInteger.prototype.divide = function (v) {\r\n        return divModAny(this, v)[0];\r\n    };\r\n    NativeBigInt.prototype.over = NativeBigInt.prototype.divide = function (v) {\r\n        return new NativeBigInt(this.value / parseValue(v).value);\r\n    };\r\n    SmallInteger.prototype.over = SmallInteger.prototype.divide = BigInteger.prototype.over = BigInteger.prototype.divide;\r\n\r\n    BigInteger.prototype.mod = function (v) {\r\n        return divModAny(this, v)[1];\r\n    };\r\n    NativeBigInt.prototype.mod = NativeBigInt.prototype.remainder = function (v) {\r\n        return new NativeBigInt(this.value % parseValue(v).value);\r\n    };\r\n    SmallInteger.prototype.remainder = SmallInteger.prototype.mod = BigInteger.prototype.remainder = BigInteger.prototype.mod;\r\n\r\n    BigInteger.prototype.pow = function (v) {\r\n        var n = parseValue(v),\r\n            a = this.value,\r\n            b = n.value,\r\n            value, x, y;\r\n        if (b === 0) return Integer[1];\r\n        if (a === 0) return Integer[0];\r\n        if (a === 1) return Integer[1];\r\n        if (a === -1) return n.isEven() ? Integer[1] : Integer[-1];\r\n        if (n.sign) {\r\n            return Integer[0];\r\n        }\r\n        if (!n.isSmall) throw new Error(\"The exponent \" + n.toString() + \" is too large.\");\r\n        if (this.isSmall) {\r\n            if (isPrecise(value = Math.pow(a, b)))\r\n                return new SmallInteger(truncate(value));\r\n        }\r\n        x = this;\r\n        y = Integer[1];\r\n        while (true) {\r\n            if (b & 1 === 1) {\r\n                y = y.times(x);\r\n                --b;\r\n            }\r\n            if (b === 0) break;\r\n            b /= 2;\r\n            x = x.square();\r\n        }\r\n        return y;\r\n    };\r\n    SmallInteger.prototype.pow = BigInteger.prototype.pow;\r\n\r\n    NativeBigInt.prototype.pow = function (v) {\r\n        var n = parseValue(v);\r\n        var a = this.value, b = n.value;\r\n        var _0 = BigInt(0), _1 = BigInt(1), _2 = BigInt(2);\r\n        if (b === _0) return Integer[1];\r\n        if (a === _0) return Integer[0];\r\n        if (a === _1) return Integer[1];\r\n        if (a === BigInt(-1)) return n.isEven() ? Integer[1] : Integer[-1];\r\n        if (n.isNegative()) return new NativeBigInt(_0);\r\n        var x = this;\r\n        var y = Integer[1];\r\n        while (true) {\r\n            if ((b & _1) === _1) {\r\n                y = y.times(x);\r\n                --b;\r\n            }\r\n            if (b === _0) break;\r\n            b /= _2;\r\n            x = x.square();\r\n        }\r\n        return y;\r\n    }\r\n\r\n    BigInteger.prototype.modPow = function (exp, mod) {\r\n        exp = parseValue(exp);\r\n        mod = parseValue(mod);\r\n        if (mod.isZero()) throw new Error(\"Cannot take modPow with modulus 0\");\r\n        var r = Integer[1],\r\n            base = this.mod(mod);\r\n        if (exp.isNegative()) {\r\n            exp = exp.multiply(Integer[-1]);\r\n            base = base.modInv(mod);\r\n        }\r\n        while (exp.isPositive()) {\r\n            if (base.isZero()) return Integer[0];\r\n            if (exp.isOdd()) r = r.multiply(base).mod(mod);\r\n            exp = exp.divide(2);\r\n            base = base.square().mod(mod);\r\n        }\r\n        return r;\r\n    };\r\n    NativeBigInt.prototype.modPow = SmallInteger.prototype.modPow = BigInteger.prototype.modPow;\r\n\r\n    function compareAbs(a, b) {\r\n        if (a.length !== b.length) {\r\n            return a.length > b.length ? 1 : -1;\r\n        }\r\n        for (var i = a.length - 1; i >= 0; i--) {\r\n            if (a[i] !== b[i]) return a[i] > b[i] ? 1 : -1;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    BigInteger.prototype.compareAbs = function (v) {\r\n        var n = parseValue(v),\r\n            a = this.value,\r\n            b = n.value;\r\n        if (n.isSmall) return 1;\r\n        return compareAbs(a, b);\r\n    };\r\n    SmallInteger.prototype.compareAbs = function (v) {\r\n        var n = parseValue(v),\r\n            a = Math.abs(this.value),\r\n            b = n.value;\r\n        if (n.isSmall) {\r\n            b = Math.abs(b);\r\n            return a === b ? 0 : a > b ? 1 : -1;\r\n        }\r\n        return -1;\r\n    };\r\n    NativeBigInt.prototype.compareAbs = function (v) {\r\n        var a = this.value;\r\n        var b = parseValue(v).value;\r\n        a = a >= 0 ? a : -a;\r\n        b = b >= 0 ? b : -b;\r\n        return a === b ? 0 : a > b ? 1 : -1;\r\n    }\r\n\r\n    BigInteger.prototype.compare = function (v) {\r\n        // See discussion about comparison with Infinity:\r\n        // https://github.com/peterolson/BigInteger.js/issues/61\r\n        if (v === Infinity) {\r\n            return -1;\r\n        }\r\n        if (v === -Infinity) {\r\n            return 1;\r\n        }\r\n\r\n        var n = parseValue(v),\r\n            a = this.value,\r\n            b = n.value;\r\n        if (this.sign !== n.sign) {\r\n            return n.sign ? 1 : -1;\r\n        }\r\n        if (n.isSmall) {\r\n            return this.sign ? -1 : 1;\r\n        }\r\n        return compareAbs(a, b) * (this.sign ? -1 : 1);\r\n    };\r\n    BigInteger.prototype.compareTo = BigInteger.prototype.compare;\r\n\r\n    SmallInteger.prototype.compare = function (v) {\r\n        if (v === Infinity) {\r\n            return -1;\r\n        }\r\n        if (v === -Infinity) {\r\n            return 1;\r\n        }\r\n\r\n        var n = parseValue(v),\r\n            a = this.value,\r\n            b = n.value;\r\n        if (n.isSmall) {\r\n            return a == b ? 0 : a > b ? 1 : -1;\r\n        }\r\n        if (a < 0 !== n.sign) {\r\n            return a < 0 ? -1 : 1;\r\n        }\r\n        return a < 0 ? 1 : -1;\r\n    };\r\n    SmallInteger.prototype.compareTo = SmallInteger.prototype.compare;\r\n\r\n    NativeBigInt.prototype.compare = function (v) {\r\n        if (v === Infinity) {\r\n            return -1;\r\n        }\r\n        if (v === -Infinity) {\r\n            return 1;\r\n        }\r\n        var a = this.value;\r\n        var b = parseValue(v).value;\r\n        return a === b ? 0 : a > b ? 1 : -1;\r\n    }\r\n    NativeBigInt.prototype.compareTo = NativeBigInt.prototype.compare;\r\n\r\n    BigInteger.prototype.equals = function (v) {\r\n        return this.compare(v) === 0;\r\n    };\r\n    NativeBigInt.prototype.eq = NativeBigInt.prototype.equals = SmallInteger.prototype.eq = SmallInteger.prototype.equals = BigInteger.prototype.eq = BigInteger.prototype.equals;\r\n\r\n    BigInteger.prototype.notEquals = function (v) {\r\n        return this.compare(v) !== 0;\r\n    };\r\n    NativeBigInt.prototype.neq = NativeBigInt.prototype.notEquals = SmallInteger.prototype.neq = SmallInteger.prototype.notEquals = BigInteger.prototype.neq = BigInteger.prototype.notEquals;\r\n\r\n    BigInteger.prototype.greater = function (v) {\r\n        return this.compare(v) > 0;\r\n    };\r\n    NativeBigInt.prototype.gt = NativeBigInt.prototype.greater = SmallInteger.prototype.gt = SmallInteger.prototype.greater = BigInteger.prototype.gt = BigInteger.prototype.greater;\r\n\r\n    BigInteger.prototype.lesser = function (v) {\r\n        return this.compare(v) < 0;\r\n    };\r\n    NativeBigInt.prototype.lt = NativeBigInt.prototype.lesser = SmallInteger.prototype.lt = SmallInteger.prototype.lesser = BigInteger.prototype.lt = BigInteger.prototype.lesser;\r\n\r\n    BigInteger.prototype.greaterOrEquals = function (v) {\r\n        return this.compare(v) >= 0;\r\n    };\r\n    NativeBigInt.prototype.geq = NativeBigInt.prototype.greaterOrEquals = SmallInteger.prototype.geq = SmallInteger.prototype.greaterOrEquals = BigInteger.prototype.geq = BigInteger.prototype.greaterOrEquals;\r\n\r\n    BigInteger.prototype.lesserOrEquals = function (v) {\r\n        return this.compare(v) <= 0;\r\n    };\r\n    NativeBigInt.prototype.leq = NativeBigInt.prototype.lesserOrEquals = SmallInteger.prototype.leq = SmallInteger.prototype.lesserOrEquals = BigInteger.prototype.leq = BigInteger.prototype.lesserOrEquals;\r\n\r\n    BigInteger.prototype.isEven = function () {\r\n        return (this.value[0] & 1) === 0;\r\n    };\r\n    SmallInteger.prototype.isEven = function () {\r\n        return (this.value & 1) === 0;\r\n    };\r\n    NativeBigInt.prototype.isEven = function () {\r\n        return (this.value & BigInt(1)) === BigInt(0);\r\n    }\r\n\r\n    BigInteger.prototype.isOdd = function () {\r\n        return (this.value[0] & 1) === 1;\r\n    };\r\n    SmallInteger.prototype.isOdd = function () {\r\n        return (this.value & 1) === 1;\r\n    };\r\n    NativeBigInt.prototype.isOdd = function () {\r\n        return (this.value & BigInt(1)) === BigInt(1);\r\n    }\r\n\r\n    BigInteger.prototype.isPositive = function () {\r\n        return !this.sign;\r\n    };\r\n    SmallInteger.prototype.isPositive = function () {\r\n        return this.value > 0;\r\n    };\r\n    NativeBigInt.prototype.isPositive = SmallInteger.prototype.isPositive;\r\n\r\n    BigInteger.prototype.isNegative = function () {\r\n        return this.sign;\r\n    };\r\n    SmallInteger.prototype.isNegative = function () {\r\n        return this.value < 0;\r\n    };\r\n    NativeBigInt.prototype.isNegative = SmallInteger.prototype.isNegative;\r\n\r\n    BigInteger.prototype.isUnit = function () {\r\n        return false;\r\n    };\r\n    SmallInteger.prototype.isUnit = function () {\r\n        return Math.abs(this.value) === 1;\r\n    };\r\n    NativeBigInt.prototype.isUnit = function () {\r\n        return this.abs().value === BigInt(1);\r\n    }\r\n\r\n    BigInteger.prototype.isZero = function () {\r\n        return false;\r\n    };\r\n    SmallInteger.prototype.isZero = function () {\r\n        return this.value === 0;\r\n    };\r\n    NativeBigInt.prototype.isZero = function () {\r\n        return this.value === BigInt(0);\r\n    }\r\n\r\n    BigInteger.prototype.isDivisibleBy = function (v) {\r\n        var n = parseValue(v);\r\n        if (n.isZero()) return false;\r\n        if (n.isUnit()) return true;\r\n        if (n.compareAbs(2) === 0) return this.isEven();\r\n        return this.mod(n).isZero();\r\n    };\r\n    NativeBigInt.prototype.isDivisibleBy = SmallInteger.prototype.isDivisibleBy = BigInteger.prototype.isDivisibleBy;\r\n\r\n    function isBasicPrime(v) {\r\n        var n = v.abs();\r\n        if (n.isUnit()) return false;\r\n        if (n.equals(2) || n.equals(3) || n.equals(5)) return true;\r\n        if (n.isEven() || n.isDivisibleBy(3) || n.isDivisibleBy(5)) return false;\r\n        if (n.lesser(49)) return true;\r\n        // we don't know if it's prime: let the other functions figure it out\r\n    }\r\n\r\n    function millerRabinTest(n, a) {\r\n        var nPrev = n.prev(),\r\n            b = nPrev,\r\n            r = 0,\r\n            d, t, i, x;\r\n        while (b.isEven()) b = b.divide(2), r++;\r\n        next: for (i = 0; i < a.length; i++) {\r\n            if (n.lesser(a[i])) continue;\r\n            x = bigInt(a[i]).modPow(b, n);\r\n            if (x.isUnit() || x.equals(nPrev)) continue;\r\n            for (d = r - 1; d != 0; d--) {\r\n                x = x.square().mod(n);\r\n                if (x.isUnit()) return false;\r\n                if (x.equals(nPrev)) continue next;\r\n            }\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // Set \"strict\" to true to force GRH-supported lower bound of 2*log(N)^2\r\n    BigInteger.prototype.isPrime = function (strict) {\r\n        var isPrime = isBasicPrime(this);\r\n        if (isPrime !== undefined) return isPrime;\r\n        var n = this.abs();\r\n        var bits = n.bitLength();\r\n        if (bits <= 64)\r\n            return millerRabinTest(n, [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]);\r\n        var logN = Math.log(2) * bits.toJSNumber();\r\n        var t = Math.ceil((strict === true) ? (2 * Math.pow(logN, 2)) : logN);\r\n        for (var a = [], i = 0; i < t; i++) {\r\n            a.push(bigInt(i + 2));\r\n        }\r\n        return millerRabinTest(n, a);\r\n    };\r\n    NativeBigInt.prototype.isPrime = SmallInteger.prototype.isPrime = BigInteger.prototype.isPrime;\r\n\r\n    BigInteger.prototype.isProbablePrime = function (iterations, rng) {\r\n        var isPrime = isBasicPrime(this);\r\n        if (isPrime !== undefined) return isPrime;\r\n        var n = this.abs();\r\n        var t = iterations === undefined ? 5 : iterations;\r\n        for (var a = [], i = 0; i < t; i++) {\r\n            a.push(bigInt.randBetween(2, n.minus(2), rng));\r\n        }\r\n        return millerRabinTest(n, a);\r\n    };\r\n    NativeBigInt.prototype.isProbablePrime = SmallInteger.prototype.isProbablePrime = BigInteger.prototype.isProbablePrime;\r\n\r\n    BigInteger.prototype.modInv = function (n) {\r\n        var t = bigInt.zero, newT = bigInt.one, r = parseValue(n), newR = this.abs(), q, lastT, lastR;\r\n        while (!newR.isZero()) {\r\n            q = r.divide(newR);\r\n            lastT = t;\r\n            lastR = r;\r\n            t = newT;\r\n            r = newR;\r\n            newT = lastT.subtract(q.multiply(newT));\r\n            newR = lastR.subtract(q.multiply(newR));\r\n        }\r\n        if (!r.isUnit()) throw new Error(this.toString() + \" and \" + n.toString() + \" are not co-prime\");\r\n        if (t.compare(0) === -1) {\r\n            t = t.add(n);\r\n        }\r\n        if (this.isNegative()) {\r\n            return t.negate();\r\n        }\r\n        return t;\r\n    };\r\n\r\n    NativeBigInt.prototype.modInv = SmallInteger.prototype.modInv = BigInteger.prototype.modInv;\r\n\r\n    BigInteger.prototype.next = function () {\r\n        var value = this.value;\r\n        if (this.sign) {\r\n            return subtractSmall(value, 1, this.sign);\r\n        }\r\n        return new BigInteger(addSmall(value, 1), this.sign);\r\n    };\r\n    SmallInteger.prototype.next = function () {\r\n        var value = this.value;\r\n        if (value + 1 < MAX_INT) return new SmallInteger(value + 1);\r\n        return new BigInteger(MAX_INT_ARR, false);\r\n    };\r\n    NativeBigInt.prototype.next = function () {\r\n        return new NativeBigInt(this.value + BigInt(1));\r\n    }\r\n\r\n    BigInteger.prototype.prev = function () {\r\n        var value = this.value;\r\n        if (this.sign) {\r\n            return new BigInteger(addSmall(value, 1), true);\r\n        }\r\n        return subtractSmall(value, 1, this.sign);\r\n    };\r\n    SmallInteger.prototype.prev = function () {\r\n        var value = this.value;\r\n        if (value - 1 > -MAX_INT) return new SmallInteger(value - 1);\r\n        return new BigInteger(MAX_INT_ARR, true);\r\n    };\r\n    NativeBigInt.prototype.prev = function () {\r\n        return new NativeBigInt(this.value - BigInt(1));\r\n    }\r\n\r\n    var powersOfTwo = [1];\r\n    while (2 * powersOfTwo[powersOfTwo.length - 1] <= BASE) powersOfTwo.push(2 * powersOfTwo[powersOfTwo.length - 1]);\r\n    var powers2Length = powersOfTwo.length, highestPower2 = powersOfTwo[powers2Length - 1];\r\n\r\n    function shift_isSmall(n) {\r\n        return Math.abs(n) <= BASE;\r\n    }\r\n\r\n    BigInteger.prototype.shiftLeft = function (v) {\r\n        var n = parseValue(v).toJSNumber();\r\n        if (!shift_isSmall(n)) {\r\n            throw new Error(String(n) + \" is too large for shifting.\");\r\n        }\r\n        if (n < 0) return this.shiftRight(-n);\r\n        var result = this;\r\n        if (result.isZero()) return result;\r\n        while (n >= powers2Length) {\r\n            result = result.multiply(highestPower2);\r\n            n -= powers2Length - 1;\r\n        }\r\n        return result.multiply(powersOfTwo[n]);\r\n    };\r\n    NativeBigInt.prototype.shiftLeft = SmallInteger.prototype.shiftLeft = BigInteger.prototype.shiftLeft;\r\n\r\n    BigInteger.prototype.shiftRight = function (v) {\r\n        var remQuo;\r\n        var n = parseValue(v).toJSNumber();\r\n        if (!shift_isSmall(n)) {\r\n            throw new Error(String(n) + \" is too large for shifting.\");\r\n        }\r\n        if (n < 0) return this.shiftLeft(-n);\r\n        var result = this;\r\n        while (n >= powers2Length) {\r\n            if (result.isZero() || (result.isNegative() && result.isUnit())) return result;\r\n            remQuo = divModAny(result, highestPower2);\r\n            result = remQuo[1].isNegative() ? remQuo[0].prev() : remQuo[0];\r\n            n -= powers2Length - 1;\r\n        }\r\n        remQuo = divModAny(result, powersOfTwo[n]);\r\n        return remQuo[1].isNegative() ? remQuo[0].prev() : remQuo[0];\r\n    };\r\n    NativeBigInt.prototype.shiftRight = SmallInteger.prototype.shiftRight = BigInteger.prototype.shiftRight;\r\n\r\n    function bitwise(x, y, fn) {\r\n        y = parseValue(y);\r\n        var xSign = x.isNegative(), ySign = y.isNegative();\r\n        var xRem = xSign ? x.not() : x,\r\n            yRem = ySign ? y.not() : y;\r\n        var xDigit = 0, yDigit = 0;\r\n        var xDivMod = null, yDivMod = null;\r\n        var result = [];\r\n        while (!xRem.isZero() || !yRem.isZero()) {\r\n            xDivMod = divModAny(xRem, highestPower2);\r\n            xDigit = xDivMod[1].toJSNumber();\r\n            if (xSign) {\r\n                xDigit = highestPower2 - 1 - xDigit; // two's complement for negative numbers\r\n            }\r\n\r\n            yDivMod = divModAny(yRem, highestPower2);\r\n            yDigit = yDivMod[1].toJSNumber();\r\n            if (ySign) {\r\n                yDigit = highestPower2 - 1 - yDigit; // two's complement for negative numbers\r\n            }\r\n\r\n            xRem = xDivMod[0];\r\n            yRem = yDivMod[0];\r\n            result.push(fn(xDigit, yDigit));\r\n        }\r\n        var sum = fn(xSign ? 1 : 0, ySign ? 1 : 0) !== 0 ? bigInt(-1) : bigInt(0);\r\n        for (var i = result.length - 1; i >= 0; i -= 1) {\r\n            sum = sum.multiply(highestPower2).add(bigInt(result[i]));\r\n        }\r\n        return sum;\r\n    }\r\n\r\n    BigInteger.prototype.not = function () {\r\n        return this.negate().prev();\r\n    };\r\n    NativeBigInt.prototype.not = SmallInteger.prototype.not = BigInteger.prototype.not;\r\n\r\n    BigInteger.prototype.and = function (n) {\r\n        return bitwise(this, n, function (a, b) { return a & b; });\r\n    };\r\n    NativeBigInt.prototype.and = SmallInteger.prototype.and = BigInteger.prototype.and;\r\n\r\n    BigInteger.prototype.or = function (n) {\r\n        return bitwise(this, n, function (a, b) { return a | b; });\r\n    };\r\n    NativeBigInt.prototype.or = SmallInteger.prototype.or = BigInteger.prototype.or;\r\n\r\n    BigInteger.prototype.xor = function (n) {\r\n        return bitwise(this, n, function (a, b) { return a ^ b; });\r\n    };\r\n    NativeBigInt.prototype.xor = SmallInteger.prototype.xor = BigInteger.prototype.xor;\r\n\r\n    var LOBMASK_I = 1 << 30, LOBMASK_BI = (BASE & -BASE) * (BASE & -BASE) | LOBMASK_I;\r\n    function roughLOB(n) { // get lowestOneBit (rough)\r\n        // SmallInteger: return Min(lowestOneBit(n), 1 << 30)\r\n        // BigInteger: return Min(lowestOneBit(n), 1 << 14) [BASE=1e7]\r\n        var v = n.value,\r\n            x = typeof v === \"number\" ? v | LOBMASK_I :\r\n                typeof v === \"bigint\" ? v | BigInt(LOBMASK_I) :\r\n                    v[0] + v[1] * BASE | LOBMASK_BI;\r\n        return x & -x;\r\n    }\r\n\r\n    function integerLogarithm(value, base) {\r\n        if (base.compareTo(value) <= 0) {\r\n            var tmp = integerLogarithm(value, base.square(base));\r\n            var p = tmp.p;\r\n            var e = tmp.e;\r\n            var t = p.multiply(base);\r\n            return t.compareTo(value) <= 0 ? { p: t, e: e * 2 + 1 } : { p: p, e: e * 2 };\r\n        }\r\n        return { p: bigInt(1), e: 0 };\r\n    }\r\n\r\n    BigInteger.prototype.bitLength = function () {\r\n        var n = this;\r\n        if (n.compareTo(bigInt(0)) < 0) {\r\n            n = n.negate().subtract(bigInt(1));\r\n        }\r\n        if (n.compareTo(bigInt(0)) === 0) {\r\n            return bigInt(0);\r\n        }\r\n        return bigInt(integerLogarithm(n, bigInt(2)).e).add(bigInt(1));\r\n    }\r\n    NativeBigInt.prototype.bitLength = SmallInteger.prototype.bitLength = BigInteger.prototype.bitLength;\r\n\r\n    function max(a, b) {\r\n        a = parseValue(a);\r\n        b = parseValue(b);\r\n        return a.greater(b) ? a : b;\r\n    }\r\n    function min(a, b) {\r\n        a = parseValue(a);\r\n        b = parseValue(b);\r\n        return a.lesser(b) ? a : b;\r\n    }\r\n    function gcd(a, b) {\r\n        a = parseValue(a).abs();\r\n        b = parseValue(b).abs();\r\n        if (a.equals(b)) return a;\r\n        if (a.isZero()) return b;\r\n        if (b.isZero()) return a;\r\n        var c = Integer[1], d, t;\r\n        while (a.isEven() && b.isEven()) {\r\n            d = min(roughLOB(a), roughLOB(b));\r\n            a = a.divide(d);\r\n            b = b.divide(d);\r\n            c = c.multiply(d);\r\n        }\r\n        while (a.isEven()) {\r\n            a = a.divide(roughLOB(a));\r\n        }\r\n        do {\r\n            while (b.isEven()) {\r\n                b = b.divide(roughLOB(b));\r\n            }\r\n            if (a.greater(b)) {\r\n                t = b; b = a; a = t;\r\n            }\r\n            b = b.subtract(a);\r\n        } while (!b.isZero());\r\n        return c.isUnit() ? a : a.multiply(c);\r\n    }\r\n    function lcm(a, b) {\r\n        a = parseValue(a).abs();\r\n        b = parseValue(b).abs();\r\n        return a.divide(gcd(a, b)).multiply(b);\r\n    }\r\n    function randBetween(a, b, rng) {\r\n        a = parseValue(a);\r\n        b = parseValue(b);\r\n        var usedRNG = rng || Math.random;\r\n        var low = min(a, b), high = max(a, b);\r\n        var range = high.subtract(low).add(1);\r\n        if (range.isSmall) return low.add(Math.floor(usedRNG() * range));\r\n        var digits = toBase(range, BASE).value;\r\n        var result = [], restricted = true;\r\n        for (var i = 0; i < digits.length; i++) {\r\n            var top = restricted ? digits[i] : BASE;\r\n            var digit = truncate(usedRNG() * top);\r\n            result.push(digit);\r\n            if (digit < top) restricted = false;\r\n        }\r\n        return low.add(Integer.fromArray(result, BASE, false));\r\n    }\r\n\r\n    var parseBase = function (text, base, alphabet, caseSensitive) {\r\n        alphabet = alphabet || DEFAULT_ALPHABET;\r\n        text = String(text);\r\n        if (!caseSensitive) {\r\n            text = text.toLowerCase();\r\n            alphabet = alphabet.toLowerCase();\r\n        }\r\n        var length = text.length;\r\n        var i;\r\n        var absBase = Math.abs(base);\r\n        var alphabetValues = {};\r\n        for (i = 0; i < alphabet.length; i++) {\r\n            alphabetValues[alphabet[i]] = i;\r\n        }\r\n        for (i = 0; i < length; i++) {\r\n            var c = text[i];\r\n            if (c === \"-\") continue;\r\n            if (c in alphabetValues) {\r\n                if (alphabetValues[c] >= absBase) {\r\n                    if (c === \"1\" && absBase === 1) continue;\r\n                    throw new Error(c + \" is not a valid digit in base \" + base + \".\");\r\n                }\r\n            }\r\n        }\r\n        base = parseValue(base);\r\n        var digits = [];\r\n        var isNegative = text[0] === \"-\";\r\n        for (i = isNegative ? 1 : 0; i < text.length; i++) {\r\n            var c = text[i];\r\n            if (c in alphabetValues) digits.push(parseValue(alphabetValues[c]));\r\n            else if (c === \"<\") {\r\n                var start = i;\r\n                do { i++; } while (text[i] !== \">\" && i < text.length);\r\n                digits.push(parseValue(text.slice(start + 1, i)));\r\n            }\r\n            else throw new Error(c + \" is not a valid character\");\r\n        }\r\n        return parseBaseFromArray(digits, base, isNegative);\r\n    };\r\n\r\n    function parseBaseFromArray(digits, base, isNegative) {\r\n        var val = Integer[0], pow = Integer[1], i;\r\n        for (i = digits.length - 1; i >= 0; i--) {\r\n            val = val.add(digits[i].times(pow));\r\n            pow = pow.times(base);\r\n        }\r\n        return isNegative ? val.negate() : val;\r\n    }\r\n\r\n    function stringify(digit, alphabet) {\r\n        alphabet = alphabet || DEFAULT_ALPHABET;\r\n        if (digit < alphabet.length) {\r\n            return alphabet[digit];\r\n        }\r\n        return \"<\" + digit + \">\";\r\n    }\r\n\r\n    function toBase(n, base) {\r\n        base = bigInt(base);\r\n        if (base.isZero()) {\r\n            if (n.isZero()) return { value: [0], isNegative: false };\r\n            throw new Error(\"Cannot convert nonzero numbers to base 0.\");\r\n        }\r\n        if (base.equals(-1)) {\r\n            if (n.isZero()) return { value: [0], isNegative: false };\r\n            if (n.isNegative())\r\n                return {\r\n                    value: [].concat.apply([], Array.apply(null, Array(-n.toJSNumber()))\r\n                        .map(Array.prototype.valueOf, [1, 0])\r\n                    ),\r\n                    isNegative: false\r\n                };\r\n\r\n            var arr = Array.apply(null, Array(n.toJSNumber() - 1))\r\n                .map(Array.prototype.valueOf, [0, 1]);\r\n            arr.unshift([1]);\r\n            return {\r\n                value: [].concat.apply([], arr),\r\n                isNegative: false\r\n            };\r\n        }\r\n\r\n        var neg = false;\r\n        if (n.isNegative() && base.isPositive()) {\r\n            neg = true;\r\n            n = n.abs();\r\n        }\r\n        if (base.isUnit()) {\r\n            if (n.isZero()) return { value: [0], isNegative: false };\r\n\r\n            return {\r\n                value: Array.apply(null, Array(n.toJSNumber()))\r\n                    .map(Number.prototype.valueOf, 1),\r\n                isNegative: neg\r\n            };\r\n        }\r\n        var out = [];\r\n        var left = n, divmod;\r\n        while (left.isNegative() || left.compareAbs(base) >= 0) {\r\n            divmod = left.divmod(base);\r\n            left = divmod.quotient;\r\n            var digit = divmod.remainder;\r\n            if (digit.isNegative()) {\r\n                digit = base.minus(digit).abs();\r\n                left = left.next();\r\n            }\r\n            out.push(digit.toJSNumber());\r\n        }\r\n        out.push(left.toJSNumber());\r\n        return { value: out.reverse(), isNegative: neg };\r\n    }\r\n\r\n    function toBaseString(n, base, alphabet) {\r\n        var arr = toBase(n, base);\r\n        return (arr.isNegative ? \"-\" : \"\") + arr.value.map(function (x) {\r\n            return stringify(x, alphabet);\r\n        }).join('');\r\n    }\r\n\r\n    BigInteger.prototype.toArray = function (radix) {\r\n        return toBase(this, radix);\r\n    };\r\n\r\n    SmallInteger.prototype.toArray = function (radix) {\r\n        return toBase(this, radix);\r\n    };\r\n\r\n    NativeBigInt.prototype.toArray = function (radix) {\r\n        return toBase(this, radix);\r\n    };\r\n\r\n    BigInteger.prototype.toString = function (radix, alphabet) {\r\n        if (radix === undefined) radix = 10;\r\n        if (radix !== 10) return toBaseString(this, radix, alphabet);\r\n        var v = this.value, l = v.length, str = String(v[--l]), zeros = \"0000000\", digit;\r\n        while (--l >= 0) {\r\n            digit = String(v[l]);\r\n            str += zeros.slice(digit.length) + digit;\r\n        }\r\n        var sign = this.sign ? \"-\" : \"\";\r\n        return sign + str;\r\n    };\r\n\r\n    SmallInteger.prototype.toString = function (radix, alphabet) {\r\n        if (radix === undefined) radix = 10;\r\n        if (radix != 10) return toBaseString(this, radix, alphabet);\r\n        return String(this.value);\r\n    };\r\n\r\n    NativeBigInt.prototype.toString = SmallInteger.prototype.toString;\r\n\r\n    NativeBigInt.prototype.toJSON = BigInteger.prototype.toJSON = SmallInteger.prototype.toJSON = function () { return this.toString(); }\r\n\r\n    BigInteger.prototype.valueOf = function () {\r\n        return parseInt(this.toString(), 10);\r\n    };\r\n    BigInteger.prototype.toJSNumber = BigInteger.prototype.valueOf;\r\n\r\n    SmallInteger.prototype.valueOf = function () {\r\n        return this.value;\r\n    };\r\n    SmallInteger.prototype.toJSNumber = SmallInteger.prototype.valueOf;\r\n    NativeBigInt.prototype.valueOf = NativeBigInt.prototype.toJSNumber = function () {\r\n        return parseInt(this.toString(), 10);\r\n    }\r\n\r\n    function parseStringValue(v) {\r\n        if (isPrecise(+v)) {\r\n            var x = +v;\r\n            if (x === truncate(x))\r\n                return supportsNativeBigInt ? new NativeBigInt(BigInt(x)) : new SmallInteger(x);\r\n            throw new Error(\"Invalid integer: \" + v);\r\n        }\r\n        var sign = v[0] === \"-\";\r\n        if (sign) v = v.slice(1);\r\n        var split = v.split(/e/i);\r\n        if (split.length > 2) throw new Error(\"Invalid integer: \" + split.join(\"e\"));\r\n        if (split.length === 2) {\r\n            var exp = split[1];\r\n            if (exp[0] === \"+\") exp = exp.slice(1);\r\n            exp = +exp;\r\n            if (exp !== truncate(exp) || !isPrecise(exp)) throw new Error(\"Invalid integer: \" + exp + \" is not a valid exponent.\");\r\n            var text = split[0];\r\n            var decimalPlace = text.indexOf(\".\");\r\n            if (decimalPlace >= 0) {\r\n                exp -= text.length - decimalPlace - 1;\r\n                text = text.slice(0, decimalPlace) + text.slice(decimalPlace + 1);\r\n            }\r\n            if (exp < 0) throw new Error(\"Cannot include negative exponent part for integers\");\r\n            text += (new Array(exp + 1)).join(\"0\");\r\n            v = text;\r\n        }\r\n        var isValid = /^([0-9][0-9]*)$/.test(v);\r\n        if (!isValid) throw new Error(\"Invalid integer: \" + v);\r\n        if (supportsNativeBigInt) {\r\n            return new NativeBigInt(BigInt(sign ? \"-\" + v : v));\r\n        }\r\n        var r = [], max = v.length, l = LOG_BASE, min = max - l;\r\n        while (max > 0) {\r\n            r.push(+v.slice(min, max));\r\n            min -= l;\r\n            if (min < 0) min = 0;\r\n            max -= l;\r\n        }\r\n        trim(r);\r\n        return new BigInteger(r, sign);\r\n    }\r\n\r\n    function parseNumberValue(v) {\r\n        if (supportsNativeBigInt) {\r\n            return new NativeBigInt(BigInt(v));\r\n        }\r\n        if (isPrecise(v)) {\r\n            if (v !== truncate(v)) throw new Error(v + \" is not an integer.\");\r\n            return new SmallInteger(v);\r\n        }\r\n        return parseStringValue(v.toString());\r\n    }\r\n\r\n    function parseValue(v) {\r\n        if (typeof v === \"number\") {\r\n            return parseNumberValue(v);\r\n        }\r\n        if (typeof v === \"string\") {\r\n            return parseStringValue(v);\r\n        }\r\n        if (typeof v === \"bigint\") {\r\n            return new NativeBigInt(v);\r\n        }\r\n        return v;\r\n    }\r\n    // Pre-define numbers in range [-999,999]\r\n    for (var i = 0; i < 1000; i++) {\r\n        Integer[i] = parseValue(i);\r\n        if (i > 0) Integer[-i] = parseValue(-i);\r\n    }\r\n    // Backwards compatibility\r\n    Integer.one = Integer[1];\r\n    Integer.zero = Integer[0];\r\n    Integer.minusOne = Integer[-1];\r\n    Integer.max = max;\r\n    Integer.min = min;\r\n    Integer.gcd = gcd;\r\n    Integer.lcm = lcm;\r\n    Integer.isInstance = function (x) { return x instanceof BigInteger || x instanceof SmallInteger || x instanceof NativeBigInt; };\r\n    Integer.randBetween = randBetween;\r\n\r\n    Integer.fromArray = function (digits, base, isNegative) {\r\n        return parseBaseFromArray(digits.map(parseValue), parseValue(base || 10), isNegative);\r\n    };\r\n\r\n    return Integer;\r\n})();\r\n\r\n// Node.js check\r\nif ( true && module.hasOwnProperty(\"exports\")) {\r\n    module.exports = bigInt;\r\n}\r\n\r\n//amd check\r\nif (true) {\r\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\r\n        return bigInt;\r\n    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n}\r\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/big-integer/BigInteger.js\n");

/***/ }),

/***/ "./node_modules/pako/index.js":
/*!************************************!*\
  !*** ./node_modules/pako/index.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("// Top level file is just a mixin of submodules & constants\n\n\nvar assign    = __webpack_require__(/*! ./lib/utils/common */ \"./node_modules/pako/lib/utils/common.js\").assign;\n\nvar deflate   = __webpack_require__(/*! ./lib/deflate */ \"./node_modules/pako/lib/deflate.js\");\nvar inflate   = __webpack_require__(/*! ./lib/inflate */ \"./node_modules/pako/lib/inflate.js\");\nvar constants = __webpack_require__(/*! ./lib/zlib/constants */ \"./node_modules/pako/lib/zlib/constants.js\");\n\nvar pako = {};\n\nassign(pako, deflate, inflate, constants);\n\nmodule.exports = pako;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcGFrby9pbmRleC5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL1RlbGVncmFtanMvLi9ub2RlX21vZHVsZXMvcGFrby9pbmRleC5qcz9kN2FjIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFRvcCBsZXZlbCBmaWxlIGlzIGp1c3QgYSBtaXhpbiBvZiBzdWJtb2R1bGVzICYgY29uc3RhbnRzXG4ndXNlIHN0cmljdCc7XG5cbnZhciBhc3NpZ24gICAgPSByZXF1aXJlKCcuL2xpYi91dGlscy9jb21tb24nKS5hc3NpZ247XG5cbnZhciBkZWZsYXRlICAgPSByZXF1aXJlKCcuL2xpYi9kZWZsYXRlJyk7XG52YXIgaW5mbGF0ZSAgID0gcmVxdWlyZSgnLi9saWIvaW5mbGF0ZScpO1xudmFyIGNvbnN0YW50cyA9IHJlcXVpcmUoJy4vbGliL3psaWIvY29uc3RhbnRzJyk7XG5cbnZhciBwYWtvID0ge307XG5cbmFzc2lnbihwYWtvLCBkZWZsYXRlLCBpbmZsYXRlLCBjb25zdGFudHMpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHBha287XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/pako/index.js\n");

/***/ }),

/***/ "./node_modules/pako/lib/deflate.js":
/*!******************************************!*\
  !*** ./node_modules/pako/lib/deflate.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n\nvar zlib_deflate = __webpack_require__(/*! ./zlib/deflate */ \"./node_modules/pako/lib/zlib/deflate.js\");\nvar utils        = __webpack_require__(/*! ./utils/common */ \"./node_modules/pako/lib/utils/common.js\");\nvar strings      = __webpack_require__(/*! ./utils/strings */ \"./node_modules/pako/lib/utils/strings.js\");\nvar msg          = __webpack_require__(/*! ./zlib/messages */ \"./node_modules/pako/lib/zlib/messages.js\");\nvar ZStream      = __webpack_require__(/*! ./zlib/zstream */ \"./node_modules/pako/lib/zlib/zstream.js\");\n\nvar toString = Object.prototype.toString;\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nvar Z_NO_FLUSH      = 0;\nvar Z_FINISH        = 4;\n\nvar Z_OK            = 0;\nvar Z_STREAM_END    = 1;\nvar Z_SYNC_FLUSH    = 2;\n\nvar Z_DEFAULT_COMPRESSION = -1;\n\nvar Z_DEFAULT_STRATEGY    = 0;\n\nvar Z_DEFLATED  = 8;\n\n/* ===========================================================================*/\n\n\n/**\n * class Deflate\n *\n * Generic JS-style wrapper for zlib calls. If you don't need\n * streaming behaviour - use more simple functions: [[deflate]],\n * [[deflateRaw]] and [[gzip]].\n **/\n\n/* internal\n * Deflate.chunks -> Array\n *\n * Chunks of output data, if [[Deflate#onData]] not overridden.\n **/\n\n/**\n * Deflate.result -> Uint8Array|Array\n *\n * Compressed result, generated by default [[Deflate#onData]]\n * and [[Deflate#onEnd]] handlers. Filled after you push last chunk\n * (call [[Deflate#push]] with `Z_FINISH` / `true` param)  or if you\n * push a chunk with explicit flush (call [[Deflate#push]] with\n * `Z_SYNC_FLUSH` param).\n **/\n\n/**\n * Deflate.err -> Number\n *\n * Error code after deflate finished. 0 (Z_OK) on success.\n * You will not need it in real life, because deflate errors\n * are possible only on wrong options or bad `onData` / `onEnd`\n * custom handlers.\n **/\n\n/**\n * Deflate.msg -> String\n *\n * Error message, if [[Deflate.err]] != 0\n **/\n\n\n/**\n * new Deflate(options)\n * - options (Object): zlib deflate options.\n *\n * Creates new deflator instance with specified params. Throws exception\n * on bad params. Supported options:\n *\n * - `level`\n * - `windowBits`\n * - `memLevel`\n * - `strategy`\n * - `dictionary`\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Additional options, for internal needs:\n *\n * - `chunkSize` - size of generated data chunks (16K by default)\n * - `raw` (Boolean) - do raw deflate\n * - `gzip` (Boolean) - create gzip wrapper\n * - `to` (String) - if equal to 'string', then result will be \"binary string\"\n *    (each char code [0..255])\n * - `header` (Object) - custom header for gzip\n *   - `text` (Boolean) - true if compressed data believed to be text\n *   - `time` (Number) - modification time, unix timestamp\n *   - `os` (Number) - operation system code\n *   - `extra` (Array) - array of bytes with extra data (max 65536)\n *   - `name` (String) - file name (binary string)\n *   - `comment` (String) - comment (binary string)\n *   - `hcrc` (Boolean) - true if header crc should be added\n *\n * ##### Example:\n *\n * ```javascript\n * var pako = require('pako')\n *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])\n *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);\n *\n * var deflate = new pako.Deflate({ level: 3});\n *\n * deflate.push(chunk1, false);\n * deflate.push(chunk2, true);  // true -> last chunk\n *\n * if (deflate.err) { throw new Error(deflate.err); }\n *\n * console.log(deflate.result);\n * ```\n **/\nfunction Deflate(options) {\n  if (!(this instanceof Deflate)) return new Deflate(options);\n\n  this.options = utils.assign({\n    level: Z_DEFAULT_COMPRESSION,\n    method: Z_DEFLATED,\n    chunkSize: 16384,\n    windowBits: 15,\n    memLevel: 8,\n    strategy: Z_DEFAULT_STRATEGY,\n    to: ''\n  }, options || {});\n\n  var opt = this.options;\n\n  if (opt.raw && (opt.windowBits > 0)) {\n    opt.windowBits = -opt.windowBits;\n  }\n\n  else if (opt.gzip && (opt.windowBits > 0) && (opt.windowBits < 16)) {\n    opt.windowBits += 16;\n  }\n\n  this.err    = 0;      // error code, if happens (0 = Z_OK)\n  this.msg    = '';     // error message\n  this.ended  = false;  // used to avoid multiple onEnd() calls\n  this.chunks = [];     // chunks of compressed data\n\n  this.strm = new ZStream();\n  this.strm.avail_out = 0;\n\n  var status = zlib_deflate.deflateInit2(\n    this.strm,\n    opt.level,\n    opt.method,\n    opt.windowBits,\n    opt.memLevel,\n    opt.strategy\n  );\n\n  if (status !== Z_OK) {\n    throw new Error(msg[status]);\n  }\n\n  if (opt.header) {\n    zlib_deflate.deflateSetHeader(this.strm, opt.header);\n  }\n\n  if (opt.dictionary) {\n    var dict;\n    // Convert data if needed\n    if (typeof opt.dictionary === 'string') {\n      // If we need to compress text, change encoding to utf8.\n      dict = strings.string2buf(opt.dictionary);\n    } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {\n      dict = new Uint8Array(opt.dictionary);\n    } else {\n      dict = opt.dictionary;\n    }\n\n    status = zlib_deflate.deflateSetDictionary(this.strm, dict);\n\n    if (status !== Z_OK) {\n      throw new Error(msg[status]);\n    }\n\n    this._dict_set = true;\n  }\n}\n\n/**\n * Deflate#push(data[, mode]) -> Boolean\n * - data (Uint8Array|Array|ArrayBuffer|String): input data. Strings will be\n *   converted to utf8 byte sequence.\n * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.\n *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` means Z_FINISH.\n *\n * Sends input data to deflate pipe, generating [[Deflate#onData]] calls with\n * new compressed chunks. Returns `true` on success. The last data block must have\n * mode Z_FINISH (or `true`). That will flush internal pending buffers and call\n * [[Deflate#onEnd]]. For interim explicit flushes (without ending the stream) you\n * can use mode Z_SYNC_FLUSH, keeping the compression context.\n *\n * On fail call [[Deflate#onEnd]] with error code and return false.\n *\n * We strongly recommend to use `Uint8Array` on input for best speed (output\n * array format is detected automatically). Also, don't skip last param and always\n * use the same type in your code (boolean or number). That will improve JS speed.\n *\n * For regular `Array`-s make sure all elements are [0..255].\n *\n * ##### Example\n *\n * ```javascript\n * push(chunk, false); // push one of data chunks\n * ...\n * push(chunk, true);  // push last chunk\n * ```\n **/\nDeflate.prototype.push = function (data, mode) {\n  var strm = this.strm;\n  var chunkSize = this.options.chunkSize;\n  var status, _mode;\n\n  if (this.ended) { return false; }\n\n  _mode = (mode === ~~mode) ? mode : ((mode === true) ? Z_FINISH : Z_NO_FLUSH);\n\n  // Convert data if needed\n  if (typeof data === 'string') {\n    // If we need to compress text, change encoding to utf8.\n    strm.input = strings.string2buf(data);\n  } else if (toString.call(data) === '[object ArrayBuffer]') {\n    strm.input = new Uint8Array(data);\n  } else {\n    strm.input = data;\n  }\n\n  strm.next_in = 0;\n  strm.avail_in = strm.input.length;\n\n  do {\n    if (strm.avail_out === 0) {\n      strm.output = new utils.Buf8(chunkSize);\n      strm.next_out = 0;\n      strm.avail_out = chunkSize;\n    }\n    status = zlib_deflate.deflate(strm, _mode);    /* no bad return value */\n\n    if (status !== Z_STREAM_END && status !== Z_OK) {\n      this.onEnd(status);\n      this.ended = true;\n      return false;\n    }\n    if (strm.avail_out === 0 || (strm.avail_in === 0 && (_mode === Z_FINISH || _mode === Z_SYNC_FLUSH))) {\n      if (this.options.to === 'string') {\n        this.onData(strings.buf2binstring(utils.shrinkBuf(strm.output, strm.next_out)));\n      } else {\n        this.onData(utils.shrinkBuf(strm.output, strm.next_out));\n      }\n    }\n  } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== Z_STREAM_END);\n\n  // Finalize on the last chunk.\n  if (_mode === Z_FINISH) {\n    status = zlib_deflate.deflateEnd(this.strm);\n    this.onEnd(status);\n    this.ended = true;\n    return status === Z_OK;\n  }\n\n  // callback interim results if Z_SYNC_FLUSH.\n  if (_mode === Z_SYNC_FLUSH) {\n    this.onEnd(Z_OK);\n    strm.avail_out = 0;\n    return true;\n  }\n\n  return true;\n};\n\n\n/**\n * Deflate#onData(chunk) -> Void\n * - chunk (Uint8Array|Array|String): output data. Type of array depends\n *   on js engine support. When string output requested, each chunk\n *   will be string.\n *\n * By default, stores data blocks in `chunks[]` property and glue\n * those in `onEnd`. Override this handler, if you need another behaviour.\n **/\nDeflate.prototype.onData = function (chunk) {\n  this.chunks.push(chunk);\n};\n\n\n/**\n * Deflate#onEnd(status) -> Void\n * - status (Number): deflate status. 0 (Z_OK) on success,\n *   other if not.\n *\n * Called once after you tell deflate that the input stream is\n * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)\n * or if an error happened. By default - join collected chunks,\n * free memory and fill `results` / `err` properties.\n **/\nDeflate.prototype.onEnd = function (status) {\n  // On success - join\n  if (status === Z_OK) {\n    if (this.options.to === 'string') {\n      this.result = this.chunks.join('');\n    } else {\n      this.result = utils.flattenChunks(this.chunks);\n    }\n  }\n  this.chunks = [];\n  this.err = status;\n  this.msg = this.strm.msg;\n};\n\n\n/**\n * deflate(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * Compress `data` with deflate algorithm and `options`.\n *\n * Supported options are:\n *\n * - level\n * - windowBits\n * - memLevel\n * - strategy\n * - dictionary\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Sugar (options):\n *\n * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\n *   negative windowBits implicitly.\n * - `to` (String) - if equal to 'string', then result will be \"binary string\"\n *    (each char code [0..255])\n *\n * ##### Example:\n *\n * ```javascript\n * var pako = require('pako')\n *   , data = Uint8Array([1,2,3,4,5,6,7,8,9]);\n *\n * console.log(pako.deflate(data));\n * ```\n **/\nfunction deflate(input, options) {\n  var deflator = new Deflate(options);\n\n  deflator.push(input, true);\n\n  // That will never happens, if you don't cheat with options :)\n  if (deflator.err) { throw deflator.msg || msg[deflator.err]; }\n\n  return deflator.result;\n}\n\n\n/**\n * deflateRaw(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * The same as [[deflate]], but creates raw data, without wrapper\n * (header and adler32 crc).\n **/\nfunction deflateRaw(input, options) {\n  options = options || {};\n  options.raw = true;\n  return deflate(input, options);\n}\n\n\n/**\n * gzip(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * The same as [[deflate]], but create gzip wrapper instead of\n * deflate one.\n **/\nfunction gzip(input, options) {\n  options = options || {};\n  options.gzip = true;\n  return deflate(input, options);\n}\n\n\nexports.Deflate = Deflate;\nexports.deflate = deflate;\nexports.deflateRaw = deflateRaw;\nexports.gzip = gzip;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/pako/lib/deflate.js\n");

/***/ }),

/***/ "./node_modules/pako/lib/inflate.js":
/*!******************************************!*\
  !*** ./node_modules/pako/lib/inflate.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n\nvar zlib_inflate = __webpack_require__(/*! ./zlib/inflate */ \"./node_modules/pako/lib/zlib/inflate.js\");\nvar utils        = __webpack_require__(/*! ./utils/common */ \"./node_modules/pako/lib/utils/common.js\");\nvar strings      = __webpack_require__(/*! ./utils/strings */ \"./node_modules/pako/lib/utils/strings.js\");\nvar c            = __webpack_require__(/*! ./zlib/constants */ \"./node_modules/pako/lib/zlib/constants.js\");\nvar msg          = __webpack_require__(/*! ./zlib/messages */ \"./node_modules/pako/lib/zlib/messages.js\");\nvar ZStream      = __webpack_require__(/*! ./zlib/zstream */ \"./node_modules/pako/lib/zlib/zstream.js\");\nvar GZheader     = __webpack_require__(/*! ./zlib/gzheader */ \"./node_modules/pako/lib/zlib/gzheader.js\");\n\nvar toString = Object.prototype.toString;\n\n/**\n * class Inflate\n *\n * Generic JS-style wrapper for zlib calls. If you don't need\n * streaming behaviour - use more simple functions: [[inflate]]\n * and [[inflateRaw]].\n **/\n\n/* internal\n * inflate.chunks -> Array\n *\n * Chunks of output data, if [[Inflate#onData]] not overridden.\n **/\n\n/**\n * Inflate.result -> Uint8Array|Array|String\n *\n * Uncompressed result, generated by default [[Inflate#onData]]\n * and [[Inflate#onEnd]] handlers. Filled after you push last chunk\n * (call [[Inflate#push]] with `Z_FINISH` / `true` param) or if you\n * push a chunk with explicit flush (call [[Inflate#push]] with\n * `Z_SYNC_FLUSH` param).\n **/\n\n/**\n * Inflate.err -> Number\n *\n * Error code after inflate finished. 0 (Z_OK) on success.\n * Should be checked if broken data possible.\n **/\n\n/**\n * Inflate.msg -> String\n *\n * Error message, if [[Inflate.err]] != 0\n **/\n\n\n/**\n * new Inflate(options)\n * - options (Object): zlib inflate options.\n *\n * Creates new inflator instance with specified params. Throws exception\n * on bad params. Supported options:\n *\n * - `windowBits`\n * - `dictionary`\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Additional options, for internal needs:\n *\n * - `chunkSize` - size of generated data chunks (16K by default)\n * - `raw` (Boolean) - do raw inflate\n * - `to` (String) - if equal to 'string', then result will be converted\n *   from utf8 to utf16 (javascript) string. When string output requested,\n *   chunk length can differ from `chunkSize`, depending on content.\n *\n * By default, when no options set, autodetect deflate/gzip data format via\n * wrapper header.\n *\n * ##### Example:\n *\n * ```javascript\n * var pako = require('pako')\n *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])\n *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);\n *\n * var inflate = new pako.Inflate({ level: 3});\n *\n * inflate.push(chunk1, false);\n * inflate.push(chunk2, true);  // true -> last chunk\n *\n * if (inflate.err) { throw new Error(inflate.err); }\n *\n * console.log(inflate.result);\n * ```\n **/\nfunction Inflate(options) {\n  if (!(this instanceof Inflate)) return new Inflate(options);\n\n  this.options = utils.assign({\n    chunkSize: 16384,\n    windowBits: 0,\n    to: ''\n  }, options || {});\n\n  var opt = this.options;\n\n  // Force window size for `raw` data, if not set directly,\n  // because we have no header for autodetect.\n  if (opt.raw && (opt.windowBits >= 0) && (opt.windowBits < 16)) {\n    opt.windowBits = -opt.windowBits;\n    if (opt.windowBits === 0) { opt.windowBits = -15; }\n  }\n\n  // If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate\n  if ((opt.windowBits >= 0) && (opt.windowBits < 16) &&\n      !(options && options.windowBits)) {\n    opt.windowBits += 32;\n  }\n\n  // Gzip header has no info about windows size, we can do autodetect only\n  // for deflate. So, if window size not set, force it to max when gzip possible\n  if ((opt.windowBits > 15) && (opt.windowBits < 48)) {\n    // bit 3 (16) -> gzipped data\n    // bit 4 (32) -> autodetect gzip/deflate\n    if ((opt.windowBits & 15) === 0) {\n      opt.windowBits |= 15;\n    }\n  }\n\n  this.err    = 0;      // error code, if happens (0 = Z_OK)\n  this.msg    = '';     // error message\n  this.ended  = false;  // used to avoid multiple onEnd() calls\n  this.chunks = [];     // chunks of compressed data\n\n  this.strm   = new ZStream();\n  this.strm.avail_out = 0;\n\n  var status  = zlib_inflate.inflateInit2(\n    this.strm,\n    opt.windowBits\n  );\n\n  if (status !== c.Z_OK) {\n    throw new Error(msg[status]);\n  }\n\n  this.header = new GZheader();\n\n  zlib_inflate.inflateGetHeader(this.strm, this.header);\n\n  // Setup dictionary\n  if (opt.dictionary) {\n    // Convert data if needed\n    if (typeof opt.dictionary === 'string') {\n      opt.dictionary = strings.string2buf(opt.dictionary);\n    } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {\n      opt.dictionary = new Uint8Array(opt.dictionary);\n    }\n    if (opt.raw) { //In raw mode we need to set the dictionary early\n      status = zlib_inflate.inflateSetDictionary(this.strm, opt.dictionary);\n      if (status !== c.Z_OK) {\n        throw new Error(msg[status]);\n      }\n    }\n  }\n}\n\n/**\n * Inflate#push(data[, mode]) -> Boolean\n * - data (Uint8Array|Array|ArrayBuffer|String): input data\n * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.\n *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` means Z_FINISH.\n *\n * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with\n * new output chunks. Returns `true` on success. The last data block must have\n * mode Z_FINISH (or `true`). That will flush internal pending buffers and call\n * [[Inflate#onEnd]]. For interim explicit flushes (without ending the stream) you\n * can use mode Z_SYNC_FLUSH, keeping the decompression context.\n *\n * On fail call [[Inflate#onEnd]] with error code and return false.\n *\n * We strongly recommend to use `Uint8Array` on input for best speed (output\n * format is detected automatically). Also, don't skip last param and always\n * use the same type in your code (boolean or number). That will improve JS speed.\n *\n * For regular `Array`-s make sure all elements are [0..255].\n *\n * ##### Example\n *\n * ```javascript\n * push(chunk, false); // push one of data chunks\n * ...\n * push(chunk, true);  // push last chunk\n * ```\n **/\nInflate.prototype.push = function (data, mode) {\n  var strm = this.strm;\n  var chunkSize = this.options.chunkSize;\n  var dictionary = this.options.dictionary;\n  var status, _mode;\n  var next_out_utf8, tail, utf8str;\n\n  // Flag to properly process Z_BUF_ERROR on testing inflate call\n  // when we check that all output data was flushed.\n  var allowBufError = false;\n\n  if (this.ended) { return false; }\n  _mode = (mode === ~~mode) ? mode : ((mode === true) ? c.Z_FINISH : c.Z_NO_FLUSH);\n\n  // Convert data if needed\n  if (typeof data === 'string') {\n    // Only binary strings can be decompressed on practice\n    strm.input = strings.binstring2buf(data);\n  } else if (toString.call(data) === '[object ArrayBuffer]') {\n    strm.input = new Uint8Array(data);\n  } else {\n    strm.input = data;\n  }\n\n  strm.next_in = 0;\n  strm.avail_in = strm.input.length;\n\n  do {\n    if (strm.avail_out === 0) {\n      strm.output = new utils.Buf8(chunkSize);\n      strm.next_out = 0;\n      strm.avail_out = chunkSize;\n    }\n\n    status = zlib_inflate.inflate(strm, c.Z_NO_FLUSH);    /* no bad return value */\n\n    if (status === c.Z_NEED_DICT && dictionary) {\n      status = zlib_inflate.inflateSetDictionary(this.strm, dictionary);\n    }\n\n    if (status === c.Z_BUF_ERROR && allowBufError === true) {\n      status = c.Z_OK;\n      allowBufError = false;\n    }\n\n    if (status !== c.Z_STREAM_END && status !== c.Z_OK) {\n      this.onEnd(status);\n      this.ended = true;\n      return false;\n    }\n\n    if (strm.next_out) {\n      if (strm.avail_out === 0 || status === c.Z_STREAM_END || (strm.avail_in === 0 && (_mode === c.Z_FINISH || _mode === c.Z_SYNC_FLUSH))) {\n\n        if (this.options.to === 'string') {\n\n          next_out_utf8 = strings.utf8border(strm.output, strm.next_out);\n\n          tail = strm.next_out - next_out_utf8;\n          utf8str = strings.buf2string(strm.output, next_out_utf8);\n\n          // move tail\n          strm.next_out = tail;\n          strm.avail_out = chunkSize - tail;\n          if (tail) { utils.arraySet(strm.output, strm.output, next_out_utf8, tail, 0); }\n\n          this.onData(utf8str);\n\n        } else {\n          this.onData(utils.shrinkBuf(strm.output, strm.next_out));\n        }\n      }\n    }\n\n    // When no more input data, we should check that internal inflate buffers\n    // are flushed. The only way to do it when avail_out = 0 - run one more\n    // inflate pass. But if output data not exists, inflate return Z_BUF_ERROR.\n    // Here we set flag to process this error properly.\n    //\n    // NOTE. Deflate does not return error in this case and does not needs such\n    // logic.\n    if (strm.avail_in === 0 && strm.avail_out === 0) {\n      allowBufError = true;\n    }\n\n  } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== c.Z_STREAM_END);\n\n  if (status === c.Z_STREAM_END) {\n    _mode = c.Z_FINISH;\n  }\n\n  // Finalize on the last chunk.\n  if (_mode === c.Z_FINISH) {\n    status = zlib_inflate.inflateEnd(this.strm);\n    this.onEnd(status);\n    this.ended = true;\n    return status === c.Z_OK;\n  }\n\n  // callback interim results if Z_SYNC_FLUSH.\n  if (_mode === c.Z_SYNC_FLUSH) {\n    this.onEnd(c.Z_OK);\n    strm.avail_out = 0;\n    return true;\n  }\n\n  return true;\n};\n\n\n/**\n * Inflate#onData(chunk) -> Void\n * - chunk (Uint8Array|Array|String): output data. Type of array depends\n *   on js engine support. When string output requested, each chunk\n *   will be string.\n *\n * By default, stores data blocks in `chunks[]` property and glue\n * those in `onEnd`. Override this handler, if you need another behaviour.\n **/\nInflate.prototype.onData = function (chunk) {\n  this.chunks.push(chunk);\n};\n\n\n/**\n * Inflate#onEnd(status) -> Void\n * - status (Number): inflate status. 0 (Z_OK) on success,\n *   other if not.\n *\n * Called either after you tell inflate that the input stream is\n * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)\n * or if an error happened. By default - join collected chunks,\n * free memory and fill `results` / `err` properties.\n **/\nInflate.prototype.onEnd = function (status) {\n  // On success - join\n  if (status === c.Z_OK) {\n    if (this.options.to === 'string') {\n      // Glue & convert here, until we teach pako to send\n      // utf8 aligned strings to onData\n      this.result = this.chunks.join('');\n    } else {\n      this.result = utils.flattenChunks(this.chunks);\n    }\n  }\n  this.chunks = [];\n  this.err = status;\n  this.msg = this.strm.msg;\n};\n\n\n/**\n * inflate(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * Decompress `data` with inflate/ungzip and `options`. Autodetect\n * format via wrapper header by default. That's why we don't provide\n * separate `ungzip` method.\n *\n * Supported options are:\n *\n * - windowBits\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information.\n *\n * Sugar (options):\n *\n * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\n *   negative windowBits implicitly.\n * - `to` (String) - if equal to 'string', then result will be converted\n *   from utf8 to utf16 (javascript) string. When string output requested,\n *   chunk length can differ from `chunkSize`, depending on content.\n *\n *\n * ##### Example:\n *\n * ```javascript\n * var pako = require('pako')\n *   , input = pako.deflate([1,2,3,4,5,6,7,8,9])\n *   , output;\n *\n * try {\n *   output = pako.inflate(input);\n * } catch (err)\n *   console.log(err);\n * }\n * ```\n **/\nfunction inflate(input, options) {\n  var inflator = new Inflate(options);\n\n  inflator.push(input, true);\n\n  // That will never happens, if you don't cheat with options :)\n  if (inflator.err) { throw inflator.msg || msg[inflator.err]; }\n\n  return inflator.result;\n}\n\n\n/**\n * inflateRaw(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * The same as [[inflate]], but creates raw data, without wrapper\n * (header and adler32 crc).\n **/\nfunction inflateRaw(input, options) {\n  options = options || {};\n  options.raw = true;\n  return inflate(input, options);\n}\n\n\n/**\n * ungzip(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * Just shortcut to [[inflate]], because it autodetects format\n * by header.content. Done for convenience.\n **/\n\n\nexports.Inflate = Inflate;\nexports.inflate = inflate;\nexports.inflateRaw = inflateRaw;\nexports.ungzip  = inflate;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/pako/lib/inflate.js\n");

/***/ }),

/***/ "./node_modules/pako/lib/utils/common.js":
/*!***********************************************!*\
  !*** ./node_modules/pako/lib/utils/common.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n\nvar TYPED_OK =  (typeof Uint8Array !== 'undefined') &&\n                (typeof Uint16Array !== 'undefined') &&\n                (typeof Int32Array !== 'undefined');\n\nfunction _has(obj, key) {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n}\n\nexports.assign = function (obj /*from1, from2, from3, ...*/) {\n  var sources = Array.prototype.slice.call(arguments, 1);\n  while (sources.length) {\n    var source = sources.shift();\n    if (!source) { continue; }\n\n    if (typeof source !== 'object') {\n      throw new TypeError(source + 'must be non-object');\n    }\n\n    for (var p in source) {\n      if (_has(source, p)) {\n        obj[p] = source[p];\n      }\n    }\n  }\n\n  return obj;\n};\n\n\n// reduce buffer size, avoiding mem copy\nexports.shrinkBuf = function (buf, size) {\n  if (buf.length === size) { return buf; }\n  if (buf.subarray) { return buf.subarray(0, size); }\n  buf.length = size;\n  return buf;\n};\n\n\nvar fnTyped = {\n  arraySet: function (dest, src, src_offs, len, dest_offs) {\n    if (src.subarray && dest.subarray) {\n      dest.set(src.subarray(src_offs, src_offs + len), dest_offs);\n      return;\n    }\n    // Fallback to ordinary array\n    for (var i = 0; i < len; i++) {\n      dest[dest_offs + i] = src[src_offs + i];\n    }\n  },\n  // Join array of chunks to single array.\n  flattenChunks: function (chunks) {\n    var i, l, len, pos, chunk, result;\n\n    // calculate data length\n    len = 0;\n    for (i = 0, l = chunks.length; i < l; i++) {\n      len += chunks[i].length;\n    }\n\n    // join chunks\n    result = new Uint8Array(len);\n    pos = 0;\n    for (i = 0, l = chunks.length; i < l; i++) {\n      chunk = chunks[i];\n      result.set(chunk, pos);\n      pos += chunk.length;\n    }\n\n    return result;\n  }\n};\n\nvar fnUntyped = {\n  arraySet: function (dest, src, src_offs, len, dest_offs) {\n    for (var i = 0; i < len; i++) {\n      dest[dest_offs + i] = src[src_offs + i];\n    }\n  },\n  // Join array of chunks to single array.\n  flattenChunks: function (chunks) {\n    return [].concat.apply([], chunks);\n  }\n};\n\n\n// Enable/Disable typed arrays use, for testing\n//\nexports.setTyped = function (on) {\n  if (on) {\n    exports.Buf8  = Uint8Array;\n    exports.Buf16 = Uint16Array;\n    exports.Buf32 = Int32Array;\n    exports.assign(exports, fnTyped);\n  } else {\n    exports.Buf8  = Array;\n    exports.Buf16 = Array;\n    exports.Buf32 = Array;\n    exports.assign(exports, fnUntyped);\n  }\n};\n\nexports.setTyped(TYPED_OK);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcGFrby9saWIvdXRpbHMvY29tbW9uLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vVGVsZWdyYW1qcy8uL25vZGVfbW9kdWxlcy9wYWtvL2xpYi91dGlscy9jb21tb24uanM/YmU3ZiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cblxudmFyIFRZUEVEX09LID0gICh0eXBlb2YgVWludDhBcnJheSAhPT0gJ3VuZGVmaW5lZCcpICYmXG4gICAgICAgICAgICAgICAgKHR5cGVvZiBVaW50MTZBcnJheSAhPT0gJ3VuZGVmaW5lZCcpICYmXG4gICAgICAgICAgICAgICAgKHR5cGVvZiBJbnQzMkFycmF5ICE9PSAndW5kZWZpbmVkJyk7XG5cbmZ1bmN0aW9uIF9oYXMob2JqLCBrZXkpIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSk7XG59XG5cbmV4cG9ydHMuYXNzaWduID0gZnVuY3Rpb24gKG9iaiAvKmZyb20xLCBmcm9tMiwgZnJvbTMsIC4uLiovKSB7XG4gIHZhciBzb3VyY2VzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcbiAgd2hpbGUgKHNvdXJjZXMubGVuZ3RoKSB7XG4gICAgdmFyIHNvdXJjZSA9IHNvdXJjZXMuc2hpZnQoKTtcbiAgICBpZiAoIXNvdXJjZSkgeyBjb250aW51ZTsgfVxuXG4gICAgaWYgKHR5cGVvZiBzb3VyY2UgIT09ICdvYmplY3QnKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKHNvdXJjZSArICdtdXN0IGJlIG5vbi1vYmplY3QnKTtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBwIGluIHNvdXJjZSkge1xuICAgICAgaWYgKF9oYXMoc291cmNlLCBwKSkge1xuICAgICAgICBvYmpbcF0gPSBzb3VyY2VbcF07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG9iajtcbn07XG5cblxuLy8gcmVkdWNlIGJ1ZmZlciBzaXplLCBhdm9pZGluZyBtZW0gY29weVxuZXhwb3J0cy5zaHJpbmtCdWYgPSBmdW5jdGlvbiAoYnVmLCBzaXplKSB7XG4gIGlmIChidWYubGVuZ3RoID09PSBzaXplKSB7IHJldHVybiBidWY7IH1cbiAgaWYgKGJ1Zi5zdWJhcnJheSkgeyByZXR1cm4gYnVmLnN1YmFycmF5KDAsIHNpemUpOyB9XG4gIGJ1Zi5sZW5ndGggPSBzaXplO1xuICByZXR1cm4gYnVmO1xufTtcblxuXG52YXIgZm5UeXBlZCA9IHtcbiAgYXJyYXlTZXQ6IGZ1bmN0aW9uIChkZXN0LCBzcmMsIHNyY19vZmZzLCBsZW4sIGRlc3Rfb2Zmcykge1xuICAgIGlmIChzcmMuc3ViYXJyYXkgJiYgZGVzdC5zdWJhcnJheSkge1xuICAgICAgZGVzdC5zZXQoc3JjLnN1YmFycmF5KHNyY19vZmZzLCBzcmNfb2ZmcyArIGxlbiksIGRlc3Rfb2Zmcyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIEZhbGxiYWNrIHRvIG9yZGluYXJ5IGFycmF5XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgZGVzdFtkZXN0X29mZnMgKyBpXSA9IHNyY1tzcmNfb2ZmcyArIGldO1xuICAgIH1cbiAgfSxcbiAgLy8gSm9pbiBhcnJheSBvZiBjaHVua3MgdG8gc2luZ2xlIGFycmF5LlxuICBmbGF0dGVuQ2h1bmtzOiBmdW5jdGlvbiAoY2h1bmtzKSB7XG4gICAgdmFyIGksIGwsIGxlbiwgcG9zLCBjaHVuaywgcmVzdWx0O1xuXG4gICAgLy8gY2FsY3VsYXRlIGRhdGEgbGVuZ3RoXG4gICAgbGVuID0gMDtcbiAgICBmb3IgKGkgPSAwLCBsID0gY2h1bmtzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgbGVuICs9IGNodW5rc1tpXS5sZW5ndGg7XG4gICAgfVxuXG4gICAgLy8gam9pbiBjaHVua3NcbiAgICByZXN1bHQgPSBuZXcgVWludDhBcnJheShsZW4pO1xuICAgIHBvcyA9IDA7XG4gICAgZm9yIChpID0gMCwgbCA9IGNodW5rcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIGNodW5rID0gY2h1bmtzW2ldO1xuICAgICAgcmVzdWx0LnNldChjaHVuaywgcG9zKTtcbiAgICAgIHBvcyArPSBjaHVuay5sZW5ndGg7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufTtcblxudmFyIGZuVW50eXBlZCA9IHtcbiAgYXJyYXlTZXQ6IGZ1bmN0aW9uIChkZXN0LCBzcmMsIHNyY19vZmZzLCBsZW4sIGRlc3Rfb2Zmcykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGRlc3RbZGVzdF9vZmZzICsgaV0gPSBzcmNbc3JjX29mZnMgKyBpXTtcbiAgICB9XG4gIH0sXG4gIC8vIEpvaW4gYXJyYXkgb2YgY2h1bmtzIHRvIHNpbmdsZSBhcnJheS5cbiAgZmxhdHRlbkNodW5rczogZnVuY3Rpb24gKGNodW5rcykge1xuICAgIHJldHVybiBbXS5jb25jYXQuYXBwbHkoW10sIGNodW5rcyk7XG4gIH1cbn07XG5cblxuLy8gRW5hYmxlL0Rpc2FibGUgdHlwZWQgYXJyYXlzIHVzZSwgZm9yIHRlc3Rpbmdcbi8vXG5leHBvcnRzLnNldFR5cGVkID0gZnVuY3Rpb24gKG9uKSB7XG4gIGlmIChvbikge1xuICAgIGV4cG9ydHMuQnVmOCAgPSBVaW50OEFycmF5O1xuICAgIGV4cG9ydHMuQnVmMTYgPSBVaW50MTZBcnJheTtcbiAgICBleHBvcnRzLkJ1ZjMyID0gSW50MzJBcnJheTtcbiAgICBleHBvcnRzLmFzc2lnbihleHBvcnRzLCBmblR5cGVkKTtcbiAgfSBlbHNlIHtcbiAgICBleHBvcnRzLkJ1ZjggID0gQXJyYXk7XG4gICAgZXhwb3J0cy5CdWYxNiA9IEFycmF5O1xuICAgIGV4cG9ydHMuQnVmMzIgPSBBcnJheTtcbiAgICBleHBvcnRzLmFzc2lnbihleHBvcnRzLCBmblVudHlwZWQpO1xuICB9XG59O1xuXG5leHBvcnRzLnNldFR5cGVkKFRZUEVEX09LKTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/pako/lib/utils/common.js\n");

/***/ }),

/***/ "./node_modules/pako/lib/utils/strings.js":
/*!************************************************!*\
  !*** ./node_modules/pako/lib/utils/strings.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("// String encode/decode helpers\n\n\n\nvar utils = __webpack_require__(/*! ./common */ \"./node_modules/pako/lib/utils/common.js\");\n\n\n// Quick check if we can use fast array to bin string conversion\n//\n// - apply(Array) can fail on Android 2.2\n// - apply(Uint8Array) can fail on iOS 5.1 Safari\n//\nvar STR_APPLY_OK = true;\nvar STR_APPLY_UIA_OK = true;\n\ntry { String.fromCharCode.apply(null, [ 0 ]); } catch (__) { STR_APPLY_OK = false; }\ntry { String.fromCharCode.apply(null, new Uint8Array(1)); } catch (__) { STR_APPLY_UIA_OK = false; }\n\n\n// Table with utf8 lengths (calculated by first byte of sequence)\n// Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,\n// because max possible codepoint is 0x10ffff\nvar _utf8len = new utils.Buf8(256);\nfor (var q = 0; q < 256; q++) {\n  _utf8len[q] = (q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1);\n}\n_utf8len[254] = _utf8len[254] = 1; // Invalid sequence start\n\n\n// convert string to array (typed, when possible)\nexports.string2buf = function (str) {\n  var buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;\n\n  // count binary size\n  for (m_pos = 0; m_pos < str_len; m_pos++) {\n    c = str.charCodeAt(m_pos);\n    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {\n      c2 = str.charCodeAt(m_pos + 1);\n      if ((c2 & 0xfc00) === 0xdc00) {\n        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\n        m_pos++;\n      }\n    }\n    buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;\n  }\n\n  // allocate buffer\n  buf = new utils.Buf8(buf_len);\n\n  // convert\n  for (i = 0, m_pos = 0; i < buf_len; m_pos++) {\n    c = str.charCodeAt(m_pos);\n    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {\n      c2 = str.charCodeAt(m_pos + 1);\n      if ((c2 & 0xfc00) === 0xdc00) {\n        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\n        m_pos++;\n      }\n    }\n    if (c < 0x80) {\n      /* one byte */\n      buf[i++] = c;\n    } else if (c < 0x800) {\n      /* two bytes */\n      buf[i++] = 0xC0 | (c >>> 6);\n      buf[i++] = 0x80 | (c & 0x3f);\n    } else if (c < 0x10000) {\n      /* three bytes */\n      buf[i++] = 0xE0 | (c >>> 12);\n      buf[i++] = 0x80 | (c >>> 6 & 0x3f);\n      buf[i++] = 0x80 | (c & 0x3f);\n    } else {\n      /* four bytes */\n      buf[i++] = 0xf0 | (c >>> 18);\n      buf[i++] = 0x80 | (c >>> 12 & 0x3f);\n      buf[i++] = 0x80 | (c >>> 6 & 0x3f);\n      buf[i++] = 0x80 | (c & 0x3f);\n    }\n  }\n\n  return buf;\n};\n\n// Helper (used in 2 places)\nfunction buf2binstring(buf, len) {\n  // On Chrome, the arguments in a function call that are allowed is `65534`.\n  // If the length of the buffer is smaller than that, we can use this optimization,\n  // otherwise we will take a slower path.\n  if (len < 65534) {\n    if ((buf.subarray && STR_APPLY_UIA_OK) || (!buf.subarray && STR_APPLY_OK)) {\n      return String.fromCharCode.apply(null, utils.shrinkBuf(buf, len));\n    }\n  }\n\n  var result = '';\n  for (var i = 0; i < len; i++) {\n    result += String.fromCharCode(buf[i]);\n  }\n  return result;\n}\n\n\n// Convert byte array to binary string\nexports.buf2binstring = function (buf) {\n  return buf2binstring(buf, buf.length);\n};\n\n\n// Convert binary string (typed, when possible)\nexports.binstring2buf = function (str) {\n  var buf = new utils.Buf8(str.length);\n  for (var i = 0, len = buf.length; i < len; i++) {\n    buf[i] = str.charCodeAt(i);\n  }\n  return buf;\n};\n\n\n// convert array to string\nexports.buf2string = function (buf, max) {\n  var i, out, c, c_len;\n  var len = max || buf.length;\n\n  // Reserve max possible length (2 words per char)\n  // NB: by unknown reasons, Array is significantly faster for\n  //     String.fromCharCode.apply than Uint16Array.\n  var utf16buf = new Array(len * 2);\n\n  for (out = 0, i = 0; i < len;) {\n    c = buf[i++];\n    // quick process ascii\n    if (c < 0x80) { utf16buf[out++] = c; continue; }\n\n    c_len = _utf8len[c];\n    // skip 5 & 6 byte codes\n    if (c_len > 4) { utf16buf[out++] = 0xfffd; i += c_len - 1; continue; }\n\n    // apply mask on first byte\n    c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;\n    // join the rest\n    while (c_len > 1 && i < len) {\n      c = (c << 6) | (buf[i++] & 0x3f);\n      c_len--;\n    }\n\n    // terminated by end of string?\n    if (c_len > 1) { utf16buf[out++] = 0xfffd; continue; }\n\n    if (c < 0x10000) {\n      utf16buf[out++] = c;\n    } else {\n      c -= 0x10000;\n      utf16buf[out++] = 0xd800 | ((c >> 10) & 0x3ff);\n      utf16buf[out++] = 0xdc00 | (c & 0x3ff);\n    }\n  }\n\n  return buf2binstring(utf16buf, out);\n};\n\n\n// Calculate max possible position in utf8 buffer,\n// that will not break sequence. If that's not possible\n// - (very small limits) return max size as is.\n//\n// buf[] - utf8 bytes array\n// max   - length limit (mandatory);\nexports.utf8border = function (buf, max) {\n  var pos;\n\n  max = max || buf.length;\n  if (max > buf.length) { max = buf.length; }\n\n  // go back from last position, until start of sequence found\n  pos = max - 1;\n  while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) { pos--; }\n\n  // Very small and broken sequence,\n  // return max, because we should return something anyway.\n  if (pos < 0) { return max; }\n\n  // If we came to start of buffer - that means buffer is too small,\n  // return max too.\n  if (pos === 0) { return max; }\n\n  return (pos + _utf8len[buf[pos]] > max) ? pos : max;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/pako/lib/utils/strings.js\n");

/***/ }),

/***/ "./node_modules/pako/lib/zlib/adler32.js":
/*!***********************************************!*\
  !*** ./node_modules/pako/lib/zlib/adler32.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n// Note: adler32 takes 12% for level 0 and 2% for level 6.\n// It isn't worth it to make additional optimizations as in original.\n// Small size is preferable.\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nfunction adler32(adler, buf, len, pos) {\n  var s1 = (adler & 0xffff) |0,\n      s2 = ((adler >>> 16) & 0xffff) |0,\n      n = 0;\n\n  while (len !== 0) {\n    // Set limit ~ twice less than 5552, to keep\n    // s2 in 31-bits, because we force signed ints.\n    // in other case %= will fail.\n    n = len > 2000 ? 2000 : len;\n    len -= n;\n\n    do {\n      s1 = (s1 + buf[pos++]) |0;\n      s2 = (s2 + s1) |0;\n    } while (--n);\n\n    s1 %= 65521;\n    s2 %= 65521;\n  }\n\n  return (s1 | (s2 << 16)) |0;\n}\n\n\nmodule.exports = adler32;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcGFrby9saWIvemxpYi9hZGxlcjMyLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vVGVsZWdyYW1qcy8uL25vZGVfbW9kdWxlcy9wYWtvL2xpYi96bGliL2FkbGVyMzIuanM/YzgzNCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8vIE5vdGU6IGFkbGVyMzIgdGFrZXMgMTIlIGZvciBsZXZlbCAwIGFuZCAyJSBmb3IgbGV2ZWwgNi5cbi8vIEl0IGlzbid0IHdvcnRoIGl0IHRvIG1ha2UgYWRkaXRpb25hbCBvcHRpbWl6YXRpb25zIGFzIGluIG9yaWdpbmFsLlxuLy8gU21hbGwgc2l6ZSBpcyBwcmVmZXJhYmxlLlxuXG4vLyAoQykgMTk5NS0yMDEzIEplYW4tbG91cCBHYWlsbHkgYW5kIE1hcmsgQWRsZXJcbi8vIChDKSAyMDE0LTIwMTcgVml0YWx5IFB1enJpbiBhbmQgQW5kcmV5IFR1cGl0c2luXG4vL1xuLy8gVGhpcyBzb2Z0d2FyZSBpcyBwcm92aWRlZCAnYXMtaXMnLCB3aXRob3V0IGFueSBleHByZXNzIG9yIGltcGxpZWRcbi8vIHdhcnJhbnR5LiBJbiBubyBldmVudCB3aWxsIHRoZSBhdXRob3JzIGJlIGhlbGQgbGlhYmxlIGZvciBhbnkgZGFtYWdlc1xuLy8gYXJpc2luZyBmcm9tIHRoZSB1c2Ugb2YgdGhpcyBzb2Z0d2FyZS5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGdyYW50ZWQgdG8gYW55b25lIHRvIHVzZSB0aGlzIHNvZnR3YXJlIGZvciBhbnkgcHVycG9zZSxcbi8vIGluY2x1ZGluZyBjb21tZXJjaWFsIGFwcGxpY2F0aW9ucywgYW5kIHRvIGFsdGVyIGl0IGFuZCByZWRpc3RyaWJ1dGUgaXRcbi8vIGZyZWVseSwgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIHJlc3RyaWN0aW9uczpcbi8vXG4vLyAxLiBUaGUgb3JpZ2luIG9mIHRoaXMgc29mdHdhcmUgbXVzdCBub3QgYmUgbWlzcmVwcmVzZW50ZWQ7IHlvdSBtdXN0IG5vdFxuLy8gICBjbGFpbSB0aGF0IHlvdSB3cm90ZSB0aGUgb3JpZ2luYWwgc29mdHdhcmUuIElmIHlvdSB1c2UgdGhpcyBzb2Z0d2FyZVxuLy8gICBpbiBhIHByb2R1Y3QsIGFuIGFja25vd2xlZGdtZW50IGluIHRoZSBwcm9kdWN0IGRvY3VtZW50YXRpb24gd291bGQgYmVcbi8vICAgYXBwcmVjaWF0ZWQgYnV0IGlzIG5vdCByZXF1aXJlZC5cbi8vIDIuIEFsdGVyZWQgc291cmNlIHZlcnNpb25zIG11c3QgYmUgcGxhaW5seSBtYXJrZWQgYXMgc3VjaCwgYW5kIG11c3Qgbm90IGJlXG4vLyAgIG1pc3JlcHJlc2VudGVkIGFzIGJlaW5nIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS5cbi8vIDMuIFRoaXMgbm90aWNlIG1heSBub3QgYmUgcmVtb3ZlZCBvciBhbHRlcmVkIGZyb20gYW55IHNvdXJjZSBkaXN0cmlidXRpb24uXG5cbmZ1bmN0aW9uIGFkbGVyMzIoYWRsZXIsIGJ1ZiwgbGVuLCBwb3MpIHtcbiAgdmFyIHMxID0gKGFkbGVyICYgMHhmZmZmKSB8MCxcbiAgICAgIHMyID0gKChhZGxlciA+Pj4gMTYpICYgMHhmZmZmKSB8MCxcbiAgICAgIG4gPSAwO1xuXG4gIHdoaWxlIChsZW4gIT09IDApIHtcbiAgICAvLyBTZXQgbGltaXQgfiB0d2ljZSBsZXNzIHRoYW4gNTU1MiwgdG8ga2VlcFxuICAgIC8vIHMyIGluIDMxLWJpdHMsIGJlY2F1c2Ugd2UgZm9yY2Ugc2lnbmVkIGludHMuXG4gICAgLy8gaW4gb3RoZXIgY2FzZSAlPSB3aWxsIGZhaWwuXG4gICAgbiA9IGxlbiA+IDIwMDAgPyAyMDAwIDogbGVuO1xuICAgIGxlbiAtPSBuO1xuXG4gICAgZG8ge1xuICAgICAgczEgPSAoczEgKyBidWZbcG9zKytdKSB8MDtcbiAgICAgIHMyID0gKHMyICsgczEpIHwwO1xuICAgIH0gd2hpbGUgKC0tbik7XG5cbiAgICBzMSAlPSA2NTUyMTtcbiAgICBzMiAlPSA2NTUyMTtcbiAgfVxuXG4gIHJldHVybiAoczEgfCAoczIgPDwgMTYpKSB8MDtcbn1cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGFkbGVyMzI7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/pako/lib/zlib/adler32.js\n");

/***/ }),

/***/ "./node_modules/pako/lib/zlib/constants.js":
/*!*************************************************!*\
  !*** ./node_modules/pako/lib/zlib/constants.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nmodule.exports = {\n\n  /* Allowed flush values; see deflate() and inflate() below for details */\n  Z_NO_FLUSH:         0,\n  Z_PARTIAL_FLUSH:    1,\n  Z_SYNC_FLUSH:       2,\n  Z_FULL_FLUSH:       3,\n  Z_FINISH:           4,\n  Z_BLOCK:            5,\n  Z_TREES:            6,\n\n  /* Return codes for the compression/decompression functions. Negative values\n  * are errors, positive values are used for special but normal events.\n  */\n  Z_OK:               0,\n  Z_STREAM_END:       1,\n  Z_NEED_DICT:        2,\n  Z_ERRNO:           -1,\n  Z_STREAM_ERROR:    -2,\n  Z_DATA_ERROR:      -3,\n  //Z_MEM_ERROR:     -4,\n  Z_BUF_ERROR:       -5,\n  //Z_VERSION_ERROR: -6,\n\n  /* compression levels */\n  Z_NO_COMPRESSION:         0,\n  Z_BEST_SPEED:             1,\n  Z_BEST_COMPRESSION:       9,\n  Z_DEFAULT_COMPRESSION:   -1,\n\n\n  Z_FILTERED:               1,\n  Z_HUFFMAN_ONLY:           2,\n  Z_RLE:                    3,\n  Z_FIXED:                  4,\n  Z_DEFAULT_STRATEGY:       0,\n\n  /* Possible values of the data_type field (though see inflate()) */\n  Z_BINARY:                 0,\n  Z_TEXT:                   1,\n  //Z_ASCII:                1, // = Z_TEXT (deprecated)\n  Z_UNKNOWN:                2,\n\n  /* The deflate compression method */\n  Z_DEFLATED:               8\n  //Z_NULL:                 null // Use -1 or null inline, depending on var type\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcGFrby9saWIvemxpYi9jb25zdGFudHMuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9UZWxlZ3JhbWpzLy4vbm9kZV9tb2R1bGVzL3Bha28vbGliL3psaWIvY29uc3RhbnRzLmpzPzJjZWIiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vLyAoQykgMTk5NS0yMDEzIEplYW4tbG91cCBHYWlsbHkgYW5kIE1hcmsgQWRsZXJcbi8vIChDKSAyMDE0LTIwMTcgVml0YWx5IFB1enJpbiBhbmQgQW5kcmV5IFR1cGl0c2luXG4vL1xuLy8gVGhpcyBzb2Z0d2FyZSBpcyBwcm92aWRlZCAnYXMtaXMnLCB3aXRob3V0IGFueSBleHByZXNzIG9yIGltcGxpZWRcbi8vIHdhcnJhbnR5LiBJbiBubyBldmVudCB3aWxsIHRoZSBhdXRob3JzIGJlIGhlbGQgbGlhYmxlIGZvciBhbnkgZGFtYWdlc1xuLy8gYXJpc2luZyBmcm9tIHRoZSB1c2Ugb2YgdGhpcyBzb2Z0d2FyZS5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGdyYW50ZWQgdG8gYW55b25lIHRvIHVzZSB0aGlzIHNvZnR3YXJlIGZvciBhbnkgcHVycG9zZSxcbi8vIGluY2x1ZGluZyBjb21tZXJjaWFsIGFwcGxpY2F0aW9ucywgYW5kIHRvIGFsdGVyIGl0IGFuZCByZWRpc3RyaWJ1dGUgaXRcbi8vIGZyZWVseSwgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIHJlc3RyaWN0aW9uczpcbi8vXG4vLyAxLiBUaGUgb3JpZ2luIG9mIHRoaXMgc29mdHdhcmUgbXVzdCBub3QgYmUgbWlzcmVwcmVzZW50ZWQ7IHlvdSBtdXN0IG5vdFxuLy8gICBjbGFpbSB0aGF0IHlvdSB3cm90ZSB0aGUgb3JpZ2luYWwgc29mdHdhcmUuIElmIHlvdSB1c2UgdGhpcyBzb2Z0d2FyZVxuLy8gICBpbiBhIHByb2R1Y3QsIGFuIGFja25vd2xlZGdtZW50IGluIHRoZSBwcm9kdWN0IGRvY3VtZW50YXRpb24gd291bGQgYmVcbi8vICAgYXBwcmVjaWF0ZWQgYnV0IGlzIG5vdCByZXF1aXJlZC5cbi8vIDIuIEFsdGVyZWQgc291cmNlIHZlcnNpb25zIG11c3QgYmUgcGxhaW5seSBtYXJrZWQgYXMgc3VjaCwgYW5kIG11c3Qgbm90IGJlXG4vLyAgIG1pc3JlcHJlc2VudGVkIGFzIGJlaW5nIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS5cbi8vIDMuIFRoaXMgbm90aWNlIG1heSBub3QgYmUgcmVtb3ZlZCBvciBhbHRlcmVkIGZyb20gYW55IHNvdXJjZSBkaXN0cmlidXRpb24uXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXG4gIC8qIEFsbG93ZWQgZmx1c2ggdmFsdWVzOyBzZWUgZGVmbGF0ZSgpIGFuZCBpbmZsYXRlKCkgYmVsb3cgZm9yIGRldGFpbHMgKi9cbiAgWl9OT19GTFVTSDogICAgICAgICAwLFxuICBaX1BBUlRJQUxfRkxVU0g6ICAgIDEsXG4gIFpfU1lOQ19GTFVTSDogICAgICAgMixcbiAgWl9GVUxMX0ZMVVNIOiAgICAgICAzLFxuICBaX0ZJTklTSDogICAgICAgICAgIDQsXG4gIFpfQkxPQ0s6ICAgICAgICAgICAgNSxcbiAgWl9UUkVFUzogICAgICAgICAgICA2LFxuXG4gIC8qIFJldHVybiBjb2RlcyBmb3IgdGhlIGNvbXByZXNzaW9uL2RlY29tcHJlc3Npb24gZnVuY3Rpb25zLiBOZWdhdGl2ZSB2YWx1ZXNcbiAgKiBhcmUgZXJyb3JzLCBwb3NpdGl2ZSB2YWx1ZXMgYXJlIHVzZWQgZm9yIHNwZWNpYWwgYnV0IG5vcm1hbCBldmVudHMuXG4gICovXG4gIFpfT0s6ICAgICAgICAgICAgICAgMCxcbiAgWl9TVFJFQU1fRU5EOiAgICAgICAxLFxuICBaX05FRURfRElDVDogICAgICAgIDIsXG4gIFpfRVJSTk86ICAgICAgICAgICAtMSxcbiAgWl9TVFJFQU1fRVJST1I6ICAgIC0yLFxuICBaX0RBVEFfRVJST1I6ICAgICAgLTMsXG4gIC8vWl9NRU1fRVJST1I6ICAgICAtNCxcbiAgWl9CVUZfRVJST1I6ICAgICAgIC01LFxuICAvL1pfVkVSU0lPTl9FUlJPUjogLTYsXG5cbiAgLyogY29tcHJlc3Npb24gbGV2ZWxzICovXG4gIFpfTk9fQ09NUFJFU1NJT046ICAgICAgICAgMCxcbiAgWl9CRVNUX1NQRUVEOiAgICAgICAgICAgICAxLFxuICBaX0JFU1RfQ09NUFJFU1NJT046ICAgICAgIDksXG4gIFpfREVGQVVMVF9DT01QUkVTU0lPTjogICAtMSxcblxuXG4gIFpfRklMVEVSRUQ6ICAgICAgICAgICAgICAgMSxcbiAgWl9IVUZGTUFOX09OTFk6ICAgICAgICAgICAyLFxuICBaX1JMRTogICAgICAgICAgICAgICAgICAgIDMsXG4gIFpfRklYRUQ6ICAgICAgICAgICAgICAgICAgNCxcbiAgWl9ERUZBVUxUX1NUUkFURUdZOiAgICAgICAwLFxuXG4gIC8qIFBvc3NpYmxlIHZhbHVlcyBvZiB0aGUgZGF0YV90eXBlIGZpZWxkICh0aG91Z2ggc2VlIGluZmxhdGUoKSkgKi9cbiAgWl9CSU5BUlk6ICAgICAgICAgICAgICAgICAwLFxuICBaX1RFWFQ6ICAgICAgICAgICAgICAgICAgIDEsXG4gIC8vWl9BU0NJSTogICAgICAgICAgICAgICAgMSwgLy8gPSBaX1RFWFQgKGRlcHJlY2F0ZWQpXG4gIFpfVU5LTk9XTjogICAgICAgICAgICAgICAgMixcblxuICAvKiBUaGUgZGVmbGF0ZSBjb21wcmVzc2lvbiBtZXRob2QgKi9cbiAgWl9ERUZMQVRFRDogICAgICAgICAgICAgICA4XG4gIC8vWl9OVUxMOiAgICAgICAgICAgICAgICAgbnVsbCAvLyBVc2UgLTEgb3IgbnVsbCBpbmxpbmUsIGRlcGVuZGluZyBvbiB2YXIgdHlwZVxufTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/pako/lib/zlib/constants.js\n");

/***/ }),

/***/ "./node_modules/pako/lib/zlib/crc32.js":
/*!*********************************************!*\
  !*** ./node_modules/pako/lib/zlib/crc32.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n// Note: we can't get significant speed boost here.\n// So write code to minimize size - no pregenerated tables\n// and array tools dependencies.\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n// Use ordinary array, since untyped makes no boost here\nfunction makeTable() {\n  var c, table = [];\n\n  for (var n = 0; n < 256; n++) {\n    c = n;\n    for (var k = 0; k < 8; k++) {\n      c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));\n    }\n    table[n] = c;\n  }\n\n  return table;\n}\n\n// Create table on load. Just 255 signed longs. Not a problem.\nvar crcTable = makeTable();\n\n\nfunction crc32(crc, buf, len, pos) {\n  var t = crcTable,\n      end = pos + len;\n\n  crc ^= -1;\n\n  for (var i = pos; i < end; i++) {\n    crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];\n  }\n\n  return (crc ^ (-1)); // >>> 0;\n}\n\n\nmodule.exports = crc32;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcGFrby9saWIvemxpYi9jcmMzMi5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL1RlbGVncmFtanMvLi9ub2RlX21vZHVsZXMvcGFrby9saWIvemxpYi9jcmMzMi5qcz9lZWRhIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLy8gTm90ZTogd2UgY2FuJ3QgZ2V0IHNpZ25pZmljYW50IHNwZWVkIGJvb3N0IGhlcmUuXG4vLyBTbyB3cml0ZSBjb2RlIHRvIG1pbmltaXplIHNpemUgLSBubyBwcmVnZW5lcmF0ZWQgdGFibGVzXG4vLyBhbmQgYXJyYXkgdG9vbHMgZGVwZW5kZW5jaWVzLlxuXG4vLyAoQykgMTk5NS0yMDEzIEplYW4tbG91cCBHYWlsbHkgYW5kIE1hcmsgQWRsZXJcbi8vIChDKSAyMDE0LTIwMTcgVml0YWx5IFB1enJpbiBhbmQgQW5kcmV5IFR1cGl0c2luXG4vL1xuLy8gVGhpcyBzb2Z0d2FyZSBpcyBwcm92aWRlZCAnYXMtaXMnLCB3aXRob3V0IGFueSBleHByZXNzIG9yIGltcGxpZWRcbi8vIHdhcnJhbnR5LiBJbiBubyBldmVudCB3aWxsIHRoZSBhdXRob3JzIGJlIGhlbGQgbGlhYmxlIGZvciBhbnkgZGFtYWdlc1xuLy8gYXJpc2luZyBmcm9tIHRoZSB1c2Ugb2YgdGhpcyBzb2Z0d2FyZS5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGdyYW50ZWQgdG8gYW55b25lIHRvIHVzZSB0aGlzIHNvZnR3YXJlIGZvciBhbnkgcHVycG9zZSxcbi8vIGluY2x1ZGluZyBjb21tZXJjaWFsIGFwcGxpY2F0aW9ucywgYW5kIHRvIGFsdGVyIGl0IGFuZCByZWRpc3RyaWJ1dGUgaXRcbi8vIGZyZWVseSwgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIHJlc3RyaWN0aW9uczpcbi8vXG4vLyAxLiBUaGUgb3JpZ2luIG9mIHRoaXMgc29mdHdhcmUgbXVzdCBub3QgYmUgbWlzcmVwcmVzZW50ZWQ7IHlvdSBtdXN0IG5vdFxuLy8gICBjbGFpbSB0aGF0IHlvdSB3cm90ZSB0aGUgb3JpZ2luYWwgc29mdHdhcmUuIElmIHlvdSB1c2UgdGhpcyBzb2Z0d2FyZVxuLy8gICBpbiBhIHByb2R1Y3QsIGFuIGFja25vd2xlZGdtZW50IGluIHRoZSBwcm9kdWN0IGRvY3VtZW50YXRpb24gd291bGQgYmVcbi8vICAgYXBwcmVjaWF0ZWQgYnV0IGlzIG5vdCByZXF1aXJlZC5cbi8vIDIuIEFsdGVyZWQgc291cmNlIHZlcnNpb25zIG11c3QgYmUgcGxhaW5seSBtYXJrZWQgYXMgc3VjaCwgYW5kIG11c3Qgbm90IGJlXG4vLyAgIG1pc3JlcHJlc2VudGVkIGFzIGJlaW5nIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS5cbi8vIDMuIFRoaXMgbm90aWNlIG1heSBub3QgYmUgcmVtb3ZlZCBvciBhbHRlcmVkIGZyb20gYW55IHNvdXJjZSBkaXN0cmlidXRpb24uXG5cbi8vIFVzZSBvcmRpbmFyeSBhcnJheSwgc2luY2UgdW50eXBlZCBtYWtlcyBubyBib29zdCBoZXJlXG5mdW5jdGlvbiBtYWtlVGFibGUoKSB7XG4gIHZhciBjLCB0YWJsZSA9IFtdO1xuXG4gIGZvciAodmFyIG4gPSAwOyBuIDwgMjU2OyBuKyspIHtcbiAgICBjID0gbjtcbiAgICBmb3IgKHZhciBrID0gMDsgayA8IDg7IGsrKykge1xuICAgICAgYyA9ICgoYyAmIDEpID8gKDB4RURCODgzMjAgXiAoYyA+Pj4gMSkpIDogKGMgPj4+IDEpKTtcbiAgICB9XG4gICAgdGFibGVbbl0gPSBjO1xuICB9XG5cbiAgcmV0dXJuIHRhYmxlO1xufVxuXG4vLyBDcmVhdGUgdGFibGUgb24gbG9hZC4gSnVzdCAyNTUgc2lnbmVkIGxvbmdzLiBOb3QgYSBwcm9ibGVtLlxudmFyIGNyY1RhYmxlID0gbWFrZVRhYmxlKCk7XG5cblxuZnVuY3Rpb24gY3JjMzIoY3JjLCBidWYsIGxlbiwgcG9zKSB7XG4gIHZhciB0ID0gY3JjVGFibGUsXG4gICAgICBlbmQgPSBwb3MgKyBsZW47XG5cbiAgY3JjIF49IC0xO1xuXG4gIGZvciAodmFyIGkgPSBwb3M7IGkgPCBlbmQ7IGkrKykge1xuICAgIGNyYyA9IChjcmMgPj4+IDgpIF4gdFsoY3JjIF4gYnVmW2ldKSAmIDB4RkZdO1xuICB9XG5cbiAgcmV0dXJuIChjcmMgXiAoLTEpKTsgLy8gPj4+IDA7XG59XG5cblxubW9kdWxlLmV4cG9ydHMgPSBjcmMzMjtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/pako/lib/zlib/crc32.js\n");

/***/ }),

/***/ "./node_modules/pako/lib/zlib/deflate.js":
/*!***********************************************!*\
  !*** ./node_modules/pako/lib/zlib/deflate.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nvar utils   = __webpack_require__(/*! ../utils/common */ \"./node_modules/pako/lib/utils/common.js\");\nvar trees   = __webpack_require__(/*! ./trees */ \"./node_modules/pako/lib/zlib/trees.js\");\nvar adler32 = __webpack_require__(/*! ./adler32 */ \"./node_modules/pako/lib/zlib/adler32.js\");\nvar crc32   = __webpack_require__(/*! ./crc32 */ \"./node_modules/pako/lib/zlib/crc32.js\");\nvar msg     = __webpack_require__(/*! ./messages */ \"./node_modules/pako/lib/zlib/messages.js\");\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\n\n/* Allowed flush values; see deflate() and inflate() below for details */\nvar Z_NO_FLUSH      = 0;\nvar Z_PARTIAL_FLUSH = 1;\n//var Z_SYNC_FLUSH    = 2;\nvar Z_FULL_FLUSH    = 3;\nvar Z_FINISH        = 4;\nvar Z_BLOCK         = 5;\n//var Z_TREES         = 6;\n\n\n/* Return codes for the compression/decompression functions. Negative values\n * are errors, positive values are used for special but normal events.\n */\nvar Z_OK            = 0;\nvar Z_STREAM_END    = 1;\n//var Z_NEED_DICT     = 2;\n//var Z_ERRNO         = -1;\nvar Z_STREAM_ERROR  = -2;\nvar Z_DATA_ERROR    = -3;\n//var Z_MEM_ERROR     = -4;\nvar Z_BUF_ERROR     = -5;\n//var Z_VERSION_ERROR = -6;\n\n\n/* compression levels */\n//var Z_NO_COMPRESSION      = 0;\n//var Z_BEST_SPEED          = 1;\n//var Z_BEST_COMPRESSION    = 9;\nvar Z_DEFAULT_COMPRESSION = -1;\n\n\nvar Z_FILTERED            = 1;\nvar Z_HUFFMAN_ONLY        = 2;\nvar Z_RLE                 = 3;\nvar Z_FIXED               = 4;\nvar Z_DEFAULT_STRATEGY    = 0;\n\n/* Possible values of the data_type field (though see inflate()) */\n//var Z_BINARY              = 0;\n//var Z_TEXT                = 1;\n//var Z_ASCII               = 1; // = Z_TEXT\nvar Z_UNKNOWN             = 2;\n\n\n/* The deflate compression method */\nvar Z_DEFLATED  = 8;\n\n/*============================================================================*/\n\n\nvar MAX_MEM_LEVEL = 9;\n/* Maximum value for memLevel in deflateInit2 */\nvar MAX_WBITS = 15;\n/* 32K LZ77 window */\nvar DEF_MEM_LEVEL = 8;\n\n\nvar LENGTH_CODES  = 29;\n/* number of length codes, not counting the special END_BLOCK code */\nvar LITERALS      = 256;\n/* number of literal bytes 0..255 */\nvar L_CODES       = LITERALS + 1 + LENGTH_CODES;\n/* number of Literal or Length codes, including the END_BLOCK code */\nvar D_CODES       = 30;\n/* number of distance codes */\nvar BL_CODES      = 19;\n/* number of codes used to transfer the bit lengths */\nvar HEAP_SIZE     = 2 * L_CODES + 1;\n/* maximum heap size */\nvar MAX_BITS  = 15;\n/* All codes must not exceed MAX_BITS bits */\n\nvar MIN_MATCH = 3;\nvar MAX_MATCH = 258;\nvar MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);\n\nvar PRESET_DICT = 0x20;\n\nvar INIT_STATE = 42;\nvar EXTRA_STATE = 69;\nvar NAME_STATE = 73;\nvar COMMENT_STATE = 91;\nvar HCRC_STATE = 103;\nvar BUSY_STATE = 113;\nvar FINISH_STATE = 666;\n\nvar BS_NEED_MORE      = 1; /* block not completed, need more input or more output */\nvar BS_BLOCK_DONE     = 2; /* block flush performed */\nvar BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */\nvar BS_FINISH_DONE    = 4; /* finish done, accept no more input or output */\n\nvar OS_CODE = 0x03; // Unix :) . Don't detect, use this default.\n\nfunction err(strm, errorCode) {\n  strm.msg = msg[errorCode];\n  return errorCode;\n}\n\nfunction rank(f) {\n  return ((f) << 1) - ((f) > 4 ? 9 : 0);\n}\n\nfunction zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }\n\n\n/* =========================================================================\n * Flush as much pending output as possible. All deflate() output goes\n * through this function so some applications may wish to modify it\n * to avoid allocating a large strm->output buffer and copying into it.\n * (See also read_buf()).\n */\nfunction flush_pending(strm) {\n  var s = strm.state;\n\n  //_tr_flush_bits(s);\n  var len = s.pending;\n  if (len > strm.avail_out) {\n    len = strm.avail_out;\n  }\n  if (len === 0) { return; }\n\n  utils.arraySet(strm.output, s.pending_buf, s.pending_out, len, strm.next_out);\n  strm.next_out += len;\n  s.pending_out += len;\n  strm.total_out += len;\n  strm.avail_out -= len;\n  s.pending -= len;\n  if (s.pending === 0) {\n    s.pending_out = 0;\n  }\n}\n\n\nfunction flush_block_only(s, last) {\n  trees._tr_flush_block(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);\n  s.block_start = s.strstart;\n  flush_pending(s.strm);\n}\n\n\nfunction put_byte(s, b) {\n  s.pending_buf[s.pending++] = b;\n}\n\n\n/* =========================================================================\n * Put a short in the pending buffer. The 16-bit value is put in MSB order.\n * IN assertion: the stream state is correct and there is enough room in\n * pending_buf.\n */\nfunction putShortMSB(s, b) {\n//  put_byte(s, (Byte)(b >> 8));\n//  put_byte(s, (Byte)(b & 0xff));\n  s.pending_buf[s.pending++] = (b >>> 8) & 0xff;\n  s.pending_buf[s.pending++] = b & 0xff;\n}\n\n\n/* ===========================================================================\n * Read a new buffer from the current input stream, update the adler32\n * and total number of bytes read.  All deflate() input goes through\n * this function so some applications may wish to modify it to avoid\n * allocating a large strm->input buffer and copying from it.\n * (See also flush_pending()).\n */\nfunction read_buf(strm, buf, start, size) {\n  var len = strm.avail_in;\n\n  if (len > size) { len = size; }\n  if (len === 0) { return 0; }\n\n  strm.avail_in -= len;\n\n  // zmemcpy(buf, strm->next_in, len);\n  utils.arraySet(buf, strm.input, strm.next_in, len, start);\n  if (strm.state.wrap === 1) {\n    strm.adler = adler32(strm.adler, buf, len, start);\n  }\n\n  else if (strm.state.wrap === 2) {\n    strm.adler = crc32(strm.adler, buf, len, start);\n  }\n\n  strm.next_in += len;\n  strm.total_in += len;\n\n  return len;\n}\n\n\n/* ===========================================================================\n * Set match_start to the longest match starting at the given string and\n * return its length. Matches shorter or equal to prev_length are discarded,\n * in which case the result is equal to prev_length and match_start is\n * garbage.\n * IN assertions: cur_match is the head of the hash chain for the current\n *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1\n * OUT assertion: the match length is not greater than s->lookahead.\n */\nfunction longest_match(s, cur_match) {\n  var chain_length = s.max_chain_length;      /* max hash chain length */\n  var scan = s.strstart; /* current string */\n  var match;                       /* matched string */\n  var len;                           /* length of current match */\n  var best_len = s.prev_length;              /* best match length so far */\n  var nice_match = s.nice_match;             /* stop if match long enough */\n  var limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?\n      s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0/*NIL*/;\n\n  var _win = s.window; // shortcut\n\n  var wmask = s.w_mask;\n  var prev  = s.prev;\n\n  /* Stop when cur_match becomes <= limit. To simplify the code,\n   * we prevent matches with the string of window index 0.\n   */\n\n  var strend = s.strstart + MAX_MATCH;\n  var scan_end1  = _win[scan + best_len - 1];\n  var scan_end   = _win[scan + best_len];\n\n  /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.\n   * It is easy to get rid of this optimization if necessary.\n   */\n  // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, \"Code too clever\");\n\n  /* Do not waste too much time if we already have a good match: */\n  if (s.prev_length >= s.good_match) {\n    chain_length >>= 2;\n  }\n  /* Do not look for matches beyond the end of the input. This is necessary\n   * to make deflate deterministic.\n   */\n  if (nice_match > s.lookahead) { nice_match = s.lookahead; }\n\n  // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, \"need lookahead\");\n\n  do {\n    // Assert(cur_match < s->strstart, \"no future\");\n    match = cur_match;\n\n    /* Skip to next match if the match length cannot increase\n     * or if the match length is less than 2.  Note that the checks below\n     * for insufficient lookahead only occur occasionally for performance\n     * reasons.  Therefore uninitialized memory will be accessed, and\n     * conditional jumps will be made that depend on those values.\n     * However the length of the match is limited to the lookahead, so\n     * the output of deflate is not affected by the uninitialized values.\n     */\n\n    if (_win[match + best_len]     !== scan_end  ||\n        _win[match + best_len - 1] !== scan_end1 ||\n        _win[match]                !== _win[scan] ||\n        _win[++match]              !== _win[scan + 1]) {\n      continue;\n    }\n\n    /* The check at best_len-1 can be removed because it will be made\n     * again later. (This heuristic is not always a win.)\n     * It is not necessary to compare scan[2] and match[2] since they\n     * are always equal when the other bytes match, given that\n     * the hash keys are equal and that HASH_BITS >= 8.\n     */\n    scan += 2;\n    match++;\n    // Assert(*scan == *match, \"match[2]?\");\n\n    /* We check for insufficient lookahead only every 8th comparison;\n     * the 256th check will be made at strstart+258.\n     */\n    do {\n      /*jshint noempty:false*/\n    } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             scan < strend);\n\n    // Assert(scan <= s->window+(unsigned)(s->window_size-1), \"wild scan\");\n\n    len = MAX_MATCH - (strend - scan);\n    scan = strend - MAX_MATCH;\n\n    if (len > best_len) {\n      s.match_start = cur_match;\n      best_len = len;\n      if (len >= nice_match) {\n        break;\n      }\n      scan_end1  = _win[scan + best_len - 1];\n      scan_end   = _win[scan + best_len];\n    }\n  } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);\n\n  if (best_len <= s.lookahead) {\n    return best_len;\n  }\n  return s.lookahead;\n}\n\n\n/* ===========================================================================\n * Fill the window when the lookahead becomes insufficient.\n * Updates strstart and lookahead.\n *\n * IN assertion: lookahead < MIN_LOOKAHEAD\n * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD\n *    At least one byte has been read, or avail_in == 0; reads are\n *    performed for at least two bytes (required for the zip translate_eol\n *    option -- not supported here).\n */\nfunction fill_window(s) {\n  var _w_size = s.w_size;\n  var p, n, m, more, str;\n\n  //Assert(s->lookahead < MIN_LOOKAHEAD, \"already enough lookahead\");\n\n  do {\n    more = s.window_size - s.lookahead - s.strstart;\n\n    // JS ints have 32 bit, block below not needed\n    /* Deal with !@#$% 64K limit: */\n    //if (sizeof(int) <= 2) {\n    //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {\n    //        more = wsize;\n    //\n    //  } else if (more == (unsigned)(-1)) {\n    //        /* Very unlikely, but possible on 16 bit machine if\n    //         * strstart == 0 && lookahead == 1 (input done a byte at time)\n    //         */\n    //        more--;\n    //    }\n    //}\n\n\n    /* If the window is almost full and there is insufficient lookahead,\n     * move the upper half to the lower one to make room in the upper half.\n     */\n    if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {\n\n      utils.arraySet(s.window, s.window, _w_size, _w_size, 0);\n      s.match_start -= _w_size;\n      s.strstart -= _w_size;\n      /* we now have strstart >= MAX_DIST */\n      s.block_start -= _w_size;\n\n      /* Slide the hash table (could be avoided with 32 bit values\n       at the expense of memory usage). We slide even when level == 0\n       to keep the hash table consistent if we switch back to level > 0\n       later. (Using level 0 permanently is not an optimal usage of\n       zlib, so we don't care about this pathological case.)\n       */\n\n      n = s.hash_size;\n      p = n;\n      do {\n        m = s.head[--p];\n        s.head[p] = (m >= _w_size ? m - _w_size : 0);\n      } while (--n);\n\n      n = _w_size;\n      p = n;\n      do {\n        m = s.prev[--p];\n        s.prev[p] = (m >= _w_size ? m - _w_size : 0);\n        /* If n is not on any hash chain, prev[n] is garbage but\n         * its value will never be used.\n         */\n      } while (--n);\n\n      more += _w_size;\n    }\n    if (s.strm.avail_in === 0) {\n      break;\n    }\n\n    /* If there was no sliding:\n     *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&\n     *    more == window_size - lookahead - strstart\n     * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)\n     * => more >= window_size - 2*WSIZE + 2\n     * In the BIG_MEM or MMAP case (not yet supported),\n     *   window_size == input_size + MIN_LOOKAHEAD  &&\n     *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.\n     * Otherwise, window_size == 2*WSIZE so more >= 2.\n     * If there was sliding, more >= WSIZE. So in all cases, more >= 2.\n     */\n    //Assert(more >= 2, \"more < 2\");\n    n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);\n    s.lookahead += n;\n\n    /* Initialize the hash value now that we have some input: */\n    if (s.lookahead + s.insert >= MIN_MATCH) {\n      str = s.strstart - s.insert;\n      s.ins_h = s.window[str];\n\n      /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */\n      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + 1]) & s.hash_mask;\n//#if MIN_MATCH != 3\n//        Call update_hash() MIN_MATCH-3 more times\n//#endif\n      while (s.insert) {\n        /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */\n        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;\n\n        s.prev[str & s.w_mask] = s.head[s.ins_h];\n        s.head[s.ins_h] = str;\n        str++;\n        s.insert--;\n        if (s.lookahead + s.insert < MIN_MATCH) {\n          break;\n        }\n      }\n    }\n    /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,\n     * but this is not important since only literal bytes will be emitted.\n     */\n\n  } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);\n\n  /* If the WIN_INIT bytes after the end of the current data have never been\n   * written, then zero those bytes in order to avoid memory check reports of\n   * the use of uninitialized (or uninitialised as Julian writes) bytes by\n   * the longest match routines.  Update the high water mark for the next\n   * time through here.  WIN_INIT is set to MAX_MATCH since the longest match\n   * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.\n   */\n//  if (s.high_water < s.window_size) {\n//    var curr = s.strstart + s.lookahead;\n//    var init = 0;\n//\n//    if (s.high_water < curr) {\n//      /* Previous high water mark below current data -- zero WIN_INIT\n//       * bytes or up to end of window, whichever is less.\n//       */\n//      init = s.window_size - curr;\n//      if (init > WIN_INIT)\n//        init = WIN_INIT;\n//      zmemzero(s->window + curr, (unsigned)init);\n//      s->high_water = curr + init;\n//    }\n//    else if (s->high_water < (ulg)curr + WIN_INIT) {\n//      /* High water mark at or above current data, but below current data\n//       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up\n//       * to end of window, whichever is less.\n//       */\n//      init = (ulg)curr + WIN_INIT - s->high_water;\n//      if (init > s->window_size - s->high_water)\n//        init = s->window_size - s->high_water;\n//      zmemzero(s->window + s->high_water, (unsigned)init);\n//      s->high_water += init;\n//    }\n//  }\n//\n//  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,\n//    \"not enough room for search\");\n}\n\n/* ===========================================================================\n * Copy without compression as much as possible from the input stream, return\n * the current block state.\n * This function does not insert new strings in the dictionary since\n * uncompressible data is probably not useful. This function is used\n * only for the level=0 compression option.\n * NOTE: this function should be optimized to avoid extra copying from\n * window to pending_buf.\n */\nfunction deflate_stored(s, flush) {\n  /* Stored blocks are limited to 0xffff bytes, pending_buf is limited\n   * to pending_buf_size, and each stored block has a 5 byte header:\n   */\n  var max_block_size = 0xffff;\n\n  if (max_block_size > s.pending_buf_size - 5) {\n    max_block_size = s.pending_buf_size - 5;\n  }\n\n  /* Copy as much as possible from input to output: */\n  for (;;) {\n    /* Fill the window as much as possible: */\n    if (s.lookahead <= 1) {\n\n      //Assert(s->strstart < s->w_size+MAX_DIST(s) ||\n      //  s->block_start >= (long)s->w_size, \"slide too late\");\n//      if (!(s.strstart < s.w_size + (s.w_size - MIN_LOOKAHEAD) ||\n//        s.block_start >= s.w_size)) {\n//        throw  new Error(\"slide too late\");\n//      }\n\n      fill_window(s);\n      if (s.lookahead === 0 && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n\n      if (s.lookahead === 0) {\n        break;\n      }\n      /* flush the current block */\n    }\n    //Assert(s->block_start >= 0L, \"block gone\");\n//    if (s.block_start < 0) throw new Error(\"block gone\");\n\n    s.strstart += s.lookahead;\n    s.lookahead = 0;\n\n    /* Emit a stored block if pending_buf will be full: */\n    var max_start = s.block_start + max_block_size;\n\n    if (s.strstart === 0 || s.strstart >= max_start) {\n      /* strstart == 0 is possible when wraparound on 16-bit machine */\n      s.lookahead = s.strstart - max_start;\n      s.strstart = max_start;\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n\n\n    }\n    /* Flush if we may have to slide, otherwise block_start may become\n     * negative and the data will be gone:\n     */\n    if (s.strstart - s.block_start >= (s.w_size - MIN_LOOKAHEAD)) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n\n  s.insert = 0;\n\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n\n  if (s.strstart > s.block_start) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n\n  return BS_NEED_MORE;\n}\n\n/* ===========================================================================\n * Compress as much as possible from the input stream, return the current\n * block state.\n * This function does not perform lazy evaluation of matches and inserts\n * new strings in the dictionary only for unmatched strings or for short\n * matches. It is used only for the fast compression options.\n */\nfunction deflate_fast(s, flush) {\n  var hash_head;        /* head of the hash chain */\n  var bflush;           /* set if current block must be flushed */\n\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the next match, plus MIN_MATCH bytes to insert the\n     * string following the next match.\n     */\n    if (s.lookahead < MIN_LOOKAHEAD) {\n      fill_window(s);\n      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) {\n        break; /* flush the current block */\n      }\n    }\n\n    /* Insert the string window[strstart .. strstart+2] in the\n     * dictionary, and set hash_head to the head of the hash chain:\n     */\n    hash_head = 0/*NIL*/;\n    if (s.lookahead >= MIN_MATCH) {\n      /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n      s.head[s.ins_h] = s.strstart;\n      /***/\n    }\n\n    /* Find the longest match, discarding those <= prev_length.\n     * At this point we have always match_length < MIN_MATCH\n     */\n    if (hash_head !== 0/*NIL*/ && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {\n      /* To simplify the code, we prevent matches with the string\n       * of window index 0 (in particular we have to avoid a match\n       * of the string with itself at the start of the input file).\n       */\n      s.match_length = longest_match(s, hash_head);\n      /* longest_match() sets match_start */\n    }\n    if (s.match_length >= MIN_MATCH) {\n      // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only\n\n      /*** _tr_tally_dist(s, s.strstart - s.match_start,\n                     s.match_length - MIN_MATCH, bflush); ***/\n      bflush = trees._tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);\n\n      s.lookahead -= s.match_length;\n\n      /* Insert new strings in the hash table only if the match length\n       * is not too large. This saves time but degrades compression.\n       */\n      if (s.match_length <= s.max_lazy_match/*max_insert_length*/ && s.lookahead >= MIN_MATCH) {\n        s.match_length--; /* string at strstart already in table */\n        do {\n          s.strstart++;\n          /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n          s.head[s.ins_h] = s.strstart;\n          /***/\n          /* strstart never exceeds WSIZE-MAX_MATCH, so there are\n           * always MIN_MATCH bytes ahead.\n           */\n        } while (--s.match_length !== 0);\n        s.strstart++;\n      } else\n      {\n        s.strstart += s.match_length;\n        s.match_length = 0;\n        s.ins_h = s.window[s.strstart];\n        /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */\n        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + 1]) & s.hash_mask;\n\n//#if MIN_MATCH != 3\n//                Call UPDATE_HASH() MIN_MATCH-3 more times\n//#endif\n        /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not\n         * matter since it will be recomputed at next deflate call.\n         */\n      }\n    } else {\n      /* No match, output a literal byte */\n      //Tracevv((stderr,\"%c\", s.window[s.strstart]));\n      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);\n\n      s.lookahead--;\n      s.strstart++;\n    }\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = ((s.strstart < (MIN_MATCH - 1)) ? s.strstart : MIN_MATCH - 1);\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n}\n\n/* ===========================================================================\n * Same as above, but achieves better compression. We use a lazy\n * evaluation for matches: a match is finally adopted only if there is\n * no better match at the next window position.\n */\nfunction deflate_slow(s, flush) {\n  var hash_head;          /* head of hash chain */\n  var bflush;              /* set if current block must be flushed */\n\n  var max_insert;\n\n  /* Process the input block. */\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the next match, plus MIN_MATCH bytes to insert the\n     * string following the next match.\n     */\n    if (s.lookahead < MIN_LOOKAHEAD) {\n      fill_window(s);\n      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) { break; } /* flush the current block */\n    }\n\n    /* Insert the string window[strstart .. strstart+2] in the\n     * dictionary, and set hash_head to the head of the hash chain:\n     */\n    hash_head = 0/*NIL*/;\n    if (s.lookahead >= MIN_MATCH) {\n      /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n      s.head[s.ins_h] = s.strstart;\n      /***/\n    }\n\n    /* Find the longest match, discarding those <= prev_length.\n     */\n    s.prev_length = s.match_length;\n    s.prev_match = s.match_start;\n    s.match_length = MIN_MATCH - 1;\n\n    if (hash_head !== 0/*NIL*/ && s.prev_length < s.max_lazy_match &&\n        s.strstart - hash_head <= (s.w_size - MIN_LOOKAHEAD)/*MAX_DIST(s)*/) {\n      /* To simplify the code, we prevent matches with the string\n       * of window index 0 (in particular we have to avoid a match\n       * of the string with itself at the start of the input file).\n       */\n      s.match_length = longest_match(s, hash_head);\n      /* longest_match() sets match_start */\n\n      if (s.match_length <= 5 &&\n         (s.strategy === Z_FILTERED || (s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096/*TOO_FAR*/))) {\n\n        /* If prev_match is also MIN_MATCH, match_start is garbage\n         * but we will ignore the current match anyway.\n         */\n        s.match_length = MIN_MATCH - 1;\n      }\n    }\n    /* If there was a match at the previous step and the current\n     * match is not better, output the previous match:\n     */\n    if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {\n      max_insert = s.strstart + s.lookahead - MIN_MATCH;\n      /* Do not insert strings in hash table beyond this. */\n\n      //check_match(s, s.strstart-1, s.prev_match, s.prev_length);\n\n      /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,\n                     s.prev_length - MIN_MATCH, bflush);***/\n      bflush = trees._tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);\n      /* Insert in hash table all strings up to the end of the match.\n       * strstart-1 and strstart are already inserted. If there is not\n       * enough lookahead, the last two strings are not inserted in\n       * the hash table.\n       */\n      s.lookahead -= s.prev_length - 1;\n      s.prev_length -= 2;\n      do {\n        if (++s.strstart <= max_insert) {\n          /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n          s.head[s.ins_h] = s.strstart;\n          /***/\n        }\n      } while (--s.prev_length !== 0);\n      s.match_available = 0;\n      s.match_length = MIN_MATCH - 1;\n      s.strstart++;\n\n      if (bflush) {\n        /*** FLUSH_BLOCK(s, 0); ***/\n        flush_block_only(s, false);\n        if (s.strm.avail_out === 0) {\n          return BS_NEED_MORE;\n        }\n        /***/\n      }\n\n    } else if (s.match_available) {\n      /* If there was no match at the previous position, output a\n       * single literal. If there was a match but the current match\n       * is longer, truncate the previous match to a single literal.\n       */\n      //Tracevv((stderr,\"%c\", s->window[s->strstart-1]));\n      /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/\n      bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);\n\n      if (bflush) {\n        /*** FLUSH_BLOCK_ONLY(s, 0) ***/\n        flush_block_only(s, false);\n        /***/\n      }\n      s.strstart++;\n      s.lookahead--;\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n    } else {\n      /* There is no previous match to compare with, wait for\n       * the next step to decide.\n       */\n      s.match_available = 1;\n      s.strstart++;\n      s.lookahead--;\n    }\n  }\n  //Assert (flush != Z_NO_FLUSH, \"no flush?\");\n  if (s.match_available) {\n    //Tracevv((stderr,\"%c\", s->window[s->strstart-1]));\n    /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/\n    bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);\n\n    s.match_available = 0;\n  }\n  s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n\n  return BS_BLOCK_DONE;\n}\n\n\n/* ===========================================================================\n * For Z_RLE, simply look for runs of bytes, generate matches only of distance\n * one.  Do not maintain a hash table.  (It will be regenerated if this run of\n * deflate switches away from Z_RLE.)\n */\nfunction deflate_rle(s, flush) {\n  var bflush;            /* set if current block must be flushed */\n  var prev;              /* byte at distance one to match */\n  var scan, strend;      /* scan goes up to strend for length of run */\n\n  var _win = s.window;\n\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the longest run, plus one for the unrolled loop.\n     */\n    if (s.lookahead <= MAX_MATCH) {\n      fill_window(s);\n      if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) { break; } /* flush the current block */\n    }\n\n    /* See how many times the previous byte repeats */\n    s.match_length = 0;\n    if (s.lookahead >= MIN_MATCH && s.strstart > 0) {\n      scan = s.strstart - 1;\n      prev = _win[scan];\n      if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {\n        strend = s.strstart + MAX_MATCH;\n        do {\n          /*jshint noempty:false*/\n        } while (prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 scan < strend);\n        s.match_length = MAX_MATCH - (strend - scan);\n        if (s.match_length > s.lookahead) {\n          s.match_length = s.lookahead;\n        }\n      }\n      //Assert(scan <= s->window+(uInt)(s->window_size-1), \"wild scan\");\n    }\n\n    /* Emit match if have run of MIN_MATCH or longer, else emit literal */\n    if (s.match_length >= MIN_MATCH) {\n      //check_match(s, s.strstart, s.strstart - 1, s.match_length);\n\n      /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/\n      bflush = trees._tr_tally(s, 1, s.match_length - MIN_MATCH);\n\n      s.lookahead -= s.match_length;\n      s.strstart += s.match_length;\n      s.match_length = 0;\n    } else {\n      /* No match, output a literal byte */\n      //Tracevv((stderr,\"%c\", s->window[s->strstart]));\n      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);\n\n      s.lookahead--;\n      s.strstart++;\n    }\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = 0;\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n}\n\n/* ===========================================================================\n * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.\n * (It will be regenerated if this run of deflate switches away from Huffman.)\n */\nfunction deflate_huff(s, flush) {\n  var bflush;             /* set if current block must be flushed */\n\n  for (;;) {\n    /* Make sure that we have a literal to write. */\n    if (s.lookahead === 0) {\n      fill_window(s);\n      if (s.lookahead === 0) {\n        if (flush === Z_NO_FLUSH) {\n          return BS_NEED_MORE;\n        }\n        break;      /* flush the current block */\n      }\n    }\n\n    /* Output a literal byte */\n    s.match_length = 0;\n    //Tracevv((stderr,\"%c\", s->window[s->strstart]));\n    /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n    bflush = trees._tr_tally(s, 0, s.window[s.strstart]);\n    s.lookahead--;\n    s.strstart++;\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = 0;\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n}\n\n/* Values for max_lazy_match, good_match and max_chain_length, depending on\n * the desired pack level (0..9). The values given below have been tuned to\n * exclude worst case performance for pathological files. Better values may be\n * found for specific files.\n */\nfunction Config(good_length, max_lazy, nice_length, max_chain, func) {\n  this.good_length = good_length;\n  this.max_lazy = max_lazy;\n  this.nice_length = nice_length;\n  this.max_chain = max_chain;\n  this.func = func;\n}\n\nvar configuration_table;\n\nconfiguration_table = [\n  /*      good lazy nice chain */\n  new Config(0, 0, 0, 0, deflate_stored),          /* 0 store only */\n  new Config(4, 4, 8, 4, deflate_fast),            /* 1 max speed, no lazy matches */\n  new Config(4, 5, 16, 8, deflate_fast),           /* 2 */\n  new Config(4, 6, 32, 32, deflate_fast),          /* 3 */\n\n  new Config(4, 4, 16, 16, deflate_slow),          /* 4 lazy matches */\n  new Config(8, 16, 32, 32, deflate_slow),         /* 5 */\n  new Config(8, 16, 128, 128, deflate_slow),       /* 6 */\n  new Config(8, 32, 128, 256, deflate_slow),       /* 7 */\n  new Config(32, 128, 258, 1024, deflate_slow),    /* 8 */\n  new Config(32, 258, 258, 4096, deflate_slow)     /* 9 max compression */\n];\n\n\n/* ===========================================================================\n * Initialize the \"longest match\" routines for a new zlib stream\n */\nfunction lm_init(s) {\n  s.window_size = 2 * s.w_size;\n\n  /*** CLEAR_HASH(s); ***/\n  zero(s.head); // Fill with NIL (= 0);\n\n  /* Set the default configuration parameters:\n   */\n  s.max_lazy_match = configuration_table[s.level].max_lazy;\n  s.good_match = configuration_table[s.level].good_length;\n  s.nice_match = configuration_table[s.level].nice_length;\n  s.max_chain_length = configuration_table[s.level].max_chain;\n\n  s.strstart = 0;\n  s.block_start = 0;\n  s.lookahead = 0;\n  s.insert = 0;\n  s.match_length = s.prev_length = MIN_MATCH - 1;\n  s.match_available = 0;\n  s.ins_h = 0;\n}\n\n\nfunction DeflateState() {\n  this.strm = null;            /* pointer back to this zlib stream */\n  this.status = 0;            /* as the name implies */\n  this.pending_buf = null;      /* output still pending */\n  this.pending_buf_size = 0;  /* size of pending_buf */\n  this.pending_out = 0;       /* next pending byte to output to the stream */\n  this.pending = 0;           /* nb of bytes in the pending buffer */\n  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */\n  this.gzhead = null;         /* gzip header information to write */\n  this.gzindex = 0;           /* where in extra, name, or comment */\n  this.method = Z_DEFLATED; /* can only be DEFLATED */\n  this.last_flush = -1;   /* value of flush param for previous deflate call */\n\n  this.w_size = 0;  /* LZ77 window size (32K by default) */\n  this.w_bits = 0;  /* log2(w_size)  (8..16) */\n  this.w_mask = 0;  /* w_size - 1 */\n\n  this.window = null;\n  /* Sliding window. Input bytes are read into the second half of the window,\n   * and move to the first half later to keep a dictionary of at least wSize\n   * bytes. With this organization, matches are limited to a distance of\n   * wSize-MAX_MATCH bytes, but this ensures that IO is always\n   * performed with a length multiple of the block size.\n   */\n\n  this.window_size = 0;\n  /* Actual size of window: 2*wSize, except when the user input buffer\n   * is directly used as sliding window.\n   */\n\n  this.prev = null;\n  /* Link to older string with same hash index. To limit the size of this\n   * array to 64K, this link is maintained only for the last 32K strings.\n   * An index in this array is thus a window index modulo 32K.\n   */\n\n  this.head = null;   /* Heads of the hash chains or NIL. */\n\n  this.ins_h = 0;       /* hash index of string to be inserted */\n  this.hash_size = 0;   /* number of elements in hash table */\n  this.hash_bits = 0;   /* log2(hash_size) */\n  this.hash_mask = 0;   /* hash_size-1 */\n\n  this.hash_shift = 0;\n  /* Number of bits by which ins_h must be shifted at each input\n   * step. It must be such that after MIN_MATCH steps, the oldest\n   * byte no longer takes part in the hash key, that is:\n   *   hash_shift * MIN_MATCH >= hash_bits\n   */\n\n  this.block_start = 0;\n  /* Window position at the beginning of the current output block. Gets\n   * negative when the window is moved backwards.\n   */\n\n  this.match_length = 0;      /* length of best match */\n  this.prev_match = 0;        /* previous match */\n  this.match_available = 0;   /* set if previous match exists */\n  this.strstart = 0;          /* start of string to insert */\n  this.match_start = 0;       /* start of matching string */\n  this.lookahead = 0;         /* number of valid bytes ahead in window */\n\n  this.prev_length = 0;\n  /* Length of the best match at previous step. Matches not greater than this\n   * are discarded. This is used in the lazy match evaluation.\n   */\n\n  this.max_chain_length = 0;\n  /* To speed up deflation, hash chains are never searched beyond this\n   * length.  A higher limit improves compression ratio but degrades the\n   * speed.\n   */\n\n  this.max_lazy_match = 0;\n  /* Attempt to find a better match only when the current match is strictly\n   * smaller than this value. This mechanism is used only for compression\n   * levels >= 4.\n   */\n  // That's alias to max_lazy_match, don't use directly\n  //this.max_insert_length = 0;\n  /* Insert new strings in the hash table only if the match length is not\n   * greater than this length. This saves time but degrades compression.\n   * max_insert_length is used only for compression levels <= 3.\n   */\n\n  this.level = 0;     /* compression level (1..9) */\n  this.strategy = 0;  /* favor or force Huffman coding*/\n\n  this.good_match = 0;\n  /* Use a faster search when the previous match is longer than this */\n\n  this.nice_match = 0; /* Stop searching when current match exceeds this */\n\n              /* used by trees.c: */\n\n  /* Didn't use ct_data typedef below to suppress compiler warning */\n\n  // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */\n  // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */\n  // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */\n\n  // Use flat array of DOUBLE size, with interleaved fata,\n  // because JS does not support effective\n  this.dyn_ltree  = new utils.Buf16(HEAP_SIZE * 2);\n  this.dyn_dtree  = new utils.Buf16((2 * D_CODES + 1) * 2);\n  this.bl_tree    = new utils.Buf16((2 * BL_CODES + 1) * 2);\n  zero(this.dyn_ltree);\n  zero(this.dyn_dtree);\n  zero(this.bl_tree);\n\n  this.l_desc   = null;         /* desc. for literal tree */\n  this.d_desc   = null;         /* desc. for distance tree */\n  this.bl_desc  = null;         /* desc. for bit length tree */\n\n  //ush bl_count[MAX_BITS+1];\n  this.bl_count = new utils.Buf16(MAX_BITS + 1);\n  /* number of codes at each bit length for an optimal tree */\n\n  //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */\n  this.heap = new utils.Buf16(2 * L_CODES + 1);  /* heap used to build the Huffman trees */\n  zero(this.heap);\n\n  this.heap_len = 0;               /* number of elements in the heap */\n  this.heap_max = 0;               /* element of largest frequency */\n  /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.\n   * The same heap array is used to build all trees.\n   */\n\n  this.depth = new utils.Buf16(2 * L_CODES + 1); //uch depth[2*L_CODES+1];\n  zero(this.depth);\n  /* Depth of each subtree used as tie breaker for trees of equal frequency\n   */\n\n  this.l_buf = 0;          /* buffer index for literals or lengths */\n\n  this.lit_bufsize = 0;\n  /* Size of match buffer for literals/lengths.  There are 4 reasons for\n   * limiting lit_bufsize to 64K:\n   *   - frequencies can be kept in 16 bit counters\n   *   - if compression is not successful for the first block, all input\n   *     data is still in the window so we can still emit a stored block even\n   *     when input comes from standard input.  (This can also be done for\n   *     all blocks if lit_bufsize is not greater than 32K.)\n   *   - if compression is not successful for a file smaller than 64K, we can\n   *     even emit a stored file instead of a stored block (saving 5 bytes).\n   *     This is applicable only for zip (not gzip or zlib).\n   *   - creating new Huffman trees less frequently may not provide fast\n   *     adaptation to changes in the input data statistics. (Take for\n   *     example a binary file with poorly compressible code followed by\n   *     a highly compressible string table.) Smaller buffer sizes give\n   *     fast adaptation but have of course the overhead of transmitting\n   *     trees more frequently.\n   *   - I can't count above 4\n   */\n\n  this.last_lit = 0;      /* running index in l_buf */\n\n  this.d_buf = 0;\n  /* Buffer index for distances. To simplify the code, d_buf and l_buf have\n   * the same number of elements. To use different lengths, an extra flag\n   * array would be necessary.\n   */\n\n  this.opt_len = 0;       /* bit length of current block with optimal trees */\n  this.static_len = 0;    /* bit length of current block with static trees */\n  this.matches = 0;       /* number of string matches in current block */\n  this.insert = 0;        /* bytes at end of window left to insert */\n\n\n  this.bi_buf = 0;\n  /* Output buffer. bits are inserted starting at the bottom (least\n   * significant bits).\n   */\n  this.bi_valid = 0;\n  /* Number of valid bits in bi_buf.  All bits above the last valid bit\n   * are always zero.\n   */\n\n  // Used for window memory init. We safely ignore it for JS. That makes\n  // sense only for pointers and memory check tools.\n  //this.high_water = 0;\n  /* High water mark offset in window for initialized bytes -- bytes above\n   * this are set to zero in order to avoid memory check warnings when\n   * longest match routines access bytes past the input.  This is then\n   * updated to the new high water mark.\n   */\n}\n\n\nfunction deflateResetKeep(strm) {\n  var s;\n\n  if (!strm || !strm.state) {\n    return err(strm, Z_STREAM_ERROR);\n  }\n\n  strm.total_in = strm.total_out = 0;\n  strm.data_type = Z_UNKNOWN;\n\n  s = strm.state;\n  s.pending = 0;\n  s.pending_out = 0;\n\n  if (s.wrap < 0) {\n    s.wrap = -s.wrap;\n    /* was made negative by deflate(..., Z_FINISH); */\n  }\n  s.status = (s.wrap ? INIT_STATE : BUSY_STATE);\n  strm.adler = (s.wrap === 2) ?\n    0  // crc32(0, Z_NULL, 0)\n  :\n    1; // adler32(0, Z_NULL, 0)\n  s.last_flush = Z_NO_FLUSH;\n  trees._tr_init(s);\n  return Z_OK;\n}\n\n\nfunction deflateReset(strm) {\n  var ret = deflateResetKeep(strm);\n  if (ret === Z_OK) {\n    lm_init(strm.state);\n  }\n  return ret;\n}\n\n\nfunction deflateSetHeader(strm, head) {\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n  if (strm.state.wrap !== 2) { return Z_STREAM_ERROR; }\n  strm.state.gzhead = head;\n  return Z_OK;\n}\n\n\nfunction deflateInit2(strm, level, method, windowBits, memLevel, strategy) {\n  if (!strm) { // === Z_NULL\n    return Z_STREAM_ERROR;\n  }\n  var wrap = 1;\n\n  if (level === Z_DEFAULT_COMPRESSION) {\n    level = 6;\n  }\n\n  if (windowBits < 0) { /* suppress zlib wrapper */\n    wrap = 0;\n    windowBits = -windowBits;\n  }\n\n  else if (windowBits > 15) {\n    wrap = 2;           /* write gzip wrapper instead */\n    windowBits -= 16;\n  }\n\n\n  if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED ||\n    windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||\n    strategy < 0 || strategy > Z_FIXED) {\n    return err(strm, Z_STREAM_ERROR);\n  }\n\n\n  if (windowBits === 8) {\n    windowBits = 9;\n  }\n  /* until 256-byte window bug fixed */\n\n  var s = new DeflateState();\n\n  strm.state = s;\n  s.strm = strm;\n\n  s.wrap = wrap;\n  s.gzhead = null;\n  s.w_bits = windowBits;\n  s.w_size = 1 << s.w_bits;\n  s.w_mask = s.w_size - 1;\n\n  s.hash_bits = memLevel + 7;\n  s.hash_size = 1 << s.hash_bits;\n  s.hash_mask = s.hash_size - 1;\n  s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);\n\n  s.window = new utils.Buf8(s.w_size * 2);\n  s.head = new utils.Buf16(s.hash_size);\n  s.prev = new utils.Buf16(s.w_size);\n\n  // Don't need mem init magic for JS.\n  //s.high_water = 0;  /* nothing written to s->window yet */\n\n  s.lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */\n\n  s.pending_buf_size = s.lit_bufsize * 4;\n\n  //overlay = (ushf *) ZALLOC(strm, s->lit_bufsize, sizeof(ush)+2);\n  //s->pending_buf = (uchf *) overlay;\n  s.pending_buf = new utils.Buf8(s.pending_buf_size);\n\n  // It is offset from `s.pending_buf` (size is `s.lit_bufsize * 2`)\n  //s->d_buf = overlay + s->lit_bufsize/sizeof(ush);\n  s.d_buf = 1 * s.lit_bufsize;\n\n  //s->l_buf = s->pending_buf + (1+sizeof(ush))*s->lit_bufsize;\n  s.l_buf = (1 + 2) * s.lit_bufsize;\n\n  s.level = level;\n  s.strategy = strategy;\n  s.method = method;\n\n  return deflateReset(strm);\n}\n\nfunction deflateInit(strm, level) {\n  return deflateInit2(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY);\n}\n\n\nfunction deflate(strm, flush) {\n  var old_flush, s;\n  var beg, val; // for gzip header write only\n\n  if (!strm || !strm.state ||\n    flush > Z_BLOCK || flush < 0) {\n    return strm ? err(strm, Z_STREAM_ERROR) : Z_STREAM_ERROR;\n  }\n\n  s = strm.state;\n\n  if (!strm.output ||\n      (!strm.input && strm.avail_in !== 0) ||\n      (s.status === FINISH_STATE && flush !== Z_FINISH)) {\n    return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR : Z_STREAM_ERROR);\n  }\n\n  s.strm = strm; /* just in case */\n  old_flush = s.last_flush;\n  s.last_flush = flush;\n\n  /* Write the header */\n  if (s.status === INIT_STATE) {\n\n    if (s.wrap === 2) { // GZIP header\n      strm.adler = 0;  //crc32(0L, Z_NULL, 0);\n      put_byte(s, 31);\n      put_byte(s, 139);\n      put_byte(s, 8);\n      if (!s.gzhead) { // s->gzhead == Z_NULL\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, s.level === 9 ? 2 :\n                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?\n                     4 : 0));\n        put_byte(s, OS_CODE);\n        s.status = BUSY_STATE;\n      }\n      else {\n        put_byte(s, (s.gzhead.text ? 1 : 0) +\n                    (s.gzhead.hcrc ? 2 : 0) +\n                    (!s.gzhead.extra ? 0 : 4) +\n                    (!s.gzhead.name ? 0 : 8) +\n                    (!s.gzhead.comment ? 0 : 16)\n        );\n        put_byte(s, s.gzhead.time & 0xff);\n        put_byte(s, (s.gzhead.time >> 8) & 0xff);\n        put_byte(s, (s.gzhead.time >> 16) & 0xff);\n        put_byte(s, (s.gzhead.time >> 24) & 0xff);\n        put_byte(s, s.level === 9 ? 2 :\n                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?\n                     4 : 0));\n        put_byte(s, s.gzhead.os & 0xff);\n        if (s.gzhead.extra && s.gzhead.extra.length) {\n          put_byte(s, s.gzhead.extra.length & 0xff);\n          put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);\n        }\n        if (s.gzhead.hcrc) {\n          strm.adler = crc32(strm.adler, s.pending_buf, s.pending, 0);\n        }\n        s.gzindex = 0;\n        s.status = EXTRA_STATE;\n      }\n    }\n    else // DEFLATE header\n    {\n      var header = (Z_DEFLATED + ((s.w_bits - 8) << 4)) << 8;\n      var level_flags = -1;\n\n      if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {\n        level_flags = 0;\n      } else if (s.level < 6) {\n        level_flags = 1;\n      } else if (s.level === 6) {\n        level_flags = 2;\n      } else {\n        level_flags = 3;\n      }\n      header |= (level_flags << 6);\n      if (s.strstart !== 0) { header |= PRESET_DICT; }\n      header += 31 - (header % 31);\n\n      s.status = BUSY_STATE;\n      putShortMSB(s, header);\n\n      /* Save the adler32 of the preset dictionary: */\n      if (s.strstart !== 0) {\n        putShortMSB(s, strm.adler >>> 16);\n        putShortMSB(s, strm.adler & 0xffff);\n      }\n      strm.adler = 1; // adler32(0L, Z_NULL, 0);\n    }\n  }\n\n//#ifdef GZIP\n  if (s.status === EXTRA_STATE) {\n    if (s.gzhead.extra/* != Z_NULL*/) {\n      beg = s.pending;  /* start of bytes to update crc */\n\n      while (s.gzindex < (s.gzhead.extra.length & 0xffff)) {\n        if (s.pending === s.pending_buf_size) {\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          flush_pending(strm);\n          beg = s.pending;\n          if (s.pending === s.pending_buf_size) {\n            break;\n          }\n        }\n        put_byte(s, s.gzhead.extra[s.gzindex] & 0xff);\n        s.gzindex++;\n      }\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      if (s.gzindex === s.gzhead.extra.length) {\n        s.gzindex = 0;\n        s.status = NAME_STATE;\n      }\n    }\n    else {\n      s.status = NAME_STATE;\n    }\n  }\n  if (s.status === NAME_STATE) {\n    if (s.gzhead.name/* != Z_NULL*/) {\n      beg = s.pending;  /* start of bytes to update crc */\n      //int val;\n\n      do {\n        if (s.pending === s.pending_buf_size) {\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          flush_pending(strm);\n          beg = s.pending;\n          if (s.pending === s.pending_buf_size) {\n            val = 1;\n            break;\n          }\n        }\n        // JS specific: little magic to add zero terminator to end of string\n        if (s.gzindex < s.gzhead.name.length) {\n          val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;\n        } else {\n          val = 0;\n        }\n        put_byte(s, val);\n      } while (val !== 0);\n\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      if (val === 0) {\n        s.gzindex = 0;\n        s.status = COMMENT_STATE;\n      }\n    }\n    else {\n      s.status = COMMENT_STATE;\n    }\n  }\n  if (s.status === COMMENT_STATE) {\n    if (s.gzhead.comment/* != Z_NULL*/) {\n      beg = s.pending;  /* start of bytes to update crc */\n      //int val;\n\n      do {\n        if (s.pending === s.pending_buf_size) {\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          flush_pending(strm);\n          beg = s.pending;\n          if (s.pending === s.pending_buf_size) {\n            val = 1;\n            break;\n          }\n        }\n        // JS specific: little magic to add zero terminator to end of string\n        if (s.gzindex < s.gzhead.comment.length) {\n          val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;\n        } else {\n          val = 0;\n        }\n        put_byte(s, val);\n      } while (val !== 0);\n\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      if (val === 0) {\n        s.status = HCRC_STATE;\n      }\n    }\n    else {\n      s.status = HCRC_STATE;\n    }\n  }\n  if (s.status === HCRC_STATE) {\n    if (s.gzhead.hcrc) {\n      if (s.pending + 2 > s.pending_buf_size) {\n        flush_pending(strm);\n      }\n      if (s.pending + 2 <= s.pending_buf_size) {\n        put_byte(s, strm.adler & 0xff);\n        put_byte(s, (strm.adler >> 8) & 0xff);\n        strm.adler = 0; //crc32(0L, Z_NULL, 0);\n        s.status = BUSY_STATE;\n      }\n    }\n    else {\n      s.status = BUSY_STATE;\n    }\n  }\n//#endif\n\n  /* Flush as much pending output as possible */\n  if (s.pending !== 0) {\n    flush_pending(strm);\n    if (strm.avail_out === 0) {\n      /* Since avail_out is 0, deflate will be called again with\n       * more output space, but possibly with both pending and\n       * avail_in equal to zero. There won't be anything to do,\n       * but this is not an error situation so make sure we\n       * return OK instead of BUF_ERROR at next call of deflate:\n       */\n      s.last_flush = -1;\n      return Z_OK;\n    }\n\n    /* Make sure there is something to do and avoid duplicate consecutive\n     * flushes. For repeated and useless calls with Z_FINISH, we keep\n     * returning Z_STREAM_END instead of Z_BUF_ERROR.\n     */\n  } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&\n    flush !== Z_FINISH) {\n    return err(strm, Z_BUF_ERROR);\n  }\n\n  /* User must not provide more input after the first FINISH: */\n  if (s.status === FINISH_STATE && strm.avail_in !== 0) {\n    return err(strm, Z_BUF_ERROR);\n  }\n\n  /* Start a new block or continue the current one.\n   */\n  if (strm.avail_in !== 0 || s.lookahead !== 0 ||\n    (flush !== Z_NO_FLUSH && s.status !== FINISH_STATE)) {\n    var bstate = (s.strategy === Z_HUFFMAN_ONLY) ? deflate_huff(s, flush) :\n      (s.strategy === Z_RLE ? deflate_rle(s, flush) :\n        configuration_table[s.level].func(s, flush));\n\n    if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {\n      s.status = FINISH_STATE;\n    }\n    if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {\n      if (strm.avail_out === 0) {\n        s.last_flush = -1;\n        /* avoid BUF_ERROR next call, see above */\n      }\n      return Z_OK;\n      /* If flush != Z_NO_FLUSH && avail_out == 0, the next call\n       * of deflate should use the same flush parameter to make sure\n       * that the flush is complete. So we don't have to output an\n       * empty block here, this will be done at next call. This also\n       * ensures that for a very small output buffer, we emit at most\n       * one empty block.\n       */\n    }\n    if (bstate === BS_BLOCK_DONE) {\n      if (flush === Z_PARTIAL_FLUSH) {\n        trees._tr_align(s);\n      }\n      else if (flush !== Z_BLOCK) { /* FULL_FLUSH or SYNC_FLUSH */\n\n        trees._tr_stored_block(s, 0, 0, false);\n        /* For a full flush, this empty block will be recognized\n         * as a special marker by inflate_sync().\n         */\n        if (flush === Z_FULL_FLUSH) {\n          /*** CLEAR_HASH(s); ***/             /* forget history */\n          zero(s.head); // Fill with NIL (= 0);\n\n          if (s.lookahead === 0) {\n            s.strstart = 0;\n            s.block_start = 0;\n            s.insert = 0;\n          }\n        }\n      }\n      flush_pending(strm);\n      if (strm.avail_out === 0) {\n        s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */\n        return Z_OK;\n      }\n    }\n  }\n  //Assert(strm->avail_out > 0, \"bug2\");\n  //if (strm.avail_out <= 0) { throw new Error(\"bug2\");}\n\n  if (flush !== Z_FINISH) { return Z_OK; }\n  if (s.wrap <= 0) { return Z_STREAM_END; }\n\n  /* Write the trailer */\n  if (s.wrap === 2) {\n    put_byte(s, strm.adler & 0xff);\n    put_byte(s, (strm.adler >> 8) & 0xff);\n    put_byte(s, (strm.adler >> 16) & 0xff);\n    put_byte(s, (strm.adler >> 24) & 0xff);\n    put_byte(s, strm.total_in & 0xff);\n    put_byte(s, (strm.total_in >> 8) & 0xff);\n    put_byte(s, (strm.total_in >> 16) & 0xff);\n    put_byte(s, (strm.total_in >> 24) & 0xff);\n  }\n  else\n  {\n    putShortMSB(s, strm.adler >>> 16);\n    putShortMSB(s, strm.adler & 0xffff);\n  }\n\n  flush_pending(strm);\n  /* If avail_out is zero, the application will call deflate again\n   * to flush the rest.\n   */\n  if (s.wrap > 0) { s.wrap = -s.wrap; }\n  /* write the trailer only once! */\n  return s.pending !== 0 ? Z_OK : Z_STREAM_END;\n}\n\nfunction deflateEnd(strm) {\n  var status;\n\n  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {\n    return Z_STREAM_ERROR;\n  }\n\n  status = strm.state.status;\n  if (status !== INIT_STATE &&\n    status !== EXTRA_STATE &&\n    status !== NAME_STATE &&\n    status !== COMMENT_STATE &&\n    status !== HCRC_STATE &&\n    status !== BUSY_STATE &&\n    status !== FINISH_STATE\n  ) {\n    return err(strm, Z_STREAM_ERROR);\n  }\n\n  strm.state = null;\n\n  return status === BUSY_STATE ? err(strm, Z_DATA_ERROR) : Z_OK;\n}\n\n\n/* =========================================================================\n * Initializes the compression dictionary from the given byte\n * sequence without producing any compressed output.\n */\nfunction deflateSetDictionary(strm, dictionary) {\n  var dictLength = dictionary.length;\n\n  var s;\n  var str, n;\n  var wrap;\n  var avail;\n  var next;\n  var input;\n  var tmpDict;\n\n  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {\n    return Z_STREAM_ERROR;\n  }\n\n  s = strm.state;\n  wrap = s.wrap;\n\n  if (wrap === 2 || (wrap === 1 && s.status !== INIT_STATE) || s.lookahead) {\n    return Z_STREAM_ERROR;\n  }\n\n  /* when using zlib wrappers, compute Adler-32 for provided dictionary */\n  if (wrap === 1) {\n    /* adler32(strm->adler, dictionary, dictLength); */\n    strm.adler = adler32(strm.adler, dictionary, dictLength, 0);\n  }\n\n  s.wrap = 0;   /* avoid computing Adler-32 in read_buf */\n\n  /* if dictionary would fill window, just replace the history */\n  if (dictLength >= s.w_size) {\n    if (wrap === 0) {            /* already empty otherwise */\n      /*** CLEAR_HASH(s); ***/\n      zero(s.head); // Fill with NIL (= 0);\n      s.strstart = 0;\n      s.block_start = 0;\n      s.insert = 0;\n    }\n    /* use the tail */\n    // dictionary = dictionary.slice(dictLength - s.w_size);\n    tmpDict = new utils.Buf8(s.w_size);\n    utils.arraySet(tmpDict, dictionary, dictLength - s.w_size, s.w_size, 0);\n    dictionary = tmpDict;\n    dictLength = s.w_size;\n  }\n  /* insert dictionary into window and hash */\n  avail = strm.avail_in;\n  next = strm.next_in;\n  input = strm.input;\n  strm.avail_in = dictLength;\n  strm.next_in = 0;\n  strm.input = dictionary;\n  fill_window(s);\n  while (s.lookahead >= MIN_MATCH) {\n    str = s.strstart;\n    n = s.lookahead - (MIN_MATCH - 1);\n    do {\n      /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */\n      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;\n\n      s.prev[str & s.w_mask] = s.head[s.ins_h];\n\n      s.head[s.ins_h] = str;\n      str++;\n    } while (--n);\n    s.strstart = str;\n    s.lookahead = MIN_MATCH - 1;\n    fill_window(s);\n  }\n  s.strstart += s.lookahead;\n  s.block_start = s.strstart;\n  s.insert = s.lookahead;\n  s.lookahead = 0;\n  s.match_length = s.prev_length = MIN_MATCH - 1;\n  s.match_available = 0;\n  strm.next_in = next;\n  strm.input = input;\n  strm.avail_in = avail;\n  s.wrap = wrap;\n  return Z_OK;\n}\n\n\nexports.deflateInit = deflateInit;\nexports.deflateInit2 = deflateInit2;\nexports.deflateReset = deflateReset;\nexports.deflateResetKeep = deflateResetKeep;\nexports.deflateSetHeader = deflateSetHeader;\nexports.deflate = deflate;\nexports.deflateEnd = deflateEnd;\nexports.deflateSetDictionary = deflateSetDictionary;\nexports.deflateInfo = 'pako deflate (from Nodeca project)';\n\n/* Not implemented\nexports.deflateBound = deflateBound;\nexports.deflateCopy = deflateCopy;\nexports.deflateParams = deflateParams;\nexports.deflatePending = deflatePending;\nexports.deflatePrime = deflatePrime;\nexports.deflateTune = deflateTune;\n*/\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/pako/lib/zlib/deflate.js\n");

/***/ }),

/***/ "./node_modules/pako/lib/zlib/gzheader.js":
/*!************************************************!*\
  !*** ./node_modules/pako/lib/zlib/gzheader.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nfunction GZheader() {\n  /* true if compressed data believed to be text */\n  this.text       = 0;\n  /* modification time */\n  this.time       = 0;\n  /* extra flags (not used when writing a gzip file) */\n  this.xflags     = 0;\n  /* operating system */\n  this.os         = 0;\n  /* pointer to extra field or Z_NULL if none */\n  this.extra      = null;\n  /* extra field length (valid if extra != Z_NULL) */\n  this.extra_len  = 0; // Actually, we don't need it in JS,\n                       // but leave for few code modifications\n\n  //\n  // Setup limits is not necessary because in js we should not preallocate memory\n  // for inflate use constant limit in 65536 bytes\n  //\n\n  /* space at extra (only when reading header) */\n  // this.extra_max  = 0;\n  /* pointer to zero-terminated file name or Z_NULL */\n  this.name       = '';\n  /* space at name (only when reading header) */\n  // this.name_max   = 0;\n  /* pointer to zero-terminated comment or Z_NULL */\n  this.comment    = '';\n  /* space at comment (only when reading header) */\n  // this.comm_max   = 0;\n  /* true if there was or will be a header crc */\n  this.hcrc       = 0;\n  /* true when done reading gzip header (not used when writing a gzip file) */\n  this.done       = false;\n}\n\nmodule.exports = GZheader;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcGFrby9saWIvemxpYi9nemhlYWRlci5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL1RlbGVncmFtanMvLi9ub2RlX21vZHVsZXMvcGFrby9saWIvemxpYi9nemhlYWRlci5qcz84MDEzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLy8gKEMpIDE5OTUtMjAxMyBKZWFuLWxvdXAgR2FpbGx5IGFuZCBNYXJrIEFkbGVyXG4vLyAoQykgMjAxNC0yMDE3IFZpdGFseSBQdXpyaW4gYW5kIEFuZHJleSBUdXBpdHNpblxuLy9cbi8vIFRoaXMgc29mdHdhcmUgaXMgcHJvdmlkZWQgJ2FzLWlzJywgd2l0aG91dCBhbnkgZXhwcmVzcyBvciBpbXBsaWVkXG4vLyB3YXJyYW50eS4gSW4gbm8gZXZlbnQgd2lsbCB0aGUgYXV0aG9ycyBiZSBoZWxkIGxpYWJsZSBmb3IgYW55IGRhbWFnZXNcbi8vIGFyaXNpbmcgZnJvbSB0aGUgdXNlIG9mIHRoaXMgc29mdHdhcmUuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBncmFudGVkIHRvIGFueW9uZSB0byB1c2UgdGhpcyBzb2Z0d2FyZSBmb3IgYW55IHB1cnBvc2UsXG4vLyBpbmNsdWRpbmcgY29tbWVyY2lhbCBhcHBsaWNhdGlvbnMsIGFuZCB0byBhbHRlciBpdCBhbmQgcmVkaXN0cmlidXRlIGl0XG4vLyBmcmVlbHksIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyByZXN0cmljdGlvbnM6XG4vL1xuLy8gMS4gVGhlIG9yaWdpbiBvZiB0aGlzIHNvZnR3YXJlIG11c3Qgbm90IGJlIG1pc3JlcHJlc2VudGVkOyB5b3UgbXVzdCBub3Rcbi8vICAgY2xhaW0gdGhhdCB5b3Ugd3JvdGUgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLiBJZiB5b3UgdXNlIHRoaXMgc29mdHdhcmVcbi8vICAgaW4gYSBwcm9kdWN0LCBhbiBhY2tub3dsZWRnbWVudCBpbiB0aGUgcHJvZHVjdCBkb2N1bWVudGF0aW9uIHdvdWxkIGJlXG4vLyAgIGFwcHJlY2lhdGVkIGJ1dCBpcyBub3QgcmVxdWlyZWQuXG4vLyAyLiBBbHRlcmVkIHNvdXJjZSB2ZXJzaW9ucyBtdXN0IGJlIHBsYWlubHkgbWFya2VkIGFzIHN1Y2gsIGFuZCBtdXN0IG5vdCBiZVxuLy8gICBtaXNyZXByZXNlbnRlZCBhcyBiZWluZyB0aGUgb3JpZ2luYWwgc29mdHdhcmUuXG4vLyAzLiBUaGlzIG5vdGljZSBtYXkgbm90IGJlIHJlbW92ZWQgb3IgYWx0ZXJlZCBmcm9tIGFueSBzb3VyY2UgZGlzdHJpYnV0aW9uLlxuXG5mdW5jdGlvbiBHWmhlYWRlcigpIHtcbiAgLyogdHJ1ZSBpZiBjb21wcmVzc2VkIGRhdGEgYmVsaWV2ZWQgdG8gYmUgdGV4dCAqL1xuICB0aGlzLnRleHQgICAgICAgPSAwO1xuICAvKiBtb2RpZmljYXRpb24gdGltZSAqL1xuICB0aGlzLnRpbWUgICAgICAgPSAwO1xuICAvKiBleHRyYSBmbGFncyAobm90IHVzZWQgd2hlbiB3cml0aW5nIGEgZ3ppcCBmaWxlKSAqL1xuICB0aGlzLnhmbGFncyAgICAgPSAwO1xuICAvKiBvcGVyYXRpbmcgc3lzdGVtICovXG4gIHRoaXMub3MgICAgICAgICA9IDA7XG4gIC8qIHBvaW50ZXIgdG8gZXh0cmEgZmllbGQgb3IgWl9OVUxMIGlmIG5vbmUgKi9cbiAgdGhpcy5leHRyYSAgICAgID0gbnVsbDtcbiAgLyogZXh0cmEgZmllbGQgbGVuZ3RoICh2YWxpZCBpZiBleHRyYSAhPSBaX05VTEwpICovXG4gIHRoaXMuZXh0cmFfbGVuICA9IDA7IC8vIEFjdHVhbGx5LCB3ZSBkb24ndCBuZWVkIGl0IGluIEpTLFxuICAgICAgICAgICAgICAgICAgICAgICAvLyBidXQgbGVhdmUgZm9yIGZldyBjb2RlIG1vZGlmaWNhdGlvbnNcblxuICAvL1xuICAvLyBTZXR1cCBsaW1pdHMgaXMgbm90IG5lY2Vzc2FyeSBiZWNhdXNlIGluIGpzIHdlIHNob3VsZCBub3QgcHJlYWxsb2NhdGUgbWVtb3J5XG4gIC8vIGZvciBpbmZsYXRlIHVzZSBjb25zdGFudCBsaW1pdCBpbiA2NTUzNiBieXRlc1xuICAvL1xuXG4gIC8qIHNwYWNlIGF0IGV4dHJhIChvbmx5IHdoZW4gcmVhZGluZyBoZWFkZXIpICovXG4gIC8vIHRoaXMuZXh0cmFfbWF4ICA9IDA7XG4gIC8qIHBvaW50ZXIgdG8gemVyby10ZXJtaW5hdGVkIGZpbGUgbmFtZSBvciBaX05VTEwgKi9cbiAgdGhpcy5uYW1lICAgICAgID0gJyc7XG4gIC8qIHNwYWNlIGF0IG5hbWUgKG9ubHkgd2hlbiByZWFkaW5nIGhlYWRlcikgKi9cbiAgLy8gdGhpcy5uYW1lX21heCAgID0gMDtcbiAgLyogcG9pbnRlciB0byB6ZXJvLXRlcm1pbmF0ZWQgY29tbWVudCBvciBaX05VTEwgKi9cbiAgdGhpcy5jb21tZW50ICAgID0gJyc7XG4gIC8qIHNwYWNlIGF0IGNvbW1lbnQgKG9ubHkgd2hlbiByZWFkaW5nIGhlYWRlcikgKi9cbiAgLy8gdGhpcy5jb21tX21heCAgID0gMDtcbiAgLyogdHJ1ZSBpZiB0aGVyZSB3YXMgb3Igd2lsbCBiZSBhIGhlYWRlciBjcmMgKi9cbiAgdGhpcy5oY3JjICAgICAgID0gMDtcbiAgLyogdHJ1ZSB3aGVuIGRvbmUgcmVhZGluZyBnemlwIGhlYWRlciAobm90IHVzZWQgd2hlbiB3cml0aW5nIGEgZ3ppcCBmaWxlKSAqL1xuICB0aGlzLmRvbmUgICAgICAgPSBmYWxzZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBHWmhlYWRlcjtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/pako/lib/zlib/gzheader.js\n");

/***/ }),

/***/ "./node_modules/pako/lib/zlib/inffast.js":
/*!***********************************************!*\
  !*** ./node_modules/pako/lib/zlib/inffast.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n// See state defs from inflate.js\nvar BAD = 30;       /* got a data error -- remain here until reset */\nvar TYPE = 12;      /* i: waiting for type bits, including last-flag bit */\n\n/*\n   Decode literal, length, and distance codes and write out the resulting\n   literal and match bytes until either not enough input or output is\n   available, an end-of-block is encountered, or a data error is encountered.\n   When large enough input and output buffers are supplied to inflate(), for\n   example, a 16K input buffer and a 64K output buffer, more than 95% of the\n   inflate execution time is spent in this routine.\n\n   Entry assumptions:\n\n        state.mode === LEN\n        strm.avail_in >= 6\n        strm.avail_out >= 258\n        start >= strm.avail_out\n        state.bits < 8\n\n   On return, state.mode is one of:\n\n        LEN -- ran out of enough output space or enough available input\n        TYPE -- reached end of block code, inflate() to interpret next block\n        BAD -- error in block data\n\n   Notes:\n\n    - The maximum input bits used by a length/distance pair is 15 bits for the\n      length code, 5 bits for the length extra, 15 bits for the distance code,\n      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.\n      Therefore if strm.avail_in >= 6, then there is enough input to avoid\n      checking for available input while decoding.\n\n    - The maximum bytes that a single length/distance pair can output is 258\n      bytes, which is the maximum length that can be coded.  inflate_fast()\n      requires strm.avail_out >= 258 for each loop to avoid checking for\n      output space.\n */\nmodule.exports = function inflate_fast(strm, start) {\n  var state;\n  var _in;                    /* local strm.input */\n  var last;                   /* have enough input while in < last */\n  var _out;                   /* local strm.output */\n  var beg;                    /* inflate()'s initial strm.output */\n  var end;                    /* while out < end, enough space available */\n//#ifdef INFLATE_STRICT\n  var dmax;                   /* maximum distance from zlib header */\n//#endif\n  var wsize;                  /* window size or zero if not using window */\n  var whave;                  /* valid bytes in the window */\n  var wnext;                  /* window write index */\n  // Use `s_window` instead `window`, avoid conflict with instrumentation tools\n  var s_window;               /* allocated sliding window, if wsize != 0 */\n  var hold;                   /* local strm.hold */\n  var bits;                   /* local strm.bits */\n  var lcode;                  /* local strm.lencode */\n  var dcode;                  /* local strm.distcode */\n  var lmask;                  /* mask for first level of length codes */\n  var dmask;                  /* mask for first level of distance codes */\n  var here;                   /* retrieved table entry */\n  var op;                     /* code bits, operation, extra bits, or */\n                              /*  window position, window bytes to copy */\n  var len;                    /* match length, unused bytes */\n  var dist;                   /* match distance */\n  var from;                   /* where to copy match from */\n  var from_source;\n\n\n  var input, output; // JS specific, because we have no pointers\n\n  /* copy state to local variables */\n  state = strm.state;\n  //here = state.here;\n  _in = strm.next_in;\n  input = strm.input;\n  last = _in + (strm.avail_in - 5);\n  _out = strm.next_out;\n  output = strm.output;\n  beg = _out - (start - strm.avail_out);\n  end = _out + (strm.avail_out - 257);\n//#ifdef INFLATE_STRICT\n  dmax = state.dmax;\n//#endif\n  wsize = state.wsize;\n  whave = state.whave;\n  wnext = state.wnext;\n  s_window = state.window;\n  hold = state.hold;\n  bits = state.bits;\n  lcode = state.lencode;\n  dcode = state.distcode;\n  lmask = (1 << state.lenbits) - 1;\n  dmask = (1 << state.distbits) - 1;\n\n\n  /* decode literals and length/distances until end-of-block or not enough\n     input data or output space */\n\n  top:\n  do {\n    if (bits < 15) {\n      hold += input[_in++] << bits;\n      bits += 8;\n      hold += input[_in++] << bits;\n      bits += 8;\n    }\n\n    here = lcode[hold & lmask];\n\n    dolen:\n    for (;;) { // Goto emulation\n      op = here >>> 24/*here.bits*/;\n      hold >>>= op;\n      bits -= op;\n      op = (here >>> 16) & 0xff/*here.op*/;\n      if (op === 0) {                          /* literal */\n        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?\n        //        \"inflate:         literal '%c'\\n\" :\n        //        \"inflate:         literal 0x%02x\\n\", here.val));\n        output[_out++] = here & 0xffff/*here.val*/;\n      }\n      else if (op & 16) {                     /* length base */\n        len = here & 0xffff/*here.val*/;\n        op &= 15;                           /* number of extra bits */\n        if (op) {\n          if (bits < op) {\n            hold += input[_in++] << bits;\n            bits += 8;\n          }\n          len += hold & ((1 << op) - 1);\n          hold >>>= op;\n          bits -= op;\n        }\n        //Tracevv((stderr, \"inflate:         length %u\\n\", len));\n        if (bits < 15) {\n          hold += input[_in++] << bits;\n          bits += 8;\n          hold += input[_in++] << bits;\n          bits += 8;\n        }\n        here = dcode[hold & dmask];\n\n        dodist:\n        for (;;) { // goto emulation\n          op = here >>> 24/*here.bits*/;\n          hold >>>= op;\n          bits -= op;\n          op = (here >>> 16) & 0xff/*here.op*/;\n\n          if (op & 16) {                      /* distance base */\n            dist = here & 0xffff/*here.val*/;\n            op &= 15;                       /* number of extra bits */\n            if (bits < op) {\n              hold += input[_in++] << bits;\n              bits += 8;\n              if (bits < op) {\n                hold += input[_in++] << bits;\n                bits += 8;\n              }\n            }\n            dist += hold & ((1 << op) - 1);\n//#ifdef INFLATE_STRICT\n            if (dist > dmax) {\n              strm.msg = 'invalid distance too far back';\n              state.mode = BAD;\n              break top;\n            }\n//#endif\n            hold >>>= op;\n            bits -= op;\n            //Tracevv((stderr, \"inflate:         distance %u\\n\", dist));\n            op = _out - beg;                /* max distance in output */\n            if (dist > op) {                /* see if copy from window */\n              op = dist - op;               /* distance back in window */\n              if (op > whave) {\n                if (state.sane) {\n                  strm.msg = 'invalid distance too far back';\n                  state.mode = BAD;\n                  break top;\n                }\n\n// (!) This block is disabled in zlib defaults,\n// don't enable it for binary compatibility\n//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR\n//                if (len <= op - whave) {\n//                  do {\n//                    output[_out++] = 0;\n//                  } while (--len);\n//                  continue top;\n//                }\n//                len -= op - whave;\n//                do {\n//                  output[_out++] = 0;\n//                } while (--op > whave);\n//                if (op === 0) {\n//                  from = _out - dist;\n//                  do {\n//                    output[_out++] = output[from++];\n//                  } while (--len);\n//                  continue top;\n//                }\n//#endif\n              }\n              from = 0; // window index\n              from_source = s_window;\n              if (wnext === 0) {           /* very common case */\n                from += wsize - op;\n                if (op < len) {         /* some from window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = _out - dist;  /* rest from output */\n                  from_source = output;\n                }\n              }\n              else if (wnext < op) {      /* wrap around window */\n                from += wsize + wnext - op;\n                op -= wnext;\n                if (op < len) {         /* some from end of window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = 0;\n                  if (wnext < len) {  /* some from start of window */\n                    op = wnext;\n                    len -= op;\n                    do {\n                      output[_out++] = s_window[from++];\n                    } while (--op);\n                    from = _out - dist;      /* rest from output */\n                    from_source = output;\n                  }\n                }\n              }\n              else {                      /* contiguous in window */\n                from += wnext - op;\n                if (op < len) {         /* some from window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = _out - dist;  /* rest from output */\n                  from_source = output;\n                }\n              }\n              while (len > 2) {\n                output[_out++] = from_source[from++];\n                output[_out++] = from_source[from++];\n                output[_out++] = from_source[from++];\n                len -= 3;\n              }\n              if (len) {\n                output[_out++] = from_source[from++];\n                if (len > 1) {\n                  output[_out++] = from_source[from++];\n                }\n              }\n            }\n            else {\n              from = _out - dist;          /* copy direct from output */\n              do {                        /* minimum length is three */\n                output[_out++] = output[from++];\n                output[_out++] = output[from++];\n                output[_out++] = output[from++];\n                len -= 3;\n              } while (len > 2);\n              if (len) {\n                output[_out++] = output[from++];\n                if (len > 1) {\n                  output[_out++] = output[from++];\n                }\n              }\n            }\n          }\n          else if ((op & 64) === 0) {          /* 2nd level distance code */\n            here = dcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];\n            continue dodist;\n          }\n          else {\n            strm.msg = 'invalid distance code';\n            state.mode = BAD;\n            break top;\n          }\n\n          break; // need to emulate goto via \"continue\"\n        }\n      }\n      else if ((op & 64) === 0) {              /* 2nd level length code */\n        here = lcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];\n        continue dolen;\n      }\n      else if (op & 32) {                     /* end-of-block */\n        //Tracevv((stderr, \"inflate:         end of block\\n\"));\n        state.mode = TYPE;\n        break top;\n      }\n      else {\n        strm.msg = 'invalid literal/length code';\n        state.mode = BAD;\n        break top;\n      }\n\n      break; // need to emulate goto via \"continue\"\n    }\n  } while (_in < last && _out < end);\n\n  /* return unused bytes (on entry, bits < 8, so in won't go too far back) */\n  len = bits >> 3;\n  _in -= len;\n  bits -= len << 3;\n  hold &= (1 << bits) - 1;\n\n  /* update state and return */\n  strm.next_in = _in;\n  strm.next_out = _out;\n  strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));\n  strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));\n  state.hold = hold;\n  state.bits = bits;\n  return;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/pako/lib/zlib/inffast.js\n");

/***/ }),

/***/ "./node_modules/pako/lib/zlib/inflate.js":
/*!***********************************************!*\
  !*** ./node_modules/pako/lib/zlib/inflate.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nvar utils         = __webpack_require__(/*! ../utils/common */ \"./node_modules/pako/lib/utils/common.js\");\nvar adler32       = __webpack_require__(/*! ./adler32 */ \"./node_modules/pako/lib/zlib/adler32.js\");\nvar crc32         = __webpack_require__(/*! ./crc32 */ \"./node_modules/pako/lib/zlib/crc32.js\");\nvar inflate_fast  = __webpack_require__(/*! ./inffast */ \"./node_modules/pako/lib/zlib/inffast.js\");\nvar inflate_table = __webpack_require__(/*! ./inftrees */ \"./node_modules/pako/lib/zlib/inftrees.js\");\n\nvar CODES = 0;\nvar LENS = 1;\nvar DISTS = 2;\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\n\n/* Allowed flush values; see deflate() and inflate() below for details */\n//var Z_NO_FLUSH      = 0;\n//var Z_PARTIAL_FLUSH = 1;\n//var Z_SYNC_FLUSH    = 2;\n//var Z_FULL_FLUSH    = 3;\nvar Z_FINISH        = 4;\nvar Z_BLOCK         = 5;\nvar Z_TREES         = 6;\n\n\n/* Return codes for the compression/decompression functions. Negative values\n * are errors, positive values are used for special but normal events.\n */\nvar Z_OK            = 0;\nvar Z_STREAM_END    = 1;\nvar Z_NEED_DICT     = 2;\n//var Z_ERRNO         = -1;\nvar Z_STREAM_ERROR  = -2;\nvar Z_DATA_ERROR    = -3;\nvar Z_MEM_ERROR     = -4;\nvar Z_BUF_ERROR     = -5;\n//var Z_VERSION_ERROR = -6;\n\n/* The deflate compression method */\nvar Z_DEFLATED  = 8;\n\n\n/* STATES ====================================================================*/\n/* ===========================================================================*/\n\n\nvar    HEAD = 1;       /* i: waiting for magic header */\nvar    FLAGS = 2;      /* i: waiting for method and flags (gzip) */\nvar    TIME = 3;       /* i: waiting for modification time (gzip) */\nvar    OS = 4;         /* i: waiting for extra flags and operating system (gzip) */\nvar    EXLEN = 5;      /* i: waiting for extra length (gzip) */\nvar    EXTRA = 6;      /* i: waiting for extra bytes (gzip) */\nvar    NAME = 7;       /* i: waiting for end of file name (gzip) */\nvar    COMMENT = 8;    /* i: waiting for end of comment (gzip) */\nvar    HCRC = 9;       /* i: waiting for header crc (gzip) */\nvar    DICTID = 10;    /* i: waiting for dictionary check value */\nvar    DICT = 11;      /* waiting for inflateSetDictionary() call */\nvar        TYPE = 12;      /* i: waiting for type bits, including last-flag bit */\nvar        TYPEDO = 13;    /* i: same, but skip check to exit inflate on new block */\nvar        STORED = 14;    /* i: waiting for stored size (length and complement) */\nvar        COPY_ = 15;     /* i/o: same as COPY below, but only first time in */\nvar        COPY = 16;      /* i/o: waiting for input or output to copy stored block */\nvar        TABLE = 17;     /* i: waiting for dynamic block table lengths */\nvar        LENLENS = 18;   /* i: waiting for code length code lengths */\nvar        CODELENS = 19;  /* i: waiting for length/lit and distance code lengths */\nvar            LEN_ = 20;      /* i: same as LEN below, but only first time in */\nvar            LEN = 21;       /* i: waiting for length/lit/eob code */\nvar            LENEXT = 22;    /* i: waiting for length extra bits */\nvar            DIST = 23;      /* i: waiting for distance code */\nvar            DISTEXT = 24;   /* i: waiting for distance extra bits */\nvar            MATCH = 25;     /* o: waiting for output space to copy string */\nvar            LIT = 26;       /* o: waiting for output space to write literal */\nvar    CHECK = 27;     /* i: waiting for 32-bit check value */\nvar    LENGTH = 28;    /* i: waiting for 32-bit length (gzip) */\nvar    DONE = 29;      /* finished check, done -- remain here until reset */\nvar    BAD = 30;       /* got a data error -- remain here until reset */\nvar    MEM = 31;       /* got an inflate() memory error -- remain here until reset */\nvar    SYNC = 32;      /* looking for synchronization bytes to restart inflate() */\n\n/* ===========================================================================*/\n\n\n\nvar ENOUGH_LENS = 852;\nvar ENOUGH_DISTS = 592;\n//var ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);\n\nvar MAX_WBITS = 15;\n/* 32K LZ77 window */\nvar DEF_WBITS = MAX_WBITS;\n\n\nfunction zswap32(q) {\n  return  (((q >>> 24) & 0xff) +\n          ((q >>> 8) & 0xff00) +\n          ((q & 0xff00) << 8) +\n          ((q & 0xff) << 24));\n}\n\n\nfunction InflateState() {\n  this.mode = 0;             /* current inflate mode */\n  this.last = false;          /* true if processing last block */\n  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */\n  this.havedict = false;      /* true if dictionary provided */\n  this.flags = 0;             /* gzip header method and flags (0 if zlib) */\n  this.dmax = 0;              /* zlib header max distance (INFLATE_STRICT) */\n  this.check = 0;             /* protected copy of check value */\n  this.total = 0;             /* protected copy of output count */\n  // TODO: may be {}\n  this.head = null;           /* where to save gzip header information */\n\n  /* sliding window */\n  this.wbits = 0;             /* log base 2 of requested window size */\n  this.wsize = 0;             /* window size or zero if not using window */\n  this.whave = 0;             /* valid bytes in the window */\n  this.wnext = 0;             /* window write index */\n  this.window = null;         /* allocated sliding window, if needed */\n\n  /* bit accumulator */\n  this.hold = 0;              /* input bit accumulator */\n  this.bits = 0;              /* number of bits in \"in\" */\n\n  /* for string and stored block copying */\n  this.length = 0;            /* literal or length of data to copy */\n  this.offset = 0;            /* distance back to copy string from */\n\n  /* for table and code decoding */\n  this.extra = 0;             /* extra bits needed */\n\n  /* fixed and dynamic code tables */\n  this.lencode = null;          /* starting table for length/literal codes */\n  this.distcode = null;         /* starting table for distance codes */\n  this.lenbits = 0;           /* index bits for lencode */\n  this.distbits = 0;          /* index bits for distcode */\n\n  /* dynamic table building */\n  this.ncode = 0;             /* number of code length code lengths */\n  this.nlen = 0;              /* number of length code lengths */\n  this.ndist = 0;             /* number of distance code lengths */\n  this.have = 0;              /* number of code lengths in lens[] */\n  this.next = null;              /* next available space in codes[] */\n\n  this.lens = new utils.Buf16(320); /* temporary storage for code lengths */\n  this.work = new utils.Buf16(288); /* work area for code table building */\n\n  /*\n   because we don't have pointers in js, we use lencode and distcode directly\n   as buffers so we don't need codes\n  */\n  //this.codes = new utils.Buf32(ENOUGH);       /* space for code tables */\n  this.lendyn = null;              /* dynamic table for length/literal codes (JS specific) */\n  this.distdyn = null;             /* dynamic table for distance codes (JS specific) */\n  this.sane = 0;                   /* if false, allow invalid distance too far */\n  this.back = 0;                   /* bits back of last unprocessed length/lit */\n  this.was = 0;                    /* initial length of match */\n}\n\nfunction inflateResetKeep(strm) {\n  var state;\n\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n  state = strm.state;\n  strm.total_in = strm.total_out = state.total = 0;\n  strm.msg = ''; /*Z_NULL*/\n  if (state.wrap) {       /* to support ill-conceived Java test suite */\n    strm.adler = state.wrap & 1;\n  }\n  state.mode = HEAD;\n  state.last = 0;\n  state.havedict = 0;\n  state.dmax = 32768;\n  state.head = null/*Z_NULL*/;\n  state.hold = 0;\n  state.bits = 0;\n  //state.lencode = state.distcode = state.next = state.codes;\n  state.lencode = state.lendyn = new utils.Buf32(ENOUGH_LENS);\n  state.distcode = state.distdyn = new utils.Buf32(ENOUGH_DISTS);\n\n  state.sane = 1;\n  state.back = -1;\n  //Tracev((stderr, \"inflate: reset\\n\"));\n  return Z_OK;\n}\n\nfunction inflateReset(strm) {\n  var state;\n\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n  state = strm.state;\n  state.wsize = 0;\n  state.whave = 0;\n  state.wnext = 0;\n  return inflateResetKeep(strm);\n\n}\n\nfunction inflateReset2(strm, windowBits) {\n  var wrap;\n  var state;\n\n  /* get the state */\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n  state = strm.state;\n\n  /* extract wrap request from windowBits parameter */\n  if (windowBits < 0) {\n    wrap = 0;\n    windowBits = -windowBits;\n  }\n  else {\n    wrap = (windowBits >> 4) + 1;\n    if (windowBits < 48) {\n      windowBits &= 15;\n    }\n  }\n\n  /* set number of window bits, free window if different */\n  if (windowBits && (windowBits < 8 || windowBits > 15)) {\n    return Z_STREAM_ERROR;\n  }\n  if (state.window !== null && state.wbits !== windowBits) {\n    state.window = null;\n  }\n\n  /* update state and reset the rest of it */\n  state.wrap = wrap;\n  state.wbits = windowBits;\n  return inflateReset(strm);\n}\n\nfunction inflateInit2(strm, windowBits) {\n  var ret;\n  var state;\n\n  if (!strm) { return Z_STREAM_ERROR; }\n  //strm.msg = Z_NULL;                 /* in case we return an error */\n\n  state = new InflateState();\n\n  //if (state === Z_NULL) return Z_MEM_ERROR;\n  //Tracev((stderr, \"inflate: allocated\\n\"));\n  strm.state = state;\n  state.window = null/*Z_NULL*/;\n  ret = inflateReset2(strm, windowBits);\n  if (ret !== Z_OK) {\n    strm.state = null/*Z_NULL*/;\n  }\n  return ret;\n}\n\nfunction inflateInit(strm) {\n  return inflateInit2(strm, DEF_WBITS);\n}\n\n\n/*\n Return state with length and distance decoding tables and index sizes set to\n fixed code decoding.  Normally this returns fixed tables from inffixed.h.\n If BUILDFIXED is defined, then instead this routine builds the tables the\n first time it's called, and returns those tables the first time and\n thereafter.  This reduces the size of the code by about 2K bytes, in\n exchange for a little execution time.  However, BUILDFIXED should not be\n used for threaded applications, since the rewriting of the tables and virgin\n may not be thread-safe.\n */\nvar virgin = true;\n\nvar lenfix, distfix; // We have no pointers in JS, so keep tables separate\n\nfunction fixedtables(state) {\n  /* build fixed huffman tables if first call (may not be thread safe) */\n  if (virgin) {\n    var sym;\n\n    lenfix = new utils.Buf32(512);\n    distfix = new utils.Buf32(32);\n\n    /* literal/length table */\n    sym = 0;\n    while (sym < 144) { state.lens[sym++] = 8; }\n    while (sym < 256) { state.lens[sym++] = 9; }\n    while (sym < 280) { state.lens[sym++] = 7; }\n    while (sym < 288) { state.lens[sym++] = 8; }\n\n    inflate_table(LENS,  state.lens, 0, 288, lenfix,   0, state.work, { bits: 9 });\n\n    /* distance table */\n    sym = 0;\n    while (sym < 32) { state.lens[sym++] = 5; }\n\n    inflate_table(DISTS, state.lens, 0, 32,   distfix, 0, state.work, { bits: 5 });\n\n    /* do this just once */\n    virgin = false;\n  }\n\n  state.lencode = lenfix;\n  state.lenbits = 9;\n  state.distcode = distfix;\n  state.distbits = 5;\n}\n\n\n/*\n Update the window with the last wsize (normally 32K) bytes written before\n returning.  If window does not exist yet, create it.  This is only called\n when a window is already in use, or when output has been written during this\n inflate call, but the end of the deflate stream has not been reached yet.\n It is also called to create a window for dictionary data when a dictionary\n is loaded.\n\n Providing output buffers larger than 32K to inflate() should provide a speed\n advantage, since only the last 32K of output is copied to the sliding window\n upon return from inflate(), and since all distances after the first 32K of\n output will fall in the output data, making match copies simpler and faster.\n The advantage may be dependent on the size of the processor's data caches.\n */\nfunction updatewindow(strm, src, end, copy) {\n  var dist;\n  var state = strm.state;\n\n  /* if it hasn't been done already, allocate space for the window */\n  if (state.window === null) {\n    state.wsize = 1 << state.wbits;\n    state.wnext = 0;\n    state.whave = 0;\n\n    state.window = new utils.Buf8(state.wsize);\n  }\n\n  /* copy state->wsize or less output bytes into the circular window */\n  if (copy >= state.wsize) {\n    utils.arraySet(state.window, src, end - state.wsize, state.wsize, 0);\n    state.wnext = 0;\n    state.whave = state.wsize;\n  }\n  else {\n    dist = state.wsize - state.wnext;\n    if (dist > copy) {\n      dist = copy;\n    }\n    //zmemcpy(state->window + state->wnext, end - copy, dist);\n    utils.arraySet(state.window, src, end - copy, dist, state.wnext);\n    copy -= dist;\n    if (copy) {\n      //zmemcpy(state->window, end - copy, copy);\n      utils.arraySet(state.window, src, end - copy, copy, 0);\n      state.wnext = copy;\n      state.whave = state.wsize;\n    }\n    else {\n      state.wnext += dist;\n      if (state.wnext === state.wsize) { state.wnext = 0; }\n      if (state.whave < state.wsize) { state.whave += dist; }\n    }\n  }\n  return 0;\n}\n\nfunction inflate(strm, flush) {\n  var state;\n  var input, output;          // input/output buffers\n  var next;                   /* next input INDEX */\n  var put;                    /* next output INDEX */\n  var have, left;             /* available input and output */\n  var hold;                   /* bit buffer */\n  var bits;                   /* bits in bit buffer */\n  var _in, _out;              /* save starting available input and output */\n  var copy;                   /* number of stored or match bytes to copy */\n  var from;                   /* where to copy match bytes from */\n  var from_source;\n  var here = 0;               /* current decoding table entry */\n  var here_bits, here_op, here_val; // paked \"here\" denormalized (JS specific)\n  //var last;                   /* parent table entry */\n  var last_bits, last_op, last_val; // paked \"last\" denormalized (JS specific)\n  var len;                    /* length to copy for repeats, bits to drop */\n  var ret;                    /* return code */\n  var hbuf = new utils.Buf8(4);    /* buffer for gzip header crc calculation */\n  var opts;\n\n  var n; // temporary var for NEED_BITS\n\n  var order = /* permutation of code lengths */\n    [ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ];\n\n\n  if (!strm || !strm.state || !strm.output ||\n      (!strm.input && strm.avail_in !== 0)) {\n    return Z_STREAM_ERROR;\n  }\n\n  state = strm.state;\n  if (state.mode === TYPE) { state.mode = TYPEDO; }    /* skip check */\n\n\n  //--- LOAD() ---\n  put = strm.next_out;\n  output = strm.output;\n  left = strm.avail_out;\n  next = strm.next_in;\n  input = strm.input;\n  have = strm.avail_in;\n  hold = state.hold;\n  bits = state.bits;\n  //---\n\n  _in = have;\n  _out = left;\n  ret = Z_OK;\n\n  inf_leave: // goto emulation\n  for (;;) {\n    switch (state.mode) {\n      case HEAD:\n        if (state.wrap === 0) {\n          state.mode = TYPEDO;\n          break;\n        }\n        //=== NEEDBITS(16);\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if ((state.wrap & 2) && hold === 0x8b1f) {  /* gzip header */\n          state.check = 0/*crc32(0L, Z_NULL, 0)*/;\n          //=== CRC2(state.check, hold);\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          state.check = crc32(state.check, hbuf, 2, 0);\n          //===//\n\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n          state.mode = FLAGS;\n          break;\n        }\n        state.flags = 0;           /* expect zlib header */\n        if (state.head) {\n          state.head.done = false;\n        }\n        if (!(state.wrap & 1) ||   /* check if zlib header allowed */\n          (((hold & 0xff)/*BITS(8)*/ << 8) + (hold >> 8)) % 31) {\n          strm.msg = 'incorrect header check';\n          state.mode = BAD;\n          break;\n        }\n        if ((hold & 0x0f)/*BITS(4)*/ !== Z_DEFLATED) {\n          strm.msg = 'unknown compression method';\n          state.mode = BAD;\n          break;\n        }\n        //--- DROPBITS(4) ---//\n        hold >>>= 4;\n        bits -= 4;\n        //---//\n        len = (hold & 0x0f)/*BITS(4)*/ + 8;\n        if (state.wbits === 0) {\n          state.wbits = len;\n        }\n        else if (len > state.wbits) {\n          strm.msg = 'invalid window size';\n          state.mode = BAD;\n          break;\n        }\n        state.dmax = 1 << len;\n        //Tracev((stderr, \"inflate:   zlib header ok\\n\"));\n        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;\n        state.mode = hold & 0x200 ? DICTID : TYPE;\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        break;\n      case FLAGS:\n        //=== NEEDBITS(16); */\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.flags = hold;\n        if ((state.flags & 0xff) !== Z_DEFLATED) {\n          strm.msg = 'unknown compression method';\n          state.mode = BAD;\n          break;\n        }\n        if (state.flags & 0xe000) {\n          strm.msg = 'unknown header flags set';\n          state.mode = BAD;\n          break;\n        }\n        if (state.head) {\n          state.head.text = ((hold >> 8) & 1);\n        }\n        if (state.flags & 0x0200) {\n          //=== CRC2(state.check, hold);\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          state.check = crc32(state.check, hbuf, 2, 0);\n          //===//\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = TIME;\n        /* falls through */\n      case TIME:\n        //=== NEEDBITS(32); */\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if (state.head) {\n          state.head.time = hold;\n        }\n        if (state.flags & 0x0200) {\n          //=== CRC4(state.check, hold)\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          hbuf[2] = (hold >>> 16) & 0xff;\n          hbuf[3] = (hold >>> 24) & 0xff;\n          state.check = crc32(state.check, hbuf, 4, 0);\n          //===\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = OS;\n        /* falls through */\n      case OS:\n        //=== NEEDBITS(16); */\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if (state.head) {\n          state.head.xflags = (hold & 0xff);\n          state.head.os = (hold >> 8);\n        }\n        if (state.flags & 0x0200) {\n          //=== CRC2(state.check, hold);\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          state.check = crc32(state.check, hbuf, 2, 0);\n          //===//\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = EXLEN;\n        /* falls through */\n      case EXLEN:\n        if (state.flags & 0x0400) {\n          //=== NEEDBITS(16); */\n          while (bits < 16) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.length = hold;\n          if (state.head) {\n            state.head.extra_len = hold;\n          }\n          if (state.flags & 0x0200) {\n            //=== CRC2(state.check, hold);\n            hbuf[0] = hold & 0xff;\n            hbuf[1] = (hold >>> 8) & 0xff;\n            state.check = crc32(state.check, hbuf, 2, 0);\n            //===//\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n        }\n        else if (state.head) {\n          state.head.extra = null/*Z_NULL*/;\n        }\n        state.mode = EXTRA;\n        /* falls through */\n      case EXTRA:\n        if (state.flags & 0x0400) {\n          copy = state.length;\n          if (copy > have) { copy = have; }\n          if (copy) {\n            if (state.head) {\n              len = state.head.extra_len - state.length;\n              if (!state.head.extra) {\n                // Use untyped array for more convenient processing later\n                state.head.extra = new Array(state.head.extra_len);\n              }\n              utils.arraySet(\n                state.head.extra,\n                input,\n                next,\n                // extra field is limited to 65536 bytes\n                // - no need for additional size check\n                copy,\n                /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/\n                len\n              );\n              //zmemcpy(state.head.extra + len, next,\n              //        len + copy > state.head.extra_max ?\n              //        state.head.extra_max - len : copy);\n            }\n            if (state.flags & 0x0200) {\n              state.check = crc32(state.check, input, copy, next);\n            }\n            have -= copy;\n            next += copy;\n            state.length -= copy;\n          }\n          if (state.length) { break inf_leave; }\n        }\n        state.length = 0;\n        state.mode = NAME;\n        /* falls through */\n      case NAME:\n        if (state.flags & 0x0800) {\n          if (have === 0) { break inf_leave; }\n          copy = 0;\n          do {\n            // TODO: 2 or 1 bytes?\n            len = input[next + copy++];\n            /* use constant limit because in js we should not preallocate memory */\n            if (state.head && len &&\n                (state.length < 65536 /*state.head.name_max*/)) {\n              state.head.name += String.fromCharCode(len);\n            }\n          } while (len && copy < have);\n\n          if (state.flags & 0x0200) {\n            state.check = crc32(state.check, input, copy, next);\n          }\n          have -= copy;\n          next += copy;\n          if (len) { break inf_leave; }\n        }\n        else if (state.head) {\n          state.head.name = null;\n        }\n        state.length = 0;\n        state.mode = COMMENT;\n        /* falls through */\n      case COMMENT:\n        if (state.flags & 0x1000) {\n          if (have === 0) { break inf_leave; }\n          copy = 0;\n          do {\n            len = input[next + copy++];\n            /* use constant limit because in js we should not preallocate memory */\n            if (state.head && len &&\n                (state.length < 65536 /*state.head.comm_max*/)) {\n              state.head.comment += String.fromCharCode(len);\n            }\n          } while (len && copy < have);\n          if (state.flags & 0x0200) {\n            state.check = crc32(state.check, input, copy, next);\n          }\n          have -= copy;\n          next += copy;\n          if (len) { break inf_leave; }\n        }\n        else if (state.head) {\n          state.head.comment = null;\n        }\n        state.mode = HCRC;\n        /* falls through */\n      case HCRC:\n        if (state.flags & 0x0200) {\n          //=== NEEDBITS(16); */\n          while (bits < 16) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          if (hold !== (state.check & 0xffff)) {\n            strm.msg = 'header crc mismatch';\n            state.mode = BAD;\n            break;\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n        }\n        if (state.head) {\n          state.head.hcrc = ((state.flags >> 9) & 1);\n          state.head.done = true;\n        }\n        strm.adler = state.check = 0;\n        state.mode = TYPE;\n        break;\n      case DICTID:\n        //=== NEEDBITS(32); */\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        strm.adler = state.check = zswap32(hold);\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = DICT;\n        /* falls through */\n      case DICT:\n        if (state.havedict === 0) {\n          //--- RESTORE() ---\n          strm.next_out = put;\n          strm.avail_out = left;\n          strm.next_in = next;\n          strm.avail_in = have;\n          state.hold = hold;\n          state.bits = bits;\n          //---\n          return Z_NEED_DICT;\n        }\n        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;\n        state.mode = TYPE;\n        /* falls through */\n      case TYPE:\n        if (flush === Z_BLOCK || flush === Z_TREES) { break inf_leave; }\n        /* falls through */\n      case TYPEDO:\n        if (state.last) {\n          //--- BYTEBITS() ---//\n          hold >>>= bits & 7;\n          bits -= bits & 7;\n          //---//\n          state.mode = CHECK;\n          break;\n        }\n        //=== NEEDBITS(3); */\n        while (bits < 3) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.last = (hold & 0x01)/*BITS(1)*/;\n        //--- DROPBITS(1) ---//\n        hold >>>= 1;\n        bits -= 1;\n        //---//\n\n        switch ((hold & 0x03)/*BITS(2)*/) {\n          case 0:                             /* stored block */\n            //Tracev((stderr, \"inflate:     stored block%s\\n\",\n            //        state.last ? \" (last)\" : \"\"));\n            state.mode = STORED;\n            break;\n          case 1:                             /* fixed block */\n            fixedtables(state);\n            //Tracev((stderr, \"inflate:     fixed codes block%s\\n\",\n            //        state.last ? \" (last)\" : \"\"));\n            state.mode = LEN_;             /* decode codes */\n            if (flush === Z_TREES) {\n              //--- DROPBITS(2) ---//\n              hold >>>= 2;\n              bits -= 2;\n              //---//\n              break inf_leave;\n            }\n            break;\n          case 2:                             /* dynamic block */\n            //Tracev((stderr, \"inflate:     dynamic codes block%s\\n\",\n            //        state.last ? \" (last)\" : \"\"));\n            state.mode = TABLE;\n            break;\n          case 3:\n            strm.msg = 'invalid block type';\n            state.mode = BAD;\n        }\n        //--- DROPBITS(2) ---//\n        hold >>>= 2;\n        bits -= 2;\n        //---//\n        break;\n      case STORED:\n        //--- BYTEBITS() ---// /* go to byte boundary */\n        hold >>>= bits & 7;\n        bits -= bits & 7;\n        //---//\n        //=== NEEDBITS(32); */\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {\n          strm.msg = 'invalid stored block lengths';\n          state.mode = BAD;\n          break;\n        }\n        state.length = hold & 0xffff;\n        //Tracev((stderr, \"inflate:       stored length %u\\n\",\n        //        state.length));\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = COPY_;\n        if (flush === Z_TREES) { break inf_leave; }\n        /* falls through */\n      case COPY_:\n        state.mode = COPY;\n        /* falls through */\n      case COPY:\n        copy = state.length;\n        if (copy) {\n          if (copy > have) { copy = have; }\n          if (copy > left) { copy = left; }\n          if (copy === 0) { break inf_leave; }\n          //--- zmemcpy(put, next, copy); ---\n          utils.arraySet(output, input, next, copy, put);\n          //---//\n          have -= copy;\n          next += copy;\n          left -= copy;\n          put += copy;\n          state.length -= copy;\n          break;\n        }\n        //Tracev((stderr, \"inflate:       stored end\\n\"));\n        state.mode = TYPE;\n        break;\n      case TABLE:\n        //=== NEEDBITS(14); */\n        while (bits < 14) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.nlen = (hold & 0x1f)/*BITS(5)*/ + 257;\n        //--- DROPBITS(5) ---//\n        hold >>>= 5;\n        bits -= 5;\n        //---//\n        state.ndist = (hold & 0x1f)/*BITS(5)*/ + 1;\n        //--- DROPBITS(5) ---//\n        hold >>>= 5;\n        bits -= 5;\n        //---//\n        state.ncode = (hold & 0x0f)/*BITS(4)*/ + 4;\n        //--- DROPBITS(4) ---//\n        hold >>>= 4;\n        bits -= 4;\n        //---//\n//#ifndef PKZIP_BUG_WORKAROUND\n        if (state.nlen > 286 || state.ndist > 30) {\n          strm.msg = 'too many length or distance symbols';\n          state.mode = BAD;\n          break;\n        }\n//#endif\n        //Tracev((stderr, \"inflate:       table sizes ok\\n\"));\n        state.have = 0;\n        state.mode = LENLENS;\n        /* falls through */\n      case LENLENS:\n        while (state.have < state.ncode) {\n          //=== NEEDBITS(3);\n          while (bits < 3) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.lens[order[state.have++]] = (hold & 0x07);//BITS(3);\n          //--- DROPBITS(3) ---//\n          hold >>>= 3;\n          bits -= 3;\n          //---//\n        }\n        while (state.have < 19) {\n          state.lens[order[state.have++]] = 0;\n        }\n        // We have separate tables & no pointers. 2 commented lines below not needed.\n        //state.next = state.codes;\n        //state.lencode = state.next;\n        // Switch to use dynamic table\n        state.lencode = state.lendyn;\n        state.lenbits = 7;\n\n        opts = { bits: state.lenbits };\n        ret = inflate_table(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);\n        state.lenbits = opts.bits;\n\n        if (ret) {\n          strm.msg = 'invalid code lengths set';\n          state.mode = BAD;\n          break;\n        }\n        //Tracev((stderr, \"inflate:       code lengths ok\\n\"));\n        state.have = 0;\n        state.mode = CODELENS;\n        /* falls through */\n      case CODELENS:\n        while (state.have < state.nlen + state.ndist) {\n          for (;;) {\n            here = state.lencode[hold & ((1 << state.lenbits) - 1)];/*BITS(state.lenbits)*/\n            here_bits = here >>> 24;\n            here_op = (here >>> 16) & 0xff;\n            here_val = here & 0xffff;\n\n            if ((here_bits) <= bits) { break; }\n            //--- PULLBYTE() ---//\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n            //---//\n          }\n          if (here_val < 16) {\n            //--- DROPBITS(here.bits) ---//\n            hold >>>= here_bits;\n            bits -= here_bits;\n            //---//\n            state.lens[state.have++] = here_val;\n          }\n          else {\n            if (here_val === 16) {\n              //=== NEEDBITS(here.bits + 2);\n              n = here_bits + 2;\n              while (bits < n) {\n                if (have === 0) { break inf_leave; }\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n              }\n              //===//\n              //--- DROPBITS(here.bits) ---//\n              hold >>>= here_bits;\n              bits -= here_bits;\n              //---//\n              if (state.have === 0) {\n                strm.msg = 'invalid bit length repeat';\n                state.mode = BAD;\n                break;\n              }\n              len = state.lens[state.have - 1];\n              copy = 3 + (hold & 0x03);//BITS(2);\n              //--- DROPBITS(2) ---//\n              hold >>>= 2;\n              bits -= 2;\n              //---//\n            }\n            else if (here_val === 17) {\n              //=== NEEDBITS(here.bits + 3);\n              n = here_bits + 3;\n              while (bits < n) {\n                if (have === 0) { break inf_leave; }\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n              }\n              //===//\n              //--- DROPBITS(here.bits) ---//\n              hold >>>= here_bits;\n              bits -= here_bits;\n              //---//\n              len = 0;\n              copy = 3 + (hold & 0x07);//BITS(3);\n              //--- DROPBITS(3) ---//\n              hold >>>= 3;\n              bits -= 3;\n              //---//\n            }\n            else {\n              //=== NEEDBITS(here.bits + 7);\n              n = here_bits + 7;\n              while (bits < n) {\n                if (have === 0) { break inf_leave; }\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n              }\n              //===//\n              //--- DROPBITS(here.bits) ---//\n              hold >>>= here_bits;\n              bits -= here_bits;\n              //---//\n              len = 0;\n              copy = 11 + (hold & 0x7f);//BITS(7);\n              //--- DROPBITS(7) ---//\n              hold >>>= 7;\n              bits -= 7;\n              //---//\n            }\n            if (state.have + copy > state.nlen + state.ndist) {\n              strm.msg = 'invalid bit length repeat';\n              state.mode = BAD;\n              break;\n            }\n            while (copy--) {\n              state.lens[state.have++] = len;\n            }\n          }\n        }\n\n        /* handle error breaks in while */\n        if (state.mode === BAD) { break; }\n\n        /* check for end-of-block code (better have one) */\n        if (state.lens[256] === 0) {\n          strm.msg = 'invalid code -- missing end-of-block';\n          state.mode = BAD;\n          break;\n        }\n\n        /* build code tables -- note: do not change the lenbits or distbits\n           values here (9 and 6) without reading the comments in inftrees.h\n           concerning the ENOUGH constants, which depend on those values */\n        state.lenbits = 9;\n\n        opts = { bits: state.lenbits };\n        ret = inflate_table(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);\n        // We have separate tables & no pointers. 2 commented lines below not needed.\n        // state.next_index = opts.table_index;\n        state.lenbits = opts.bits;\n        // state.lencode = state.next;\n\n        if (ret) {\n          strm.msg = 'invalid literal/lengths set';\n          state.mode = BAD;\n          break;\n        }\n\n        state.distbits = 6;\n        //state.distcode.copy(state.codes);\n        // Switch to use dynamic table\n        state.distcode = state.distdyn;\n        opts = { bits: state.distbits };\n        ret = inflate_table(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);\n        // We have separate tables & no pointers. 2 commented lines below not needed.\n        // state.next_index = opts.table_index;\n        state.distbits = opts.bits;\n        // state.distcode = state.next;\n\n        if (ret) {\n          strm.msg = 'invalid distances set';\n          state.mode = BAD;\n          break;\n        }\n        //Tracev((stderr, 'inflate:       codes ok\\n'));\n        state.mode = LEN_;\n        if (flush === Z_TREES) { break inf_leave; }\n        /* falls through */\n      case LEN_:\n        state.mode = LEN;\n        /* falls through */\n      case LEN:\n        if (have >= 6 && left >= 258) {\n          //--- RESTORE() ---\n          strm.next_out = put;\n          strm.avail_out = left;\n          strm.next_in = next;\n          strm.avail_in = have;\n          state.hold = hold;\n          state.bits = bits;\n          //---\n          inflate_fast(strm, _out);\n          //--- LOAD() ---\n          put = strm.next_out;\n          output = strm.output;\n          left = strm.avail_out;\n          next = strm.next_in;\n          input = strm.input;\n          have = strm.avail_in;\n          hold = state.hold;\n          bits = state.bits;\n          //---\n\n          if (state.mode === TYPE) {\n            state.back = -1;\n          }\n          break;\n        }\n        state.back = 0;\n        for (;;) {\n          here = state.lencode[hold & ((1 << state.lenbits) - 1)];  /*BITS(state.lenbits)*/\n          here_bits = here >>> 24;\n          here_op = (here >>> 16) & 0xff;\n          here_val = here & 0xffff;\n\n          if (here_bits <= bits) { break; }\n          //--- PULLBYTE() ---//\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n          //---//\n        }\n        if (here_op && (here_op & 0xf0) === 0) {\n          last_bits = here_bits;\n          last_op = here_op;\n          last_val = here_val;\n          for (;;) {\n            here = state.lencode[last_val +\n                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];\n            here_bits = here >>> 24;\n            here_op = (here >>> 16) & 0xff;\n            here_val = here & 0xffff;\n\n            if ((last_bits + here_bits) <= bits) { break; }\n            //--- PULLBYTE() ---//\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n            //---//\n          }\n          //--- DROPBITS(last.bits) ---//\n          hold >>>= last_bits;\n          bits -= last_bits;\n          //---//\n          state.back += last_bits;\n        }\n        //--- DROPBITS(here.bits) ---//\n        hold >>>= here_bits;\n        bits -= here_bits;\n        //---//\n        state.back += here_bits;\n        state.length = here_val;\n        if (here_op === 0) {\n          //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?\n          //        \"inflate:         literal '%c'\\n\" :\n          //        \"inflate:         literal 0x%02x\\n\", here.val));\n          state.mode = LIT;\n          break;\n        }\n        if (here_op & 32) {\n          //Tracevv((stderr, \"inflate:         end of block\\n\"));\n          state.back = -1;\n          state.mode = TYPE;\n          break;\n        }\n        if (here_op & 64) {\n          strm.msg = 'invalid literal/length code';\n          state.mode = BAD;\n          break;\n        }\n        state.extra = here_op & 15;\n        state.mode = LENEXT;\n        /* falls through */\n      case LENEXT:\n        if (state.extra) {\n          //=== NEEDBITS(state.extra);\n          n = state.extra;\n          while (bits < n) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.length += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;\n          //--- DROPBITS(state.extra) ---//\n          hold >>>= state.extra;\n          bits -= state.extra;\n          //---//\n          state.back += state.extra;\n        }\n        //Tracevv((stderr, \"inflate:         length %u\\n\", state.length));\n        state.was = state.length;\n        state.mode = DIST;\n        /* falls through */\n      case DIST:\n        for (;;) {\n          here = state.distcode[hold & ((1 << state.distbits) - 1)];/*BITS(state.distbits)*/\n          here_bits = here >>> 24;\n          here_op = (here >>> 16) & 0xff;\n          here_val = here & 0xffff;\n\n          if ((here_bits) <= bits) { break; }\n          //--- PULLBYTE() ---//\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n          //---//\n        }\n        if ((here_op & 0xf0) === 0) {\n          last_bits = here_bits;\n          last_op = here_op;\n          last_val = here_val;\n          for (;;) {\n            here = state.distcode[last_val +\n                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];\n            here_bits = here >>> 24;\n            here_op = (here >>> 16) & 0xff;\n            here_val = here & 0xffff;\n\n            if ((last_bits + here_bits) <= bits) { break; }\n            //--- PULLBYTE() ---//\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n            //---//\n          }\n          //--- DROPBITS(last.bits) ---//\n          hold >>>= last_bits;\n          bits -= last_bits;\n          //---//\n          state.back += last_bits;\n        }\n        //--- DROPBITS(here.bits) ---//\n        hold >>>= here_bits;\n        bits -= here_bits;\n        //---//\n        state.back += here_bits;\n        if (here_op & 64) {\n          strm.msg = 'invalid distance code';\n          state.mode = BAD;\n          break;\n        }\n        state.offset = here_val;\n        state.extra = (here_op) & 15;\n        state.mode = DISTEXT;\n        /* falls through */\n      case DISTEXT:\n        if (state.extra) {\n          //=== NEEDBITS(state.extra);\n          n = state.extra;\n          while (bits < n) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.offset += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;\n          //--- DROPBITS(state.extra) ---//\n          hold >>>= state.extra;\n          bits -= state.extra;\n          //---//\n          state.back += state.extra;\n        }\n//#ifdef INFLATE_STRICT\n        if (state.offset > state.dmax) {\n          strm.msg = 'invalid distance too far back';\n          state.mode = BAD;\n          break;\n        }\n//#endif\n        //Tracevv((stderr, \"inflate:         distance %u\\n\", state.offset));\n        state.mode = MATCH;\n        /* falls through */\n      case MATCH:\n        if (left === 0) { break inf_leave; }\n        copy = _out - left;\n        if (state.offset > copy) {         /* copy from window */\n          copy = state.offset - copy;\n          if (copy > state.whave) {\n            if (state.sane) {\n              strm.msg = 'invalid distance too far back';\n              state.mode = BAD;\n              break;\n            }\n// (!) This block is disabled in zlib defaults,\n// don't enable it for binary compatibility\n//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR\n//          Trace((stderr, \"inflate.c too far\\n\"));\n//          copy -= state.whave;\n//          if (copy > state.length) { copy = state.length; }\n//          if (copy > left) { copy = left; }\n//          left -= copy;\n//          state.length -= copy;\n//          do {\n//            output[put++] = 0;\n//          } while (--copy);\n//          if (state.length === 0) { state.mode = LEN; }\n//          break;\n//#endif\n          }\n          if (copy > state.wnext) {\n            copy -= state.wnext;\n            from = state.wsize - copy;\n          }\n          else {\n            from = state.wnext - copy;\n          }\n          if (copy > state.length) { copy = state.length; }\n          from_source = state.window;\n        }\n        else {                              /* copy from output */\n          from_source = output;\n          from = put - state.offset;\n          copy = state.length;\n        }\n        if (copy > left) { copy = left; }\n        left -= copy;\n        state.length -= copy;\n        do {\n          output[put++] = from_source[from++];\n        } while (--copy);\n        if (state.length === 0) { state.mode = LEN; }\n        break;\n      case LIT:\n        if (left === 0) { break inf_leave; }\n        output[put++] = state.length;\n        left--;\n        state.mode = LEN;\n        break;\n      case CHECK:\n        if (state.wrap) {\n          //=== NEEDBITS(32);\n          while (bits < 32) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            // Use '|' instead of '+' to make sure that result is signed\n            hold |= input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          _out -= left;\n          strm.total_out += _out;\n          state.total += _out;\n          if (_out) {\n            strm.adler = state.check =\n                /*UPDATE(state.check, put - _out, _out);*/\n                (state.flags ? crc32(state.check, output, _out, put - _out) : adler32(state.check, output, _out, put - _out));\n\n          }\n          _out = left;\n          // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too\n          if ((state.flags ? hold : zswap32(hold)) !== state.check) {\n            strm.msg = 'incorrect data check';\n            state.mode = BAD;\n            break;\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n          //Tracev((stderr, \"inflate:   check matches trailer\\n\"));\n        }\n        state.mode = LENGTH;\n        /* falls through */\n      case LENGTH:\n        if (state.wrap && state.flags) {\n          //=== NEEDBITS(32);\n          while (bits < 32) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          if (hold !== (state.total & 0xffffffff)) {\n            strm.msg = 'incorrect length check';\n            state.mode = BAD;\n            break;\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n          //Tracev((stderr, \"inflate:   length matches trailer\\n\"));\n        }\n        state.mode = DONE;\n        /* falls through */\n      case DONE:\n        ret = Z_STREAM_END;\n        break inf_leave;\n      case BAD:\n        ret = Z_DATA_ERROR;\n        break inf_leave;\n      case MEM:\n        return Z_MEM_ERROR;\n      case SYNC:\n        /* falls through */\n      default:\n        return Z_STREAM_ERROR;\n    }\n  }\n\n  // inf_leave <- here is real place for \"goto inf_leave\", emulated via \"break inf_leave\"\n\n  /*\n     Return from inflate(), updating the total counts and the check value.\n     If there was no progress during the inflate() call, return a buffer\n     error.  Call updatewindow() to create and/or update the window state.\n     Note: a memory error from inflate() is non-recoverable.\n   */\n\n  //--- RESTORE() ---\n  strm.next_out = put;\n  strm.avail_out = left;\n  strm.next_in = next;\n  strm.avail_in = have;\n  state.hold = hold;\n  state.bits = bits;\n  //---\n\n  if (state.wsize || (_out !== strm.avail_out && state.mode < BAD &&\n                      (state.mode < CHECK || flush !== Z_FINISH))) {\n    if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) {\n      state.mode = MEM;\n      return Z_MEM_ERROR;\n    }\n  }\n  _in -= strm.avail_in;\n  _out -= strm.avail_out;\n  strm.total_in += _in;\n  strm.total_out += _out;\n  state.total += _out;\n  if (state.wrap && _out) {\n    strm.adler = state.check = /*UPDATE(state.check, strm.next_out - _out, _out);*/\n      (state.flags ? crc32(state.check, output, _out, strm.next_out - _out) : adler32(state.check, output, _out, strm.next_out - _out));\n  }\n  strm.data_type = state.bits + (state.last ? 64 : 0) +\n                    (state.mode === TYPE ? 128 : 0) +\n                    (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);\n  if (((_in === 0 && _out === 0) || flush === Z_FINISH) && ret === Z_OK) {\n    ret = Z_BUF_ERROR;\n  }\n  return ret;\n}\n\nfunction inflateEnd(strm) {\n\n  if (!strm || !strm.state /*|| strm->zfree == (free_func)0*/) {\n    return Z_STREAM_ERROR;\n  }\n\n  var state = strm.state;\n  if (state.window) {\n    state.window = null;\n  }\n  strm.state = null;\n  return Z_OK;\n}\n\nfunction inflateGetHeader(strm, head) {\n  var state;\n\n  /* check state */\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n  state = strm.state;\n  if ((state.wrap & 2) === 0) { return Z_STREAM_ERROR; }\n\n  /* save header structure */\n  state.head = head;\n  head.done = false;\n  return Z_OK;\n}\n\nfunction inflateSetDictionary(strm, dictionary) {\n  var dictLength = dictionary.length;\n\n  var state;\n  var dictid;\n  var ret;\n\n  /* check state */\n  if (!strm /* == Z_NULL */ || !strm.state /* == Z_NULL */) { return Z_STREAM_ERROR; }\n  state = strm.state;\n\n  if (state.wrap !== 0 && state.mode !== DICT) {\n    return Z_STREAM_ERROR;\n  }\n\n  /* check for correct dictionary identifier */\n  if (state.mode === DICT) {\n    dictid = 1; /* adler32(0, null, 0)*/\n    /* dictid = adler32(dictid, dictionary, dictLength); */\n    dictid = adler32(dictid, dictionary, dictLength, 0);\n    if (dictid !== state.check) {\n      return Z_DATA_ERROR;\n    }\n  }\n  /* copy dictionary to window using updatewindow(), which will amend the\n   existing dictionary if appropriate */\n  ret = updatewindow(strm, dictionary, dictLength, dictLength);\n  if (ret) {\n    state.mode = MEM;\n    return Z_MEM_ERROR;\n  }\n  state.havedict = 1;\n  // Tracev((stderr, \"inflate:   dictionary set\\n\"));\n  return Z_OK;\n}\n\nexports.inflateReset = inflateReset;\nexports.inflateReset2 = inflateReset2;\nexports.inflateResetKeep = inflateResetKeep;\nexports.inflateInit = inflateInit;\nexports.inflateInit2 = inflateInit2;\nexports.inflate = inflate;\nexports.inflateEnd = inflateEnd;\nexports.inflateGetHeader = inflateGetHeader;\nexports.inflateSetDictionary = inflateSetDictionary;\nexports.inflateInfo = 'pako inflate (from Nodeca project)';\n\n/* Not implemented\nexports.inflateCopy = inflateCopy;\nexports.inflateGetDictionary = inflateGetDictionary;\nexports.inflateMark = inflateMark;\nexports.inflatePrime = inflatePrime;\nexports.inflateSync = inflateSync;\nexports.inflateSyncPoint = inflateSyncPoint;\nexports.inflateUndermine = inflateUndermine;\n*/\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/pako/lib/zlib/inflate.js\n");

/***/ }),

/***/ "./node_modules/pako/lib/zlib/inftrees.js":
/*!************************************************!*\
  !*** ./node_modules/pako/lib/zlib/inftrees.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nvar utils = __webpack_require__(/*! ../utils/common */ \"./node_modules/pako/lib/utils/common.js\");\n\nvar MAXBITS = 15;\nvar ENOUGH_LENS = 852;\nvar ENOUGH_DISTS = 592;\n//var ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);\n\nvar CODES = 0;\nvar LENS = 1;\nvar DISTS = 2;\n\nvar lbase = [ /* Length codes 257..285 base */\n  3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,\n  35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0\n];\n\nvar lext = [ /* Length codes 257..285 extra */\n  16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,\n  19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78\n];\n\nvar dbase = [ /* Distance codes 0..29 base */\n  1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,\n  257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,\n  8193, 12289, 16385, 24577, 0, 0\n];\n\nvar dext = [ /* Distance codes 0..29 extra */\n  16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,\n  23, 23, 24, 24, 25, 25, 26, 26, 27, 27,\n  28, 28, 29, 29, 64, 64\n];\n\nmodule.exports = function inflate_table(type, lens, lens_index, codes, table, table_index, work, opts)\n{\n  var bits = opts.bits;\n      //here = opts.here; /* table entry for duplication */\n\n  var len = 0;               /* a code's length in bits */\n  var sym = 0;               /* index of code symbols */\n  var min = 0, max = 0;          /* minimum and maximum code lengths */\n  var root = 0;              /* number of index bits for root table */\n  var curr = 0;              /* number of index bits for current table */\n  var drop = 0;              /* code bits to drop for sub-table */\n  var left = 0;                   /* number of prefix codes available */\n  var used = 0;              /* code entries in table used */\n  var huff = 0;              /* Huffman code */\n  var incr;              /* for incrementing code, index */\n  var fill;              /* index for replicating entries */\n  var low;               /* low bits for current root entry */\n  var mask;              /* mask for low root bits */\n  var next;             /* next available space in table */\n  var base = null;     /* base value table to use */\n  var base_index = 0;\n//  var shoextra;    /* extra bits table to use */\n  var end;                    /* use base and extra for symbol > end */\n  var count = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */\n  var offs = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */\n  var extra = null;\n  var extra_index = 0;\n\n  var here_bits, here_op, here_val;\n\n  /*\n   Process a set of code lengths to create a canonical Huffman code.  The\n   code lengths are lens[0..codes-1].  Each length corresponds to the\n   symbols 0..codes-1.  The Huffman code is generated by first sorting the\n   symbols by length from short to long, and retaining the symbol order\n   for codes with equal lengths.  Then the code starts with all zero bits\n   for the first code of the shortest length, and the codes are integer\n   increments for the same length, and zeros are appended as the length\n   increases.  For the deflate format, these bits are stored backwards\n   from their more natural integer increment ordering, and so when the\n   decoding tables are built in the large loop below, the integer codes\n   are incremented backwards.\n\n   This routine assumes, but does not check, that all of the entries in\n   lens[] are in the range 0..MAXBITS.  The caller must assure this.\n   1..MAXBITS is interpreted as that code length.  zero means that that\n   symbol does not occur in this code.\n\n   The codes are sorted by computing a count of codes for each length,\n   creating from that a table of starting indices for each length in the\n   sorted table, and then entering the symbols in order in the sorted\n   table.  The sorted table is work[], with that space being provided by\n   the caller.\n\n   The length counts are used for other purposes as well, i.e. finding\n   the minimum and maximum length codes, determining if there are any\n   codes at all, checking for a valid set of lengths, and looking ahead\n   at length counts to determine sub-table sizes when building the\n   decoding tables.\n   */\n\n  /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */\n  for (len = 0; len <= MAXBITS; len++) {\n    count[len] = 0;\n  }\n  for (sym = 0; sym < codes; sym++) {\n    count[lens[lens_index + sym]]++;\n  }\n\n  /* bound code lengths, force root to be within code lengths */\n  root = bits;\n  for (max = MAXBITS; max >= 1; max--) {\n    if (count[max] !== 0) { break; }\n  }\n  if (root > max) {\n    root = max;\n  }\n  if (max === 0) {                     /* no symbols to code at all */\n    //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */\n    //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;\n    //table.val[opts.table_index++] = 0;   //here.val = (var short)0;\n    table[table_index++] = (1 << 24) | (64 << 16) | 0;\n\n\n    //table.op[opts.table_index] = 64;\n    //table.bits[opts.table_index] = 1;\n    //table.val[opts.table_index++] = 0;\n    table[table_index++] = (1 << 24) | (64 << 16) | 0;\n\n    opts.bits = 1;\n    return 0;     /* no symbols, but wait for decoding to report error */\n  }\n  for (min = 1; min < max; min++) {\n    if (count[min] !== 0) { break; }\n  }\n  if (root < min) {\n    root = min;\n  }\n\n  /* check for an over-subscribed or incomplete set of lengths */\n  left = 1;\n  for (len = 1; len <= MAXBITS; len++) {\n    left <<= 1;\n    left -= count[len];\n    if (left < 0) {\n      return -1;\n    }        /* over-subscribed */\n  }\n  if (left > 0 && (type === CODES || max !== 1)) {\n    return -1;                      /* incomplete set */\n  }\n\n  /* generate offsets into symbol table for each length for sorting */\n  offs[1] = 0;\n  for (len = 1; len < MAXBITS; len++) {\n    offs[len + 1] = offs[len] + count[len];\n  }\n\n  /* sort symbols by length, by symbol order within each length */\n  for (sym = 0; sym < codes; sym++) {\n    if (lens[lens_index + sym] !== 0) {\n      work[offs[lens[lens_index + sym]]++] = sym;\n    }\n  }\n\n  /*\n   Create and fill in decoding tables.  In this loop, the table being\n   filled is at next and has curr index bits.  The code being used is huff\n   with length len.  That code is converted to an index by dropping drop\n   bits off of the bottom.  For codes where len is less than drop + curr,\n   those top drop + curr - len bits are incremented through all values to\n   fill the table with replicated entries.\n\n   root is the number of index bits for the root table.  When len exceeds\n   root, sub-tables are created pointed to by the root entry with an index\n   of the low root bits of huff.  This is saved in low to check for when a\n   new sub-table should be started.  drop is zero when the root table is\n   being filled, and drop is root when sub-tables are being filled.\n\n   When a new sub-table is needed, it is necessary to look ahead in the\n   code lengths to determine what size sub-table is needed.  The length\n   counts are used for this, and so count[] is decremented as codes are\n   entered in the tables.\n\n   used keeps track of how many table entries have been allocated from the\n   provided *table space.  It is checked for LENS and DIST tables against\n   the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in\n   the initial root table size constants.  See the comments in inftrees.h\n   for more information.\n\n   sym increments through all symbols, and the loop terminates when\n   all codes of length max, i.e. all codes, have been processed.  This\n   routine permits incomplete codes, so another loop after this one fills\n   in the rest of the decoding tables with invalid code markers.\n   */\n\n  /* set up for code type */\n  // poor man optimization - use if-else instead of switch,\n  // to avoid deopts in old v8\n  if (type === CODES) {\n    base = extra = work;    /* dummy value--not used */\n    end = 19;\n\n  } else if (type === LENS) {\n    base = lbase;\n    base_index -= 257;\n    extra = lext;\n    extra_index -= 257;\n    end = 256;\n\n  } else {                    /* DISTS */\n    base = dbase;\n    extra = dext;\n    end = -1;\n  }\n\n  /* initialize opts for loop */\n  huff = 0;                   /* starting code */\n  sym = 0;                    /* starting code symbol */\n  len = min;                  /* starting code length */\n  next = table_index;              /* current table to fill in */\n  curr = root;                /* current table index bits */\n  drop = 0;                   /* current bits to drop from code for index */\n  low = -1;                   /* trigger new sub-table when len > root */\n  used = 1 << root;          /* use root table entries */\n  mask = used - 1;            /* mask for comparing low */\n\n  /* check available table space */\n  if ((type === LENS && used > ENOUGH_LENS) ||\n    (type === DISTS && used > ENOUGH_DISTS)) {\n    return 1;\n  }\n\n  /* process all codes and make table entries */\n  for (;;) {\n    /* create table entry */\n    here_bits = len - drop;\n    if (work[sym] < end) {\n      here_op = 0;\n      here_val = work[sym];\n    }\n    else if (work[sym] > end) {\n      here_op = extra[extra_index + work[sym]];\n      here_val = base[base_index + work[sym]];\n    }\n    else {\n      here_op = 32 + 64;         /* end of block */\n      here_val = 0;\n    }\n\n    /* replicate for those indices with low len bits equal to huff */\n    incr = 1 << (len - drop);\n    fill = 1 << curr;\n    min = fill;                 /* save offset to next table */\n    do {\n      fill -= incr;\n      table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val |0;\n    } while (fill !== 0);\n\n    /* backwards increment the len-bit code huff */\n    incr = 1 << (len - 1);\n    while (huff & incr) {\n      incr >>= 1;\n    }\n    if (incr !== 0) {\n      huff &= incr - 1;\n      huff += incr;\n    } else {\n      huff = 0;\n    }\n\n    /* go to next symbol, update count, len */\n    sym++;\n    if (--count[len] === 0) {\n      if (len === max) { break; }\n      len = lens[lens_index + work[sym]];\n    }\n\n    /* create new sub-table if needed */\n    if (len > root && (huff & mask) !== low) {\n      /* if first time, transition to sub-tables */\n      if (drop === 0) {\n        drop = root;\n      }\n\n      /* increment past last table */\n      next += min;            /* here min is 1 << curr */\n\n      /* determine length of next table */\n      curr = len - drop;\n      left = 1 << curr;\n      while (curr + drop < max) {\n        left -= count[curr + drop];\n        if (left <= 0) { break; }\n        curr++;\n        left <<= 1;\n      }\n\n      /* check for enough space */\n      used += 1 << curr;\n      if ((type === LENS && used > ENOUGH_LENS) ||\n        (type === DISTS && used > ENOUGH_DISTS)) {\n        return 1;\n      }\n\n      /* point entry in root table to sub-table */\n      low = huff & mask;\n      /*table.op[low] = curr;\n      table.bits[low] = root;\n      table.val[low] = next - opts.table_index;*/\n      table[low] = (root << 24) | (curr << 16) | (next - table_index) |0;\n    }\n  }\n\n  /* fill in remaining table entry if code is incomplete (guaranteed to have\n   at most one remaining entry, since if the code is incomplete, the\n   maximum code length that was allowed to get this far is one bit) */\n  if (huff !== 0) {\n    //table.op[next + huff] = 64;            /* invalid code marker */\n    //table.bits[next + huff] = len - drop;\n    //table.val[next + huff] = 0;\n    table[next + huff] = ((len - drop) << 24) | (64 << 16) |0;\n  }\n\n  /* set return parameters */\n  //opts.table_index += used;\n  opts.bits = root;\n  return 0;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/pako/lib/zlib/inftrees.js\n");

/***/ }),

/***/ "./node_modules/pako/lib/zlib/messages.js":
/*!************************************************!*\
  !*** ./node_modules/pako/lib/zlib/messages.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nmodule.exports = {\n  2:      'need dictionary',     /* Z_NEED_DICT       2  */\n  1:      'stream end',          /* Z_STREAM_END      1  */\n  0:      '',                    /* Z_OK              0  */\n  '-1':   'file error',          /* Z_ERRNO         (-1) */\n  '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */\n  '-3':   'data error',          /* Z_DATA_ERROR    (-3) */\n  '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */\n  '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */\n  '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcGFrby9saWIvemxpYi9tZXNzYWdlcy5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL1RlbGVncmFtanMvLi9ub2RlX21vZHVsZXMvcGFrby9saWIvemxpYi9tZXNzYWdlcy5qcz80ZGM2Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLy8gKEMpIDE5OTUtMjAxMyBKZWFuLWxvdXAgR2FpbGx5IGFuZCBNYXJrIEFkbGVyXG4vLyAoQykgMjAxNC0yMDE3IFZpdGFseSBQdXpyaW4gYW5kIEFuZHJleSBUdXBpdHNpblxuLy9cbi8vIFRoaXMgc29mdHdhcmUgaXMgcHJvdmlkZWQgJ2FzLWlzJywgd2l0aG91dCBhbnkgZXhwcmVzcyBvciBpbXBsaWVkXG4vLyB3YXJyYW50eS4gSW4gbm8gZXZlbnQgd2lsbCB0aGUgYXV0aG9ycyBiZSBoZWxkIGxpYWJsZSBmb3IgYW55IGRhbWFnZXNcbi8vIGFyaXNpbmcgZnJvbSB0aGUgdXNlIG9mIHRoaXMgc29mdHdhcmUuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBncmFudGVkIHRvIGFueW9uZSB0byB1c2UgdGhpcyBzb2Z0d2FyZSBmb3IgYW55IHB1cnBvc2UsXG4vLyBpbmNsdWRpbmcgY29tbWVyY2lhbCBhcHBsaWNhdGlvbnMsIGFuZCB0byBhbHRlciBpdCBhbmQgcmVkaXN0cmlidXRlIGl0XG4vLyBmcmVlbHksIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyByZXN0cmljdGlvbnM6XG4vL1xuLy8gMS4gVGhlIG9yaWdpbiBvZiB0aGlzIHNvZnR3YXJlIG11c3Qgbm90IGJlIG1pc3JlcHJlc2VudGVkOyB5b3UgbXVzdCBub3Rcbi8vICAgY2xhaW0gdGhhdCB5b3Ugd3JvdGUgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLiBJZiB5b3UgdXNlIHRoaXMgc29mdHdhcmVcbi8vICAgaW4gYSBwcm9kdWN0LCBhbiBhY2tub3dsZWRnbWVudCBpbiB0aGUgcHJvZHVjdCBkb2N1bWVudGF0aW9uIHdvdWxkIGJlXG4vLyAgIGFwcHJlY2lhdGVkIGJ1dCBpcyBub3QgcmVxdWlyZWQuXG4vLyAyLiBBbHRlcmVkIHNvdXJjZSB2ZXJzaW9ucyBtdXN0IGJlIHBsYWlubHkgbWFya2VkIGFzIHN1Y2gsIGFuZCBtdXN0IG5vdCBiZVxuLy8gICBtaXNyZXByZXNlbnRlZCBhcyBiZWluZyB0aGUgb3JpZ2luYWwgc29mdHdhcmUuXG4vLyAzLiBUaGlzIG5vdGljZSBtYXkgbm90IGJlIHJlbW92ZWQgb3IgYWx0ZXJlZCBmcm9tIGFueSBzb3VyY2UgZGlzdHJpYnV0aW9uLlxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgMjogICAgICAnbmVlZCBkaWN0aW9uYXJ5JywgICAgIC8qIFpfTkVFRF9ESUNUICAgICAgIDIgICovXG4gIDE6ICAgICAgJ3N0cmVhbSBlbmQnLCAgICAgICAgICAvKiBaX1NUUkVBTV9FTkQgICAgICAxICAqL1xuICAwOiAgICAgICcnLCAgICAgICAgICAgICAgICAgICAgLyogWl9PSyAgICAgICAgICAgICAgMCAgKi9cbiAgJy0xJzogICAnZmlsZSBlcnJvcicsICAgICAgICAgIC8qIFpfRVJSTk8gICAgICAgICAoLTEpICovXG4gICctMic6ICAgJ3N0cmVhbSBlcnJvcicsICAgICAgICAvKiBaX1NUUkVBTV9FUlJPUiAgKC0yKSAqL1xuICAnLTMnOiAgICdkYXRhIGVycm9yJywgICAgICAgICAgLyogWl9EQVRBX0VSUk9SICAgICgtMykgKi9cbiAgJy00JzogICAnaW5zdWZmaWNpZW50IG1lbW9yeScsIC8qIFpfTUVNX0VSUk9SICAgICAoLTQpICovXG4gICctNSc6ICAgJ2J1ZmZlciBlcnJvcicsICAgICAgICAvKiBaX0JVRl9FUlJPUiAgICAgKC01KSAqL1xuICAnLTYnOiAgICdpbmNvbXBhdGlibGUgdmVyc2lvbicgLyogWl9WRVJTSU9OX0VSUk9SICgtNikgKi9cbn07XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/pako/lib/zlib/messages.js\n");

/***/ }),

/***/ "./node_modules/pako/lib/zlib/trees.js":
/*!*********************************************!*\
  !*** ./node_modules/pako/lib/zlib/trees.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n/* eslint-disable space-unary-ops */\n\nvar utils = __webpack_require__(/*! ../utils/common */ \"./node_modules/pako/lib/utils/common.js\");\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\n\n//var Z_FILTERED          = 1;\n//var Z_HUFFMAN_ONLY      = 2;\n//var Z_RLE               = 3;\nvar Z_FIXED               = 4;\n//var Z_DEFAULT_STRATEGY  = 0;\n\n/* Possible values of the data_type field (though see inflate()) */\nvar Z_BINARY              = 0;\nvar Z_TEXT                = 1;\n//var Z_ASCII             = 1; // = Z_TEXT\nvar Z_UNKNOWN             = 2;\n\n/*============================================================================*/\n\n\nfunction zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }\n\n// From zutil.h\n\nvar STORED_BLOCK = 0;\nvar STATIC_TREES = 1;\nvar DYN_TREES    = 2;\n/* The three kinds of block type */\n\nvar MIN_MATCH    = 3;\nvar MAX_MATCH    = 258;\n/* The minimum and maximum match lengths */\n\n// From deflate.h\n/* ===========================================================================\n * Internal compression state.\n */\n\nvar LENGTH_CODES  = 29;\n/* number of length codes, not counting the special END_BLOCK code */\n\nvar LITERALS      = 256;\n/* number of literal bytes 0..255 */\n\nvar L_CODES       = LITERALS + 1 + LENGTH_CODES;\n/* number of Literal or Length codes, including the END_BLOCK code */\n\nvar D_CODES       = 30;\n/* number of distance codes */\n\nvar BL_CODES      = 19;\n/* number of codes used to transfer the bit lengths */\n\nvar HEAP_SIZE     = 2 * L_CODES + 1;\n/* maximum heap size */\n\nvar MAX_BITS      = 15;\n/* All codes must not exceed MAX_BITS bits */\n\nvar Buf_size      = 16;\n/* size of bit buffer in bi_buf */\n\n\n/* ===========================================================================\n * Constants\n */\n\nvar MAX_BL_BITS = 7;\n/* Bit length codes must not exceed MAX_BL_BITS bits */\n\nvar END_BLOCK   = 256;\n/* end of block literal code */\n\nvar REP_3_6     = 16;\n/* repeat previous bit length 3-6 times (2 bits of repeat count) */\n\nvar REPZ_3_10   = 17;\n/* repeat a zero length 3-10 times  (3 bits of repeat count) */\n\nvar REPZ_11_138 = 18;\n/* repeat a zero length 11-138 times  (7 bits of repeat count) */\n\n/* eslint-disable comma-spacing,array-bracket-spacing */\nvar extra_lbits =   /* extra bits for each length code */\n  [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0];\n\nvar extra_dbits =   /* extra bits for each distance code */\n  [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13];\n\nvar extra_blbits =  /* extra bits for each bit length code */\n  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7];\n\nvar bl_order =\n  [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];\n/* eslint-enable comma-spacing,array-bracket-spacing */\n\n/* The lengths of the bit length codes are sent in order of decreasing\n * probability, to avoid transmitting the lengths for unused bit length codes.\n */\n\n/* ===========================================================================\n * Local data. These are initialized only once.\n */\n\n// We pre-fill arrays with 0 to avoid uninitialized gaps\n\nvar DIST_CODE_LEN = 512; /* see definition of array dist_code below */\n\n// !!!! Use flat array instead of structure, Freq = i*2, Len = i*2+1\nvar static_ltree  = new Array((L_CODES + 2) * 2);\nzero(static_ltree);\n/* The static literal tree. Since the bit lengths are imposed, there is no\n * need for the L_CODES extra codes used during heap construction. However\n * The codes 286 and 287 are needed to build a canonical tree (see _tr_init\n * below).\n */\n\nvar static_dtree  = new Array(D_CODES * 2);\nzero(static_dtree);\n/* The static distance tree. (Actually a trivial tree since all codes use\n * 5 bits.)\n */\n\nvar _dist_code    = new Array(DIST_CODE_LEN);\nzero(_dist_code);\n/* Distance codes. The first 256 values correspond to the distances\n * 3 .. 258, the last 256 values correspond to the top 8 bits of\n * the 15 bit distances.\n */\n\nvar _length_code  = new Array(MAX_MATCH - MIN_MATCH + 1);\nzero(_length_code);\n/* length code for each normalized match length (0 == MIN_MATCH) */\n\nvar base_length   = new Array(LENGTH_CODES);\nzero(base_length);\n/* First normalized length for each code (0 = MIN_MATCH) */\n\nvar base_dist     = new Array(D_CODES);\nzero(base_dist);\n/* First normalized distance for each code (0 = distance of 1) */\n\n\nfunction StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {\n\n  this.static_tree  = static_tree;  /* static tree or NULL */\n  this.extra_bits   = extra_bits;   /* extra bits for each code or NULL */\n  this.extra_base   = extra_base;   /* base index for extra_bits */\n  this.elems        = elems;        /* max number of elements in the tree */\n  this.max_length   = max_length;   /* max bit length for the codes */\n\n  // show if `static_tree` has data or dummy - needed for monomorphic objects\n  this.has_stree    = static_tree && static_tree.length;\n}\n\n\nvar static_l_desc;\nvar static_d_desc;\nvar static_bl_desc;\n\n\nfunction TreeDesc(dyn_tree, stat_desc) {\n  this.dyn_tree = dyn_tree;     /* the dynamic tree */\n  this.max_code = 0;            /* largest code with non zero frequency */\n  this.stat_desc = stat_desc;   /* the corresponding static tree */\n}\n\n\n\nfunction d_code(dist) {\n  return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];\n}\n\n\n/* ===========================================================================\n * Output a short LSB first on the stream.\n * IN assertion: there is enough room in pendingBuf.\n */\nfunction put_short(s, w) {\n//    put_byte(s, (uch)((w) & 0xff));\n//    put_byte(s, (uch)((ush)(w) >> 8));\n  s.pending_buf[s.pending++] = (w) & 0xff;\n  s.pending_buf[s.pending++] = (w >>> 8) & 0xff;\n}\n\n\n/* ===========================================================================\n * Send a value on a given number of bits.\n * IN assertion: length <= 16 and value fits in length bits.\n */\nfunction send_bits(s, value, length) {\n  if (s.bi_valid > (Buf_size - length)) {\n    s.bi_buf |= (value << s.bi_valid) & 0xffff;\n    put_short(s, s.bi_buf);\n    s.bi_buf = value >> (Buf_size - s.bi_valid);\n    s.bi_valid += length - Buf_size;\n  } else {\n    s.bi_buf |= (value << s.bi_valid) & 0xffff;\n    s.bi_valid += length;\n  }\n}\n\n\nfunction send_code(s, c, tree) {\n  send_bits(s, tree[c * 2]/*.Code*/, tree[c * 2 + 1]/*.Len*/);\n}\n\n\n/* ===========================================================================\n * Reverse the first len bits of a code, using straightforward code (a faster\n * method would use a table)\n * IN assertion: 1 <= len <= 15\n */\nfunction bi_reverse(code, len) {\n  var res = 0;\n  do {\n    res |= code & 1;\n    code >>>= 1;\n    res <<= 1;\n  } while (--len > 0);\n  return res >>> 1;\n}\n\n\n/* ===========================================================================\n * Flush the bit buffer, keeping at most 7 bits in it.\n */\nfunction bi_flush(s) {\n  if (s.bi_valid === 16) {\n    put_short(s, s.bi_buf);\n    s.bi_buf = 0;\n    s.bi_valid = 0;\n\n  } else if (s.bi_valid >= 8) {\n    s.pending_buf[s.pending++] = s.bi_buf & 0xff;\n    s.bi_buf >>= 8;\n    s.bi_valid -= 8;\n  }\n}\n\n\n/* ===========================================================================\n * Compute the optimal bit lengths for a tree and update the total bit length\n * for the current block.\n * IN assertion: the fields freq and dad are set, heap[heap_max] and\n *    above are the tree nodes sorted by increasing frequency.\n * OUT assertions: the field len is set to the optimal bit length, the\n *     array bl_count contains the frequencies for each bit length.\n *     The length opt_len is updated; static_len is also updated if stree is\n *     not null.\n */\nfunction gen_bitlen(s, desc)\n//    deflate_state *s;\n//    tree_desc *desc;    /* the tree descriptor */\n{\n  var tree            = desc.dyn_tree;\n  var max_code        = desc.max_code;\n  var stree           = desc.stat_desc.static_tree;\n  var has_stree       = desc.stat_desc.has_stree;\n  var extra           = desc.stat_desc.extra_bits;\n  var base            = desc.stat_desc.extra_base;\n  var max_length      = desc.stat_desc.max_length;\n  var h;              /* heap index */\n  var n, m;           /* iterate over the tree elements */\n  var bits;           /* bit length */\n  var xbits;          /* extra bits */\n  var f;              /* frequency */\n  var overflow = 0;   /* number of elements with bit length too large */\n\n  for (bits = 0; bits <= MAX_BITS; bits++) {\n    s.bl_count[bits] = 0;\n  }\n\n  /* In a first pass, compute the optimal bit lengths (which may\n   * overflow in the case of the bit length tree).\n   */\n  tree[s.heap[s.heap_max] * 2 + 1]/*.Len*/ = 0; /* root of the heap */\n\n  for (h = s.heap_max + 1; h < HEAP_SIZE; h++) {\n    n = s.heap[h];\n    bits = tree[tree[n * 2 + 1]/*.Dad*/ * 2 + 1]/*.Len*/ + 1;\n    if (bits > max_length) {\n      bits = max_length;\n      overflow++;\n    }\n    tree[n * 2 + 1]/*.Len*/ = bits;\n    /* We overwrite tree[n].Dad which is no longer needed */\n\n    if (n > max_code) { continue; } /* not a leaf node */\n\n    s.bl_count[bits]++;\n    xbits = 0;\n    if (n >= base) {\n      xbits = extra[n - base];\n    }\n    f = tree[n * 2]/*.Freq*/;\n    s.opt_len += f * (bits + xbits);\n    if (has_stree) {\n      s.static_len += f * (stree[n * 2 + 1]/*.Len*/ + xbits);\n    }\n  }\n  if (overflow === 0) { return; }\n\n  // Trace((stderr,\"\\nbit length overflow\\n\"));\n  /* This happens for example on obj2 and pic of the Calgary corpus */\n\n  /* Find the first bit length which could increase: */\n  do {\n    bits = max_length - 1;\n    while (s.bl_count[bits] === 0) { bits--; }\n    s.bl_count[bits]--;      /* move one leaf down the tree */\n    s.bl_count[bits + 1] += 2; /* move one overflow item as its brother */\n    s.bl_count[max_length]--;\n    /* The brother of the overflow item also moves one step up,\n     * but this does not affect bl_count[max_length]\n     */\n    overflow -= 2;\n  } while (overflow > 0);\n\n  /* Now recompute all bit lengths, scanning in increasing frequency.\n   * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all\n   * lengths instead of fixing only the wrong ones. This idea is taken\n   * from 'ar' written by Haruhiko Okumura.)\n   */\n  for (bits = max_length; bits !== 0; bits--) {\n    n = s.bl_count[bits];\n    while (n !== 0) {\n      m = s.heap[--h];\n      if (m > max_code) { continue; }\n      if (tree[m * 2 + 1]/*.Len*/ !== bits) {\n        // Trace((stderr,\"code %d bits %d->%d\\n\", m, tree[m].Len, bits));\n        s.opt_len += (bits - tree[m * 2 + 1]/*.Len*/) * tree[m * 2]/*.Freq*/;\n        tree[m * 2 + 1]/*.Len*/ = bits;\n      }\n      n--;\n    }\n  }\n}\n\n\n/* ===========================================================================\n * Generate the codes for a given tree and bit counts (which need not be\n * optimal).\n * IN assertion: the array bl_count contains the bit length statistics for\n * the given tree and the field len is set for all tree elements.\n * OUT assertion: the field code is set for all tree elements of non\n *     zero code length.\n */\nfunction gen_codes(tree, max_code, bl_count)\n//    ct_data *tree;             /* the tree to decorate */\n//    int max_code;              /* largest code with non zero frequency */\n//    ushf *bl_count;            /* number of codes at each bit length */\n{\n  var next_code = new Array(MAX_BITS + 1); /* next code value for each bit length */\n  var code = 0;              /* running code value */\n  var bits;                  /* bit index */\n  var n;                     /* code index */\n\n  /* The distribution counts are first used to generate the code values\n   * without bit reversal.\n   */\n  for (bits = 1; bits <= MAX_BITS; bits++) {\n    next_code[bits] = code = (code + bl_count[bits - 1]) << 1;\n  }\n  /* Check that the bit counts in bl_count are consistent. The last code\n   * must be all ones.\n   */\n  //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,\n  //        \"inconsistent bit counts\");\n  //Tracev((stderr,\"\\ngen_codes: max_code %d \", max_code));\n\n  for (n = 0;  n <= max_code; n++) {\n    var len = tree[n * 2 + 1]/*.Len*/;\n    if (len === 0) { continue; }\n    /* Now reverse the bits */\n    tree[n * 2]/*.Code*/ = bi_reverse(next_code[len]++, len);\n\n    //Tracecv(tree != static_ltree, (stderr,\"\\nn %3d %c l %2d c %4x (%x) \",\n    //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));\n  }\n}\n\n\n/* ===========================================================================\n * Initialize the various 'constant' tables.\n */\nfunction tr_static_init() {\n  var n;        /* iterates over tree elements */\n  var bits;     /* bit counter */\n  var length;   /* length value */\n  var code;     /* code value */\n  var dist;     /* distance index */\n  var bl_count = new Array(MAX_BITS + 1);\n  /* number of codes at each bit length for an optimal tree */\n\n  // do check in _tr_init()\n  //if (static_init_done) return;\n\n  /* For some embedded targets, global variables are not initialized: */\n/*#ifdef NO_INIT_GLOBAL_POINTERS\n  static_l_desc.static_tree = static_ltree;\n  static_l_desc.extra_bits = extra_lbits;\n  static_d_desc.static_tree = static_dtree;\n  static_d_desc.extra_bits = extra_dbits;\n  static_bl_desc.extra_bits = extra_blbits;\n#endif*/\n\n  /* Initialize the mapping length (0..255) -> length code (0..28) */\n  length = 0;\n  for (code = 0; code < LENGTH_CODES - 1; code++) {\n    base_length[code] = length;\n    for (n = 0; n < (1 << extra_lbits[code]); n++) {\n      _length_code[length++] = code;\n    }\n  }\n  //Assert (length == 256, \"tr_static_init: length != 256\");\n  /* Note that the length 255 (match length 258) can be represented\n   * in two different ways: code 284 + 5 bits or code 285, so we\n   * overwrite length_code[255] to use the best encoding:\n   */\n  _length_code[length - 1] = code;\n\n  /* Initialize the mapping dist (0..32K) -> dist code (0..29) */\n  dist = 0;\n  for (code = 0; code < 16; code++) {\n    base_dist[code] = dist;\n    for (n = 0; n < (1 << extra_dbits[code]); n++) {\n      _dist_code[dist++] = code;\n    }\n  }\n  //Assert (dist == 256, \"tr_static_init: dist != 256\");\n  dist >>= 7; /* from now on, all distances are divided by 128 */\n  for (; code < D_CODES; code++) {\n    base_dist[code] = dist << 7;\n    for (n = 0; n < (1 << (extra_dbits[code] - 7)); n++) {\n      _dist_code[256 + dist++] = code;\n    }\n  }\n  //Assert (dist == 256, \"tr_static_init: 256+dist != 512\");\n\n  /* Construct the codes of the static literal tree */\n  for (bits = 0; bits <= MAX_BITS; bits++) {\n    bl_count[bits] = 0;\n  }\n\n  n = 0;\n  while (n <= 143) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 8;\n    n++;\n    bl_count[8]++;\n  }\n  while (n <= 255) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 9;\n    n++;\n    bl_count[9]++;\n  }\n  while (n <= 279) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 7;\n    n++;\n    bl_count[7]++;\n  }\n  while (n <= 287) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 8;\n    n++;\n    bl_count[8]++;\n  }\n  /* Codes 286 and 287 do not exist, but we must include them in the\n   * tree construction to get a canonical Huffman tree (longest code\n   * all ones)\n   */\n  gen_codes(static_ltree, L_CODES + 1, bl_count);\n\n  /* The static distance tree is trivial: */\n  for (n = 0; n < D_CODES; n++) {\n    static_dtree[n * 2 + 1]/*.Len*/ = 5;\n    static_dtree[n * 2]/*.Code*/ = bi_reverse(n, 5);\n  }\n\n  // Now data ready and we can init static trees\n  static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS + 1, L_CODES, MAX_BITS);\n  static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0,          D_CODES, MAX_BITS);\n  static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0,         BL_CODES, MAX_BL_BITS);\n\n  //static_init_done = true;\n}\n\n\n/* ===========================================================================\n * Initialize a new block.\n */\nfunction init_block(s) {\n  var n; /* iterates over tree elements */\n\n  /* Initialize the trees. */\n  for (n = 0; n < L_CODES;  n++) { s.dyn_ltree[n * 2]/*.Freq*/ = 0; }\n  for (n = 0; n < D_CODES;  n++) { s.dyn_dtree[n * 2]/*.Freq*/ = 0; }\n  for (n = 0; n < BL_CODES; n++) { s.bl_tree[n * 2]/*.Freq*/ = 0; }\n\n  s.dyn_ltree[END_BLOCK * 2]/*.Freq*/ = 1;\n  s.opt_len = s.static_len = 0;\n  s.last_lit = s.matches = 0;\n}\n\n\n/* ===========================================================================\n * Flush the bit buffer and align the output on a byte boundary\n */\nfunction bi_windup(s)\n{\n  if (s.bi_valid > 8) {\n    put_short(s, s.bi_buf);\n  } else if (s.bi_valid > 0) {\n    //put_byte(s, (Byte)s->bi_buf);\n    s.pending_buf[s.pending++] = s.bi_buf;\n  }\n  s.bi_buf = 0;\n  s.bi_valid = 0;\n}\n\n/* ===========================================================================\n * Copy a stored block, storing first the length and its\n * one's complement if requested.\n */\nfunction copy_block(s, buf, len, header)\n//DeflateState *s;\n//charf    *buf;    /* the input data */\n//unsigned len;     /* its length */\n//int      header;  /* true if block header must be written */\n{\n  bi_windup(s);        /* align on byte boundary */\n\n  if (header) {\n    put_short(s, len);\n    put_short(s, ~len);\n  }\n//  while (len--) {\n//    put_byte(s, *buf++);\n//  }\n  utils.arraySet(s.pending_buf, s.window, buf, len, s.pending);\n  s.pending += len;\n}\n\n/* ===========================================================================\n * Compares to subtrees, using the tree depth as tie breaker when\n * the subtrees have equal frequency. This minimizes the worst case length.\n */\nfunction smaller(tree, n, m, depth) {\n  var _n2 = n * 2;\n  var _m2 = m * 2;\n  return (tree[_n2]/*.Freq*/ < tree[_m2]/*.Freq*/ ||\n         (tree[_n2]/*.Freq*/ === tree[_m2]/*.Freq*/ && depth[n] <= depth[m]));\n}\n\n/* ===========================================================================\n * Restore the heap property by moving down the tree starting at node k,\n * exchanging a node with the smallest of its two sons if necessary, stopping\n * when the heap property is re-established (each father smaller than its\n * two sons).\n */\nfunction pqdownheap(s, tree, k)\n//    deflate_state *s;\n//    ct_data *tree;  /* the tree to restore */\n//    int k;               /* node to move down */\n{\n  var v = s.heap[k];\n  var j = k << 1;  /* left son of k */\n  while (j <= s.heap_len) {\n    /* Set j to the smallest of the two sons: */\n    if (j < s.heap_len &&\n      smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {\n      j++;\n    }\n    /* Exit if v is smaller than both sons */\n    if (smaller(tree, v, s.heap[j], s.depth)) { break; }\n\n    /* Exchange v with the smallest son */\n    s.heap[k] = s.heap[j];\n    k = j;\n\n    /* And continue down the tree, setting j to the left son of k */\n    j <<= 1;\n  }\n  s.heap[k] = v;\n}\n\n\n// inlined manually\n// var SMALLEST = 1;\n\n/* ===========================================================================\n * Send the block data compressed using the given Huffman trees\n */\nfunction compress_block(s, ltree, dtree)\n//    deflate_state *s;\n//    const ct_data *ltree; /* literal tree */\n//    const ct_data *dtree; /* distance tree */\n{\n  var dist;           /* distance of matched string */\n  var lc;             /* match length or unmatched char (if dist == 0) */\n  var lx = 0;         /* running index in l_buf */\n  var code;           /* the code to send */\n  var extra;          /* number of extra bits to send */\n\n  if (s.last_lit !== 0) {\n    do {\n      dist = (s.pending_buf[s.d_buf + lx * 2] << 8) | (s.pending_buf[s.d_buf + lx * 2 + 1]);\n      lc = s.pending_buf[s.l_buf + lx];\n      lx++;\n\n      if (dist === 0) {\n        send_code(s, lc, ltree); /* send a literal byte */\n        //Tracecv(isgraph(lc), (stderr,\" '%c' \", lc));\n      } else {\n        /* Here, lc is the match length - MIN_MATCH */\n        code = _length_code[lc];\n        send_code(s, code + LITERALS + 1, ltree); /* send the length code */\n        extra = extra_lbits[code];\n        if (extra !== 0) {\n          lc -= base_length[code];\n          send_bits(s, lc, extra);       /* send the extra length bits */\n        }\n        dist--; /* dist is now the match distance - 1 */\n        code = d_code(dist);\n        //Assert (code < D_CODES, \"bad d_code\");\n\n        send_code(s, code, dtree);       /* send the distance code */\n        extra = extra_dbits[code];\n        if (extra !== 0) {\n          dist -= base_dist[code];\n          send_bits(s, dist, extra);   /* send the extra distance bits */\n        }\n      } /* literal or match pair ? */\n\n      /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */\n      //Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,\n      //       \"pendingBuf overflow\");\n\n    } while (lx < s.last_lit);\n  }\n\n  send_code(s, END_BLOCK, ltree);\n}\n\n\n/* ===========================================================================\n * Construct one Huffman tree and assigns the code bit strings and lengths.\n * Update the total bit length for the current block.\n * IN assertion: the field freq is set for all tree elements.\n * OUT assertions: the fields len and code are set to the optimal bit length\n *     and corresponding code. The length opt_len is updated; static_len is\n *     also updated if stree is not null. The field max_code is set.\n */\nfunction build_tree(s, desc)\n//    deflate_state *s;\n//    tree_desc *desc; /* the tree descriptor */\n{\n  var tree     = desc.dyn_tree;\n  var stree    = desc.stat_desc.static_tree;\n  var has_stree = desc.stat_desc.has_stree;\n  var elems    = desc.stat_desc.elems;\n  var n, m;          /* iterate over heap elements */\n  var max_code = -1; /* largest code with non zero frequency */\n  var node;          /* new node being created */\n\n  /* Construct the initial heap, with least frequent element in\n   * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].\n   * heap[0] is not used.\n   */\n  s.heap_len = 0;\n  s.heap_max = HEAP_SIZE;\n\n  for (n = 0; n < elems; n++) {\n    if (tree[n * 2]/*.Freq*/ !== 0) {\n      s.heap[++s.heap_len] = max_code = n;\n      s.depth[n] = 0;\n\n    } else {\n      tree[n * 2 + 1]/*.Len*/ = 0;\n    }\n  }\n\n  /* The pkzip format requires that at least one distance code exists,\n   * and that at least one bit should be sent even if there is only one\n   * possible code. So to avoid special checks later on we force at least\n   * two codes of non zero frequency.\n   */\n  while (s.heap_len < 2) {\n    node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);\n    tree[node * 2]/*.Freq*/ = 1;\n    s.depth[node] = 0;\n    s.opt_len--;\n\n    if (has_stree) {\n      s.static_len -= stree[node * 2 + 1]/*.Len*/;\n    }\n    /* node is 0 or 1 so it does not have extra bits */\n  }\n  desc.max_code = max_code;\n\n  /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,\n   * establish sub-heaps of increasing lengths:\n   */\n  for (n = (s.heap_len >> 1/*int /2*/); n >= 1; n--) { pqdownheap(s, tree, n); }\n\n  /* Construct the Huffman tree by repeatedly combining the least two\n   * frequent nodes.\n   */\n  node = elems;              /* next internal node of the tree */\n  do {\n    //pqremove(s, tree, n);  /* n = node of least frequency */\n    /*** pqremove ***/\n    n = s.heap[1/*SMALLEST*/];\n    s.heap[1/*SMALLEST*/] = s.heap[s.heap_len--];\n    pqdownheap(s, tree, 1/*SMALLEST*/);\n    /***/\n\n    m = s.heap[1/*SMALLEST*/]; /* m = node of next least frequency */\n\n    s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */\n    s.heap[--s.heap_max] = m;\n\n    /* Create a new node father of n and m */\n    tree[node * 2]/*.Freq*/ = tree[n * 2]/*.Freq*/ + tree[m * 2]/*.Freq*/;\n    s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;\n    tree[n * 2 + 1]/*.Dad*/ = tree[m * 2 + 1]/*.Dad*/ = node;\n\n    /* and insert the new node in the heap */\n    s.heap[1/*SMALLEST*/] = node++;\n    pqdownheap(s, tree, 1/*SMALLEST*/);\n\n  } while (s.heap_len >= 2);\n\n  s.heap[--s.heap_max] = s.heap[1/*SMALLEST*/];\n\n  /* At this point, the fields freq and dad are set. We can now\n   * generate the bit lengths.\n   */\n  gen_bitlen(s, desc);\n\n  /* The field len is now set, we can generate the bit codes */\n  gen_codes(tree, max_code, s.bl_count);\n}\n\n\n/* ===========================================================================\n * Scan a literal or distance tree to determine the frequencies of the codes\n * in the bit length tree.\n */\nfunction scan_tree(s, tree, max_code)\n//    deflate_state *s;\n//    ct_data *tree;   /* the tree to be scanned */\n//    int max_code;    /* and its largest code of non zero frequency */\n{\n  var n;                     /* iterates over all tree elements */\n  var prevlen = -1;          /* last emitted length */\n  var curlen;                /* length of current code */\n\n  var nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */\n\n  var count = 0;             /* repeat count of the current code */\n  var max_count = 7;         /* max repeat count */\n  var min_count = 4;         /* min repeat count */\n\n  if (nextlen === 0) {\n    max_count = 138;\n    min_count = 3;\n  }\n  tree[(max_code + 1) * 2 + 1]/*.Len*/ = 0xffff; /* guard */\n\n  for (n = 0; n <= max_code; n++) {\n    curlen = nextlen;\n    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;\n\n    if (++count < max_count && curlen === nextlen) {\n      continue;\n\n    } else if (count < min_count) {\n      s.bl_tree[curlen * 2]/*.Freq*/ += count;\n\n    } else if (curlen !== 0) {\n\n      if (curlen !== prevlen) { s.bl_tree[curlen * 2]/*.Freq*/++; }\n      s.bl_tree[REP_3_6 * 2]/*.Freq*/++;\n\n    } else if (count <= 10) {\n      s.bl_tree[REPZ_3_10 * 2]/*.Freq*/++;\n\n    } else {\n      s.bl_tree[REPZ_11_138 * 2]/*.Freq*/++;\n    }\n\n    count = 0;\n    prevlen = curlen;\n\n    if (nextlen === 0) {\n      max_count = 138;\n      min_count = 3;\n\n    } else if (curlen === nextlen) {\n      max_count = 6;\n      min_count = 3;\n\n    } else {\n      max_count = 7;\n      min_count = 4;\n    }\n  }\n}\n\n\n/* ===========================================================================\n * Send a literal or distance tree in compressed form, using the codes in\n * bl_tree.\n */\nfunction send_tree(s, tree, max_code)\n//    deflate_state *s;\n//    ct_data *tree; /* the tree to be scanned */\n//    int max_code;       /* and its largest code of non zero frequency */\n{\n  var n;                     /* iterates over all tree elements */\n  var prevlen = -1;          /* last emitted length */\n  var curlen;                /* length of current code */\n\n  var nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */\n\n  var count = 0;             /* repeat count of the current code */\n  var max_count = 7;         /* max repeat count */\n  var min_count = 4;         /* min repeat count */\n\n  /* tree[max_code+1].Len = -1; */  /* guard already set */\n  if (nextlen === 0) {\n    max_count = 138;\n    min_count = 3;\n  }\n\n  for (n = 0; n <= max_code; n++) {\n    curlen = nextlen;\n    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;\n\n    if (++count < max_count && curlen === nextlen) {\n      continue;\n\n    } else if (count < min_count) {\n      do { send_code(s, curlen, s.bl_tree); } while (--count !== 0);\n\n    } else if (curlen !== 0) {\n      if (curlen !== prevlen) {\n        send_code(s, curlen, s.bl_tree);\n        count--;\n      }\n      //Assert(count >= 3 && count <= 6, \" 3_6?\");\n      send_code(s, REP_3_6, s.bl_tree);\n      send_bits(s, count - 3, 2);\n\n    } else if (count <= 10) {\n      send_code(s, REPZ_3_10, s.bl_tree);\n      send_bits(s, count - 3, 3);\n\n    } else {\n      send_code(s, REPZ_11_138, s.bl_tree);\n      send_bits(s, count - 11, 7);\n    }\n\n    count = 0;\n    prevlen = curlen;\n    if (nextlen === 0) {\n      max_count = 138;\n      min_count = 3;\n\n    } else if (curlen === nextlen) {\n      max_count = 6;\n      min_count = 3;\n\n    } else {\n      max_count = 7;\n      min_count = 4;\n    }\n  }\n}\n\n\n/* ===========================================================================\n * Construct the Huffman tree for the bit lengths and return the index in\n * bl_order of the last bit length code to send.\n */\nfunction build_bl_tree(s) {\n  var max_blindex;  /* index of last bit length code of non zero freq */\n\n  /* Determine the bit length frequencies for literal and distance trees */\n  scan_tree(s, s.dyn_ltree, s.l_desc.max_code);\n  scan_tree(s, s.dyn_dtree, s.d_desc.max_code);\n\n  /* Build the bit length tree: */\n  build_tree(s, s.bl_desc);\n  /* opt_len now includes the length of the tree representations, except\n   * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.\n   */\n\n  /* Determine the number of bit length codes to send. The pkzip format\n   * requires that at least 4 bit length codes be sent. (appnote.txt says\n   * 3 but the actual value used is 4.)\n   */\n  for (max_blindex = BL_CODES - 1; max_blindex >= 3; max_blindex--) {\n    if (s.bl_tree[bl_order[max_blindex] * 2 + 1]/*.Len*/ !== 0) {\n      break;\n    }\n  }\n  /* Update opt_len to include the bit length tree and counts */\n  s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;\n  //Tracev((stderr, \"\\ndyn trees: dyn %ld, stat %ld\",\n  //        s->opt_len, s->static_len));\n\n  return max_blindex;\n}\n\n\n/* ===========================================================================\n * Send the header for a block using dynamic Huffman trees: the counts, the\n * lengths of the bit length codes, the literal tree and the distance tree.\n * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.\n */\nfunction send_all_trees(s, lcodes, dcodes, blcodes)\n//    deflate_state *s;\n//    int lcodes, dcodes, blcodes; /* number of codes for each tree */\n{\n  var rank;                    /* index in bl_order */\n\n  //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, \"not enough codes\");\n  //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,\n  //        \"too many codes\");\n  //Tracev((stderr, \"\\nbl counts: \"));\n  send_bits(s, lcodes - 257, 5); /* not +255 as stated in appnote.txt */\n  send_bits(s, dcodes - 1,   5);\n  send_bits(s, blcodes - 4,  4); /* not -3 as stated in appnote.txt */\n  for (rank = 0; rank < blcodes; rank++) {\n    //Tracev((stderr, \"\\nbl code %2d \", bl_order[rank]));\n    send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1]/*.Len*/, 3);\n  }\n  //Tracev((stderr, \"\\nbl tree: sent %ld\", s->bits_sent));\n\n  send_tree(s, s.dyn_ltree, lcodes - 1); /* literal tree */\n  //Tracev((stderr, \"\\nlit tree: sent %ld\", s->bits_sent));\n\n  send_tree(s, s.dyn_dtree, dcodes - 1); /* distance tree */\n  //Tracev((stderr, \"\\ndist tree: sent %ld\", s->bits_sent));\n}\n\n\n/* ===========================================================================\n * Check if the data type is TEXT or BINARY, using the following algorithm:\n * - TEXT if the two conditions below are satisfied:\n *    a) There are no non-portable control characters belonging to the\n *       \"black list\" (0..6, 14..25, 28..31).\n *    b) There is at least one printable character belonging to the\n *       \"white list\" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).\n * - BINARY otherwise.\n * - The following partially-portable control characters form a\n *   \"gray list\" that is ignored in this detection algorithm:\n *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).\n * IN assertion: the fields Freq of dyn_ltree are set.\n */\nfunction detect_data_type(s) {\n  /* black_mask is the bit mask of black-listed bytes\n   * set bits 0..6, 14..25, and 28..31\n   * 0xf3ffc07f = binary 11110011111111111100000001111111\n   */\n  var black_mask = 0xf3ffc07f;\n  var n;\n\n  /* Check for non-textual (\"black-listed\") bytes. */\n  for (n = 0; n <= 31; n++, black_mask >>>= 1) {\n    if ((black_mask & 1) && (s.dyn_ltree[n * 2]/*.Freq*/ !== 0)) {\n      return Z_BINARY;\n    }\n  }\n\n  /* Check for textual (\"white-listed\") bytes. */\n  if (s.dyn_ltree[9 * 2]/*.Freq*/ !== 0 || s.dyn_ltree[10 * 2]/*.Freq*/ !== 0 ||\n      s.dyn_ltree[13 * 2]/*.Freq*/ !== 0) {\n    return Z_TEXT;\n  }\n  for (n = 32; n < LITERALS; n++) {\n    if (s.dyn_ltree[n * 2]/*.Freq*/ !== 0) {\n      return Z_TEXT;\n    }\n  }\n\n  /* There are no \"black-listed\" or \"white-listed\" bytes:\n   * this stream either is empty or has tolerated (\"gray-listed\") bytes only.\n   */\n  return Z_BINARY;\n}\n\n\nvar static_init_done = false;\n\n/* ===========================================================================\n * Initialize the tree data structures for a new zlib stream.\n */\nfunction _tr_init(s)\n{\n\n  if (!static_init_done) {\n    tr_static_init();\n    static_init_done = true;\n  }\n\n  s.l_desc  = new TreeDesc(s.dyn_ltree, static_l_desc);\n  s.d_desc  = new TreeDesc(s.dyn_dtree, static_d_desc);\n  s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);\n\n  s.bi_buf = 0;\n  s.bi_valid = 0;\n\n  /* Initialize the first block of the first file: */\n  init_block(s);\n}\n\n\n/* ===========================================================================\n * Send a stored block\n */\nfunction _tr_stored_block(s, buf, stored_len, last)\n//DeflateState *s;\n//charf *buf;       /* input block */\n//ulg stored_len;   /* length of input block */\n//int last;         /* one if this is the last block for a file */\n{\n  send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);    /* send block type */\n  copy_block(s, buf, stored_len, true); /* with header */\n}\n\n\n/* ===========================================================================\n * Send one empty static block to give enough lookahead for inflate.\n * This takes 10 bits, of which 7 may remain in the bit buffer.\n */\nfunction _tr_align(s) {\n  send_bits(s, STATIC_TREES << 1, 3);\n  send_code(s, END_BLOCK, static_ltree);\n  bi_flush(s);\n}\n\n\n/* ===========================================================================\n * Determine the best encoding for the current block: dynamic trees, static\n * trees or store, and output the encoded block to the zip file.\n */\nfunction _tr_flush_block(s, buf, stored_len, last)\n//DeflateState *s;\n//charf *buf;       /* input block, or NULL if too old */\n//ulg stored_len;   /* length of input block */\n//int last;         /* one if this is the last block for a file */\n{\n  var opt_lenb, static_lenb;  /* opt_len and static_len in bytes */\n  var max_blindex = 0;        /* index of last bit length code of non zero freq */\n\n  /* Build the Huffman trees unless a stored block is forced */\n  if (s.level > 0) {\n\n    /* Check if the file is binary or text */\n    if (s.strm.data_type === Z_UNKNOWN) {\n      s.strm.data_type = detect_data_type(s);\n    }\n\n    /* Construct the literal and distance trees */\n    build_tree(s, s.l_desc);\n    // Tracev((stderr, \"\\nlit data: dyn %ld, stat %ld\", s->opt_len,\n    //        s->static_len));\n\n    build_tree(s, s.d_desc);\n    // Tracev((stderr, \"\\ndist data: dyn %ld, stat %ld\", s->opt_len,\n    //        s->static_len));\n    /* At this point, opt_len and static_len are the total bit lengths of\n     * the compressed block data, excluding the tree representations.\n     */\n\n    /* Build the bit length tree for the above two trees, and get the index\n     * in bl_order of the last bit length code to send.\n     */\n    max_blindex = build_bl_tree(s);\n\n    /* Determine the best encoding. Compute the block lengths in bytes. */\n    opt_lenb = (s.opt_len + 3 + 7) >>> 3;\n    static_lenb = (s.static_len + 3 + 7) >>> 3;\n\n    // Tracev((stderr, \"\\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u \",\n    //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,\n    //        s->last_lit));\n\n    if (static_lenb <= opt_lenb) { opt_lenb = static_lenb; }\n\n  } else {\n    // Assert(buf != (char*)0, \"lost buf\");\n    opt_lenb = static_lenb = stored_len + 5; /* force a stored block */\n  }\n\n  if ((stored_len + 4 <= opt_lenb) && (buf !== -1)) {\n    /* 4: two words for the lengths */\n\n    /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.\n     * Otherwise we can't have processed more than WSIZE input bytes since\n     * the last block flush, because compression would have been\n     * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to\n     * transform a block into a stored block.\n     */\n    _tr_stored_block(s, buf, stored_len, last);\n\n  } else if (s.strategy === Z_FIXED || static_lenb === opt_lenb) {\n\n    send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);\n    compress_block(s, static_ltree, static_dtree);\n\n  } else {\n    send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);\n    send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);\n    compress_block(s, s.dyn_ltree, s.dyn_dtree);\n  }\n  // Assert (s->compressed_len == s->bits_sent, \"bad compressed size\");\n  /* The above check is made mod 2^32, for files larger than 512 MB\n   * and uLong implemented on 32 bits.\n   */\n  init_block(s);\n\n  if (last) {\n    bi_windup(s);\n  }\n  // Tracev((stderr,\"\\ncomprlen %lu(%lu) \", s->compressed_len>>3,\n  //       s->compressed_len-7*last));\n}\n\n/* ===========================================================================\n * Save the match info and tally the frequency counts. Return true if\n * the current block must be flushed.\n */\nfunction _tr_tally(s, dist, lc)\n//    deflate_state *s;\n//    unsigned dist;  /* distance of matched string */\n//    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */\n{\n  //var out_length, in_length, dcode;\n\n  s.pending_buf[s.d_buf + s.last_lit * 2]     = (dist >>> 8) & 0xff;\n  s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 0xff;\n\n  s.pending_buf[s.l_buf + s.last_lit] = lc & 0xff;\n  s.last_lit++;\n\n  if (dist === 0) {\n    /* lc is the unmatched char */\n    s.dyn_ltree[lc * 2]/*.Freq*/++;\n  } else {\n    s.matches++;\n    /* Here, lc is the match length - MIN_MATCH */\n    dist--;             /* dist = match distance - 1 */\n    //Assert((ush)dist < (ush)MAX_DIST(s) &&\n    //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&\n    //       (ush)d_code(dist) < (ush)D_CODES,  \"_tr_tally: bad match\");\n\n    s.dyn_ltree[(_length_code[lc] + LITERALS + 1) * 2]/*.Freq*/++;\n    s.dyn_dtree[d_code(dist) * 2]/*.Freq*/++;\n  }\n\n// (!) This block is disabled in zlib defaults,\n// don't enable it for binary compatibility\n\n//#ifdef TRUNCATE_BLOCK\n//  /* Try to guess if it is profitable to stop the current block here */\n//  if ((s.last_lit & 0x1fff) === 0 && s.level > 2) {\n//    /* Compute an upper bound for the compressed length */\n//    out_length = s.last_lit*8;\n//    in_length = s.strstart - s.block_start;\n//\n//    for (dcode = 0; dcode < D_CODES; dcode++) {\n//      out_length += s.dyn_dtree[dcode*2]/*.Freq*/ * (5 + extra_dbits[dcode]);\n//    }\n//    out_length >>>= 3;\n//    //Tracev((stderr,\"\\nlast_lit %u, in %ld, out ~%ld(%ld%%) \",\n//    //       s->last_lit, in_length, out_length,\n//    //       100L - out_length*100L/in_length));\n//    if (s.matches < (s.last_lit>>1)/*int /2*/ && out_length < (in_length>>1)/*int /2*/) {\n//      return true;\n//    }\n//  }\n//#endif\n\n  return (s.last_lit === s.lit_bufsize - 1);\n  /* We avoid equality with lit_bufsize because of wraparound at 64K\n   * on 16 bit machines and because stored blocks are restricted to\n   * 64K-1 bytes.\n   */\n}\n\nexports._tr_init  = _tr_init;\nexports._tr_stored_block = _tr_stored_block;\nexports._tr_flush_block  = _tr_flush_block;\nexports._tr_tally = _tr_tally;\nexports._tr_align = _tr_align;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/pako/lib/zlib/trees.js\n");

/***/ }),

/***/ "./node_modules/pako/lib/zlib/zstream.js":
/*!***********************************************!*\
  !*** ./node_modules/pako/lib/zlib/zstream.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nfunction ZStream() {\n  /* next input byte */\n  this.input = null; // JS specific, because we have no pointers\n  this.next_in = 0;\n  /* number of bytes available at input */\n  this.avail_in = 0;\n  /* total number of input bytes read so far */\n  this.total_in = 0;\n  /* next output byte should be put there */\n  this.output = null; // JS specific, because we have no pointers\n  this.next_out = 0;\n  /* remaining free space at output */\n  this.avail_out = 0;\n  /* total number of bytes output so far */\n  this.total_out = 0;\n  /* last error message, NULL if no error */\n  this.msg = ''/*Z_NULL*/;\n  /* not visible by applications */\n  this.state = null;\n  /* best guess about the data type: binary or text */\n  this.data_type = 2/*Z_UNKNOWN*/;\n  /* adler32 value of the uncompressed data */\n  this.adler = 0;\n}\n\nmodule.exports = ZStream;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcGFrby9saWIvemxpYi96c3RyZWFtLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vVGVsZWdyYW1qcy8uL25vZGVfbW9kdWxlcy9wYWtvL2xpYi96bGliL3pzdHJlYW0uanM/ODkzNiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8vIChDKSAxOTk1LTIwMTMgSmVhbi1sb3VwIEdhaWxseSBhbmQgTWFyayBBZGxlclxuLy8gKEMpIDIwMTQtMjAxNyBWaXRhbHkgUHV6cmluIGFuZCBBbmRyZXkgVHVwaXRzaW5cbi8vXG4vLyBUaGlzIHNvZnR3YXJlIGlzIHByb3ZpZGVkICdhcy1pcycsIHdpdGhvdXQgYW55IGV4cHJlc3Mgb3IgaW1wbGllZFxuLy8gd2FycmFudHkuIEluIG5vIGV2ZW50IHdpbGwgdGhlIGF1dGhvcnMgYmUgaGVsZCBsaWFibGUgZm9yIGFueSBkYW1hZ2VzXG4vLyBhcmlzaW5nIGZyb20gdGhlIHVzZSBvZiB0aGlzIHNvZnR3YXJlLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgZ3JhbnRlZCB0byBhbnlvbmUgdG8gdXNlIHRoaXMgc29mdHdhcmUgZm9yIGFueSBwdXJwb3NlLFxuLy8gaW5jbHVkaW5nIGNvbW1lcmNpYWwgYXBwbGljYXRpb25zLCBhbmQgdG8gYWx0ZXIgaXQgYW5kIHJlZGlzdHJpYnV0ZSBpdFxuLy8gZnJlZWx5LCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgcmVzdHJpY3Rpb25zOlxuLy9cbi8vIDEuIFRoZSBvcmlnaW4gb2YgdGhpcyBzb2Z0d2FyZSBtdXN0IG5vdCBiZSBtaXNyZXByZXNlbnRlZDsgeW91IG11c3Qgbm90XG4vLyAgIGNsYWltIHRoYXQgeW91IHdyb3RlIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS4gSWYgeW91IHVzZSB0aGlzIHNvZnR3YXJlXG4vLyAgIGluIGEgcHJvZHVjdCwgYW4gYWNrbm93bGVkZ21lbnQgaW4gdGhlIHByb2R1Y3QgZG9jdW1lbnRhdGlvbiB3b3VsZCBiZVxuLy8gICBhcHByZWNpYXRlZCBidXQgaXMgbm90IHJlcXVpcmVkLlxuLy8gMi4gQWx0ZXJlZCBzb3VyY2UgdmVyc2lvbnMgbXVzdCBiZSBwbGFpbmx5IG1hcmtlZCBhcyBzdWNoLCBhbmQgbXVzdCBub3QgYmVcbi8vICAgbWlzcmVwcmVzZW50ZWQgYXMgYmVpbmcgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLlxuLy8gMy4gVGhpcyBub3RpY2UgbWF5IG5vdCBiZSByZW1vdmVkIG9yIGFsdGVyZWQgZnJvbSBhbnkgc291cmNlIGRpc3RyaWJ1dGlvbi5cblxuZnVuY3Rpb24gWlN0cmVhbSgpIHtcbiAgLyogbmV4dCBpbnB1dCBieXRlICovXG4gIHRoaXMuaW5wdXQgPSBudWxsOyAvLyBKUyBzcGVjaWZpYywgYmVjYXVzZSB3ZSBoYXZlIG5vIHBvaW50ZXJzXG4gIHRoaXMubmV4dF9pbiA9IDA7XG4gIC8qIG51bWJlciBvZiBieXRlcyBhdmFpbGFibGUgYXQgaW5wdXQgKi9cbiAgdGhpcy5hdmFpbF9pbiA9IDA7XG4gIC8qIHRvdGFsIG51bWJlciBvZiBpbnB1dCBieXRlcyByZWFkIHNvIGZhciAqL1xuICB0aGlzLnRvdGFsX2luID0gMDtcbiAgLyogbmV4dCBvdXRwdXQgYnl0ZSBzaG91bGQgYmUgcHV0IHRoZXJlICovXG4gIHRoaXMub3V0cHV0ID0gbnVsbDsgLy8gSlMgc3BlY2lmaWMsIGJlY2F1c2Ugd2UgaGF2ZSBubyBwb2ludGVyc1xuICB0aGlzLm5leHRfb3V0ID0gMDtcbiAgLyogcmVtYWluaW5nIGZyZWUgc3BhY2UgYXQgb3V0cHV0ICovXG4gIHRoaXMuYXZhaWxfb3V0ID0gMDtcbiAgLyogdG90YWwgbnVtYmVyIG9mIGJ5dGVzIG91dHB1dCBzbyBmYXIgKi9cbiAgdGhpcy50b3RhbF9vdXQgPSAwO1xuICAvKiBsYXN0IGVycm9yIG1lc3NhZ2UsIE5VTEwgaWYgbm8gZXJyb3IgKi9cbiAgdGhpcy5tc2cgPSAnJy8qWl9OVUxMKi87XG4gIC8qIG5vdCB2aXNpYmxlIGJ5IGFwcGxpY2F0aW9ucyAqL1xuICB0aGlzLnN0YXRlID0gbnVsbDtcbiAgLyogYmVzdCBndWVzcyBhYm91dCB0aGUgZGF0YSB0eXBlOiBiaW5hcnkgb3IgdGV4dCAqL1xuICB0aGlzLmRhdGFfdHlwZSA9IDIvKlpfVU5LTk9XTiovO1xuICAvKiBhZGxlcjMyIHZhbHVlIG9mIHRoZSB1bmNvbXByZXNzZWQgZGF0YSAqL1xuICB0aGlzLmFkbGVyID0gMDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBaU3RyZWFtO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/pako/lib/zlib/zstream.js\n");

/***/ }),

/***/ "./node_modules/webpack/buildin/module.js":
/*!***********************************!*\
  !*** (webpack)/buildin/module.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvd2VicGFjay9idWlsZGluL21vZHVsZS5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL1RlbGVncmFtanMvKHdlYnBhY2spL2J1aWxkaW4vbW9kdWxlLmpzP2NlZDIiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihtb2R1bGUpIHtcblx0aWYgKCFtb2R1bGUud2VicGFja1BvbHlmaWxsKSB7XG5cdFx0bW9kdWxlLmRlcHJlY2F0ZSA9IGZ1bmN0aW9uKCkge307XG5cdFx0bW9kdWxlLnBhdGhzID0gW107XG5cdFx0Ly8gbW9kdWxlLnBhcmVudCA9IHVuZGVmaW5lZCBieSBkZWZhdWx0XG5cdFx0aWYgKCFtb2R1bGUuY2hpbGRyZW4pIG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwibG9hZGVkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmw7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJpZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdG1vZHVsZS53ZWJwYWNrUG9seWZpbGwgPSAxO1xuXHR9XG5cdHJldHVybiBtb2R1bGU7XG59O1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/webpack/buildin/module.js\n");

/***/ }),

/***/ "./src/api/2fa.js":
/*!************************!*\
  !*** ./src/api/2fa.js ***!
  \************************/
/*! exports provided: makePasswordHash, computeCheck */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"makePasswordHash\", function() { return makePasswordHash; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"computeCheck\", function() { return computeCheck; });\n/* harmony import */ var _utils_sha256__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../utils/sha256 */ \"./src/utils/sha256.js\");\n/* harmony import */ var _utils_numbers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./../utils/numbers */ \"./src/utils/numbers.js\");\n\n\n\n/**\n * (°ل͜°)\n *\n * Im almost done with implementing of Layer 105 2FA,\n * but to stay in time of contest i supposed to use layer 74 instead\n * ---------------------------------------------\n */\nfunction makePasswordHash(salt, password) {\n  var passwordUTF8 = unescape(encodeURIComponent(password))\n\n  var buffer = new ArrayBuffer(passwordUTF8.length)\n  var byteView = new Uint8Array(buffer)\n  for (var i = 0, len = passwordUTF8.length; i < len; i++) {\n    byteView[i] = passwordUTF8.charCodeAt(i)\n  }\n\n  buffer = _utils_numbers__WEBPACK_IMPORTED_MODULE_1__[\"bufferConcat\"](_utils_numbers__WEBPACK_IMPORTED_MODULE_1__[\"bufferConcat\"](salt, byteView), salt)\n\n  return crypto.subtle.digest({name: 'SHA-256'}, buffer)\n}\n\n/**\n * Layer 105 2FA\n * ---------------------------------------------\n */\nfunction computeCheck(r, password){\n  let algo = r.current_algo\n\n  let p_bytes = algo.p\n  let p = btoi(algo.p)\n\n  let g_bytes = itob(algo.g)\n  let g = _BigInt(algo.g)\n\n  let B_bytes = r.srp_B\n  let B = btoi(B_bytes)\n\n  let srp_id = r.srp_id\n\n  return computeHash(algo, password)\n    .then((x_bytes) => {\n      let x = btoi(x_bytes)\n\n      let g_x = g.modPow(x, p)\n\n      let k_bytes = Object(_utils_sha256__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(_utils_numbers__WEBPACK_IMPORTED_MODULE_1__[\"concat\"](p_bytes, g_bytes))\n      let k = btoi(k_bytes)\n\n      let kg_x = k.multiply(g_x).mod(p)\n\n      let A_bytes, u, a;\n\n      while (true) {\n        let a_bytes = generateRandomBytes(256)\n        a = btoi(a_bytes)\n\n        let A = g.modPow(a, p)\n        A_bytes = itob(A)\n\n        u = btoi(Object(_utils_sha256__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(_utils_numbers__WEBPACK_IMPORTED_MODULE_1__[\"concat\"](A_bytes, B_bytes)));\n\n        console.log('random: ', a_bytes, a, u)\n\n        if (u.greater(_BigInt.zero)){\n          break;\n        }\n      }\n\n      let g_b = (B.minus(kg_x)).mod(p)\n\n      let ux = u.multiply(x)\n      let a_ux = a.plus(ux)\n      let S = g_b.modPow(a_ux, p)\n      let S_bytes = itob(S)\n\n      let K_bytes = sha256u8(S_bytes)\n\n      let M1_bytes = sha256u8(_utils_numbers__WEBPACK_IMPORTED_MODULE_1__[\"concat\"](\n        xor(sha256u8(p_bytes), sha256u8(g_bytes)),\n        sha256u8(algo.salt1),\n        sha256u8(algo.salt2),\n        A_bytes,\n        B_bytes,\n        K_bytes\n      ))\n\n      console.warn('src_id %o A %o M1 %o', srp_id, A_bytes, M1_bytes)\n\n      return {\n        srp_id,\n        A: A_bytes.buffer,\n        M1: M1_bytes.buffer,\n      }\n    });\n\n}\n\nfunction xor(a, b) {\n  const length = Math.min(a.length, b.length)\n\n  for (let i = 0; i < length; i++) {\n    a[i] = a[i] ^ b[i]\n  }\n\n  return a\n}\n\nfunction generateKey(password, salt, iterations) {\n  // salt should be Uint8Array or ArrayBuffer\n\n  var saltBuffer = salt//crypto.getRandomValues(new Uint8Array(8));\n  var encoder = new TextEncoder('utf-8');\n  var passphraseKey = encoder.encode(\"password\");\n\n  // You should firstly import your passphrase Uint8array into a CryptoKey\n  return window.crypto.subtle.importKey(\n    'raw',\n    passphraseKey,\n    {name: 'PBKDF2'},\n    false,\n    ['deriveBits', 'deriveKey']\n  ).then(function(key) {\n\n    return window.crypto.subtle.deriveKey(\n      { \"name\": 'PBKDF2',\n        \"salt\": saltBuffer,\n        // don't get too ambitious, or at least remember\n        // that low-power phones will access your app\n        \"iterations\": iterations,\n        \"hash\": 'SHA-256'\n      },\n      key,\n\n      // Note: for this demo we don't actually need a cipher suite,\n      // but the api requires that it must be specified.\n      // For AES the length required to be 128 or 256 bits (not bytes)\n      { \"name\": 'AES-CBC', \"length\": 256 },\n\n      // Whether or not the key is extractable (less secure) or not (more secure)\n      // when false, the key can only be passed as a web crypto object, not inspected\n      true,\n\n      // this web crypto object will only be allowed for these functions\n      [ \"encrypt\", \"decrypt\" ]\n    )\n  }).then(function (webKey) {\n\n    return crypto.subtle.exportKey(\"raw\", webKey);\n\n  }).then(function (buffer) {\n\n    console.log('key', _utils_numbers__WEBPACK_IMPORTED_MODULE_1__[\"bytesToHex\"](buffer), buffer);\n\n    return buffer;\n  });\n}\n\n/**\n *\n * @param algo {types.PasswordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow}\n * @param password\n * @returns {Promise<Buffer|*>}\n */\nfunction computeHash(algo, password) {\n  const hash1 = Object(_utils_sha256__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(_utils_numbers__WEBPACK_IMPORTED_MODULE_1__[\"concat\"](algo.salt1, _utils_numbers__WEBPACK_IMPORTED_MODULE_1__[\"bytesToArrayBuffer\"](password, 'utf-8'), algo.salt1))\n  const hash2 = Object(_utils_sha256__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(_utils_numbers__WEBPACK_IMPORTED_MODULE_1__[\"concat\"](algo.salt2, _utils_numbers__WEBPACK_IMPORTED_MODULE_1__[\"bytesToArrayBuffer\"](hash1), algo.salt2))\n  return generateKey(_utils_numbers__WEBPACK_IMPORTED_MODULE_1__[\"bytesToArrayBuffer\"](hash2), algo.salt1, 100000).then(hash3 => {\n    return _utils_numbers__WEBPACK_IMPORTED_MODULE_1__[\"bytesToArrayBuffer\"](Object(_utils_sha256__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(_utils_numbers__WEBPACK_IMPORTED_MODULE_1__[\"concat\"](algo.salt2, hash3, algo.salt2)))\n  })\n}\n\nfunction btoi(arr8){\n  return _BigInt.fromArray(Array.from(arr8), 8)\n}\n\nfunction itob(int){\n  return new Uint8Array(_BigInt(int).toArray(8).value)\n}\n\nfunction sha256u8(p){\n  return new Uint8Array(Object(_utils_sha256__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(p));\n}\n\n/**\n * Generates a random bytes array\n * @param count\n * @returns {Buffer}\n */\nfunction generateRandomBytes(count) {\n  return crypto.getRandomValues(new Uint8Array(count))\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/api/2fa.js\n");

/***/ }),

/***/ "./src/api/index.js":
/*!**************************!*\
  !*** ./src/api/index.js ***!
  \**************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Api; });\n/**\n * Working with Telegram RPC API\n */\nclass Api {\n  constructor(app){\n    this.app = app;\n    this.mtp = app.mtp;\n\n    this.updates = {\n      pts: 0,\n      data: 0,\n      seq: 0\n    }\n\n    this.users = {}\n    this.channels = {}\n    this.dialogs = [];\n    this.files = {};\n  }\n\n  getMe(){\n    let auth = this.app.state.get('auth');\n\n    return auth && auth.user ? Promise.resolve(auth.user) : Promise.resolve(null)\n  }\n\n  listenUpdates(){\n    const date = this.updates.date || Math.floor((new Date()).getTime() / 1000) - 9000\n\n    this.mtp.call('updates.getDifference', {\n      pts: date,\n      date,\n      qts: -1\n    }).then((updates) => {\n      console.log('response', updates);\n    }).catch((e => {\n      console.error('updates error', e);\n    }))\n\n  }\n\n  getChats(){\n    // let s = new TlApiSerializer();\n    // s.storeSomething('inputPeerEmpty');\n\n    return this.mtp.call('messages.getDialogs', {\n      offset_date: 0,\n      offset_id: 0,\n      limit: 15,\n      hash: 0,\n      offset_peer: {_: 'inputPeerEmpty'},\n      flags: 0\n    })\n      .then(r => {\n        console.log('dialogs: ', r);\n        let { chats, dialogs, messages, users } = r;\n\n        this.saveUsers(users);\n        this.saveChannels(chats);\n\n        this.loadUsers(users)\n\n        let me = this.app.state.get('auth').user\n\n        dialogs = this.fillPeerInfo(dialogs);\n\n        dialogs.forEach(d => {\n          d.topMessage = messages.find(m => m.id === d.top_message);\n          d.topMessage.isOutgoing = d.topMessage.from_id === me.id\n          d.peerInfo.isVerified = d.peerInfo.pFlags && d.peerInfo.pFlags.verified === true\n          d.id = d.peerInfo._[0].toLowerCase() + d.peerInfo.id;\n\n          if (d.peerInfo && d.peerInfo.photo){\n            this.loadPhoto(d.peerInfo.photo, d.peerInfo)\n          }\n\n          if (d.peerInfo._ === 'user'){\n            this.getUserPhotos(d.peerInfo)\n\n            if (d.peerInfo.id === me.id){\n              d.peerInfo.title = 'Saved messages'\n            }\n          }\n\n        })\n\n        this.dialogs = dialogs;\n\n        return dialogs;\n\n        // return this.fillUsers(dialogs, dialogs.map(d => d.peer.user_id))\n        //   .then(dialogs => {\n        //     return this.fillUsers(messages, messages.map(m => m.from_id))\n        //       .then(messages => {\n        //         dialogs.forEach(d => {\n        //           d.topMessage = messages.find(m => m.id === d.top_message);\n        //           d.topMessage.isOutgoing = d.topMessage.from_id === me.id\n        //         })\n        //\n        //         return dialogs;\n        //       })\n        //   })\n      })\n      .catch(e => {\n        // console.error('dialogs: ', e);\n      });\n  }\n\n  fillPeerInfo(dialogs){\n    dialogs.forEach(d => {\n      switch (d.peer._) {\n        case 'peerUser':\n          d.peerInfo = this.users[d.peer.user_id];\n          d.peerInfo.isOnline = this.users[d.peer.user_id].status && this.users[d.peer.user_id].status._ === 'userStatusOnline'\n          break;\n        case 'peerChannel':\n          d.peerInfo = this.channels[d.peer.channel_id];\n          break;\n        case 'peerChat':\n          d.peerInfo = this.channels[d.peer.chat_id];\n          break;\n        default:\n          d.peerInfo = {}\n          break;\n      }\n\n      d.peerInfo.peerType = d.peer._;\n    })\n\n    return dialogs;\n  }\n\n  saveUsers(users){\n    users.forEach(u => {\n      this.users[u.id] = u;\n    })\n  }\n\n  saveChannels(channels){\n    channels.forEach(c => {\n      this.channels[c.id] = c;\n    })\n  }\n\n  fillUsers(entities, uids, field = 'user'){\n    let queries = [];\n\n    uids.forEach(id => {\n      queries.push(this.getUser(id));\n    })\n\n    return Promise.all(queries)\n      .then(users => {\n        users.forEach((u, i)=>{\n          entities[i][field] = u;\n        })\n\n        return entities;\n      })\n  }\n\n  getUser(id){\n    if (this.users[id]){\n      return Promise.resolve(this.users[id]);\n    }\n  }\n\n  loadUsers(users){\n    return this.mtp.call('users.getUsers', {\n        id: users.map( u => {\n          return {\n            _: 'inputUser',\n            user_id: u.id,\n            access_hash: u.access_hash\n          }\n        })\n      })\n      .then(r => {\n        console.log('loadUsers', r);\n      })\n      .catch(e => {\n        console.error('loadUsers e', e);\n      })\n  }\n\n  getUserPhotos(user){\n    let peer = {\n      _: 'inputUser',\n      user_id: user.id,\n      access_hash: user.access_hash\n    };\n    return this.mtp.call('photos.getUserPhotos', {\n      user_id: peer\n    })\n      .then(r => {\n        if (r.photos && r.photos.length){\n          let first = r.photos.shift()\n          let size = first.sizes.shift();\n\n          this.loadFile(size.location, first.dc_id, user)\n        }\n      })\n      .catch(e => {\n        // console.error('getUserPhotos e', e);\n      })\n  }\n\n  loadPhoto(p, peerInfo, id){\n    if (p._ === 'chatPhotoEmpty'){\n      return;\n    }\n\n    if (p._ === 'chatPhoto' ){\n      const {dc_id, photo_small} = p;\n\n      if (dc_id !== this.mtp.dc){\n        console.log('🛰 wrong dc. need %o but connected %o', dc_id, this.mtp.dc)\n      }\n\n      this.loadFile(photo_small, dc_id, peerInfo)\n      return;\n    }\n\n    if (p._ === 'photo' ){\n      this.mtp.call('upload.getFile', {\n        location: {\n          _: 'inputPhotoFileLocation',\n          id: p.id,\n          access_hash: p.access_hash,\n          file_reference: p.file_reference,\n          thumb_size: 'x'\n        },\n        offset: 0,\n        limit: 1024 * 1024,\n        big: false\n      })\n        .then(r => {\n          // console.log('🎆 photo was downloaded', r);\n\n          if (r._ === 'upload.file'){\n            id = id || p.id;\n\n            this.files[id] = new Blob([r.bytes]);\n            this.app.layout.showAvatar(id, this.files[id]);\n          }\n        })\n        .catch(e => {\n          // console.error('🎆 upload.getFile [chat photo] e', e);\n        })\n    }\n\n    if (p._ === 'userProfilePhoto' ){\n      this.mtp.call('upload.getFile', {\n        location: {\n          _: 'inputPhotoFileLocation',\n          id: p.id,\n          access_hash: peerInfo.access_hash,\n          file_reference: p.file_reference,\n          thumb_size: 'x'\n        },\n        offset: 0,\n        limit: 1024 * 1024,\n        big: false\n      })\n        .then(r => {\n          // console.log('🎆 photo was downloaded', r);\n\n          if (r._ === 'upload.file'){\n            id = id || p.id;\n\n            this.files[id] = new Blob([r.bytes]);\n            this.app.layout.showAvatar(id, this.files[id]);\n          }\n        })\n        .catch(e => {\n          // console.error('🎆 upload.getFile [chat photo] e', e);\n        })\n    }\n\n  }\n\n  composePeer(peerInfo){\n    let peer = {\n      _: 'input' + peerInfo.peerType[0].toUpperCase() + peerInfo.peerType.slice(1),\n      access_hash: peerInfo.access_hash\n    }\n\n    switch (peerInfo._){\n      case 'user':\n        peer.user_id = peerInfo.id\n        break;\n      case 'channel':\n        peer.channel_id = peerInfo.id\n        break;\n    }\n\n    return peer;\n  }\n\n  loadFile(f, dc, peer, id){\n    peer = this.composePeer(peer);\n    if (f._ === 'fileLocationToBeDeprecated'){\n      this.mtp.call('upload.getFile', {\n        location: {\n          _: 'inputPeerPhotoFileLocation',\n          peer,\n          local_id: f.local_id,\n          volume_id: f.volume_id,\n          flags: 0,\n        },\n        offset: 0,\n        limit: 1024 * 1024,\n        big: false\n      })\n        .then(r => {\n          // console.log('🎆 file was downloaded', r);\n\n          if (r._ === 'upload.file'){\n            id = id || peer.channel_id || peer.user_id;\n\n            this.files[id] = new Blob([r.bytes]);\n            this.app.layout.showAvatar(id, this.files[id]);\n          }\n        })\n        .catch(e => {\n          // console.error('🎆 upload.getFile e', e);\n        })\n    }\n  }\n\n  getChat(id){\n    return this.dialogs.find(d => id === d.id)\n  }\n\n  getFileLoaded(id){\n    return this.files[id];\n  }\n\n  composeMessageId(chat, message){\n    return  `m-${chat.id}-${message.id}`;\n  }\n\n  loadMessages(chat){\n    const peer = this.composePeer(chat.peerInfo);\n    const me = this.app.state.get('auth').user;\n\n    return this.mtp.call('messages.getHistory', {\n        peer,\n        offset_id: 0,\n        offset_date: 0,\n        add_offset: 0,\n        limit: 10,\n        max_id: 0,\n        min_id: 0,\n        hash: 0\n      })\n      .then(r => {\n        // console.log('🎟 messages loaded', r);\n        this.saveUsers(r.users);\n        return this.fillUsers(r.messages, r.messages.map(m => m.from_id), 'author')\n      })\n      .then(messages => {\n        messages.forEach(m => {\n          if (m.from_id){\n            m.author = this.users[m.from_id]\n\n            if (m.author && m.author.photo){\n              // this.getUserPhotos(m.author)\n              // this.loadPhoto(m.author.photo, m.author)\n            }\n          } else if (m.to_id && m.to_id._ === 'peerChannel') {\n            m.author = this.channels[m.to_id.channel_id]\n          }\n\n          if (m.media && m.media._ === 'messageMediaDocument'){\n            let file = m.media.document.attributes.find(a => a._ === 'documentAttributeFilename');\n            let audio = m.media.document.attributes.find(a => a._ === 'documentAttributeAudio');\n\n            if (file){\n              m.file = file;\n            }\n\n            if (audio){\n              m.audio = audio;\n            }\n          }\n\n        })\n\n        return messages;\n      })\n      .then(messages => {\n        // console.log('🎟 messages filled', messages);\n\n        messages.reverse();\n\n        messages.forEach(m => {\n          m.isMy = m.author ? m.author.id === me.id : false\n\n          if (m.reply_to_msg_id){\n            m.reply = messages.find(ms => ms.id === m.reply_to_msg_id);\n          }\n\n          if (m.media && m.media._ === 'messageMediaPhoto'){\n            const photo = m.media.photo\n            const size = photo.sizes.filter(s => s._ === 'photoSize').pop();\n\n            this.loadPhoto(\n              photo,\n              m.author,\n              this.composeMessageId(chat, m)\n            )\n          }\n        })\n\n        return messages;\n      })\n      .catch(e => {\n        console.log('🎟 messages error', e);\n      })\n  }\n\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvYXBpL2luZGV4LmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vVGVsZWdyYW1qcy8uL3NyYy9hcGkvaW5kZXguanM/MzY1YyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFdvcmtpbmcgd2l0aCBUZWxlZ3JhbSBSUEMgQVBJXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFwaSB7XG4gIGNvbnN0cnVjdG9yKGFwcCl7XG4gICAgdGhpcy5hcHAgPSBhcHA7XG4gICAgdGhpcy5tdHAgPSBhcHAubXRwO1xuXG4gICAgdGhpcy51cGRhdGVzID0ge1xuICAgICAgcHRzOiAwLFxuICAgICAgZGF0YTogMCxcbiAgICAgIHNlcTogMFxuICAgIH1cblxuICAgIHRoaXMudXNlcnMgPSB7fVxuICAgIHRoaXMuY2hhbm5lbHMgPSB7fVxuICAgIHRoaXMuZGlhbG9ncyA9IFtdO1xuICAgIHRoaXMuZmlsZXMgPSB7fTtcbiAgfVxuXG4gIGdldE1lKCl7XG4gICAgbGV0IGF1dGggPSB0aGlzLmFwcC5zdGF0ZS5nZXQoJ2F1dGgnKTtcblxuICAgIHJldHVybiBhdXRoICYmIGF1dGgudXNlciA/IFByb21pc2UucmVzb2x2ZShhdXRoLnVzZXIpIDogUHJvbWlzZS5yZXNvbHZlKG51bGwpXG4gIH1cblxuICBsaXN0ZW5VcGRhdGVzKCl7XG4gICAgY29uc3QgZGF0ZSA9IHRoaXMudXBkYXRlcy5kYXRlIHx8IE1hdGguZmxvb3IoKG5ldyBEYXRlKCkpLmdldFRpbWUoKSAvIDEwMDApIC0gOTAwMFxuXG4gICAgdGhpcy5tdHAuY2FsbCgndXBkYXRlcy5nZXREaWZmZXJlbmNlJywge1xuICAgICAgcHRzOiBkYXRlLFxuICAgICAgZGF0ZSxcbiAgICAgIHF0czogLTFcbiAgICB9KS50aGVuKCh1cGRhdGVzKSA9PiB7XG4gICAgICBjb25zb2xlLmxvZygncmVzcG9uc2UnLCB1cGRhdGVzKTtcbiAgICB9KS5jYXRjaCgoZSA9PiB7XG4gICAgICBjb25zb2xlLmVycm9yKCd1cGRhdGVzIGVycm9yJywgZSk7XG4gICAgfSkpXG5cbiAgfVxuXG4gIGdldENoYXRzKCl7XG4gICAgLy8gbGV0IHMgPSBuZXcgVGxBcGlTZXJpYWxpemVyKCk7XG4gICAgLy8gcy5zdG9yZVNvbWV0aGluZygnaW5wdXRQZWVyRW1wdHknKTtcblxuICAgIHJldHVybiB0aGlzLm10cC5jYWxsKCdtZXNzYWdlcy5nZXREaWFsb2dzJywge1xuICAgICAgb2Zmc2V0X2RhdGU6IDAsXG4gICAgICBvZmZzZXRfaWQ6IDAsXG4gICAgICBsaW1pdDogMTUsXG4gICAgICBoYXNoOiAwLFxuICAgICAgb2Zmc2V0X3BlZXI6IHtfOiAnaW5wdXRQZWVyRW1wdHknfSxcbiAgICAgIGZsYWdzOiAwXG4gICAgfSlcbiAgICAgIC50aGVuKHIgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZygnZGlhbG9nczogJywgcik7XG4gICAgICAgIGxldCB7IGNoYXRzLCBkaWFsb2dzLCBtZXNzYWdlcywgdXNlcnMgfSA9IHI7XG5cbiAgICAgICAgdGhpcy5zYXZlVXNlcnModXNlcnMpO1xuICAgICAgICB0aGlzLnNhdmVDaGFubmVscyhjaGF0cyk7XG5cbiAgICAgICAgdGhpcy5sb2FkVXNlcnModXNlcnMpXG5cbiAgICAgICAgbGV0IG1lID0gdGhpcy5hcHAuc3RhdGUuZ2V0KCdhdXRoJykudXNlclxuXG4gICAgICAgIGRpYWxvZ3MgPSB0aGlzLmZpbGxQZWVySW5mbyhkaWFsb2dzKTtcblxuICAgICAgICBkaWFsb2dzLmZvckVhY2goZCA9PiB7XG4gICAgICAgICAgZC50b3BNZXNzYWdlID0gbWVzc2FnZXMuZmluZChtID0+IG0uaWQgPT09IGQudG9wX21lc3NhZ2UpO1xuICAgICAgICAgIGQudG9wTWVzc2FnZS5pc091dGdvaW5nID0gZC50b3BNZXNzYWdlLmZyb21faWQgPT09IG1lLmlkXG4gICAgICAgICAgZC5wZWVySW5mby5pc1ZlcmlmaWVkID0gZC5wZWVySW5mby5wRmxhZ3MgJiYgZC5wZWVySW5mby5wRmxhZ3MudmVyaWZpZWQgPT09IHRydWVcbiAgICAgICAgICBkLmlkID0gZC5wZWVySW5mby5fWzBdLnRvTG93ZXJDYXNlKCkgKyBkLnBlZXJJbmZvLmlkO1xuXG4gICAgICAgICAgaWYgKGQucGVlckluZm8gJiYgZC5wZWVySW5mby5waG90byl7XG4gICAgICAgICAgICB0aGlzLmxvYWRQaG90byhkLnBlZXJJbmZvLnBob3RvLCBkLnBlZXJJbmZvKVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChkLnBlZXJJbmZvLl8gPT09ICd1c2VyJyl7XG4gICAgICAgICAgICB0aGlzLmdldFVzZXJQaG90b3MoZC5wZWVySW5mbylcblxuICAgICAgICAgICAgaWYgKGQucGVlckluZm8uaWQgPT09IG1lLmlkKXtcbiAgICAgICAgICAgICAgZC5wZWVySW5mby50aXRsZSA9ICdTYXZlZCBtZXNzYWdlcydcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgfSlcblxuICAgICAgICB0aGlzLmRpYWxvZ3MgPSBkaWFsb2dzO1xuXG4gICAgICAgIHJldHVybiBkaWFsb2dzO1xuXG4gICAgICAgIC8vIHJldHVybiB0aGlzLmZpbGxVc2VycyhkaWFsb2dzLCBkaWFsb2dzLm1hcChkID0+IGQucGVlci51c2VyX2lkKSlcbiAgICAgICAgLy8gICAudGhlbihkaWFsb2dzID0+IHtcbiAgICAgICAgLy8gICAgIHJldHVybiB0aGlzLmZpbGxVc2VycyhtZXNzYWdlcywgbWVzc2FnZXMubWFwKG0gPT4gbS5mcm9tX2lkKSlcbiAgICAgICAgLy8gICAgICAgLnRoZW4obWVzc2FnZXMgPT4ge1xuICAgICAgICAvLyAgICAgICAgIGRpYWxvZ3MuZm9yRWFjaChkID0+IHtcbiAgICAgICAgLy8gICAgICAgICAgIGQudG9wTWVzc2FnZSA9IG1lc3NhZ2VzLmZpbmQobSA9PiBtLmlkID09PSBkLnRvcF9tZXNzYWdlKTtcbiAgICAgICAgLy8gICAgICAgICAgIGQudG9wTWVzc2FnZS5pc091dGdvaW5nID0gZC50b3BNZXNzYWdlLmZyb21faWQgPT09IG1lLmlkXG4gICAgICAgIC8vICAgICAgICAgfSlcbiAgICAgICAgLy9cbiAgICAgICAgLy8gICAgICAgICByZXR1cm4gZGlhbG9ncztcbiAgICAgICAgLy8gICAgICAgfSlcbiAgICAgICAgLy8gICB9KVxuICAgICAgfSlcbiAgICAgIC5jYXRjaChlID0+IHtcbiAgICAgICAgLy8gY29uc29sZS5lcnJvcignZGlhbG9nczogJywgZSk7XG4gICAgICB9KTtcbiAgfVxuXG4gIGZpbGxQZWVySW5mbyhkaWFsb2dzKXtcbiAgICBkaWFsb2dzLmZvckVhY2goZCA9PiB7XG4gICAgICBzd2l0Y2ggKGQucGVlci5fKSB7XG4gICAgICAgIGNhc2UgJ3BlZXJVc2VyJzpcbiAgICAgICAgICBkLnBlZXJJbmZvID0gdGhpcy51c2Vyc1tkLnBlZXIudXNlcl9pZF07XG4gICAgICAgICAgZC5wZWVySW5mby5pc09ubGluZSA9IHRoaXMudXNlcnNbZC5wZWVyLnVzZXJfaWRdLnN0YXR1cyAmJiB0aGlzLnVzZXJzW2QucGVlci51c2VyX2lkXS5zdGF0dXMuXyA9PT0gJ3VzZXJTdGF0dXNPbmxpbmUnXG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3BlZXJDaGFubmVsJzpcbiAgICAgICAgICBkLnBlZXJJbmZvID0gdGhpcy5jaGFubmVsc1tkLnBlZXIuY2hhbm5lbF9pZF07XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3BlZXJDaGF0JzpcbiAgICAgICAgICBkLnBlZXJJbmZvID0gdGhpcy5jaGFubmVsc1tkLnBlZXIuY2hhdF9pZF07XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgZC5wZWVySW5mbyA9IHt9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGQucGVlckluZm8ucGVlclR5cGUgPSBkLnBlZXIuXztcbiAgICB9KVxuXG4gICAgcmV0dXJuIGRpYWxvZ3M7XG4gIH1cblxuICBzYXZlVXNlcnModXNlcnMpe1xuICAgIHVzZXJzLmZvckVhY2godSA9PiB7XG4gICAgICB0aGlzLnVzZXJzW3UuaWRdID0gdTtcbiAgICB9KVxuICB9XG5cbiAgc2F2ZUNoYW5uZWxzKGNoYW5uZWxzKXtcbiAgICBjaGFubmVscy5mb3JFYWNoKGMgPT4ge1xuICAgICAgdGhpcy5jaGFubmVsc1tjLmlkXSA9IGM7XG4gICAgfSlcbiAgfVxuXG4gIGZpbGxVc2VycyhlbnRpdGllcywgdWlkcywgZmllbGQgPSAndXNlcicpe1xuICAgIGxldCBxdWVyaWVzID0gW107XG5cbiAgICB1aWRzLmZvckVhY2goaWQgPT4ge1xuICAgICAgcXVlcmllcy5wdXNoKHRoaXMuZ2V0VXNlcihpZCkpO1xuICAgIH0pXG5cbiAgICByZXR1cm4gUHJvbWlzZS5hbGwocXVlcmllcylcbiAgICAgIC50aGVuKHVzZXJzID0+IHtcbiAgICAgICAgdXNlcnMuZm9yRWFjaCgodSwgaSk9PntcbiAgICAgICAgICBlbnRpdGllc1tpXVtmaWVsZF0gPSB1O1xuICAgICAgICB9KVxuXG4gICAgICAgIHJldHVybiBlbnRpdGllcztcbiAgICAgIH0pXG4gIH1cblxuICBnZXRVc2VyKGlkKXtcbiAgICBpZiAodGhpcy51c2Vyc1tpZF0pe1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzLnVzZXJzW2lkXSk7XG4gICAgfVxuICB9XG5cbiAgbG9hZFVzZXJzKHVzZXJzKXtcbiAgICByZXR1cm4gdGhpcy5tdHAuY2FsbCgndXNlcnMuZ2V0VXNlcnMnLCB7XG4gICAgICAgIGlkOiB1c2Vycy5tYXAoIHUgPT4ge1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBfOiAnaW5wdXRVc2VyJyxcbiAgICAgICAgICAgIHVzZXJfaWQ6IHUuaWQsXG4gICAgICAgICAgICBhY2Nlc3NfaGFzaDogdS5hY2Nlc3NfaGFzaFxuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgIH0pXG4gICAgICAudGhlbihyID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coJ2xvYWRVc2VycycsIHIpO1xuICAgICAgfSlcbiAgICAgIC5jYXRjaChlID0+IHtcbiAgICAgICAgY29uc29sZS5lcnJvcignbG9hZFVzZXJzIGUnLCBlKTtcbiAgICAgIH0pXG4gIH1cblxuICBnZXRVc2VyUGhvdG9zKHVzZXIpe1xuICAgIGxldCBwZWVyID0ge1xuICAgICAgXzogJ2lucHV0VXNlcicsXG4gICAgICB1c2VyX2lkOiB1c2VyLmlkLFxuICAgICAgYWNjZXNzX2hhc2g6IHVzZXIuYWNjZXNzX2hhc2hcbiAgICB9O1xuICAgIHJldHVybiB0aGlzLm10cC5jYWxsKCdwaG90b3MuZ2V0VXNlclBob3RvcycsIHtcbiAgICAgIHVzZXJfaWQ6IHBlZXJcbiAgICB9KVxuICAgICAgLnRoZW4ociA9PiB7XG4gICAgICAgIGlmIChyLnBob3RvcyAmJiByLnBob3Rvcy5sZW5ndGgpe1xuICAgICAgICAgIGxldCBmaXJzdCA9IHIucGhvdG9zLnNoaWZ0KClcbiAgICAgICAgICBsZXQgc2l6ZSA9IGZpcnN0LnNpemVzLnNoaWZ0KCk7XG5cbiAgICAgICAgICB0aGlzLmxvYWRGaWxlKHNpemUubG9jYXRpb24sIGZpcnN0LmRjX2lkLCB1c2VyKVxuICAgICAgICB9XG4gICAgICB9KVxuICAgICAgLmNhdGNoKGUgPT4ge1xuICAgICAgICAvLyBjb25zb2xlLmVycm9yKCdnZXRVc2VyUGhvdG9zIGUnLCBlKTtcbiAgICAgIH0pXG4gIH1cblxuICBsb2FkUGhvdG8ocCwgcGVlckluZm8sIGlkKXtcbiAgICBpZiAocC5fID09PSAnY2hhdFBob3RvRW1wdHknKXtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAocC5fID09PSAnY2hhdFBob3RvJyApe1xuICAgICAgY29uc3Qge2RjX2lkLCBwaG90b19zbWFsbH0gPSBwO1xuXG4gICAgICBpZiAoZGNfaWQgIT09IHRoaXMubXRwLmRjKXtcbiAgICAgICAgY29uc29sZS5sb2coJ/Cfm7Agd3JvbmcgZGMuIG5lZWQgJW8gYnV0IGNvbm5lY3RlZCAlbycsIGRjX2lkLCB0aGlzLm10cC5kYylcbiAgICAgIH1cblxuICAgICAgdGhpcy5sb2FkRmlsZShwaG90b19zbWFsbCwgZGNfaWQsIHBlZXJJbmZvKVxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChwLl8gPT09ICdwaG90bycgKXtcbiAgICAgIHRoaXMubXRwLmNhbGwoJ3VwbG9hZC5nZXRGaWxlJywge1xuICAgICAgICBsb2NhdGlvbjoge1xuICAgICAgICAgIF86ICdpbnB1dFBob3RvRmlsZUxvY2F0aW9uJyxcbiAgICAgICAgICBpZDogcC5pZCxcbiAgICAgICAgICBhY2Nlc3NfaGFzaDogcC5hY2Nlc3NfaGFzaCxcbiAgICAgICAgICBmaWxlX3JlZmVyZW5jZTogcC5maWxlX3JlZmVyZW5jZSxcbiAgICAgICAgICB0aHVtYl9zaXplOiAneCdcbiAgICAgICAgfSxcbiAgICAgICAgb2Zmc2V0OiAwLFxuICAgICAgICBsaW1pdDogMTAyNCAqIDEwMjQsXG4gICAgICAgIGJpZzogZmFsc2VcbiAgICAgIH0pXG4gICAgICAgIC50aGVuKHIgPT4ge1xuICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCfwn46GIHBob3RvIHdhcyBkb3dubG9hZGVkJywgcik7XG5cbiAgICAgICAgICBpZiAoci5fID09PSAndXBsb2FkLmZpbGUnKXtcbiAgICAgICAgICAgIGlkID0gaWQgfHwgcC5pZDtcblxuICAgICAgICAgICAgdGhpcy5maWxlc1tpZF0gPSBuZXcgQmxvYihbci5ieXRlc10pO1xuICAgICAgICAgICAgdGhpcy5hcHAubGF5b3V0LnNob3dBdmF0YXIoaWQsIHRoaXMuZmlsZXNbaWRdKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICAgIC5jYXRjaChlID0+IHtcbiAgICAgICAgICAvLyBjb25zb2xlLmVycm9yKCfwn46GIHVwbG9hZC5nZXRGaWxlIFtjaGF0IHBob3RvXSBlJywgZSk7XG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgaWYgKHAuXyA9PT0gJ3VzZXJQcm9maWxlUGhvdG8nICl7XG4gICAgICB0aGlzLm10cC5jYWxsKCd1cGxvYWQuZ2V0RmlsZScsIHtcbiAgICAgICAgbG9jYXRpb246IHtcbiAgICAgICAgICBfOiAnaW5wdXRQaG90b0ZpbGVMb2NhdGlvbicsXG4gICAgICAgICAgaWQ6IHAuaWQsXG4gICAgICAgICAgYWNjZXNzX2hhc2g6IHBlZXJJbmZvLmFjY2Vzc19oYXNoLFxuICAgICAgICAgIGZpbGVfcmVmZXJlbmNlOiBwLmZpbGVfcmVmZXJlbmNlLFxuICAgICAgICAgIHRodW1iX3NpemU6ICd4J1xuICAgICAgICB9LFxuICAgICAgICBvZmZzZXQ6IDAsXG4gICAgICAgIGxpbWl0OiAxMDI0ICogMTAyNCxcbiAgICAgICAgYmlnOiBmYWxzZVxuICAgICAgfSlcbiAgICAgICAgLnRoZW4ociA9PiB7XG4gICAgICAgICAgLy8gY29uc29sZS5sb2coJ/CfjoYgcGhvdG8gd2FzIGRvd25sb2FkZWQnLCByKTtcblxuICAgICAgICAgIGlmIChyLl8gPT09ICd1cGxvYWQuZmlsZScpe1xuICAgICAgICAgICAgaWQgPSBpZCB8fCBwLmlkO1xuXG4gICAgICAgICAgICB0aGlzLmZpbGVzW2lkXSA9IG5ldyBCbG9iKFtyLmJ5dGVzXSk7XG4gICAgICAgICAgICB0aGlzLmFwcC5sYXlvdXQuc2hvd0F2YXRhcihpZCwgdGhpcy5maWxlc1tpZF0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgLmNhdGNoKGUgPT4ge1xuICAgICAgICAgIC8vIGNvbnNvbGUuZXJyb3IoJ/CfjoYgdXBsb2FkLmdldEZpbGUgW2NoYXQgcGhvdG9dIGUnLCBlKTtcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgfVxuXG4gIGNvbXBvc2VQZWVyKHBlZXJJbmZvKXtcbiAgICBsZXQgcGVlciA9IHtcbiAgICAgIF86ICdpbnB1dCcgKyBwZWVySW5mby5wZWVyVHlwZVswXS50b1VwcGVyQ2FzZSgpICsgcGVlckluZm8ucGVlclR5cGUuc2xpY2UoMSksXG4gICAgICBhY2Nlc3NfaGFzaDogcGVlckluZm8uYWNjZXNzX2hhc2hcbiAgICB9XG5cbiAgICBzd2l0Y2ggKHBlZXJJbmZvLl8pe1xuICAgICAgY2FzZSAndXNlcic6XG4gICAgICAgIHBlZXIudXNlcl9pZCA9IHBlZXJJbmZvLmlkXG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnY2hhbm5lbCc6XG4gICAgICAgIHBlZXIuY2hhbm5lbF9pZCA9IHBlZXJJbmZvLmlkXG4gICAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHJldHVybiBwZWVyO1xuICB9XG5cbiAgbG9hZEZpbGUoZiwgZGMsIHBlZXIsIGlkKXtcbiAgICBwZWVyID0gdGhpcy5jb21wb3NlUGVlcihwZWVyKTtcbiAgICBpZiAoZi5fID09PSAnZmlsZUxvY2F0aW9uVG9CZURlcHJlY2F0ZWQnKXtcbiAgICAgIHRoaXMubXRwLmNhbGwoJ3VwbG9hZC5nZXRGaWxlJywge1xuICAgICAgICBsb2NhdGlvbjoge1xuICAgICAgICAgIF86ICdpbnB1dFBlZXJQaG90b0ZpbGVMb2NhdGlvbicsXG4gICAgICAgICAgcGVlcixcbiAgICAgICAgICBsb2NhbF9pZDogZi5sb2NhbF9pZCxcbiAgICAgICAgICB2b2x1bWVfaWQ6IGYudm9sdW1lX2lkLFxuICAgICAgICAgIGZsYWdzOiAwLFxuICAgICAgICB9LFxuICAgICAgICBvZmZzZXQ6IDAsXG4gICAgICAgIGxpbWl0OiAxMDI0ICogMTAyNCxcbiAgICAgICAgYmlnOiBmYWxzZVxuICAgICAgfSlcbiAgICAgICAgLnRoZW4ociA9PiB7XG4gICAgICAgICAgLy8gY29uc29sZS5sb2coJ/CfjoYgZmlsZSB3YXMgZG93bmxvYWRlZCcsIHIpO1xuXG4gICAgICAgICAgaWYgKHIuXyA9PT0gJ3VwbG9hZC5maWxlJyl7XG4gICAgICAgICAgICBpZCA9IGlkIHx8IHBlZXIuY2hhbm5lbF9pZCB8fCBwZWVyLnVzZXJfaWQ7XG5cbiAgICAgICAgICAgIHRoaXMuZmlsZXNbaWRdID0gbmV3IEJsb2IoW3IuYnl0ZXNdKTtcbiAgICAgICAgICAgIHRoaXMuYXBwLmxheW91dC5zaG93QXZhdGFyKGlkLCB0aGlzLmZpbGVzW2lkXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2goZSA9PiB7XG4gICAgICAgICAgLy8gY29uc29sZS5lcnJvcign8J+OhiB1cGxvYWQuZ2V0RmlsZSBlJywgZSk7XG4gICAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgZ2V0Q2hhdChpZCl7XG4gICAgcmV0dXJuIHRoaXMuZGlhbG9ncy5maW5kKGQgPT4gaWQgPT09IGQuaWQpXG4gIH1cblxuICBnZXRGaWxlTG9hZGVkKGlkKXtcbiAgICByZXR1cm4gdGhpcy5maWxlc1tpZF07XG4gIH1cblxuICBjb21wb3NlTWVzc2FnZUlkKGNoYXQsIG1lc3NhZ2Upe1xuICAgIHJldHVybiAgYG0tJHtjaGF0LmlkfS0ke21lc3NhZ2UuaWR9YDtcbiAgfVxuXG4gIGxvYWRNZXNzYWdlcyhjaGF0KXtcbiAgICBjb25zdCBwZWVyID0gdGhpcy5jb21wb3NlUGVlcihjaGF0LnBlZXJJbmZvKTtcbiAgICBjb25zdCBtZSA9IHRoaXMuYXBwLnN0YXRlLmdldCgnYXV0aCcpLnVzZXI7XG5cbiAgICByZXR1cm4gdGhpcy5tdHAuY2FsbCgnbWVzc2FnZXMuZ2V0SGlzdG9yeScsIHtcbiAgICAgICAgcGVlcixcbiAgICAgICAgb2Zmc2V0X2lkOiAwLFxuICAgICAgICBvZmZzZXRfZGF0ZTogMCxcbiAgICAgICAgYWRkX29mZnNldDogMCxcbiAgICAgICAgbGltaXQ6IDEwLFxuICAgICAgICBtYXhfaWQ6IDAsXG4gICAgICAgIG1pbl9pZDogMCxcbiAgICAgICAgaGFzaDogMFxuICAgICAgfSlcbiAgICAgIC50aGVuKHIgPT4ge1xuICAgICAgICAvLyBjb25zb2xlLmxvZygn8J+OnyBtZXNzYWdlcyBsb2FkZWQnLCByKTtcbiAgICAgICAgdGhpcy5zYXZlVXNlcnMoci51c2Vycyk7XG4gICAgICAgIHJldHVybiB0aGlzLmZpbGxVc2VycyhyLm1lc3NhZ2VzLCByLm1lc3NhZ2VzLm1hcChtID0+IG0uZnJvbV9pZCksICdhdXRob3InKVxuICAgICAgfSlcbiAgICAgIC50aGVuKG1lc3NhZ2VzID0+IHtcbiAgICAgICAgbWVzc2FnZXMuZm9yRWFjaChtID0+IHtcbiAgICAgICAgICBpZiAobS5mcm9tX2lkKXtcbiAgICAgICAgICAgIG0uYXV0aG9yID0gdGhpcy51c2Vyc1ttLmZyb21faWRdXG5cbiAgICAgICAgICAgIGlmIChtLmF1dGhvciAmJiBtLmF1dGhvci5waG90byl7XG4gICAgICAgICAgICAgIC8vIHRoaXMuZ2V0VXNlclBob3RvcyhtLmF1dGhvcilcbiAgICAgICAgICAgICAgLy8gdGhpcy5sb2FkUGhvdG8obS5hdXRob3IucGhvdG8sIG0uYXV0aG9yKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAobS50b19pZCAmJiBtLnRvX2lkLl8gPT09ICdwZWVyQ2hhbm5lbCcpIHtcbiAgICAgICAgICAgIG0uYXV0aG9yID0gdGhpcy5jaGFubmVsc1ttLnRvX2lkLmNoYW5uZWxfaWRdXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKG0ubWVkaWEgJiYgbS5tZWRpYS5fID09PSAnbWVzc2FnZU1lZGlhRG9jdW1lbnQnKXtcbiAgICAgICAgICAgIGxldCBmaWxlID0gbS5tZWRpYS5kb2N1bWVudC5hdHRyaWJ1dGVzLmZpbmQoYSA9PiBhLl8gPT09ICdkb2N1bWVudEF0dHJpYnV0ZUZpbGVuYW1lJyk7XG4gICAgICAgICAgICBsZXQgYXVkaW8gPSBtLm1lZGlhLmRvY3VtZW50LmF0dHJpYnV0ZXMuZmluZChhID0+IGEuXyA9PT0gJ2RvY3VtZW50QXR0cmlidXRlQXVkaW8nKTtcblxuICAgICAgICAgICAgaWYgKGZpbGUpe1xuICAgICAgICAgICAgICBtLmZpbGUgPSBmaWxlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoYXVkaW8pe1xuICAgICAgICAgICAgICBtLmF1ZGlvID0gYXVkaW87XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgIH0pXG5cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2VzO1xuICAgICAgfSlcbiAgICAgIC50aGVuKG1lc3NhZ2VzID0+IHtcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ/Cfjp8gbWVzc2FnZXMgZmlsbGVkJywgbWVzc2FnZXMpO1xuXG4gICAgICAgIG1lc3NhZ2VzLnJldmVyc2UoKTtcblxuICAgICAgICBtZXNzYWdlcy5mb3JFYWNoKG0gPT4ge1xuICAgICAgICAgIG0uaXNNeSA9IG0uYXV0aG9yID8gbS5hdXRob3IuaWQgPT09IG1lLmlkIDogZmFsc2VcblxuICAgICAgICAgIGlmIChtLnJlcGx5X3RvX21zZ19pZCl7XG4gICAgICAgICAgICBtLnJlcGx5ID0gbWVzc2FnZXMuZmluZChtcyA9PiBtcy5pZCA9PT0gbS5yZXBseV90b19tc2dfaWQpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChtLm1lZGlhICYmIG0ubWVkaWEuXyA9PT0gJ21lc3NhZ2VNZWRpYVBob3RvJyl7XG4gICAgICAgICAgICBjb25zdCBwaG90byA9IG0ubWVkaWEucGhvdG9cbiAgICAgICAgICAgIGNvbnN0IHNpemUgPSBwaG90by5zaXplcy5maWx0ZXIocyA9PiBzLl8gPT09ICdwaG90b1NpemUnKS5wb3AoKTtcblxuICAgICAgICAgICAgdGhpcy5sb2FkUGhvdG8oXG4gICAgICAgICAgICAgIHBob3RvLFxuICAgICAgICAgICAgICBtLmF1dGhvcixcbiAgICAgICAgICAgICAgdGhpcy5jb21wb3NlTWVzc2FnZUlkKGNoYXQsIG0pXG4gICAgICAgICAgICApXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuXG4gICAgICAgIHJldHVybiBtZXNzYWdlcztcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goZSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKCfwn46fIG1lc3NhZ2VzIGVycm9yJywgZSk7XG4gICAgICB9KVxuICB9XG5cbn1cbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/api/index.js\n");

/***/ }),

/***/ "./src/api/mtp-auth.js":
/*!*****************************!*\
  !*** ./src/api/mtp-auth.js ***!
  \*****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return MTPAuth; });\n/* harmony import */ var _time_manager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./time-manager */ \"./src/api/time-manager.js\");\n/* harmony import */ var _utils_numbers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/numbers */ \"./src/utils/numbers.js\");\n/* harmony import */ var _tl_serializer_mtp__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tl-serializer-mtp */ \"./src/api/tl-serializer-mtp.js\");\n/* harmony import */ var _rsa__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./rsa */ \"./src/api/rsa.js\");\n/* harmony import */ var _utils_bin_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/bin_utils */ \"./src/utils/bin_utils.js\");\n/* harmony import */ var _tl_deserializer_mtp__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./tl-deserializer-mtp */ \"./src/api/tl-deserializer-mtp.js\");\n/* harmony import */ var big_integer__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! big-integer */ \"./node_modules/big-integer/BigInteger.js\");\n/* harmony import */ var big_integer__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(big_integer__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var _utils_sha1__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./../utils/sha1 */ \"./src/utils/sha1.js\");\n/* harmony import */ var _utils_secure_random__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./../utils/secure-random */ \"./src/utils/secure-random.js\");\n/* harmony import */ var _utils_crypto__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../utils/crypto */ \"./src/utils/crypto.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Class responsible for MTProto Authorization\n */\nclass MTPAuth {\n\n  /**\n   * @param {Telegramjs} app\n   */\n  constructor(app){\n    this.app = app;\n    this.mtp = app.mtp;\n\n    this.auth = {\n      nonce: undefined,\n      newNounce: undefined,\n      serverNonce: undefined,\n      pq: undefined,\n      fingerprints: undefined,\n      publicKey: undefined,\n      g:undefined,\n      b:undefined,\n      authKeyID: undefined,\n      authKey: undefined,\n      serverSalt: undefined,\n      localTime: undefined,\n      tmpAesKey: undefined,\n      tmpAesIv: undefined,\n      dhPrime: undefined,\n      gA: undefined,\n      serverTime: undefined,\n      retry: 0,\n    };\n\n    this.authCallback = null;\n  }\n\n  /**\n   * Begin authorisation process\n   */\n  init(authCallback, force){\n    this.authCallback = authCallback;\n\n    let savedAuth = !force ? this.app.state.get('auth') : null;\n\n    if (force && this.mtp.readyPromise.status === 'resolved'){\n      this.mtp.readyPromise = Promise.resolve();\n    }\n\n    return this.mtp.readyPromise.then(() => {\n      if (savedAuth){\n        this.auth = savedAuth;\n        this.authCallback();\n        return;\n      }\n\n      this.requestPQ();\n    })\n  }\n\n  /**\n   * Return saved MTP auth state\n   * @return {{authKeyID, authKey, serverSalt}}\n   */\n  getAuth(){\n    return this.auth;\n  }\n\n  /**\n   * Step 1. Request p & q for Diffie-Hellman exchange\n   *\n   * req_pq_multi#be7e8ef1 nonce:int128 = ResPQ;\n   *\n   */\n  requestPQ(){\n    this.auth.nonce = this.generateNonce();\n\n    this.mtp.callMtp('req_pq_multi', {\n      nonce: this.auth.nonce\n    });\n\n    this.mtp.on('resPQ', (msg) => {\n      this.handlePQResponse(msg);\n    })\n  }\n\n\n  /**\n   * Process PQ response:\n   * @param {number[]} nonce\n   * @param {Uint8Array} pq\n   * @param {number[]} server_nonce\n   * @param {string[]} server_public_key_fingerprints\n   */\n  handlePQResponse({nonce, pq, server_nonce, server_public_key_fingerprints}){\n    /**\n     * Validate client nonce\n     */\n    this.validateClientNonce(nonce, 'handlePQResponse');\n\n    this.auth.serverNonce = server_nonce;\n    this.auth.pq = pq;\n    this.auth.fingerprints = server_public_key_fingerprints;\n    this.auth.publicKey = Object(_rsa__WEBPACK_IMPORTED_MODULE_3__[\"selectRsaKeyByFingerPrint\"])(this.auth.fingerprints);\n\n    if (!this.auth.publicKey) {\n      throw new Error('[MT] No public key found')\n    }\n\n    console.time('💎 factorization')\n    /**\n     * @type {{p: *, q: *}|{p: *, q: *}}\n     */\n    let primes = decomposePQ(pq);\n    console.timeEnd('💎 factorization');\n\n\n    this.auth.p = B(primes.p);\n    this.auth.q = B(primes.q);\n\n    this.sendPoW();\n  }\n\n  /**\n   * Validate that nonce given from server is identical with our session nonce passed with first request\n   * @param {number[]} givenNone - nonce to check with saved\n   * @param {string} [initiator] - caller-method to log\n   * @throws {Error}\n   */\n  validateClientNonce(givenNone, initiator = 'unspecified'){\n    if (_utils_numbers__WEBPACK_IMPORTED_MODULE_1__[\"bytesCmp\"](this.auth.nonce, givenNone)){\n      return true;\n    }\n\n    throw new Error(`Given nonce is not corresponded by this session. Caller [${initiator}]`)\n  }\n\n  /**\n   * Validate that nonce given from server is identical with our session nonce passed with first request\n   * @param {number[]} givenNone - nonce to check with saved\n   * @param {string} [initiator] - caller-method to log\n   * @throws {Error}\n   */\n  validateServerNonce(givenNone, initiator = 'unspecified'){\n    if (_utils_numbers__WEBPACK_IMPORTED_MODULE_1__[\"bytesCmp\"](this.auth.serverNonce, givenNone)){\n      return true;\n    }\n\n    throw new Error(`Given server nonce is not corresponded by this session. Caller [${initiator}]`)\n  }\n\n  /**\n   * Return random number that will identify client within communication\n   * @return {[]}\n   */\n  generateNonce(){\n    return _utils_numbers__WEBPACK_IMPORTED_MODULE_1__[\"generateRandomInt128\"]();\n  }\n\n  /**\n   * Presenting proof of work\n   *\n   * req_DH_params#d712e4be nonce:int128 server_nonce:int128 p:string q:string public_key_fingerprint:long encrypted_data:string = Server_DH_Params\n   */\n  sendPoW(){\n    /**\n     * Another (good) random number generated by the client\n     */\n    this.auth.newNonce = new Array(32);\n    Object(_utils_secure_random__WEBPACK_IMPORTED_MODULE_8__[\"fillWithRandomBytes\"])(this.auth.newNonce);\n\n    const powData = new _tl_serializer_mtp__WEBPACK_IMPORTED_MODULE_2__[\"default\"]()\n\n    powData.storeSomething({\n      _: 'p_q_inner_data',\n      pq: this.auth.pq,\n      p: this.auth.p,\n      q: this.auth.q,\n      nonce: this.auth.nonce,\n      server_nonce: this.auth.serverNonce,\n      new_nonce: this.auth.newNonce\n    }, 'P_Q_inner_data', 'DECRYPTED_DATA')\n\n    const powDataBytes = powData.getBytes()\n\n    crypto.subtle.digest('SHA-1', powData.bufferValue).then((shaBuf) => {\n      const shaArr = _utils_numbers__WEBPACK_IMPORTED_MODULE_1__[\"bytesFromArrayBuffer\"](shaBuf);\n      const dataWithHash = shaArr.concat(powDataBytes);\n      const encrypted_data = _utils_bin_utils__WEBPACK_IMPORTED_MODULE_4__[\"rsaEncrypt\"](this.auth.publicKey, dataWithHash);\n\n      this.mtp.callMtp('req_DH_params', {\n        nonce: this.auth.nonce,\n        server_nonce: this.auth.serverNonce,\n        p: this.auth.p,\n        q: this.auth.q,\n        public_key_fingerprint: this.auth.publicKey.fingerprint,\n        encrypted_data\n      }, () => {\n        console.log('💀 bad nonce error, regenerate');\n        this.requestPQ();\n      });\n\n      this.mtp.on('server_DH_params_ok', (response) => {\n        this.handlePQPoWResponse(response)\n      });\n    });\n  }\n\n  /**\n   * Process answer from Telegram\n   * @param deserializer\n   */\n  handlePQPoWResponse({encrypted_answer, nonce, server_nonce}){\n    this.validateClientNonce(nonce, 'handlePQPoWResponse');\n    this.validateServerNonce(server_nonce, 'handlePQPoWResponse');\n\n    this.mtpDecryptServerDhDataAnswer(encrypted_answer)\n      .then(() => {\n        this.mtpSendSetClientDhParams();\n      })\n      .catch((error) => {\n        console.error('DH answer decryption error', error);\n        throw error;\n      })\n\n  }\n\n  /**\n   *\n   * @param encryptedAnswer\n   *\n   * @return {Promise}\n   */\n  mtpDecryptServerDhDataAnswer(encryptedAnswer) {\n    return new Promise((resolve, reject) => {\n\n      this.auth.localTime = _time_manager__WEBPACK_IMPORTED_MODULE_0__[\"default\"].now();\n\n      Promise.all([\n        crypto.subtle.digest('SHA-1', _utils_numbers__WEBPACK_IMPORTED_MODULE_1__[\"convertToArrayBuffer\"](this.auth.newNonce.concat(this.auth.serverNonce))),\n        crypto.subtle.digest('SHA-1', _utils_numbers__WEBPACK_IMPORTED_MODULE_1__[\"convertToArrayBuffer\"](this.auth.serverNonce.concat(this.auth.newNonce))),\n        crypto.subtle.digest('SHA-1', _utils_numbers__WEBPACK_IMPORTED_MODULE_1__[\"convertToArrayBuffer\"]([].concat(this.auth.newNonce, this.auth.newNonce)))\n      ])\n      .then(([shaBuf1, shaBuf2, shaBuf3]) => {\n        let sha1Bytes = _utils_numbers__WEBPACK_IMPORTED_MODULE_1__[\"bytesFromArrayBuffer\"](shaBuf1)\n        let sha2Bytes = _utils_numbers__WEBPACK_IMPORTED_MODULE_1__[\"bytesFromArrayBuffer\"](shaBuf2)\n        let sha3Bytes = _utils_numbers__WEBPACK_IMPORTED_MODULE_1__[\"bytesFromArrayBuffer\"](shaBuf3)\n\n        this.auth.tmpAesKey = sha1Bytes.concat(sha2Bytes.slice(0, 12));\n        this.auth.tmpAesIv = sha2Bytes.slice(12).concat(sha3Bytes, this.auth.newNonce.slice(0, 4));\n\n\n        var answerWithHashDecrypted = new Uint8Array(\n          bytesFromWords(\n            _utils_crypto__WEBPACK_IMPORTED_MODULE_9__[\"default\"].AES.decrypt(\n              {\n                ciphertext: bytesToWords(encryptedAnswer)\n              },\n              bytesToWords(this.auth.tmpAesKey),\n            {\n                iv: bytesToWords(this.auth.tmpAesIv),\n                padding: _utils_crypto__WEBPACK_IMPORTED_MODULE_9__[\"default\"].pad.NoPadding,\n                mode: _utils_crypto__WEBPACK_IMPORTED_MODULE_9__[\"default\"].mode.IGE\n              }\n            )\n          )\n        );\n\n        var hashNew = answerWithHashDecrypted.slice(0, 20)\n        var answerWithPaddingNew = answerWithHashDecrypted.slice(20)\n        var bufferNew = _utils_numbers__WEBPACK_IMPORTED_MODULE_1__[\"bytesToArrayBuffer\"](answerWithPaddingNew);\n\n        var deserializerNew = new _tl_deserializer_mtp__WEBPACK_IMPORTED_MODULE_5__[\"default\"](bufferNew)\n        var response = deserializerNew.fetchObject('Server_DH_inner_data')\n\n        if (response._ !== 'server_DH_inner_data') {\n          throw new Error('[MT] server_DH_inner_data response invalid: ' + constructor)\n        }\n\n        if (!_utils_numbers__WEBPACK_IMPORTED_MODULE_1__[\"bytesCmp\"](this.auth.nonce, response.nonce)) {\n          throw new Error('[MT] server_DH_inner_data nonce mismatch')\n        }\n\n        if (!_utils_numbers__WEBPACK_IMPORTED_MODULE_1__[\"bytesCmp\"](this.auth.serverNonce, response.server_nonce)) {\n          throw new Error('[MT] server_DH_inner_data serverNonce mismatch')\n        }\n\n        this.auth.g = response.g\n        this.auth.dhPrime = response.dh_prime\n        this.auth.gA = response.g_a\n        this.auth.serverTime = response.server_time\n        this.auth.retry = 0\n\n        MTPAuth.mtpVerifyDhParams(this.auth.g, this.auth.dhPrime, this.auth.gA);\n\n        var offset = deserializerNew.getOffset()\n\n        if (!_utils_numbers__WEBPACK_IMPORTED_MODULE_1__[\"bytesCmp\"](hashNew, Object(_utils_sha1__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(answerWithPaddingNew.slice(0, offset)))) {\n          throw new Error('[MT] server_DH_inner_data SHA1-hash mismatch')\n        }\n\n        var newTimeOffset =  (response.server_time - ~~(Date.now()/1000));\n\n        if (Math.abs(newTimeOffset) > 10) {\n          console.log(`⏱ time offset: ${newTimeOffset} sec`);\n          this.app.state.set('timeOffset', newTimeOffset);\n        }\n\n        resolve();\n      })\n    })\n  }\n\n  debugBinary (name, buff) {\n    console.log(name, '[' + buff.byteLength + ']', S(buff));\n  }\n\n  warn(e){\n    console.warn(e)\n  }\n\n  static mtpVerifyDhParams(g, dhPrime, gA) {\n    // console.log('Verifying DH params')\n    var dhPrimeHex = _utils_numbers__WEBPACK_IMPORTED_MODULE_1__[\"bytesToHex\"](dhPrime)\n    if (g != 3 ||\n      dhPrimeHex !== 'c71caeb9c6b1c9048e6c522f70f13f73980d40238e3e21c14934d037563d930f48198a0aa7c14058229493d22530f4dbfa336f6e0ac925139543aed44cce7c3720fd51f69458705ac68cd4fe6b6b13abdc9746512969328454f18faf8c595f642477fe96bb2a941d5bcd1d4ac8cc49880708fa9b378e3c4f3a9060bee67cf9a4a4a695811051907e162753b56b0f6b410dba74d8a84b2a14b3144e0ef1284754fd17ed950d5965b4b9dd46582db1178d169c6bc465b0d6ff9ca3928fef5b9ae4e418fc15e83ebea0f87fa9ff5eed70050ded2849f47bf959d956850ce929851f0d8115f635b105ee2e4e15d04b2454bf6f4fadf034b10403119cd8e3b92fcc5b') {\n      // The verified value is from https://core.telegram.org/mtproto/security_guidelines\n      throw new Error('[MT] DH params are not verified: unknown dhPrime')\n    }\n    // console.log('dhPrime cmp OK')\n\n    var gABigInt = _utils_numbers__WEBPACK_IMPORTED_MODULE_1__[\"bigint\"](_utils_numbers__WEBPACK_IMPORTED_MODULE_1__[\"bytesToHex\"](gA))\n    var dhPrimeBigInt = _utils_numbers__WEBPACK_IMPORTED_MODULE_1__[\"bigint\"](dhPrimeHex, 16)\n\n    if (gABigInt.compareTo(big_integer__WEBPACK_IMPORTED_MODULE_6___default.a.one) <= 0) {\n      throw new Error('[MT] DH params are not verified: gA <= 1')\n    }\n\n    if (gABigInt.compareTo(dhPrimeBigInt.subtract(big_integer__WEBPACK_IMPORTED_MODULE_6___default.a.one)) >= 0) {\n      throw new Error('[MT] DH params are not verified: gA >= dhPrime - 1')\n    }\n    // console.log('1 < gA < dhPrime-1 OK')\n\n\n    var two = big_integer__WEBPACK_IMPORTED_MODULE_6___default()(2)\n    // two.fromInt(2)\n    var twoPow = two.pow(2048 - 64)\n\n    if (gABigInt.compareTo(twoPow) < 0) {\n      throw new Error('[MT] DH params are not verified: gA < 2^{2048-64}')\n    }\n    if (gABigInt.compareTo(dhPrimeBigInt.subtract(twoPow)) >= 0) {\n      throw new Error('[MT] DH params are not verified: gA > dhPrime - 2^{2048-64}')\n    }\n    // console.log('2^{2048-64} < gA < dhPrime-2^{2048-64} OK')\n\n    return true\n  }\n\n\n  /**\n   * Client computes random 2048-bit number b (using a sufficient amount of entropy) and sends the server a message\n   *\n   * set_client_DH_params#f5045f1f nonce:int128 server_nonce:int128 encrypted_data:string = Set_client_DH_params_answer;\n   */\n  mtpSendSetClientDhParams() {\n    const gBytes = _utils_numbers__WEBPACK_IMPORTED_MODULE_1__[\"bytesFromHex\"](this.auth.g.toString(16));\n\n    this.auth.b = new Array(256);\n    Object(_utils_secure_random__WEBPACK_IMPORTED_MODULE_8__[\"fillWithRandomBytes\"])(this.auth.b);\n\n    console.time('new pow')\n    const gB = _utils_bin_utils__WEBPACK_IMPORTED_MODULE_4__[\"bytesModPow\"](gBytes, this.auth.b, this.auth.dhPrime);\n    const data = new _tl_serializer_mtp__WEBPACK_IMPORTED_MODULE_2__[\"default\"]()\n\n    data.storeSomething({\n      _: 'client_DH_inner_data',\n      nonce: this.auth.nonce,\n      server_nonce: this.auth.serverNonce,\n      retry_id: [0, this.auth.retry++],\n      g_b: gB\n    }, 'Client_DH_Inner_Data')\n\n    crypto.subtle.digest('SHA-1', data.bufferValue)\n      .then((dataBuf) => {\n        const dataWithHash = _utils_numbers__WEBPACK_IMPORTED_MODULE_1__[\"bytesFromArrayBuffer\"](dataBuf).concat(data.getBytes())\n        const encryptedData = _utils_bin_utils__WEBPACK_IMPORTED_MODULE_4__[\"aesEncryptSync\"](dataWithHash, this.auth.tmpAesKey, this.auth.tmpAesIv)\n\n        console.timeEnd('new pow')\n\n        this.mtp.callMtp('set_client_DH_params', {\n          nonce: this.auth.nonce,\n          server_nonce: this.auth.serverNonce,\n          encrypted_data: encryptedData\n        });\n\n        this.mtp.on('dh_gen_ok', (response) => {\n          this.finishDhExchange(response)\n        })\n      })\n  }\n\n  finishDhExchange({new_nonce_hash1, nonce, server_nonce}){\n    console.time('exchange finishing')\n    this.validateClientNonce(nonce, 'finishDhExchange');\n    this.validateServerNonce(server_nonce, 'finishDhExchange');\n\n    let gA = big_integer__WEBPACK_IMPORTED_MODULE_6___default()(S(this.auth.gA), 16);\n    let dh_prime = big_integer__WEBPACK_IMPORTED_MODULE_6___default()(S(this.auth.dhPrime), 16);\n    let b = big_integer__WEBPACK_IMPORTED_MODULE_6___default()(S(this.auth.b), 16);\n\n\n    let authKey = B(str(gA.modPow(b, dh_prime)), 256);\n    let serverSalt = _utils_numbers__WEBPACK_IMPORTED_MODULE_1__[\"bytesXor\"](this.auth.newNonce.slice(0, 8), this.auth.serverNonce.slice(0, 8))\n\n    crypto.subtle.digest('SHA-1', authKey)\n      .then((authKeyHashBuf) => {\n        let authKeyHash = _utils_numbers__WEBPACK_IMPORTED_MODULE_1__[\"bytesFromArrayBuffer\"](authKeyHashBuf);\n        let authKeyAux = authKeyHash.slice(0, 8);\n        let authKeyID = authKeyHash.slice(-8);\n\n        /**\n         * Convert from buffer to an array because buffer can not be stored in json\n         */\n        authKey = _utils_numbers__WEBPACK_IMPORTED_MODULE_1__[\"bytesFromArrayBuffer\"](authKey);\n\n        this.auth.authKeyID = authKeyID\n        this.auth.authKey = authKey\n        this.auth.serverSalt = serverSalt\n\n        console.timeEnd('exchange finishing')\n\n        this.app.state.set('auth', {\n          authKeyID,\n          authKey,\n          serverSalt\n        });\n\n        this.authCallback();\n      })\n  }\n}\n\n\nfunction decomposePQ(pq) {\n  var n = big_integer__WEBPACK_IMPORTED_MODULE_6___default()(typeof pq === 'string' ? pq : S(pq), 16);\n\n  if (n.divmod(2).remainder == 0)\n    return {p: (2).toString(16), q: n.divmod(2).quotient.toString(16)};\n\n  var y = big_integer__WEBPACK_IMPORTED_MODULE_6___default()(rand(1, 1000)),\n    c = big_integer__WEBPACK_IMPORTED_MODULE_6___default()(rand(1, 1000)),\n    m = big_integer__WEBPACK_IMPORTED_MODULE_6___default()(rand(1, 1000)),\n    g = big_integer__WEBPACK_IMPORTED_MODULE_6___default()(1), r = big_integer__WEBPACK_IMPORTED_MODULE_6___default()(1), q = big_integer__WEBPACK_IMPORTED_MODULE_6___default()(1);\n\n  window.x = big_integer__WEBPACK_IMPORTED_MODULE_6___default()();\n  window.ys = big_integer__WEBPACK_IMPORTED_MODULE_6___default()();\n\n  while (g == 1) {\n    window.x = y;\n    for (var i = big_integer__WEBPACK_IMPORTED_MODULE_6___default()(1); i.compare(r) < 1; i = i.plus(1))\n      y = y.multiply(y).divmod(n).remainder.plus(c).divmod(n).remainder;\n    var k = big_integer__WEBPACK_IMPORTED_MODULE_6___default()(0);\n    while (k < r && g == 1) {\n      window.ys = y;\n      for (var i = big_integer__WEBPACK_IMPORTED_MODULE_6___default()(1); i.compare(big_integer__WEBPACK_IMPORTED_MODULE_6___default.a.min(m, r.minus(k))) < 1; i = i.plus(1)) {\n        y = y.multiply(y).divmod(n).remainder.plus(c).divmod(n).remainder;\n        q = q.multiply(window.x.minus(y).abs()).divmod(n).remainder;\n      }\n      g = big_integer__WEBPACK_IMPORTED_MODULE_6___default.a.gcd(q, n);\n      k = k.plus(m)\n    }\n    r = r.multiply(2);\n  }\n\n  if (g == n) {\n    while (true) {\n      window.ys = window.ys.multiply(window.ys).divmod(n).remainder.plus(c).divmod(n).remainder;\n      g = g.multiply(window.x.minus(window.ys).abs()).divmod(n).remainder;\n      if (g.compare(1) == -1)\n        break;\n    }\n  }\n\n  return {p: g.toString(16), q: n.divmod(g).quotient.toString(16)};\n}\n\nfunction Braw(string) {\n  var arr = new Uint8Array(string.length);\n  for (var i = 0; i < arr.length; ++i)\n    arr[i] = string.charCodeAt(i);\n  return arr.buffer;\n}\n\n\nfunction S(buffer, separator) {\n  return Array.from(new Uint8Array(buffer)).map(function (b) {\n    var s = b.toString(16);\n    return repeatString('0', 2 - s.length) + s;\n  }).join(separator || '');\n}\n\n\nfunction rand(from, to) {\n  return Math.round(Math.random() * (to - from)) + from;\n}\n\n\nfunction repeatString(str, n) {\n  if (str.repeat)\n    return str.repeat(n);\n  var string = \"\";\n  for (var i = 0; i < n; ++i)\n    string += str;\n  return string;\n}\n\nfunction EuclideanModPow(a, b, m) {\n  var x = a.modPow(b, m);\n  return x.isNegative() ? x.add(m) : x;\n}\n\nfunction B(hex, n) {\n  var bytes = hex.match(/[0-9a-f]{2}/gi);\n  if (bytes == null)\n    return new ArrayBuffer();\n  if (typeof n !== 'number') n = bytes.length;\n  var arr = new Uint8Array(n);\n  for (var j = 0; j < (n - bytes.length); ++j)\n    arr[j] = 0;\n  for (var i = 0; i < bytes.length; ++i) {\n    arr[i + (n - bytes.length)] = parseInt(bytes[i], 16);\n  }\n  return arr.buffer;\n}\n\nfunction encryptRSA(data, public_key) {\n  var N = big_integer__WEBPACK_IMPORTED_MODULE_6___default()(public_key.modulus, 16);\n  var E = big_integer__WEBPACK_IMPORTED_MODULE_6___default()(public_key.exponent, 16);\n  var X = big_integer__WEBPACK_IMPORTED_MODULE_6___default()(S(data), 16);\n  return B(EuclideanModPow(X, E, N).toString(16), 256);\n}\n\nfunction concat() {\n  var buffers = Array.from(arguments), n = 0;\n  for (var i = 0; i < buffers.length; ++i)\n    n += buffers[i].byteLength;\n  var buff = new Uint8Array(n);\n  for (var i = 0, j = 0; i < buffers.length; ++i) {\n    buff.set(new Uint8Array(buffers[i]), j);\n    j += buffers[i].byteLength;\n  }\n  return buff.buffer;\n}\n\nfunction randomBytes(n) {\n  var b = new Uint8Array(n);\n  for (var i = 0; i < n; ++i)\n    b[i] = rand(0, 255);\n  return b.buffer;\n}\n\nfunction bytesToWords (bytes) {\n  if (bytes instanceof ArrayBuffer) {\n    bytes = new Uint8Array(bytes)\n  }\n  var len = bytes.length\n  var words = []\n  var i\n  for (i = 0; i < len; i++) {\n    words[i >>> 2] |= bytes[i] << (24 - (i % 4) * 8)\n  }\n\n  return new _utils_crypto__WEBPACK_IMPORTED_MODULE_9__[\"default\"].lib.WordArray.init(words, len)\n}\nfunction bytesFromWords (wordArray) {\n  var words = wordArray.words\n  var sigBytes = wordArray.sigBytes\n  var bytes = []\n\n  for (var i = 0; i < sigBytes; i++) {\n    bytes.push((words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff)\n  }\n\n  return bytes\n}\n\nfunction str(x) {\n  let s = x.toString(16);\n  if (s.length % 2 == 1)\n    s = \"0\" + s;\n  return s;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/api/mtp-auth.js\n");

/***/ }),

/***/ "./src/api/mtp-requests.js":
/*!*********************************!*\
  !*** ./src/api/mtp-requests.js ***!
  \*********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return MTPRequests; });\n/* harmony import */ var _tl_serializer_mtp__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tl-serializer-mtp */ \"./src/api/tl-serializer-mtp.js\");\n/* harmony import */ var _tl_deserializer_mtp__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tl-deserializer-mtp */ \"./src/api/tl-deserializer-mtp.js\");\n/* harmony import */ var aes_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! aes-js */ \"./node_modules/aes-js/index.js\");\n/* harmony import */ var aes_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(aes_js__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _tl_serializer_api__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./tl-serializer-api */ \"./src/api/tl-serializer-api.js\");\n/* harmony import */ var _utils_numbers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/numbers */ \"./src/utils/numbers.js\");\n/* harmony import */ var _utils_crypto__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/crypto */ \"./src/utils/crypto.js\");\n/* harmony import */ var big_integer__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! big-integer */ \"./node_modules/big-integer/BigInteger.js\");\n/* harmony import */ var big_integer__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(big_integer__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var _schema_api__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./schema-api */ \"./src/api/schema-api.js\");\n\n\n\n\n\n\n\n\n\nconst socketStates = {\n  CONNECTING: 0,\n  OPEN: 1,\n  CLOSING: 2,\n  CLOSED: 3\n};\n\nclass MTPRequests {\n  /**\n   * @param {Telegramjs} app\n   */\n  constructor(app){\n    this.app = app;\n    this.socket = null;\n\n    this.test = false;\n\n    /**\n     * Store subscribtions on messages\n     * @type {{msg, handler}[]}\n     */\n    this.subscriptions = [];\n\n    this.dc = this.app.state.get('dc', 2);\n\n    this.encryption = null;\n    this.decryption = null;\n\n    this.sessionId = null;\n    this.layerInited = false;\n    this.seqNo = null;\n\n    this.buffer = new ArrayBuffer();\n    this.attempts = 0;\n    this.acks = new Set();\n    this.pending = {};\n    this.sending = [];\n    this.sent = {};\n    this.lastMsgId = null;\n\n    this.sendingQueue = [];\n    this.readyPromise = this.connect();\n\n    this.timeOffsetCached = null;\n    this.requestErrorCallback = null;\n    this.serverSalt = null;\n\n    this.subscribeOnSystemMessages();\n\n    this.ackInterval = setInterval( () => {\n      this.ack();\n    }, 2000);\n  }\n\n  get auth(){\n    return this.app.mtpAuth.getAuth();\n  }\n\n  get timeOffset(){\n    if (this.timeOffsetCached){\n      return this.timeOffsetCached;\n    }\n\n    this.timeOffsetCached = this.app.state.get('timeOffset', 0);\n\n    return this.timeOffsetCached;\n  }\n\n  on(msg, handler){\n    this.subscriptions.push({msg, handler});\n  }\n\n  connect(callback){\n    this.dc = this.app.state.get('dc', 2);\n\n    return new Promise((resolve, reject) => {\n      const servers = ['pluto', 'venus', 'aurora', 'vesta', 'flora'];\n      let url = 'wss://' + servers[this.dc - 1] + '.web.telegram.org/apiws' + (this.test ? '_test' : '');\n\n      // this.socket = new WebSocket(`ws://149.154.167.40:443/apiws_test`, ['binary']);\n      this.socket = new WebSocket(url, ['binary']);\n      this.socket.binaryType = \"arraybuffer\";\n\n      this.socket.onerror = function error(error) {\n        console.log('🚨 Socket got a protocol error', error);\n      };\n\n      this.socket.onmessage =  (e) => {\n        readAsArrayBuffer(e.data,  (chunk) => {\n          chunk = this.deobfuscate(chunk);\n\n          this.buffer = concat(this.buffer, chunk);\n          this.readMessages();\n        });\n\n      };\n\n      this.socket.onopen = () => {\n        console.log('✨ Socket opened. Queue length: ', this.sendingQueue.length);\n        this.sendInitializationHeader(() => {\n          if (this.sendingQueue.length){\n            while (this.sendingQueue.length){\n              let {message, isEncrypted} = this.sendingQueue.shift()\n\n              if (message){\n                this.send(message, isEncrypted);\n              }\n            }\n          }\n\n          setTimeout(()=> {\n            resolve();\n          }, 100)\n        });\n\n\n      };\n\n      this.socket.onclose = (event) => {\n        if (this.skipSocketOncloseReconnection){\n          this.skipSocketOncloseReconnection = false;\n          return;\n        }\n\n        console.warn(`🧿 Socket connection closed with code ${event.code}`, event);\n\n        if (event.code === 4096){\n          this.connect();\n        }\n\n        if (this.requestErrorCallback){\n          this.requestErrorCallback();\n        }\n      };\n    })\n  }\n\n  reconnect(){\n    console.log('💫 Reconnecting ...');\n    this.acks = new Set();\n    this.skipSocketOncloseReconnection = true;\n    this.layerInited = true;\n    this.socket.close();\n    return this.connect();\n  }\n\n  sendInitializationHeader(callback) {\n    if (this.socket.readyState !== socketStates.OPEN) {\n      setTimeout(()=> {\n        this.sendInitializationHeader(callback)\n      }, 100)\n\n      return;\n    }\n\n    var transportHeader = B('eeeeeeee');\n\n    if (transportHeader.byteLength === 1){\n      transportHeader = repeatByte(transportHeader, 4);\n    }\n\n    var dcHeader = int16(this.dc);\n\n    var random;\n    while (true) {\n      random = concat(randomBytes(56), transportHeader, dcHeader, randomBytes(2));\n      if (S(random.slice(0, 1)) == 'ef')\n        continue;\n      if (['44414548', '54534f50', '20544547', '4954504f', 'dddddddd', 'eeeeeeee',\n        '9a974148', 'efefefef'].indexOf(S(random.slice(0, 4))) >= 0)\n        continue;\n      if (S(random.slice(4, 8)) == '00000000')\n        continue;\n      break;\n    }\n\n\n    var randomRev = reverse(random);\n\n    var encryptKey = random.slice(8, 40);\n    var encryptIV =  random.slice(40, 56);\n\n    var decryptKey = randomRev.slice(8, 40);\n    var decryptIV =  randomRev.slice(40, 56);\n\n    this.encryption = new aes_js__WEBPACK_IMPORTED_MODULE_2___default.a.ModeOfOperation.ctr(\n      new Uint8Array(encryptKey), new Uint8Array(encryptIV)\n    );\n    this.decryption = new aes_js__WEBPACK_IMPORTED_MODULE_2___default.a.ModeOfOperation.ctr(\n      new Uint8Array(decryptKey), new Uint8Array(decryptIV)\n    );\n\n    let e = this.encryption.encrypt(new Uint8Array(random)).slice(56, 56+8);\n\n    const header =  concat(random.slice(0, 56), e);\n\n    this.socket.send(header);\n\n    callback();\n  }\n\n  subscribeOnSystemMessages(){\n    this.on('new_session_created', (msg, msg_id) => {\n      // console.warn('this.serverSalt to update', this.auth.serverSalt);\n      // console.warn('should be updated with', );\n      this.app.state.update('auth',{\n        serverSalt: _utils_numbers__WEBPACK_IMPORTED_MODULE_4__[\"bytesFromArrayBuffer\"](msg.server_salt)\n      });\n      this.acks.add(msg_id);\n    })\n\n    this.on('rpc_result', (msg, msg_id) => {\n      this.rpcResult(msg, msg_id);\n    })\n\n    this.on('bad_server_salt', (msg, msg_id) => {\n      let newSalt = _utils_numbers__WEBPACK_IMPORTED_MODULE_4__[\"bytesFromArrayBuffer\"](msg.new_server_salt);\n      console.warn('🤢 bad_server_salt -> save the new one', msg, newSalt);\n      this.app.mtpAuth.auth.serverSalt = newSalt;\n      this.app.state.update('auth', {\n        serverSalt: newSalt\n      });\n\n      console.warn('☝️ Need to resend message with id:', msg_id, this.sent)\n      if (this.sent[msg_id]){\n        let {method, params, errorCallback} = this.sent[msg_id].args;\n\n        console.log('😏 Resending', method, params, errorCallback);\n        this.callMtp(method, params, errorCallback);\n      }\n    })\n\n    this.on('bad_msg_notification', (msg) => {\n      // console.warn('bad_msg_notification', msg);\n    })\n\n    this.on('msg_container', (msg, msg_id) => {\n      for (var i = 0; i < msg.messages.length; ++i){\n        this.onMessage(msg.messages[i].body, msg_id);\n      }\n    })\n  }\n\n  rpcResult(msg, msg_id){\n    const result = msg.result;\n    const reqMessId = S(msg.req_msg_id);\n    const messageWaitingForAnswer = this.pending[reqMessId];\n\n    if (!messageWaitingForAnswer) {\n      return;\n    }\n\n    var type = this.pending[reqMessId].type;\n    var predicate = result._;\n\n    if (result._ === 'rpc_error') {\n      this.acks.add(msg_id);\n      messageWaitingForAnswer.errorCallback(result);\n      delete this.pending[reqMessId];\n      return;\n    }\n\n    const constructor = _schema_api__WEBPACK_IMPORTED_MODULE_7__[\"default\"].constructors.find(i => i.type === type)\n\n\n    if (constructor && predicate !== constructor.predicate){\n      // console.log(`🤔 Wrong type received. Expected ${type} but got ${result._}`);\n    }\n\n    this.acks.add(msg_id);\n    messageWaitingForAnswer.callback(result);\n    delete this.pending[reqMessId];\n  }\n\n  ack () {\n    if (this.socket.readyState !== socketStates.OPEN) {\n      this.acks = new Set();\n      return;\n    }\n\n    if (this.acks.size > 0) {\n      let ids = Array.from(this.acks).map(id => _utils_numbers__WEBPACK_IMPORTED_MODULE_4__[\"bytesFromHex\"](id));\n\n      // console.warn('🤝 message acked', this.acks, ids);\n\n      // this.callMtp('msgs_ack', {\n      //   msg_ids: ids\n      // });\n\n      this.acks = new Set();\n    }\n  }\n\n  /**\n   * Envelope, obfuscate and send a message\n   */\n  send(message, isEncrypted){\n    if (this.socket.readyState >= socketStates.CLOSING) {\n      this.connect(() => {\n        this.send(message, isEncrypted)\n      });\n      return\n    } else if (this.socket.readyState === socketStates.CONNECTING){\n      this.sendingQueue.push({message, isEncrypted})\n      return;\n    }\n\n    message = this.envelope(message);\n    message = this.obfuscate(message);\n\n    this.socket.send(message);\n  }\n\n  callMtp(name, params, errorCallback){\n    const request = new _tl_serializer_mtp__WEBPACK_IMPORTED_MODULE_0__[\"default\"]()\n\n    request.packMethod(name, params)\n\n    /**\n     * Compose message\n     */\n    const body = request.bufferValue;\n    const mess_id = this.messageID();\n    const mess_len = body.byteLength;\n    const auth_ley_id = zeroBytes(8);\n\n    let unencrypted = concat(auth_ley_id, mess_id, int32(mess_len), body);\n\n\n    if (errorCallback){\n      this.requestErrorCallback = errorCallback;\n    }\n\n    const messIdStr = S(mess_id);\n\n    this.sent[messIdStr] = {\n      args: {\n        method: name,\n        params,\n        errorCallback\n      },\n      t: Date.now()\n    };\n\n    this.send(unencrypted, false)\n  }\n\n  callOtherLayer(layer, method, params){\n    this.layerInited = false;\n\n    return this.call(method, params, layer)\n  }\n\n  call(method, params, layer = 105){\n    const request = new _tl_serializer_api__WEBPACK_IMPORTED_MODULE_3__[\"default\"](undefined, layer)\n    const methodType = request.packMethod(method, params)\n    let messageBuf = request.bufferValue;\n\n    if (!this.sessionId){\n      this.sessionId = randomBytes(8);\n    }\n\n    /**\n     * Start composing message data\n     */\n    if (!this.layerInited || this.layerInited !== layer) {\n      const s = new _tl_serializer_api__WEBPACK_IMPORTED_MODULE_3__[\"default\"]();\n\n      s.storeInt(0xda9b0d0d, 'invokeWithLayer')\n      s.storeInt(layer, 'layer')\n      s.storeInt(0xc7481da6, 'initConnection')\n      s.storeInt(this.app.appId, 'api_id')\n      s.storeString(navigator.userAgent || 'Unknown UserAgent', 'device_model')\n      s.storeString(navigator.platform || 'Unknown Platform', 'system_version')\n      s.storeString(this.app.version, 'app_version')\n      s.storeString(navigator.language || 'en', 'system_lang_code')\n      s.storeString('', 'lang_pack')\n      s.storeString(navigator.language || 'en', 'lang_code');\n\n      messageBuf = concat(s.bufferValue, messageBuf);\n\n      console.log('🤸‍♀️ Layer ' + layer + ' initializing');\n\n      this.layerInited = layer;\n    }\n\n    const mess_id = this.messageID();\n    const seq_no = this.getSeqNo();\n    const salt = B(S(this.auth.serverSalt));\n\n    var data = concat(\n      salt,\n      this.sessionId,\n      mess_id,\n      seq_no,\n      int32(messageBuf.byteLength),\n      messageBuf\n    );\n\n    const paddingLength = (16 - (data.byteLength % 16)) + 16 * rand(1,50);\n    const padding = randomBytes(paddingLength);\n    const message = concat(data, padding);\n\n    const isOutgoing = true; // from client to server\n\n    return new Promise((resolve, reject) => {\n      this.getMsgKey(message, isOutgoing)\n        .then(msgKey => {\n          this.getAesKeyIv(msgKey, isOutgoing)\n            .then(({aesKey, aesIv}) => {\n              var encrypted_data = new Uint8Array(\n                bytesFromWords(\n                  _utils_crypto__WEBPACK_IMPORTED_MODULE_5__[\"default\"].AES.encrypt(\n                    bytesToWords(message),\n                    bytesToWords(aesKey),\n                    {\n                      iv: bytesToWords(aesIv),\n                      padding: _utils_crypto__WEBPACK_IMPORTED_MODULE_5__[\"default\"].pad.NoPadding,\n                      mode: _utils_crypto__WEBPACK_IMPORTED_MODULE_5__[\"default\"].mode.IGE\n                    }\n                  ).ciphertext\n                )\n              ).buffer;\n\n\n              const messIdStr = S(mess_id)\n              this.lastMsgId = messIdStr;\n\n              const encrypted = concat(_utils_numbers__WEBPACK_IMPORTED_MODULE_4__[\"bytesToArrayBuffer\"](this.auth.authKeyID), msgKey, encrypted_data);\n\n              this.send(encrypted, true);\n\n              this.pending[messIdStr] = {\n                type: methodType,\n                callback: resolve,\n                errorCallback: reject,\n                layer\n              };\n              this.sent[messIdStr] = {\n                args: {\n                  method,\n                  params,\n                  errorCallback: reject\n                },\n                t: Date.now()\n              };\n            });\n        })\n    })\n\n\n  }\n\n  getMsgKey(dataWithPadding, isOut) {\n    var authKey = new Uint8Array(this.auth.authKey)\n    var x = isOut ? 0 : 8\n    var msgKeyLargePlain = _utils_numbers__WEBPACK_IMPORTED_MODULE_4__[\"bufferConcat\"](authKey.subarray(88 + x, 88 + x + 32), dataWithPadding)\n\n    return sha256(msgKeyLargePlain)\n      .then((msgKeyLarge) => {\n        return new Uint8Array(msgKeyLarge).subarray(8, 24)\n      })\n  }\n\n  getAesKeyIv(msgKey, isOut) {\n    var authKey = new Uint8Array(this.auth.authKey)\n    var x = isOut ? 0 : 8\n    var sha2aText = new Uint8Array(52)\n    var sha2bText = new Uint8Array(52)\n\n    sha2aText.set(msgKey, 0)\n    sha2aText.set(authKey.subarray(x, x + 36), 16)\n\n    sha2bText.set(authKey.subarray(40 + x, 40 + x + 36), 0)\n    sha2bText.set(msgKey, 36)\n\n    return Promise.all([\n      sha256(sha2aText),\n      sha256(sha2bText)\n    ]).then(([sha2a, sha2b]) => {\n      var aesKey = new Uint8Array(32)\n      var aesIv = new Uint8Array(32)\n      sha2a = new Uint8Array(sha2a)\n      sha2b = new Uint8Array(sha2b)\n\n      aesKey.set(sha2a.subarray(0, 8))\n      aesKey.set(sha2b.subarray(8, 24), 8)\n      aesKey.set(sha2a.subarray(24, 32), 24)\n\n      aesIv.set(sha2b.subarray(0, 8))\n      aesIv.set(sha2a.subarray(8, 24), 8)\n      aesIv.set(sha2b.subarray(24, 32), 24)\n\n      return {aesKey, aesIv}\n    })\n  }\n\n  messageID() {\n    var t = now(),\n      ts = Math.floor(t / 1000) + this.timeOffset,\n      tms = t % 1000,\n      random = ~~(Math.random() * 0xFFFF);\n\n    var messageID = [ts, (tms << 21) | (random << 3) | 4];\n\n    this.lastMsgId = messageID;\n    return new Int32Array(messageID.reverse()).buffer\n  }\n\n  getNewMsgId() {\n    /**\n     * returns a random int from min (inclusive) and max (inclusive)\n     * @param min\n     * @param max\n     * @returns {number}\n     */\n    function getRandomInt(min, max) {\n      min = Math.ceil(min)\n      max = Math.floor(max)\n      return Math.floor(Math.random() * (max - min + 1)) + min\n    }\n\n    const msTime = new Date().getTime()\n    let newMessageId =\n      (big_integer__WEBPACK_IMPORTED_MODULE_6___default()(big_integer__WEBPACK_IMPORTED_MODULE_6___default()(Math.floor(msTime / 1000)) + this.timeOffset) << big_integer__WEBPACK_IMPORTED_MODULE_6___default()(32)) |\n      (big_integer__WEBPACK_IMPORTED_MODULE_6___default()(msTime % 1000) << big_integer__WEBPACK_IMPORTED_MODULE_6___default()(22)) |\n      (big_integer__WEBPACK_IMPORTED_MODULE_6___default()(getRandomInt(0, 524288)) << big_integer__WEBPACK_IMPORTED_MODULE_6___default()(2)) // 2^19\n\n    if (this.lastMsgId >= newMessageId) {\n      newMessageId = this.lastMsgId + big_integer__WEBPACK_IMPORTED_MODULE_6___default()(4)\n    }\n    this.lastMsgId = newMessageId\n    return newMessageId\n  }\n\n  getSeqNo(notContentRelated) {\n    if (this.seqNo == null){\n      this.seqNo = 0;\n    }\n\n    var seq_no = this.seqNo * 2;\n\n    if (!notContentRelated) {\n      seq_no++;\n      this.seqNo++;\n    }\n\n    return int32([seq_no]);\n  }\n\n  obfuscate(buffer) {\n    return this.encryption.encrypt(new Uint8Array(buffer)).buffer;\n  }\n\n  deobfuscate(buffer) {\n    return this.decryption.decrypt(new Uint8Array(buffer)).buffer;\n  }\n\n  envelope (payload) {\n    return concat(int32(payload.byteLength), payload); // intermediate\n  }\n\n  readMessages () {\n    while (this.buffer.byteLength > 4) {\n      var len = new Int32Array(this.buffer.slice(0, 4))[0];\n\n      if (len+4 <= this.buffer.byteLength) {\n        this.parseMessage(this.buffer.slice(4, 4+len));\n        this.buffer = this.buffer.slice(4+len);\n      } else\n        break;\n    }\n  }\n\n  parseMessage (msg) {\n    if (msg.byteLength === 4) {\n      var error = new Int32Array(msg)[0];\n\n      console.error('received error:', error);\n\n      if (error === -404 && this.auth.authKey === null && this.attempts < 2) {\n        this.attempts++;\n        this.connect();\n      } else if (error === -404 && this.auth.authKey !== null) {\n        this.auth.authKey = null;\n        if (this.sent[this.lastMsgId]) {\n          this.sendingQueue.push(this.sent[this.lastMsgId].args);\n          this.lastMsgId = null;\n        }\n        this.connect();\n      }\n      return;\n    }\n\n    this.requestErrorCallback = null;\n\n    if (!this.auth.authKey) {\n      var message_length = new Int32Array(msg.slice(16, 20))[0];\n      var message_data = msg.slice(20, 20 + message_length);\n\n      var TL = new _tl_deserializer_mtp__WEBPACK_IMPORTED_MODULE_1__[\"default\"](message_data);\n      var message = TL.fetchObject('Object');\n\n     this.onMessage(message);\n\n    } else {\n      var authKeyId = msg.slice(0, 8);\n      var msgKey = msg.slice(8, 24);\n      var encryptedData = msg.slice(24);\n\n      var x = 8;\n\n      Promise.all([\n        sha256(concat(msgKey, B(S(this.auth.authKey)).slice(x, x+36))),\n        sha256(concat(B(S(this.auth.authKey)).slice(40+x,76+x), msgKey))\n      ]).then(([sha256_a, sha256_b])=>{\n        var aes_key = concat(sha256_a.slice(0, 8), sha256_b.slice(8, 24), sha256_a.slice(24, 32));\n        var aes_iv =  concat(sha256_b.slice(0, 8), sha256_a.slice(8, 24), sha256_b.slice(24, 32));\n\n\n        var data = new Uint8Array(bytesFromWords(\n          _utils_crypto__WEBPACK_IMPORTED_MODULE_5__[\"default\"].AES.decrypt(\n            { ciphertext: bytesToWords(encryptedData) },\n            bytesToWords(aes_key),\n            {\n              iv: bytesToWords(aes_iv),\n              padding: _utils_crypto__WEBPACK_IMPORTED_MODULE_5__[\"default\"].pad.NoPadding,\n              mode: _utils_crypto__WEBPACK_IMPORTED_MODULE_5__[\"default\"].mode.IGE\n            }))).buffer;\n\n        var server_salt = data.slice(0, 8);\n        var session_id = data.slice(8, 16);\n        var message_id = data.slice(16, 24);\n        var msg_id = S(message_id);\n        var message_seqno = data.slice(24, 28);\n        var length = new Int32Array(data.slice(28, 32))[0];\n\n\n        var message_data = data.slice(32, 32 + length);\n\n        let serializer, message;\n\n        try {\n          serializer = new _tl_deserializer_mtp__WEBPACK_IMPORTED_MODULE_1__[\"default\"](message_data);\n          message = serializer.fetchObject('Object');\n\n          this.onMessage(message, msg_id);\n        } catch (e) {\n          console.log('whops', e);\n        }\n      })\n    }\n  }\n\n  onMessage (msg, msg_id) {\n    // console.log('💌', msg);\n\n    const subscriber = this.subscriptions.find(s => s.msg === msg._);\n\n    if (subscriber){\n      subscriber.handler(msg, msg_id);\n    }\n  }\n}\n\nfunction S(buffer, separator) {\n  return Array.from(new Uint8Array(buffer)).map(function (b) {\n    var s = b.toString(16);\n    return repeatString('0', 2 - s.length) + s;\n  }).join(separator || '');\n}\n\nfunction B(hex, n) {\n  var bytes = hex.match(/[0-9a-f]{2}/gi);\n  if (bytes == null)\n    return new ArrayBuffer();\n  if (typeof n !== 'number') n = bytes.length;\n  var arr = new Uint8Array(n);\n  for (var j = 0; j < (n - bytes.length); ++j)\n    arr[j] = 0;\n  for (var i = 0; i < bytes.length; ++i) {\n    arr[i + (n - bytes.length)] = parseInt(bytes[i], 16);\n  }\n  return arr.buffer;\n}\n\n\nfunction rand(from, to) {\n  return Math.round(Math.random() * (to - from)) + from;\n}\nfunction randomBytes(n) {\n  var b = new Uint8Array(n);\n  for (var i = 0; i < n; ++i) b[i] = rand(0, 255);\n  return b.buffer;\n}\nfunction int16(x) {\n  return new Int16Array([x]).buffer;\n}\n\nfunction repeatByte(byte, n) {\n  if (byte instanceof ArrayBuffer)\n    byte = new Uint8Array(byte);\n  var arr = new Uint8Array(n);\n  for (var i = 0; i < n; ++i)\n    arr[i] = byte;\n  return arr.buffer;\n}\n\nfunction reverse(buff) {\n  var a = new Uint8Array(buff),\n    b = new Uint8Array(buff.byteLength);\n  for (var i = 0; i < buff.byteLength; ++i)\n    b[buff.byteLength - 1 - i] = a[i];\n  return b.buffer;\n}\n\nfunction repeatString(str, n) {\n  if (str.repeat)\n    return str.repeat(n);\n  var string = \"\";\n  for (var i = 0; i < n; ++i)\n    string += str;\n  return string;\n}\n\nfunction concat() {\n  var buffers = Array.from(arguments), n = 0;\n  for (var i = 0; i < buffers.length; ++i)\n    n += buffers[i].byteLength;\n  var buff = new Uint8Array(n);\n  for (var i = 0, j = 0; i < buffers.length; ++i) {\n    buff.set(new Uint8Array(buffers[i]), j);\n    j += buffers[i].byteLength;\n  }\n  return buff.buffer;\n}\nfunction int32(x) {\n  return new Int32Array([x]).buffer;\n}\n\nfunction int8(x) {\n  return new Int8Array([x]).buffer;\n}\n\n/**\n * bin to hex\n * @param {ArrayBuffer} buffer\n * @param {string} delimiter\n * @return {string}\n */\nfunction b2h(buffer, delimiter = '') {\n  return Array.prototype.map.call(new Uint8Array(buffer), x => ('00' + x.toString(16)).slice(-2)).join(delimiter);\n}\nfunction zeroBytes(n) {\n  return new Uint8Array(n).buffer;\n}\nfunction now(sec) {\n  var t = +new Date() + (window.tsOffset || 0);\n  return sec ? Math.floor(t / 1000) : t;\n}\n\nfunction readAsArrayBuffer(ab, cb) {\n  if (ab instanceof ArrayBuffer) {\n    cb(ab);\n  } else if (ab instanceof Blob) {\n    readBlob(ab, cb);\n  } else {\n    console.warn('received unknown message type:', ab);\n  }\n}\n\nfunction readBlob(blob, cb) {\n  if (typeof blob.arrayBuffer === 'function') {\n    blob.arrayBuffer().then(cb);\n    return;\n  }\n\n  var reader = new FileReader();\n  reader.onloadend = function (evt) {\n    if (evt.target.readyState == FileReader.DONE) {\n      cb(evt.target.result);\n    }\n  }\n  reader.readAsArrayBuffer(blob);\n}\n\nfunction sha256(buffer){\n  return crypto.subtle.digest('SHA-256', buffer);\n}\n\nfunction bytesFromWords (wordArray) {\n  var words = wordArray.words\n  var sigBytes = wordArray.sigBytes\n  var bytes = []\n\n  for (var i = 0; i < sigBytes; i++) {\n    bytes.push((words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff)\n  }\n\n  return bytes\n}\n\nfunction bytesToWords (bytes) {\n  if (bytes instanceof ArrayBuffer) {\n    bytes = new Uint8Array(bytes)\n  }\n  var len = bytes.length\n  var words = []\n  var i\n  for (i = 0; i < len; i++) {\n    words[i >>> 2] |= bytes[i] << (24 - (i % 4) * 8)\n  }\n\n  return new _utils_crypto__WEBPACK_IMPORTED_MODULE_5__[\"default\"].lib.WordArray.init(words, len)\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/api/mtp-requests.js\n");

/***/ }),

/***/ "./src/api/rsa.js":
/*!************************!*\
  !*** ./src/api/rsa.js ***!
  \************************/
/*! exports provided: selectRsaKeyByFingerPrint */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"selectRsaKeyByFingerPrint\", function() { return selectRsaKeyByFingerPrint; });\n/* harmony import */ var _tl_serializer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tl-serializer */ \"./src/api/tl-serializer.js\");\n/* harmony import */ var _utils_numbers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./../utils/numbers */ \"./src/utils/numbers.js\");\n/* harmony import */ var _utils_bin_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./../utils/bin_utils */ \"./src/utils/bin_utils.js\");\n/* harmony import */ var _utils_sha1__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./../utils/sha1 */ \"./src/utils/sha1.js\");\n/* harmony import */ var _tl_serializer_mtp__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./tl-serializer-mtp */ \"./src/api/tl-serializer-mtp.js\");\n\n\n\n\n\n\n\nvar publicKeysParsed = {}\nvar prepared = false\n\nvar publisKeysHex = [\n  {\n    modulus: 'c150023e2f70db7985ded064759cfecf0af328e69a41daf4d6f01b538135a6f91f8f8b2a0ec9ba9720ce352efcf6c5680ffc424bd634864902de0b4bd6d49f4e580230e3ae97d95c8b19442b3c0a10d8f5633fecedd6926a7f6dab0ddb7d457f9ea81b8465fcd6fffeed114011df91c059caedaf97625f6c96ecc74725556934ef781d866b34f011fce4d835a090196e9a5f0e4449af7eb697ddb9076494ca5f81104a305b6dd27665722c46b60e5df680fb16b210607ef217652e60236c255f6a28315f4083a96791d7214bf64c1df4fd0db1944fb26a2a57031b32eee64ad15a8ba68885cde74a5bfc920f6abf59ba5c75506373e7130f9042da922179251f',\n    exponent: '010001'\n  },\n  {\n    modulus: 'aeec36c8ffc109cb099624685b97815415657bd76d8c9c3e398103d7ad16c9bba6f525ed0412d7ae2c2de2b44e77d72cbf4b7438709a4e646a05c43427c7f184debf72947519680e651500890c6832796dd11f772c25ff8f576755afe055b0a3752c696eb7d8da0d8be1faf38c9bdd97ce0a77d3916230c4032167100edd0f9e7a3a9b602d04367b689536af0d64b613ccba7962939d3b57682beb6dae5b608130b2e52aca78ba023cf6ce806b1dc49c72cf928a7199d22e3d7ac84e47bc9427d0236945d10dbd15177bab413fbf0edfda09f014c7a7da088dde9759702ca760af2b8e4e97cc055c617bd74c3d97008635b98dc4d621b4891da9fb0473047927',\n    exponent: '010001'\n  },\n  {\n    modulus: 'bdf2c77d81f6afd47bd30f29ac76e55adfe70e487e5e48297e5a9055c9c07d2b93b4ed3994d3eca5098bf18d978d54f8b7c713eb10247607e69af9ef44f38e28f8b439f257a11572945cc0406fe3f37bb92b79112db69eedf2dc71584a661638ea5becb9e23585074b80d57d9f5710dd30d2da940e0ada2f1b878397dc1a72b5ce2531b6f7dd158e09c828d03450ca0ff8a174deacebcaa22dde84ef66ad370f259d18af806638012da0ca4a70baa83d9c158f3552bc9158e69bf332a45809e1c36905a5caa12348dd57941a482131be7b2355a5f4635374f3bd3ddf5ff925bf4809ee27c1e67d9120c5fe08a9de458b1b4a3c5d0a428437f2beca81f4e2d5ff',\n    exponent: '010001'\n  },\n  {\n    modulus: 'b3f762b739be98f343eb1921cf0148cfa27ff7af02b6471213fed9daa0098976e667750324f1abcea4c31e43b7d11f1579133f2b3d9fe27474e462058884e5e1b123be9cbbc6a443b2925c08520e7325e6f1a6d50e117eb61ea49d2534c8bb4d2ae4153fabe832b9edf4c5755fdd8b19940b81d1d96cf433d19e6a22968a85dc80f0312f596bd2530c1cfb28b5fe019ac9bc25cd9c2a5d8a0f3a1c0c79bcca524d315b5e21b5c26b46babe3d75d06d1cd33329ec782a0f22891ed1db42a1d6c0dea431428bc4d7aabdcf3e0eb6fda4e23eb7733e7727e9a1915580796c55188d2596d2665ad1182ba7abf15aaa5a8b779ea996317a20ae044b820bff35b6e8a1',\n    exponent: '010001'\n  },\n  {\n    modulus: 'be6a71558ee577ff03023cfa17aab4e6c86383cff8a7ad38edb9fafe6f323f2d5106cbc8cafb83b869cffd1ccf121cd743d509e589e68765c96601e813dc5b9dfc4be415c7a6526132d0035ca33d6d6075d4f535122a1cdfe017041f1088d1419f65c8e5490ee613e16dbf662698c0f54870f0475fa893fc41eb55b08ff1ac211bc045ded31be27d12c96d8d3cfc6a7ae8aa50bf2ee0f30ed507cc2581e3dec56de94f5dc0a7abee0be990b893f2887bd2c6310a1e0a9e3e38bd34fded2541508dc102a9c9b4c95effd9dd2dfe96c29be647d6c69d66ca500843cfaed6e440196f1dbe0e2e22163c61ca48c79116fa77216726749a976a1c4b0944b5121e8c01',\n    exponent: '010001'\n  }\n]\n\n\nfunction prepareRsaKeys () {\n  if (prepared) {\n    return\n  }\n\n  for (var i = 0; i < publisKeysHex.length; i++) {\n    var keyParsed = publisKeysHex[i]\n\n    var RSAPublicKey = new _tl_serializer__WEBPACK_IMPORTED_MODULE_0__[\"default\"]()\n    RSAPublicKey.storeBytes(_utils_numbers__WEBPACK_IMPORTED_MODULE_1__[\"bytesFromHex\"](keyParsed.modulus), 'n')\n    RSAPublicKey.storeBytes(_utils_numbers__WEBPACK_IMPORTED_MODULE_1__[\"bytesFromHex\"](keyParsed.exponent), 'e')\n\n    var buffer = RSAPublicKey.bufferValue\n\n    var fingerprintBytes = Object(_utils_sha1__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(buffer).slice(-8);\n    fingerprintBytes.reverse();\n\n    publicKeysParsed[publicKeyFingerprint(keyParsed)] = {\n      modulus: keyParsed.modulus,\n      exponent: keyParsed.exponent\n    }\n  }\n\n  prepared = true\n}\n\nfunction selectRsaKeyByFingerPrint (fingerprints) {\n  prepareRsaKeys()\n  for (let i = 0; i < fingerprints.length; i++) {\n    let fingerprintHex = S(fingerprints[i])\n    // console.log('fingerprintHex', fingerprintHex);\n    // let fingerprintHex = numbers.bigIntFromString(fingerprints[i]).toString(16)\n\n    const keyFound = publicKeysParsed[fingerprintHex];\n\n    if (keyFound) {\n      return Object.assign({fingerprint: fingerprints[i]}, keyFound)\n    }\n  }\n\n  return false\n}\n\nfunction S(buffer, separator) {\n  return Array.from(new Uint8Array(buffer)).map(function (b) {\n    var s = b.toString(16);\n    return repeatString('0', 2 - s.length) + s;\n  }).join(separator || '');\n}\n\n\n\nfunction repeatString(str, n) {\n  if (str.repeat)\n    return str.repeat(n);\n  var string = \"\";\n  for (var i = 0; i < n; ++i)\n    string += str;\n  return string;\n}\n\nfunction publicKeyFingerprint(key) {\n  var o = new _tl_serializer_mtp__WEBPACK_IMPORTED_MODULE_4__[\"default\"]();\n  o.storeBytes(B(key.modulus), 'n');\n  o.storeBytes(B(key.exponent), 'e');\n  return S(Object(_utils_sha1__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(o.bufferValue).slice(-8));\n}\n\n\nfunction B(hex, n) {\n  var bytes = hex.match(/[0-9a-f]{2}/gi);\n  if (bytes == null)\n    return new ArrayBuffer();\n  if (typeof n !== 'number') n = bytes.length;\n  var arr = new Uint8Array(n);\n  for (var j = 0; j < (n - bytes.length); ++j)\n    arr[j] = 0;\n  for (var i = 0; i < bytes.length; ++i) {\n    arr[i + (n - bytes.length)] = parseInt(bytes[i], 16);\n  }\n  return arr.buffer;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvYXBpL3JzYS5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL1RlbGVncmFtanMvLi9zcmMvYXBpL3JzYS5qcz9iYjFiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBUTFNlcmlhbGl6ZXIgZnJvbSBcIi4vdGwtc2VyaWFsaXplclwiO1xuaW1wb3J0ICogYXMgbnVtYmVycyBmcm9tICcuLy4uL3V0aWxzL251bWJlcnMnO1xuaW1wb3J0ICogYXMgYmluIGZyb20gJy4vLi4vdXRpbHMvYmluX3V0aWxzJztcbmltcG9ydCBzaGExIGZyb20gJy4vLi4vdXRpbHMvc2hhMSc7XG5pbXBvcnQgVExNdHBTZXJpYWxpemVyIGZyb20gXCIuL3RsLXNlcmlhbGl6ZXItbXRwXCI7XG5cblxudmFyIHB1YmxpY0tleXNQYXJzZWQgPSB7fVxudmFyIHByZXBhcmVkID0gZmFsc2VcblxudmFyIHB1Ymxpc0tleXNIZXggPSBbXG4gIHtcbiAgICBtb2R1bHVzOiAnYzE1MDAyM2UyZjcwZGI3OTg1ZGVkMDY0NzU5Y2ZlY2YwYWYzMjhlNjlhNDFkYWY0ZDZmMDFiNTM4MTM1YTZmOTFmOGY4YjJhMGVjOWJhOTcyMGNlMzUyZWZjZjZjNTY4MGZmYzQyNGJkNjM0ODY0OTAyZGUwYjRiZDZkNDlmNGU1ODAyMzBlM2FlOTdkOTVjOGIxOTQ0MmIzYzBhMTBkOGY1NjMzZmVjZWRkNjkyNmE3ZjZkYWIwZGRiN2Q0NTdmOWVhODFiODQ2NWZjZDZmZmZlZWQxMTQwMTFkZjkxYzA1OWNhZWRhZjk3NjI1ZjZjOTZlY2M3NDcyNTU1NjkzNGVmNzgxZDg2NmIzNGYwMTFmY2U0ZDgzNWEwOTAxOTZlOWE1ZjBlNDQ0OWFmN2ViNjk3ZGRiOTA3NjQ5NGNhNWY4MTEwNGEzMDViNmRkMjc2NjU3MjJjNDZiNjBlNWRmNjgwZmIxNmIyMTA2MDdlZjIxNzY1MmU2MDIzNmMyNTVmNmEyODMxNWY0MDgzYTk2NzkxZDcyMTRiZjY0YzFkZjRmZDBkYjE5NDRmYjI2YTJhNTcwMzFiMzJlZWU2NGFkMTVhOGJhNjg4ODVjZGU3NGE1YmZjOTIwZjZhYmY1OWJhNWM3NTUwNjM3M2U3MTMwZjkwNDJkYTkyMjE3OTI1MWYnLFxuICAgIGV4cG9uZW50OiAnMDEwMDAxJ1xuICB9LFxuICB7XG4gICAgbW9kdWx1czogJ2FlZWMzNmM4ZmZjMTA5Y2IwOTk2MjQ2ODViOTc4MTU0MTU2NTdiZDc2ZDhjOWMzZTM5ODEwM2Q3YWQxNmM5YmJhNmY1MjVlZDA0MTJkN2FlMmMyZGUyYjQ0ZTc3ZDcyY2JmNGI3NDM4NzA5YTRlNjQ2YTA1YzQzNDI3YzdmMTg0ZGViZjcyOTQ3NTE5NjgwZTY1MTUwMDg5MGM2ODMyNzk2ZGQxMWY3NzJjMjVmZjhmNTc2NzU1YWZlMDU1YjBhMzc1MmM2OTZlYjdkOGRhMGQ4YmUxZmFmMzhjOWJkZDk3Y2UwYTc3ZDM5MTYyMzBjNDAzMjE2NzEwMGVkZDBmOWU3YTNhOWI2MDJkMDQzNjdiNjg5NTM2YWYwZDY0YjYxM2NjYmE3OTYyOTM5ZDNiNTc2ODJiZWI2ZGFlNWI2MDgxMzBiMmU1MmFjYTc4YmEwMjNjZjZjZTgwNmIxZGM0OWM3MmNmOTI4YTcxOTlkMjJlM2Q3YWM4NGU0N2JjOTQyN2QwMjM2OTQ1ZDEwZGJkMTUxNzdiYWI0MTNmYmYwZWRmZGEwOWYwMTRjN2E3ZGEwODhkZGU5NzU5NzAyY2E3NjBhZjJiOGU0ZTk3Y2MwNTVjNjE3YmQ3NGMzZDk3MDA4NjM1Yjk4ZGM0ZDYyMWI0ODkxZGE5ZmIwNDczMDQ3OTI3JyxcbiAgICBleHBvbmVudDogJzAxMDAwMSdcbiAgfSxcbiAge1xuICAgIG1vZHVsdXM6ICdiZGYyYzc3ZDgxZjZhZmQ0N2JkMzBmMjlhYzc2ZTU1YWRmZTcwZTQ4N2U1ZTQ4Mjk3ZTVhOTA1NWM5YzA3ZDJiOTNiNGVkMzk5NGQzZWNhNTA5OGJmMThkOTc4ZDU0ZjhiN2M3MTNlYjEwMjQ3NjA3ZTY5YWY5ZWY0NGYzOGUyOGY4YjQzOWYyNTdhMTE1NzI5NDVjYzA0MDZmZTNmMzdiYjkyYjc5MTEyZGI2OWVlZGYyZGM3MTU4NGE2NjE2MzhlYTViZWNiOWUyMzU4NTA3NGI4MGQ1N2Q5ZjU3MTBkZDMwZDJkYTk0MGUwYWRhMmYxYjg3ODM5N2RjMWE3MmI1Y2UyNTMxYjZmN2RkMTU4ZTA5YzgyOGQwMzQ1MGNhMGZmOGExNzRkZWFjZWJjYWEyMmRkZTg0ZWY2NmFkMzcwZjI1OWQxOGFmODA2NjM4MDEyZGEwY2E0YTcwYmFhODNkOWMxNThmMzU1MmJjOTE1OGU2OWJmMzMyYTQ1ODA5ZTFjMzY5MDVhNWNhYTEyMzQ4ZGQ1Nzk0MWE0ODIxMzFiZTdiMjM1NWE1ZjQ2MzUzNzRmM2JkM2RkZjVmZjkyNWJmNDgwOWVlMjdjMWU2N2Q5MTIwYzVmZTA4YTlkZTQ1OGIxYjRhM2M1ZDBhNDI4NDM3ZjJiZWNhODFmNGUyZDVmZicsXG4gICAgZXhwb25lbnQ6ICcwMTAwMDEnXG4gIH0sXG4gIHtcbiAgICBtb2R1bHVzOiAnYjNmNzYyYjczOWJlOThmMzQzZWIxOTIxY2YwMTQ4Y2ZhMjdmZjdhZjAyYjY0NzEyMTNmZWQ5ZGFhMDA5ODk3NmU2Njc3NTAzMjRmMWFiY2VhNGMzMWU0M2I3ZDExZjE1NzkxMzNmMmIzZDlmZTI3NDc0ZTQ2MjA1ODg4NGU1ZTFiMTIzYmU5Y2JiYzZhNDQzYjI5MjVjMDg1MjBlNzMyNWU2ZjFhNmQ1MGUxMTdlYjYxZWE0OWQyNTM0YzhiYjRkMmFlNDE1M2ZhYmU4MzJiOWVkZjRjNTc1NWZkZDhiMTk5NDBiODFkMWQ5NmNmNDMzZDE5ZTZhMjI5NjhhODVkYzgwZjAzMTJmNTk2YmQyNTMwYzFjZmIyOGI1ZmUwMTlhYzliYzI1Y2Q5YzJhNWQ4YTBmM2ExYzBjNzliY2NhNTI0ZDMxNWI1ZTIxYjVjMjZiNDZiYWJlM2Q3NWQwNmQxY2QzMzMyOWVjNzgyYTBmMjI4OTFlZDFkYjQyYTFkNmMwZGVhNDMxNDI4YmM0ZDdhYWJkY2YzZTBlYjZmZGE0ZTIzZWI3NzMzZTc3MjdlOWExOTE1NTgwNzk2YzU1MTg4ZDI1OTZkMjY2NWFkMTE4MmJhN2FiZjE1YWFhNWE4Yjc3OWVhOTk2MzE3YTIwYWUwNDRiODIwYmZmMzViNmU4YTEnLFxuICAgIGV4cG9uZW50OiAnMDEwMDAxJ1xuICB9LFxuICB7XG4gICAgbW9kdWx1czogJ2JlNmE3MTU1OGVlNTc3ZmYwMzAyM2NmYTE3YWFiNGU2Yzg2MzgzY2ZmOGE3YWQzOGVkYjlmYWZlNmYzMjNmMmQ1MTA2Y2JjOGNhZmI4M2I4NjljZmZkMWNjZjEyMWNkNzQzZDUwOWU1ODllNjg3NjVjOTY2MDFlODEzZGM1YjlkZmM0YmU0MTVjN2E2NTI2MTMyZDAwMzVjYTMzZDZkNjA3NWQ0ZjUzNTEyMmExY2RmZTAxNzA0MWYxMDg4ZDE0MTlmNjVjOGU1NDkwZWU2MTNlMTZkYmY2NjI2OThjMGY1NDg3MGYwNDc1ZmE4OTNmYzQxZWI1NWIwOGZmMWFjMjExYmMwNDVkZWQzMWJlMjdkMTJjOTZkOGQzY2ZjNmE3YWU4YWE1MGJmMmVlMGYzMGVkNTA3Y2MyNTgxZTNkZWM1NmRlOTRmNWRjMGE3YWJlZTBiZTk5MGI4OTNmMjg4N2JkMmM2MzEwYTFlMGE5ZTNlMzhiZDM0ZmRlZDI1NDE1MDhkYzEwMmE5YzliNGM5NWVmZmQ5ZGQyZGZlOTZjMjliZTY0N2Q2YzY5ZDY2Y2E1MDA4NDNjZmFlZDZlNDQwMTk2ZjFkYmUwZTJlMjIxNjNjNjFjYTQ4Yzc5MTE2ZmE3NzIxNjcyNjc0OWE5NzZhMWM0YjA5NDRiNTEyMWU4YzAxJyxcbiAgICBleHBvbmVudDogJzAxMDAwMSdcbiAgfVxuXVxuXG5cbmZ1bmN0aW9uIHByZXBhcmVSc2FLZXlzICgpIHtcbiAgaWYgKHByZXBhcmVkKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHB1Ymxpc0tleXNIZXgubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIga2V5UGFyc2VkID0gcHVibGlzS2V5c0hleFtpXVxuXG4gICAgdmFyIFJTQVB1YmxpY0tleSA9IG5ldyBUTFNlcmlhbGl6ZXIoKVxuICAgIFJTQVB1YmxpY0tleS5zdG9yZUJ5dGVzKG51bWJlcnMuYnl0ZXNGcm9tSGV4KGtleVBhcnNlZC5tb2R1bHVzKSwgJ24nKVxuICAgIFJTQVB1YmxpY0tleS5zdG9yZUJ5dGVzKG51bWJlcnMuYnl0ZXNGcm9tSGV4KGtleVBhcnNlZC5leHBvbmVudCksICdlJylcblxuICAgIHZhciBidWZmZXIgPSBSU0FQdWJsaWNLZXkuYnVmZmVyVmFsdWVcblxuICAgIHZhciBmaW5nZXJwcmludEJ5dGVzID0gc2hhMShidWZmZXIpLnNsaWNlKC04KTtcbiAgICBmaW5nZXJwcmludEJ5dGVzLnJldmVyc2UoKTtcblxuICAgIHB1YmxpY0tleXNQYXJzZWRbcHVibGljS2V5RmluZ2VycHJpbnQoa2V5UGFyc2VkKV0gPSB7XG4gICAgICBtb2R1bHVzOiBrZXlQYXJzZWQubW9kdWx1cyxcbiAgICAgIGV4cG9uZW50OiBrZXlQYXJzZWQuZXhwb25lbnRcbiAgICB9XG4gIH1cblxuICBwcmVwYXJlZCA9IHRydWVcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNlbGVjdFJzYUtleUJ5RmluZ2VyUHJpbnQgKGZpbmdlcnByaW50cykge1xuICBwcmVwYXJlUnNhS2V5cygpXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgZmluZ2VycHJpbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgbGV0IGZpbmdlcnByaW50SGV4ID0gUyhmaW5nZXJwcmludHNbaV0pXG4gICAgLy8gY29uc29sZS5sb2coJ2ZpbmdlcnByaW50SGV4JywgZmluZ2VycHJpbnRIZXgpO1xuICAgIC8vIGxldCBmaW5nZXJwcmludEhleCA9IG51bWJlcnMuYmlnSW50RnJvbVN0cmluZyhmaW5nZXJwcmludHNbaV0pLnRvU3RyaW5nKDE2KVxuXG4gICAgY29uc3Qga2V5Rm91bmQgPSBwdWJsaWNLZXlzUGFyc2VkW2ZpbmdlcnByaW50SGV4XTtcblxuICAgIGlmIChrZXlGb3VuZCkge1xuICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe2ZpbmdlcnByaW50OiBmaW5nZXJwcmludHNbaV19LCBrZXlGb3VuZClcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2Vcbn1cblxuZnVuY3Rpb24gUyhidWZmZXIsIHNlcGFyYXRvcikge1xuICByZXR1cm4gQXJyYXkuZnJvbShuZXcgVWludDhBcnJheShidWZmZXIpKS5tYXAoZnVuY3Rpb24gKGIpIHtcbiAgICB2YXIgcyA9IGIudG9TdHJpbmcoMTYpO1xuICAgIHJldHVybiByZXBlYXRTdHJpbmcoJzAnLCAyIC0gcy5sZW5ndGgpICsgcztcbiAgfSkuam9pbihzZXBhcmF0b3IgfHwgJycpO1xufVxuXG5cblxuZnVuY3Rpb24gcmVwZWF0U3RyaW5nKHN0ciwgbikge1xuICBpZiAoc3RyLnJlcGVhdClcbiAgICByZXR1cm4gc3RyLnJlcGVhdChuKTtcbiAgdmFyIHN0cmluZyA9IFwiXCI7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbjsgKytpKVxuICAgIHN0cmluZyArPSBzdHI7XG4gIHJldHVybiBzdHJpbmc7XG59XG5cbmZ1bmN0aW9uIHB1YmxpY0tleUZpbmdlcnByaW50KGtleSkge1xuICB2YXIgbyA9IG5ldyBUTE10cFNlcmlhbGl6ZXIoKTtcbiAgby5zdG9yZUJ5dGVzKEIoa2V5Lm1vZHVsdXMpLCAnbicpO1xuICBvLnN0b3JlQnl0ZXMoQihrZXkuZXhwb25lbnQpLCAnZScpO1xuICByZXR1cm4gUyhzaGExKG8uYnVmZmVyVmFsdWUpLnNsaWNlKC04KSk7XG59XG5cblxuZnVuY3Rpb24gQihoZXgsIG4pIHtcbiAgdmFyIGJ5dGVzID0gaGV4Lm1hdGNoKC9bMC05YS1mXXsyfS9naSk7XG4gIGlmIChieXRlcyA9PSBudWxsKVxuICAgIHJldHVybiBuZXcgQXJyYXlCdWZmZXIoKTtcbiAgaWYgKHR5cGVvZiBuICE9PSAnbnVtYmVyJykgbiA9IGJ5dGVzLmxlbmd0aDtcbiAgdmFyIGFyciA9IG5ldyBVaW50OEFycmF5KG4pO1xuICBmb3IgKHZhciBqID0gMDsgaiA8IChuIC0gYnl0ZXMubGVuZ3RoKTsgKytqKVxuICAgIGFycltqXSA9IDA7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYnl0ZXMubGVuZ3RoOyArK2kpIHtcbiAgICBhcnJbaSArIChuIC0gYnl0ZXMubGVuZ3RoKV0gPSBwYXJzZUludChieXRlc1tpXSwgMTYpO1xuICB9XG4gIHJldHVybiBhcnIuYnVmZmVyO1xufVxuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/api/rsa.js\n");

/***/ }),

/***/ "./src/api/schema-api.js":
/*!*******************************!*\
  !*** ./src/api/schema-api.js ***!
  \*******************************/
/*! exports provided: default, layer74 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"layer74\", function() { return layer74; });\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  \"constructors\": [\n    {\"id\": \"-1132882121\", \"predicate\": \"boolFalse\", \"params\": [], \"type\": \"Bool\"}, {\n    \"id\": \"-1720552011\",\n    \"predicate\": \"boolTrue\",\n    \"params\": [],\n    \"type\": \"Bool\"\n  }, {\"id\": \"1072550713\", \"predicate\": \"true\", \"params\": [], \"type\": \"True\"}, {\n    \"id\": \"481674261\",\n    \"predicate\": \"vector\",\n    \"params\": [],\n    \"type\": \"Vector t\"\n  }, {\n    \"id\": \"-994444869\",\n    \"predicate\": \"error\",\n    \"params\": [{\"name\": \"code\", \"type\": \"int\"}, {\"name\": \"text\", \"type\": \"string\"}],\n    \"type\": \"Error\"\n  },\n\n    {\"id\": \"1450380236\", \"predicate\": \"null\", \"params\": [], \"type\": \"Null\"},\n    {\n    \"id\": \"2134579434\",\n    \"predicate\": \"inputPeerEmpty\",\n    \"params\": [],\n    \"type\": \"InputPeer\"\n    },\n\n    {\"id\": \"2107670217\", \"predicate\": \"inputPeerSelf\", \"params\": [], \"type\": \"InputPeer\"}, {\n    \"id\": \"396093539\",\n    \"predicate\": \"inputPeerChat\",\n    \"params\": [{\"name\": \"chat_id\", \"type\": \"int\"}],\n    \"type\": \"InputPeer\"\n  }, {\"id\": \"-1182234929\", \"predicate\": \"inputUserEmpty\", \"params\": [], \"type\": \"InputUser\"}, {\n    \"id\": \"-138301121\",\n    \"predicate\": \"inputUserSelf\",\n    \"params\": [],\n    \"type\": \"InputUser\"\n  }, {\n    \"id\": \"-208488460\",\n    \"predicate\": \"inputPhoneContact\",\n    \"params\": [{\"name\": \"client_id\", \"type\": \"long\"}, {\"name\": \"phone\", \"type\": \"string\"}, {\n      \"name\": \"first_name\",\n      \"type\": \"string\"\n    }, {\"name\": \"last_name\", \"type\": \"string\"}],\n    \"type\": \"InputContact\"\n  }, {\n    \"id\": \"-181407105\",\n    \"predicate\": \"inputFile\",\n    \"params\": [{\"name\": \"id\", \"type\": \"long\"}, {\"name\": \"parts\", \"type\": \"int\"}, {\n      \"name\": \"name\",\n      \"type\": \"string\"\n    }, {\"name\": \"md5_checksum\", \"type\": \"string\"}],\n    \"type\": \"InputFile\"\n  }, {\"id\": \"-1771768449\", \"predicate\": \"inputMediaEmpty\", \"params\": [], \"type\": \"InputMedia\"}, {\n    \"id\": \"505969924\",\n    \"predicate\": \"inputMediaUploadedPhoto\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"file\", \"type\": \"InputFile\"}, {\n      \"name\": \"stickers\",\n      \"type\": \"flags.0?Vector<InputDocument>\"\n    }, {\"name\": \"ttl_seconds\", \"type\": \"flags.1?int\"}],\n    \"type\": \"InputMedia\"\n  }, {\n    \"id\": \"-1279654347\",\n    \"predicate\": \"inputMediaPhoto\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"id\", \"type\": \"InputPhoto\"}, {\n      \"name\": \"ttl_seconds\",\n      \"type\": \"flags.0?int\"\n    }],\n    \"type\": \"InputMedia\"\n  }, {\n    \"id\": \"-104578748\",\n    \"predicate\": \"inputMediaGeoPoint\",\n    \"params\": [{\"name\": \"geo_point\", \"type\": \"InputGeoPoint\"}],\n    \"type\": \"InputMedia\"\n  }, {\n    \"id\": \"-122978821\",\n    \"predicate\": \"inputMediaContact\",\n    \"params\": [{\"name\": \"phone_number\", \"type\": \"string\"}, {\n      \"name\": \"first_name\",\n      \"type\": \"string\"\n    }, {\"name\": \"last_name\", \"type\": \"string\"}, {\"name\": \"vcard\", \"type\": \"string\"}],\n    \"type\": \"InputMedia\"\n  }, {\n    \"id\": \"480546647\",\n    \"predicate\": \"inputChatPhotoEmpty\",\n    \"params\": [],\n    \"type\": \"InputChatPhoto\"\n  }, {\n    \"id\": \"-1837345356\",\n    \"predicate\": \"inputChatUploadedPhoto\",\n    \"params\": [{\"name\": \"file\", \"type\": \"InputFile\"}],\n    \"type\": \"InputChatPhoto\"\n  }, {\n    \"id\": \"-1991004873\",\n    \"predicate\": \"inputChatPhoto\",\n    \"params\": [{\"name\": \"id\", \"type\": \"InputPhoto\"}],\n    \"type\": \"InputChatPhoto\"\n  }, {\n    \"id\": \"-457104426\",\n    \"predicate\": \"inputGeoPointEmpty\",\n    \"params\": [],\n    \"type\": \"InputGeoPoint\"\n  }, {\n    \"id\": \"-206066487\",\n    \"predicate\": \"inputGeoPoint\",\n    \"params\": [{\"name\": \"lat\", \"type\": \"double\"}, {\"name\": \"long\", \"type\": \"double\"}],\n    \"type\": \"InputGeoPoint\"\n  }, {\"id\": \"483901197\", \"predicate\": \"inputPhotoEmpty\", \"params\": [], \"type\": \"InputPhoto\"}, {\n    \"id\": \"1001634122\",\n    \"predicate\": \"inputPhoto\",\n    \"params\": [{\"name\": \"id\", \"type\": \"long\"}, {\"name\": \"access_hash\", \"type\": \"long\"}, {\n      \"name\": \"file_reference\",\n      \"type\": \"bytes\"\n    }],\n    \"type\": \"InputPhoto\"\n  }, {\n    \"id\": \"-539317279\",\n    \"predicate\": \"inputFileLocation\",\n    \"params\": [{\"name\": \"volume_id\", \"type\": \"long\"}, {\"name\": \"local_id\", \"type\": \"int\"}, {\n      \"name\": \"secret\",\n      \"type\": \"long\"\n    }, {\"name\": \"file_reference\", \"type\": \"bytes\"}],\n    \"type\": \"InputFileLocation\"\n  }, {\n    \"id\": \"-1649296275\",\n    \"predicate\": \"peerUser\",\n    \"params\": [{\"name\": \"user_id\", \"type\": \"int\"}],\n    \"type\": \"Peer\"\n  }, {\n    \"id\": \"-1160714821\",\n    \"predicate\": \"peerChat\",\n    \"params\": [{\"name\": \"chat_id\", \"type\": \"int\"}],\n    \"type\": \"Peer\"\n  }, {\n    \"id\": \"-1432995067\",\n    \"predicate\": \"storage.fileUnknown\",\n    \"params\": [],\n    \"type\": \"storage.FileType\"\n  }, {\n    \"id\": \"1086091090\",\n    \"predicate\": \"storage.filePartial\",\n    \"params\": [],\n    \"type\": \"storage.FileType\"\n  }, {\"id\": \"8322574\", \"predicate\": \"storage.fileJpeg\", \"params\": [], \"type\": \"storage.FileType\"}, {\n    \"id\": \"-891180321\",\n    \"predicate\": \"storage.fileGif\",\n    \"params\": [],\n    \"type\": \"storage.FileType\"\n  }, {\n    \"id\": \"172975040\",\n    \"predicate\": \"storage.filePng\",\n    \"params\": [],\n    \"type\": \"storage.FileType\"\n  }, {\n    \"id\": \"-1373745011\",\n    \"predicate\": \"storage.filePdf\",\n    \"params\": [],\n    \"type\": \"storage.FileType\"\n  }, {\n    \"id\": \"1384777335\",\n    \"predicate\": \"storage.fileMp3\",\n    \"params\": [],\n    \"type\": \"storage.FileType\"\n  }, {\n    \"id\": \"1258941372\",\n    \"predicate\": \"storage.fileMov\",\n    \"params\": [],\n    \"type\": \"storage.FileType\"\n  }, {\n    \"id\": \"-1278304028\",\n    \"predicate\": \"storage.fileMp4\",\n    \"params\": [],\n    \"type\": \"storage.FileType\"\n  }, {\"id\": \"276907596\", \"predicate\": \"storage.fileWebp\", \"params\": [], \"type\": \"storage.FileType\"}, {\n    \"id\": \"537022650\",\n    \"predicate\": \"userEmpty\",\n    \"params\": [{\"name\": \"id\", \"type\": \"int\"}],\n    \"type\": \"User\"\n  }, {\n    \"id\": \"1326562017\",\n    \"predicate\": \"userProfilePhotoEmpty\",\n    \"params\": [],\n    \"type\": \"UserProfilePhoto\"\n  }, {\n    \"id\": \"-321430132\",\n    \"predicate\": \"userProfilePhoto\",\n    \"params\": [{\"name\": \"photo_id\", \"type\": \"long\"}, {\n      \"name\": \"photo_small\",\n      \"type\": \"FileLocation\"\n    }, {\"name\": \"photo_big\", \"type\": \"FileLocation\"}, {\"name\": \"dc_id\", \"type\": \"int\"}],\n    \"type\": \"UserProfilePhoto\"\n  },\n\n    {\"id\": \"164646985\", \"predicate\": \"userStatusEmpty\", \"params\": [], \"type\": \"UserStatus\"},\n\n    {\n    \"id\": \"-306628279\",\n    \"predicate\": \"userStatusOnline\",\n    \"params\": [{\"name\": \"expires\", \"type\": \"int\"}],\n    \"type\": \"UserStatus\"\n  }, {\n    \"id\": \"9203775\",\n    \"predicate\": \"userStatusOffline\",\n    \"params\": [{\"name\": \"was_online\", \"type\": \"int\"}],\n    \"type\": \"UserStatus\"\n  }, {\n    \"id\": \"-1683826688\",\n    \"predicate\": \"chatEmpty\",\n    \"params\": [{\"name\": \"id\", \"type\": \"int\"}],\n    \"type\": \"Chat\"\n  }, {\n    \"id\": \"1004149726\",\n    \"predicate\": \"chat\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"creator\", \"type\": \"flags.0?true\"}, {\n      \"name\": \"kicked\",\n      \"type\": \"flags.1?true\"\n    }, {\"name\": \"left\", \"type\": \"flags.2?true\"}, {\"name\": \"deactivated\", \"type\": \"flags.5?true\"}, {\n      \"name\": \"id\",\n      \"type\": \"int\"\n    }, {\"name\": \"title\", \"type\": \"string\"}, {\"name\": \"photo\", \"type\": \"ChatPhoto\"}, {\n      \"name\": \"participants_count\",\n      \"type\": \"int\"\n    }, {\"name\": \"date\", \"type\": \"int\"}, {\"name\": \"version\", \"type\": \"int\"}, {\n      \"name\": \"migrated_to\",\n      \"type\": \"flags.6?InputChannel\"\n    }, {\"name\": \"admin_rights\", \"type\": \"flags.14?ChatAdminRights\"}, {\n      \"name\": \"default_banned_rights\",\n      \"type\": \"flags.18?ChatBannedRights\"\n    }],\n    \"type\": \"Chat\"\n  }, {\n    \"id\": \"120753115\",\n    \"predicate\": \"chatForbidden\",\n    \"params\": [{\"name\": \"id\", \"type\": \"int\"}, {\"name\": \"title\", \"type\": \"string\"}],\n    \"type\": \"Chat\"\n  }, {\n    \"id\": \"461151667\",\n    \"predicate\": \"chatFull\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\n      \"name\": \"can_set_username\",\n      \"type\": \"flags.7?true\"\n    }, {\"name\": \"has_scheduled\", \"type\": \"flags.8?true\"}, {\"name\": \"id\", \"type\": \"int\"}, {\n      \"name\": \"about\",\n      \"type\": \"string\"\n    }, {\"name\": \"participants\", \"type\": \"ChatParticipants\"}, {\n      \"name\": \"chat_photo\",\n      \"type\": \"flags.2?Photo\"\n    }, {\"name\": \"notify_settings\", \"type\": \"PeerNotifySettings\"}, {\n      \"name\": \"exported_invite\",\n      \"type\": \"ExportedChatInvite\"\n    }, {\"name\": \"bot_info\", \"type\": \"flags.3?Vector<BotInfo>\"}, {\n      \"name\": \"pinned_msg_id\",\n      \"type\": \"flags.6?int\"\n    }, {\"name\": \"folder_id\", \"type\": \"flags.11?int\"}],\n    \"type\": \"ChatFull\"\n  }, {\n    \"id\": \"-925415106\",\n    \"predicate\": \"chatParticipant\",\n    \"params\": [{\"name\": \"user_id\", \"type\": \"int\"}, {\"name\": \"inviter_id\", \"type\": \"int\"}, {\n      \"name\": \"date\",\n      \"type\": \"int\"\n    }],\n    \"type\": \"ChatParticipant\"\n  }, {\n    \"id\": \"-57668565\",\n    \"predicate\": \"chatParticipantsForbidden\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"chat_id\", \"type\": \"int\"}, {\n      \"name\": \"self_participant\",\n      \"type\": \"flags.0?ChatParticipant\"\n    }],\n    \"type\": \"ChatParticipants\"\n  }, {\n    \"id\": \"1061556205\",\n    \"predicate\": \"chatParticipants\",\n    \"params\": [{\"name\": \"chat_id\", \"type\": \"int\"}, {\n      \"name\": \"participants\",\n      \"type\": \"Vector<ChatParticipant>\"\n    }, {\"name\": \"version\", \"type\": \"int\"}],\n    \"type\": \"ChatParticipants\"\n  }, {\"id\": \"935395612\", \"predicate\": \"chatPhotoEmpty\", \"params\": [], \"type\": \"ChatPhoto\"}, {\n    \"id\": \"1197267925\",\n    \"predicate\": \"chatPhoto\",\n    \"params\": [{\"name\": \"photo_small\", \"type\": \"FileLocation\"}, {\n      \"name\": \"photo_big\",\n      \"type\": \"FileLocation\"\n    }, {\"name\": \"dc_id\", \"type\": \"int\"}],\n    \"type\": \"ChatPhoto\"\n  }, {\"id\": \"-2082087340\", \"predicate\": \"messageEmpty\", \"params\": [{\"name\": \"id\", \"type\": \"int\"}], \"type\": \"Message\"}, {\n    \"id\": \"1160515173\",\n    \"predicate\": \"message\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"out\", \"type\": \"flags.1?true\"}, {\n      \"name\": \"mentioned\",\n      \"type\": \"flags.4?true\"\n    }, {\"name\": \"media_unread\", \"type\": \"flags.5?true\"}, {\"name\": \"silent\", \"type\": \"flags.13?true\"}, {\n      \"name\": \"post\",\n      \"type\": \"flags.14?true\"\n    }, {\"name\": \"from_scheduled\", \"type\": \"flags.18?true\"}, {\n      \"name\": \"legacy\",\n      \"type\": \"flags.19?true\"\n    }, {\"name\": \"edit_hide\", \"type\": \"flags.21?true\"}, {\"name\": \"id\", \"type\": \"int\"}, {\n      \"name\": \"from_id\",\n      \"type\": \"flags.8?int\"\n    }, {\"name\": \"to_id\", \"type\": \"Peer\"}, {\n      \"name\": \"fwd_from\",\n      \"type\": \"flags.2?MessageFwdHeader\"\n    }, {\"name\": \"via_bot_id\", \"type\": \"flags.11?int\"}, {\n      \"name\": \"reply_to_msg_id\",\n      \"type\": \"flags.3?int\"\n    }, {\"name\": \"date\", \"type\": \"int\"}, {\"name\": \"message\", \"type\": \"string\"}, {\n      \"name\": \"media\",\n      \"type\": \"flags.9?MessageMedia\"\n    }, {\"name\": \"reply_markup\", \"type\": \"flags.6?ReplyMarkup\"}, {\n      \"name\": \"entities\",\n      \"type\": \"flags.7?Vector<MessageEntity>\"\n    }, {\"name\": \"views\", \"type\": \"flags.10?int\"}, {\"name\": \"edit_date\", \"type\": \"flags.15?int\"}, {\n      \"name\": \"post_author\",\n      \"type\": \"flags.16?string\"\n    }, {\"name\": \"grouped_id\", \"type\": \"flags.17?long\"}, {\n      \"name\": \"restriction_reason\",\n      \"type\": \"flags.22?Vector<RestrictionReason>\"\n    }],\n    \"type\": \"Message\"\n  }, {\n    \"id\": \"-1642487306\",\n    \"predicate\": \"messageService\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"out\", \"type\": \"flags.1?true\"}, {\n      \"name\": \"mentioned\",\n      \"type\": \"flags.4?true\"\n    }, {\"name\": \"media_unread\", \"type\": \"flags.5?true\"}, {\"name\": \"silent\", \"type\": \"flags.13?true\"}, {\n      \"name\": \"post\",\n      \"type\": \"flags.14?true\"\n    }, {\"name\": \"legacy\", \"type\": \"flags.19?true\"}, {\"name\": \"id\", \"type\": \"int\"}, {\n      \"name\": \"from_id\",\n      \"type\": \"flags.8?int\"\n    }, {\"name\": \"to_id\", \"type\": \"Peer\"}, {\"name\": \"reply_to_msg_id\", \"type\": \"flags.3?int\"}, {\n      \"name\": \"date\",\n      \"type\": \"int\"\n    }, {\"name\": \"action\", \"type\": \"MessageAction\"}],\n    \"type\": \"Message\"\n  }, {\"id\": \"1038967584\", \"predicate\": \"messageMediaEmpty\", \"params\": [], \"type\": \"MessageMedia\"}, {\n    \"id\": \"1766936791\",\n    \"predicate\": \"messageMediaPhoto\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"photo\", \"type\": \"flags.0?Photo\"}, {\n      \"name\": \"ttl_seconds\",\n      \"type\": \"flags.2?int\"\n    }],\n    \"type\": \"MessageMedia\"\n  }, {\n    \"id\": \"1457575028\",\n    \"predicate\": \"messageMediaGeo\",\n    \"params\": [{\"name\": \"geo\", \"type\": \"GeoPoint\"}],\n    \"type\": \"MessageMedia\"\n  }, {\n    \"id\": \"-873313984\",\n    \"predicate\": \"messageMediaContact\",\n    \"params\": [{\"name\": \"phone_number\", \"type\": \"string\"}, {\n      \"name\": \"first_name\",\n      \"type\": \"string\"\n    }, {\"name\": \"last_name\", \"type\": \"string\"}, {\"name\": \"vcard\", \"type\": \"string\"}, {\n      \"name\": \"user_id\",\n      \"type\": \"int\"\n    }],\n    \"type\": \"MessageMedia\"\n  }, {\n    \"id\": \"-1618676578\",\n    \"predicate\": \"messageMediaUnsupported\",\n    \"params\": [],\n    \"type\": \"MessageMedia\"\n  }, {\n    \"id\": \"-1230047312\",\n    \"predicate\": \"messageActionEmpty\",\n    \"params\": [],\n    \"type\": \"MessageAction\"\n  }, {\n    \"id\": \"-1503425638\",\n    \"predicate\": \"messageActionChatCreate\",\n    \"params\": [{\"name\": \"title\", \"type\": \"string\"}, {\"name\": \"users\", \"type\": \"Vector<int>\"}],\n    \"type\": \"MessageAction\"\n  }, {\n    \"id\": \"-1247687078\",\n    \"predicate\": \"messageActionChatEditTitle\",\n    \"params\": [{\"name\": \"title\", \"type\": \"string\"}],\n    \"type\": \"MessageAction\"\n  }, {\n    \"id\": \"2144015272\",\n    \"predicate\": \"messageActionChatEditPhoto\",\n    \"params\": [{\"name\": \"photo\", \"type\": \"Photo\"}],\n    \"type\": \"MessageAction\"\n  }, {\n    \"id\": \"-1780220945\",\n    \"predicate\": \"messageActionChatDeletePhoto\",\n    \"params\": [],\n    \"type\": \"MessageAction\"\n  }, {\n    \"id\": \"1217033015\",\n    \"predicate\": \"messageActionChatAddUser\",\n    \"params\": [{\"name\": \"users\", \"type\": \"Vector<int>\"}],\n    \"type\": \"MessageAction\"\n  }, {\n    \"id\": \"-1297179892\",\n    \"predicate\": \"messageActionChatDeleteUser\",\n    \"params\": [{\"name\": \"user_id\", \"type\": \"int\"}],\n    \"type\": \"MessageAction\"\n  }, {\n    \"id\": \"739712882\",\n    \"predicate\": \"dialog\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"pinned\", \"type\": \"flags.2?true\"}, {\n      \"name\": \"unread_mark\",\n      \"type\": \"flags.3?true\"\n    }, {\"name\": \"peer\", \"type\": \"Peer\"}, {\"name\": \"top_message\", \"type\": \"int\"}, {\n      \"name\": \"read_inbox_max_id\",\n      \"type\": \"int\"\n    }, {\"name\": \"read_outbox_max_id\", \"type\": \"int\"}, {\n      \"name\": \"unread_count\",\n      \"type\": \"int\"\n    }, {\"name\": \"unread_mentions_count\", \"type\": \"int\"}, {\n      \"name\": \"notify_settings\",\n      \"type\": \"PeerNotifySettings\"\n    }, {\"name\": \"pts\", \"type\": \"flags.0?int\"}, {\"name\": \"draft\", \"type\": \"flags.1?DraftMessage\"}, {\n      \"name\": \"folder_id\",\n      \"type\": \"flags.4?int\"\n    }],\n    \"type\": \"Dialog\"\n  }, {\n    \"id\": \"590459437\",\n    \"predicate\": \"photoEmpty\",\n    \"params\": [{\"name\": \"id\", \"type\": \"long\"}],\n    \"type\": \"Photo\"\n  }, {\n    \"id\": \"-797637467\",\n    \"predicate\": \"photo\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"has_stickers\", \"type\": \"flags.0?true\"}, {\n      \"name\": \"id\",\n      \"type\": \"long\"\n    }, {\"name\": \"access_hash\", \"type\": \"long\"}, {\"name\": \"file_reference\", \"type\": \"bytes\"}, {\n      \"name\": \"date\",\n      \"type\": \"int\"\n    }, {\"name\": \"sizes\", \"type\": \"Vector<PhotoSize>\"}, {\"name\": \"dc_id\", \"type\": \"int\"}],\n    \"type\": \"Photo\"\n  }, {\n    \"id\": \"236446268\",\n    \"predicate\": \"photoSizeEmpty\",\n    \"params\": [{\"name\": \"type\", \"type\": \"string\"}],\n    \"type\": \"PhotoSize\"\n  }, {\n    \"id\": \"2009052699\",\n    \"predicate\": \"photoSize\",\n    \"params\": [{\"name\": \"type\", \"type\": \"string\"}, {\"name\": \"location\", \"type\": \"FileLocation\"}, {\n      \"name\": \"w\",\n      \"type\": \"int\"\n    }, {\"name\": \"h\", \"type\": \"int\"}, {\"name\": \"size\", \"type\": \"int\"}],\n    \"type\": \"PhotoSize\"\n  }, {\n    \"id\": \"-374917894\",\n    \"predicate\": \"photoCachedSize\",\n    \"params\": [{\"name\": \"type\", \"type\": \"string\"}, {\"name\": \"location\", \"type\": \"FileLocation\"}, {\n      \"name\": \"w\",\n      \"type\": \"int\"\n    }, {\"name\": \"h\", \"type\": \"int\"}, {\"name\": \"bytes\", \"type\": \"bytes\"}],\n    \"type\": \"PhotoSize\"\n  }, {\"id\": \"286776671\", \"predicate\": \"geoPointEmpty\", \"params\": [], \"type\": \"GeoPoint\"}, {\n    \"id\": \"43446532\",\n    \"predicate\": \"geoPoint\",\n    \"params\": [{\"name\": \"long\", \"type\": \"double\"}, {\"name\": \"lat\", \"type\": \"double\"}, {\n      \"name\": \"access_hash\",\n      \"type\": \"long\"\n    }],\n    \"type\": \"GeoPoint\"\n  },\n\n    {\n      \"id\": \"1577067778\",\n      \"predicate\": \"auth.sentCode\",\n      \"params\": [\n        {\"name\": \"flags\", \"type\": \"#\"},\n        {\"name\": \"type\", \"type\": \"auth.SentCodeType\"},\n        {\"name\": \"phone_code_hash\", \"type\": \"string\"},\n        {\"name\": \"next_type\", \"type\": \"flags.1?auth.CodeType\"},\n        {\"name\": \"timeout\", \"type\": \"flags.2?int\"}\n      ],\n      \"type\": \"auth.SentCode\"\n    },\n\n    {\n    \"id\": \"-855308010\",\n    \"predicate\": \"auth.authorization\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"tmp_sessions\", \"type\": \"flags.0?int\"}, {\n      \"name\": \"user\",\n      \"type\": \"User\"\n    }],\n    \"type\": \"auth.Authorization\"\n  }, {\n    \"id\": \"-543777747\",\n    \"predicate\": \"auth.exportedAuthorization\",\n    \"params\": [{\"name\": \"id\", \"type\": \"int\"}, {\"name\": \"bytes\", \"type\": \"bytes\"}],\n    \"type\": \"auth.ExportedAuthorization\"\n  }, {\n    \"id\": \"-1195615476\",\n    \"predicate\": \"inputNotifyPeer\",\n    \"params\": [{\"name\": \"peer\", \"type\": \"InputPeer\"}],\n    \"type\": \"InputNotifyPeer\"\n  }, {\"id\": \"423314455\", \"predicate\": \"inputNotifyUsers\", \"params\": [], \"type\": \"InputNotifyPeer\"}, {\n    \"id\": \"1251338318\",\n    \"predicate\": \"inputNotifyChats\",\n    \"params\": [],\n    \"type\": \"InputNotifyPeer\"\n  }, {\n    \"id\": \"-1673717362\",\n    \"predicate\": \"inputPeerNotifySettings\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"show_previews\", \"type\": \"flags.0?Bool\"}, {\n      \"name\": \"silent\",\n      \"type\": \"flags.1?Bool\"\n    }, {\"name\": \"mute_until\", \"type\": \"flags.2?int\"}, {\"name\": \"sound\", \"type\": \"flags.3?string\"}],\n    \"type\": \"InputPeerNotifySettings\"\n  }, {\n    \"id\": \"-1353671392\",\n    \"predicate\": \"peerNotifySettings\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"show_previews\", \"type\": \"flags.0?Bool\"}, {\n      \"name\": \"silent\",\n      \"type\": \"flags.1?Bool\"\n    }, {\"name\": \"mute_until\", \"type\": \"flags.2?int\"}, {\"name\": \"sound\", \"type\": \"flags.3?string\"}],\n    \"type\": \"PeerNotifySettings\"\n  }, {\n    \"id\": \"-2122045747\",\n    \"predicate\": \"peerSettings\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"report_spam\", \"type\": \"flags.0?true\"}, {\n      \"name\": \"add_contact\",\n      \"type\": \"flags.1?true\"\n    }, {\"name\": \"block_contact\", \"type\": \"flags.2?true\"}, {\n      \"name\": \"share_contact\",\n      \"type\": \"flags.3?true\"\n    }, {\"name\": \"need_contacts_exception\", \"type\": \"flags.4?true\"}, {\"name\": \"report_geo\", \"type\": \"flags.5?true\"}],\n    \"type\": \"PeerSettings\"\n  }, {\n    \"id\": \"-1539849235\",\n    \"predicate\": \"wallPaper\",\n    \"params\": [{\"name\": \"id\", \"type\": \"long\"}, {\"name\": \"flags\", \"type\": \"#\"}, {\n      \"name\": \"creator\",\n      \"type\": \"flags.0?true\"\n    }, {\"name\": \"default\", \"type\": \"flags.1?true\"}, {\"name\": \"pattern\", \"type\": \"flags.3?true\"}, {\n      \"name\": \"dark\",\n      \"type\": \"flags.4?true\"\n    }, {\"name\": \"access_hash\", \"type\": \"long\"}, {\"name\": \"slug\", \"type\": \"string\"}, {\n      \"name\": \"document\",\n      \"type\": \"Document\"\n    }, {\"name\": \"settings\", \"type\": \"flags.2?WallPaperSettings\"}],\n    \"type\": \"WallPaper\"\n  }, {\n    \"id\": \"1490799288\",\n    \"predicate\": \"inputReportReasonSpam\",\n    \"params\": [],\n    \"type\": \"ReportReason\"\n  }, {\n    \"id\": \"505595789\",\n    \"predicate\": \"inputReportReasonViolence\",\n    \"params\": [],\n    \"type\": \"ReportReason\"\n  }, {\n    \"id\": \"777640226\",\n    \"predicate\": \"inputReportReasonPornography\",\n    \"params\": [],\n    \"type\": \"ReportReason\"\n  }, {\n    \"id\": \"-1376497949\",\n    \"predicate\": \"inputReportReasonChildAbuse\",\n    \"params\": [],\n    \"type\": \"ReportReason\"\n  }, {\n    \"id\": \"-512463606\",\n    \"predicate\": \"inputReportReasonOther\",\n    \"params\": [{\"name\": \"text\", \"type\": \"string\"}],\n    \"type\": \"ReportReason\"\n  }, {\n    \"id\": \"-302941166\",\n    \"predicate\": \"userFull\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\n      \"name\": \"blocked\",\n      \"type\": \"flags.0?true\"\n    }, {\"name\": \"phone_calls_available\", \"type\": \"flags.4?true\"}, {\n      \"name\": \"phone_calls_private\",\n      \"type\": \"flags.5?true\"\n    }, {\"name\": \"can_pin_message\", \"type\": \"flags.7?true\"}, {\n      \"name\": \"has_scheduled\",\n      \"type\": \"flags.12?true\"\n    }, {\"name\": \"user\", \"type\": \"User\"}, {\"name\": \"about\", \"type\": \"flags.1?string\"}, {\n      \"name\": \"settings\",\n      \"type\": \"PeerSettings\"\n    }, {\"name\": \"profile_photo\", \"type\": \"flags.2?Photo\"}, {\n      \"name\": \"notify_settings\",\n      \"type\": \"PeerNotifySettings\"\n    }, {\"name\": \"bot_info\", \"type\": \"flags.3?BotInfo\"}, {\n      \"name\": \"pinned_msg_id\",\n      \"type\": \"flags.6?int\"\n    }, {\"name\": \"common_chats_count\", \"type\": \"int\"}, {\"name\": \"folder_id\", \"type\": \"flags.11?int\"}],\n    \"type\": \"UserFull\"\n  }, {\n    \"id\": \"-116274796\",\n    \"predicate\": \"contact\",\n    \"params\": [{\"name\": \"user_id\", \"type\": \"int\"}, {\"name\": \"mutual\", \"type\": \"Bool\"}],\n    \"type\": \"Contact\"\n  }, {\n    \"id\": \"-805141448\",\n    \"predicate\": \"importedContact\",\n    \"params\": [{\"name\": \"user_id\", \"type\": \"int\"}, {\"name\": \"client_id\", \"type\": \"long\"}],\n    \"type\": \"ImportedContact\"\n  }, {\n    \"id\": \"1444661369\",\n    \"predicate\": \"contactBlocked\",\n    \"params\": [{\"name\": \"user_id\", \"type\": \"int\"}, {\"name\": \"date\", \"type\": \"int\"}],\n    \"type\": \"ContactBlocked\"\n  }, {\n    \"id\": \"-748155807\",\n    \"predicate\": \"contactStatus\",\n    \"params\": [{\"name\": \"user_id\", \"type\": \"int\"}, {\"name\": \"status\", \"type\": \"UserStatus\"}],\n    \"type\": \"ContactStatus\"\n  }, {\n    \"id\": \"-1219778094\",\n    \"predicate\": \"contacts.contactsNotModified\",\n    \"params\": [],\n    \"type\": \"contacts.Contacts\"\n  }, {\n    \"id\": \"-353862078\",\n    \"predicate\": \"contacts.contacts\",\n    \"params\": [{\"name\": \"contacts\", \"type\": \"Vector<Contact>\"}, {\n      \"name\": \"saved_count\",\n      \"type\": \"int\"\n    }, {\"name\": \"users\", \"type\": \"Vector<User>\"}],\n    \"type\": \"contacts.Contacts\"\n  }, {\n    \"id\": \"2010127419\",\n    \"predicate\": \"contacts.importedContacts\",\n    \"params\": [{\"name\": \"imported\", \"type\": \"Vector<ImportedContact>\"}, {\n      \"name\": \"popular_invites\",\n      \"type\": \"Vector<PopularContact>\"\n    }, {\"name\": \"retry_contacts\", \"type\": \"Vector<long>\"}, {\"name\": \"users\", \"type\": \"Vector<User>\"}],\n    \"type\": \"contacts.ImportedContacts\"\n  }, {\n    \"id\": \"471043349\",\n    \"predicate\": \"contacts.blocked\",\n    \"params\": [{\"name\": \"blocked\", \"type\": \"Vector<ContactBlocked>\"}, {\"name\": \"users\", \"type\": \"Vector<User>\"}],\n    \"type\": \"contacts.Blocked\"\n  }, {\n    \"id\": \"-1878523231\",\n    \"predicate\": \"contacts.blockedSlice\",\n    \"params\": [{\"name\": \"count\", \"type\": \"int\"}, {\n      \"name\": \"blocked\",\n      \"type\": \"Vector<ContactBlocked>\"\n    }, {\"name\": \"users\", \"type\": \"Vector<User>\"}],\n    \"type\": \"contacts.Blocked\"\n  }, {\n    \"id\": \"364538944\",\n    \"predicate\": \"messages.dialogs\",\n    \"params\": [{\"name\": \"dialogs\", \"type\": \"Vector<Dialog>\"}, {\n      \"name\": \"messages\",\n      \"type\": \"Vector<Message>\"\n    }, {\"name\": \"chats\", \"type\": \"Vector<Chat>\"}, {\"name\": \"users\", \"type\": \"Vector<User>\"}],\n    \"type\": \"messages.Dialogs\"\n  }, {\n    \"id\": \"1910543603\",\n    \"predicate\": \"messages.dialogsSlice\",\n    \"params\": [\n      {\"name\": \"count\", \"type\": \"int\"},\n      {\"name\": \"dialogs\", \"type\": \"Vector<Dialog>\"},\n      {\n      \"name\": \"messages\",\n      \"type\": \"Vector<Message>\"\n    },\n      {\"name\": \"chats\", \"type\": \"Vector<Chat>\"}, {\"name\": \"users\", \"type\": \"Vector<User>\"}],\n    \"type\": \"messages.Dialogs\"\n  }, {\n    \"id\": \"-1938715001\",\n    \"predicate\": \"messages.messages\",\n    \"params\": [{\"name\": \"messages\", \"type\": \"Vector<Message>\"}, {\n      \"name\": \"chats\",\n      \"type\": \"Vector<Chat>\"\n    }, {\"name\": \"users\", \"type\": \"Vector<User>\"}],\n    \"type\": \"messages.Messages\"\n  }, {\n    \"id\": \"-923939298\",\n    \"predicate\": \"messages.messagesSlice\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"inexact\", \"type\": \"flags.1?true\"}, {\n      \"name\": \"count\",\n      \"type\": \"int\"\n    }, {\"name\": \"next_rate\", \"type\": \"flags.0?int\"}, {\"name\": \"messages\", \"type\": \"Vector<Message>\"}, {\n      \"name\": \"chats\",\n      \"type\": \"Vector<Chat>\"\n    }, {\"name\": \"users\", \"type\": \"Vector<User>\"}],\n    \"type\": \"messages.Messages\"\n  }, {\n    \"id\": \"1694474197\",\n    \"predicate\": \"messages.chats\",\n    \"params\": [{\"name\": \"chats\", \"type\": \"Vector<Chat>\"}],\n    \"type\": \"messages.Chats\"\n  }, {\n    \"id\": \"-438840932\",\n    \"predicate\": \"messages.chatFull\",\n    \"params\": [{\"name\": \"full_chat\", \"type\": \"ChatFull\"}, {\"name\": \"chats\", \"type\": \"Vector<Chat>\"}, {\n      \"name\": \"users\",\n      \"type\": \"Vector<User>\"\n    }],\n    \"type\": \"messages.ChatFull\"\n  }, {\n    \"id\": \"-1269012015\",\n    \"predicate\": \"messages.affectedHistory\",\n    \"params\": [{\"name\": \"pts\", \"type\": \"int\"}, {\"name\": \"pts_count\", \"type\": \"int\"}, {\"name\": \"offset\", \"type\": \"int\"}],\n    \"type\": \"messages.AffectedHistory\"\n  }, {\n    \"id\": \"1474492012\",\n    \"predicate\": \"inputMessagesFilterEmpty\",\n    \"params\": [],\n    \"type\": \"MessagesFilter\"\n  }, {\n    \"id\": \"-1777752804\",\n    \"predicate\": \"inputMessagesFilterPhotos\",\n    \"params\": [],\n    \"type\": \"MessagesFilter\"\n  }, {\n    \"id\": \"-1614803355\",\n    \"predicate\": \"inputMessagesFilterVideo\",\n    \"params\": [],\n    \"type\": \"MessagesFilter\"\n  }, {\n    \"id\": \"1458172132\",\n    \"predicate\": \"inputMessagesFilterPhotoVideo\",\n    \"params\": [],\n    \"type\": \"MessagesFilter\"\n  }, {\n    \"id\": \"-1629621880\",\n    \"predicate\": \"inputMessagesFilterDocument\",\n    \"params\": [],\n    \"type\": \"MessagesFilter\"\n  }, {\n    \"id\": \"2129714567\",\n    \"predicate\": \"inputMessagesFilterUrl\",\n    \"params\": [],\n    \"type\": \"MessagesFilter\"\n  }, {\n    \"id\": \"-3644025\",\n    \"predicate\": \"inputMessagesFilterGif\",\n    \"params\": [],\n    \"type\": \"MessagesFilter\"\n  }, {\n    \"id\": \"522914557\",\n    \"predicate\": \"updateNewMessage\",\n    \"params\": [{\"name\": \"message\", \"type\": \"Message\"}, {\"name\": \"pts\", \"type\": \"int\"}, {\n      \"name\": \"pts_count\",\n      \"type\": \"int\"\n    }],\n    \"type\": \"Update\"\n  }, {\n    \"id\": \"1318109142\",\n    \"predicate\": \"updateMessageID\",\n    \"params\": [{\"name\": \"id\", \"type\": \"int\"}, {\"name\": \"random_id\", \"type\": \"long\"}],\n    \"type\": \"Update\"\n  }, {\n    \"id\": \"-1576161051\",\n    \"predicate\": \"updateDeleteMessages\",\n    \"params\": [{\"name\": \"messages\", \"type\": \"Vector<int>\"}, {\"name\": \"pts\", \"type\": \"int\"}, {\n      \"name\": \"pts_count\",\n      \"type\": \"int\"\n    }],\n    \"type\": \"Update\"\n  }, {\n    \"id\": \"1548249383\",\n    \"predicate\": \"updateUserTyping\",\n    \"params\": [{\"name\": \"user_id\", \"type\": \"int\"}, {\"name\": \"action\", \"type\": \"SendMessageAction\"}],\n    \"type\": \"Update\"\n  }, {\n    \"id\": \"-1704596961\",\n    \"predicate\": \"updateChatUserTyping\",\n    \"params\": [{\"name\": \"chat_id\", \"type\": \"int\"}, {\"name\": \"user_id\", \"type\": \"int\"}, {\n      \"name\": \"action\",\n      \"type\": \"SendMessageAction\"\n    }],\n    \"type\": \"Update\"\n  }, {\n    \"id\": \"125178264\",\n    \"predicate\": \"updateChatParticipants\",\n    \"params\": [{\"name\": \"participants\", \"type\": \"ChatParticipants\"}],\n    \"type\": \"Update\"\n  }, {\n    \"id\": \"469489699\",\n    \"predicate\": \"updateUserStatus\",\n    \"params\": [{\"name\": \"user_id\", \"type\": \"int\"}, {\"name\": \"status\", \"type\": \"UserStatus\"}],\n    \"type\": \"Update\"\n  }, {\n    \"id\": \"-1489818765\",\n    \"predicate\": \"updateUserName\",\n    \"params\": [{\"name\": \"user_id\", \"type\": \"int\"}, {\"name\": \"first_name\", \"type\": \"string\"}, {\n      \"name\": \"last_name\",\n      \"type\": \"string\"\n    }, {\"name\": \"username\", \"type\": \"string\"}],\n    \"type\": \"Update\"\n  }, {\n    \"id\": \"-1791935732\",\n    \"predicate\": \"updateUserPhoto\",\n    \"params\": [{\"name\": \"user_id\", \"type\": \"int\"}, {\"name\": \"date\", \"type\": \"int\"}, {\n      \"name\": \"photo\",\n      \"type\": \"UserProfilePhoto\"\n    }, {\"name\": \"previous\", \"type\": \"Bool\"}],\n    \"type\": \"Update\"\n  }, {\n    \"id\": \"-1519637954\",\n    \"predicate\": \"updates.state\",\n    \"params\": [{\"name\": \"pts\", \"type\": \"int\"}, {\"name\": \"qts\", \"type\": \"int\"}, {\n      \"name\": \"date\",\n      \"type\": \"int\"\n    }, {\"name\": \"seq\", \"type\": \"int\"}, {\"name\": \"unread_count\", \"type\": \"int\"}],\n    \"type\": \"updates.State\"\n  }, {\n    \"id\": \"1567990072\",\n    \"predicate\": \"updates.differenceEmpty\",\n    \"params\": [{\"name\": \"date\", \"type\": \"int\"}, {\"name\": \"seq\", \"type\": \"int\"}],\n    \"type\": \"updates.Difference\"\n  }, {\n    \"id\": \"16030880\",\n    \"predicate\": \"updates.difference\",\n    \"params\": [{\"name\": \"new_messages\", \"type\": \"Vector<Message>\"}, {\n      \"name\": \"new_encrypted_messages\",\n      \"type\": \"Vector<EncryptedMessage>\"\n    }, {\"name\": \"other_updates\", \"type\": \"Vector<Update>\"}, {\"name\": \"chats\", \"type\": \"Vector<Chat>\"}, {\n      \"name\": \"users\",\n      \"type\": \"Vector<User>\"\n    }, {\"name\": \"state\", \"type\": \"updates.State\"}],\n    \"type\": \"updates.Difference\"\n  }, {\n    \"id\": \"-1459938943\",\n    \"predicate\": \"updates.differenceSlice\",\n    \"params\": [{\"name\": \"new_messages\", \"type\": \"Vector<Message>\"}, {\n      \"name\": \"new_encrypted_messages\",\n      \"type\": \"Vector<EncryptedMessage>\"\n    }, {\"name\": \"other_updates\", \"type\": \"Vector<Update>\"}, {\"name\": \"chats\", \"type\": \"Vector<Chat>\"}, {\n      \"name\": \"users\",\n      \"type\": \"Vector<User>\"\n    }, {\"name\": \"intermediate_state\", \"type\": \"updates.State\"}],\n    \"type\": \"updates.Difference\"\n  }, {\"id\": \"-484987010\", \"predicate\": \"updatesTooLong\", \"params\": [], \"type\": \"Updates\"}, {\n    \"id\": \"-1857044719\",\n    \"predicate\": \"updateShortMessage\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"out\", \"type\": \"flags.1?true\"}, {\n      \"name\": \"mentioned\",\n      \"type\": \"flags.4?true\"\n    }, {\"name\": \"media_unread\", \"type\": \"flags.5?true\"}, {\"name\": \"silent\", \"type\": \"flags.13?true\"}, {\n      \"name\": \"id\",\n      \"type\": \"int\"\n    }, {\"name\": \"user_id\", \"type\": \"int\"}, {\"name\": \"message\", \"type\": \"string\"}, {\n      \"name\": \"pts\",\n      \"type\": \"int\"\n    }, {\"name\": \"pts_count\", \"type\": \"int\"}, {\"name\": \"date\", \"type\": \"int\"}, {\n      \"name\": \"fwd_from\",\n      \"type\": \"flags.2?MessageFwdHeader\"\n    }, {\"name\": \"via_bot_id\", \"type\": \"flags.11?int\"}, {\n      \"name\": \"reply_to_msg_id\",\n      \"type\": \"flags.3?int\"\n    }, {\"name\": \"entities\", \"type\": \"flags.7?Vector<MessageEntity>\"}],\n    \"type\": \"Updates\"\n  }, {\n    \"id\": \"377562760\",\n    \"predicate\": \"updateShortChatMessage\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"out\", \"type\": \"flags.1?true\"}, {\n      \"name\": \"mentioned\",\n      \"type\": \"flags.4?true\"\n    }, {\"name\": \"media_unread\", \"type\": \"flags.5?true\"}, {\"name\": \"silent\", \"type\": \"flags.13?true\"}, {\n      \"name\": \"id\",\n      \"type\": \"int\"\n    }, {\"name\": \"from_id\", \"type\": \"int\"}, {\"name\": \"chat_id\", \"type\": \"int\"}, {\n      \"name\": \"message\",\n      \"type\": \"string\"\n    }, {\"name\": \"pts\", \"type\": \"int\"}, {\"name\": \"pts_count\", \"type\": \"int\"}, {\n      \"name\": \"date\",\n      \"type\": \"int\"\n    }, {\"name\": \"fwd_from\", \"type\": \"flags.2?MessageFwdHeader\"}, {\n      \"name\": \"via_bot_id\",\n      \"type\": \"flags.11?int\"\n    }, {\"name\": \"reply_to_msg_id\", \"type\": \"flags.3?int\"}, {\n      \"name\": \"entities\",\n      \"type\": \"flags.7?Vector<MessageEntity>\"\n    }],\n    \"type\": \"Updates\"\n  }, {\n    \"id\": \"2027216577\",\n    \"predicate\": \"updateShort\",\n    \"params\": [{\"name\": \"update\", \"type\": \"Update\"}, {\"name\": \"date\", \"type\": \"int\"}],\n    \"type\": \"Updates\"\n  }, {\n    \"id\": \"1918567619\",\n    \"predicate\": \"updatesCombined\",\n    \"params\": [{\"name\": \"updates\", \"type\": \"Vector<Update>\"}, {\n      \"name\": \"users\",\n      \"type\": \"Vector<User>\"\n    }, {\"name\": \"chats\", \"type\": \"Vector<Chat>\"}, {\"name\": \"date\", \"type\": \"int\"}, {\n      \"name\": \"seq_start\",\n      \"type\": \"int\"\n    }, {\"name\": \"seq\", \"type\": \"int\"}],\n    \"type\": \"Updates\"\n  }, {\n    \"id\": \"1957577280\",\n    \"predicate\": \"updates\",\n    \"params\": [{\"name\": \"updates\", \"type\": \"Vector<Update>\"}, {\n      \"name\": \"users\",\n      \"type\": \"Vector<User>\"\n    }, {\"name\": \"chats\", \"type\": \"Vector<Chat>\"}, {\"name\": \"date\", \"type\": \"int\"}, {\"name\": \"seq\", \"type\": \"int\"}],\n    \"type\": \"Updates\"\n  }, {\n    \"id\": \"-1916114267\",\n    \"predicate\": \"photos.photos\",\n    \"params\": [{\"name\": \"photos\", \"type\": \"Vector<Photo>\"}, {\"name\": \"users\", \"type\": \"Vector<User>\"}],\n    \"type\": \"photos.Photos\"\n  }, {\n    \"id\": \"352657236\",\n    \"predicate\": \"photos.photosSlice\",\n    \"params\": [{\"name\": \"count\", \"type\": \"int\"}, {\"name\": \"photos\", \"type\": \"Vector<Photo>\"}, {\n      \"name\": \"users\",\n      \"type\": \"Vector<User>\"\n    }],\n    \"type\": \"photos.Photos\"\n  }, {\n    \"id\": \"539045032\",\n    \"predicate\": \"photos.photo\",\n    \"params\": [{\"name\": \"photo\", \"type\": \"Photo\"}, {\"name\": \"users\", \"type\": \"Vector<User>\"}],\n    \"type\": \"photos.Photo\"\n  }, {\n    \"id\": \"157948117\",\n    \"predicate\": \"upload.file\",\n    \"params\": [{\"name\": \"type\", \"type\": \"storage.FileType\"}, {\"name\": \"mtime\", \"type\": \"int\"}, {\n      \"name\": \"bytes\",\n      \"type\": \"bytes\"\n    }],\n    \"type\": \"upload.File\"\n  }, {\n    \"id\": \"414687501\",\n    \"predicate\": \"dcOption\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"ipv6\", \"type\": \"flags.0?true\"}, {\n      \"name\": \"media_only\",\n      \"type\": \"flags.1?true\"\n    }, {\"name\": \"tcpo_only\", \"type\": \"flags.2?true\"}, {\"name\": \"cdn\", \"type\": \"flags.3?true\"}, {\n      \"name\": \"static\",\n      \"type\": \"flags.4?true\"\n    }, {\"name\": \"id\", \"type\": \"int\"}, {\"name\": \"ip_address\", \"type\": \"string\"}, {\n      \"name\": \"port\",\n      \"type\": \"int\"\n    }, {\"name\": \"secret\", \"type\": \"flags.10?bytes\"}],\n    \"type\": \"DcOption\"\n  }, {\n    \"id\": \"856375399\",\n    \"predicate\": \"config\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\n      \"name\": \"phonecalls_enabled\",\n      \"type\": \"flags.1?true\"\n    }, {\"name\": \"default_p2p_contacts\", \"type\": \"flags.3?true\"}, {\n      \"name\": \"preload_featured_stickers\",\n      \"type\": \"flags.4?true\"\n    }, {\"name\": \"ignore_phone_entities\", \"type\": \"flags.5?true\"}, {\n      \"name\": \"revoke_pm_inbox\",\n      \"type\": \"flags.6?true\"\n    }, {\"name\": \"blocked_mode\", \"type\": \"flags.8?true\"}, {\n      \"name\": \"pfs_enabled\",\n      \"type\": \"flags.13?true\"\n    }, {\"name\": \"date\", \"type\": \"int\"}, {\"name\": \"expires\", \"type\": \"int\"}, {\n      \"name\": \"test_mode\",\n      \"type\": \"Bool\"\n    }, {\"name\": \"this_dc\", \"type\": \"int\"}, {\n      \"name\": \"dc_options\",\n      \"type\": \"Vector<DcOption>\"\n    }, {\"name\": \"dc_txt_domain_name\", \"type\": \"string\"}, {\n      \"name\": \"chat_size_max\",\n      \"type\": \"int\"\n    }, {\"name\": \"megagroup_size_max\", \"type\": \"int\"}, {\n      \"name\": \"forwarded_count_max\",\n      \"type\": \"int\"\n    }, {\"name\": \"online_update_period_ms\", \"type\": \"int\"}, {\n      \"name\": \"offline_blur_timeout_ms\",\n      \"type\": \"int\"\n    }, {\"name\": \"offline_idle_timeout_ms\", \"type\": \"int\"}, {\n      \"name\": \"online_cloud_timeout_ms\",\n      \"type\": \"int\"\n    }, {\"name\": \"notify_cloud_delay_ms\", \"type\": \"int\"}, {\n      \"name\": \"notify_default_delay_ms\",\n      \"type\": \"int\"\n    }, {\"name\": \"push_chat_period_ms\", \"type\": \"int\"}, {\n      \"name\": \"push_chat_limit\",\n      \"type\": \"int\"\n    }, {\"name\": \"saved_gifs_limit\", \"type\": \"int\"}, {\n      \"name\": \"edit_time_limit\",\n      \"type\": \"int\"\n    }, {\"name\": \"revoke_time_limit\", \"type\": \"int\"}, {\n      \"name\": \"revoke_pm_time_limit\",\n      \"type\": \"int\"\n    }, {\"name\": \"rating_e_decay\", \"type\": \"int\"}, {\n      \"name\": \"stickers_recent_limit\",\n      \"type\": \"int\"\n    }, {\"name\": \"stickers_faved_limit\", \"type\": \"int\"}, {\n      \"name\": \"channels_read_media_period\",\n      \"type\": \"int\"\n    }, {\"name\": \"tmp_sessions\", \"type\": \"flags.0?int\"}, {\n      \"name\": \"pinned_dialogs_count_max\",\n      \"type\": \"int\"\n    }, {\"name\": \"pinned_infolder_count_max\", \"type\": \"int\"}, {\n      \"name\": \"call_receive_timeout_ms\",\n      \"type\": \"int\"\n    }, {\"name\": \"call_ring_timeout_ms\", \"type\": \"int\"}, {\n      \"name\": \"call_connect_timeout_ms\",\n      \"type\": \"int\"\n    }, {\"name\": \"call_packet_timeout_ms\", \"type\": \"int\"}, {\n      \"name\": \"me_url_prefix\",\n      \"type\": \"string\"\n    }, {\"name\": \"autoupdate_url_prefix\", \"type\": \"flags.7?string\"}, {\n      \"name\": \"gif_search_username\",\n      \"type\": \"flags.9?string\"\n    }, {\"name\": \"venue_search_username\", \"type\": \"flags.10?string\"}, {\n      \"name\": \"img_search_username\",\n      \"type\": \"flags.11?string\"\n    }, {\"name\": \"static_maps_provider\", \"type\": \"flags.12?string\"}, {\n      \"name\": \"caption_length_max\",\n      \"type\": \"int\"\n    }, {\"name\": \"message_length_max\", \"type\": \"int\"}, {\n      \"name\": \"webfile_dc_id\",\n      \"type\": \"int\"\n    }, {\"name\": \"suggested_lang_code\", \"type\": \"flags.2?string\"}, {\n      \"name\": \"lang_pack_version\",\n      \"type\": \"flags.2?int\"\n    }, {\"name\": \"base_lang_pack_version\", \"type\": \"flags.2?int\"}],\n    \"type\": \"Config\"\n  }, {\n    \"id\": \"-1910892683\",\n    \"predicate\": \"nearestDc\",\n    \"params\": [{\"name\": \"country\", \"type\": \"string\"}, {\"name\": \"this_dc\", \"type\": \"int\"}, {\n      \"name\": \"nearest_dc\",\n      \"type\": \"int\"\n    }],\n    \"type\": \"NearestDc\"\n  }, {\n    \"id\": \"497489295\",\n    \"predicate\": \"help.appUpdate\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"can_not_skip\", \"type\": \"flags.0?true\"}, {\n      \"name\": \"id\",\n      \"type\": \"int\"\n    }, {\"name\": \"version\", \"type\": \"string\"}, {\"name\": \"text\", \"type\": \"string\"}, {\n      \"name\": \"entities\",\n      \"type\": \"Vector<MessageEntity>\"\n    }, {\"name\": \"document\", \"type\": \"flags.1?Document\"}, {\"name\": \"url\", \"type\": \"flags.2?string\"}],\n    \"type\": \"help.AppUpdate\"\n  }, {\"id\": \"-1000708810\", \"predicate\": \"help.noAppUpdate\", \"params\": [], \"type\": \"help.AppUpdate\"}, {\n    \"id\": \"415997816\",\n    \"predicate\": \"help.inviteText\",\n    \"params\": [{\"name\": \"message\", \"type\": \"string\"}],\n    \"type\": \"help.InviteText\"\n  }, {\n    \"id\": \"314359194\",\n    \"predicate\": \"updateNewEncryptedMessage\",\n    \"params\": [{\"name\": \"message\", \"type\": \"EncryptedMessage\"}, {\"name\": \"qts\", \"type\": \"int\"}],\n    \"type\": \"Update\"\n  }, {\n    \"id\": \"386986326\",\n    \"predicate\": \"updateEncryptedChatTyping\",\n    \"params\": [{\"name\": \"chat_id\", \"type\": \"int\"}],\n    \"type\": \"Update\"\n  }, {\n    \"id\": \"-1264392051\",\n    \"predicate\": \"updateEncryption\",\n    \"params\": [{\"name\": \"chat\", \"type\": \"EncryptedChat\"}, {\"name\": \"date\", \"type\": \"int\"}],\n    \"type\": \"Update\"\n  }, {\n    \"id\": \"956179895\",\n    \"predicate\": \"updateEncryptedMessagesRead\",\n    \"params\": [{\"name\": \"chat_id\", \"type\": \"int\"}, {\"name\": \"max_date\", \"type\": \"int\"}, {\n      \"name\": \"date\",\n      \"type\": \"int\"\n    }],\n    \"type\": \"Update\"\n  }, {\n    \"id\": \"-1417756512\",\n    \"predicate\": \"encryptedChatEmpty\",\n    \"params\": [{\"name\": \"id\", \"type\": \"int\"}],\n    \"type\": \"EncryptedChat\"\n  }, {\n    \"id\": \"1006044124\",\n    \"predicate\": \"encryptedChatWaiting\",\n    \"params\": [{\"name\": \"id\", \"type\": \"int\"}, {\"name\": \"access_hash\", \"type\": \"long\"}, {\n      \"name\": \"date\",\n      \"type\": \"int\"\n    }, {\"name\": \"admin_id\", \"type\": \"int\"}, {\"name\": \"participant_id\", \"type\": \"int\"}],\n    \"type\": \"EncryptedChat\"\n  }, {\n    \"id\": \"-931638658\",\n    \"predicate\": \"encryptedChatRequested\",\n    \"params\": [{\"name\": \"id\", \"type\": \"int\"}, {\"name\": \"access_hash\", \"type\": \"long\"}, {\n      \"name\": \"date\",\n      \"type\": \"int\"\n    }, {\"name\": \"admin_id\", \"type\": \"int\"}, {\"name\": \"participant_id\", \"type\": \"int\"}, {\n      \"name\": \"g_a\",\n      \"type\": \"bytes\"\n    }],\n    \"type\": \"EncryptedChat\"\n  }, {\n    \"id\": \"-94974410\",\n    \"predicate\": \"encryptedChat\",\n    \"params\": [{\"name\": \"id\", \"type\": \"int\"}, {\"name\": \"access_hash\", \"type\": \"long\"}, {\n      \"name\": \"date\",\n      \"type\": \"int\"\n    }, {\"name\": \"admin_id\", \"type\": \"int\"}, {\"name\": \"participant_id\", \"type\": \"int\"}, {\n      \"name\": \"g_a_or_b\",\n      \"type\": \"bytes\"\n    }, {\"name\": \"key_fingerprint\", \"type\": \"long\"}],\n    \"type\": \"EncryptedChat\"\n  }, {\n    \"id\": \"332848423\",\n    \"predicate\": \"encryptedChatDiscarded\",\n    \"params\": [{\"name\": \"id\", \"type\": \"int\"}],\n    \"type\": \"EncryptedChat\"\n  }, {\n    \"id\": \"-247351839\",\n    \"predicate\": \"inputEncryptedChat\",\n    \"params\": [{\"name\": \"chat_id\", \"type\": \"int\"}, {\"name\": \"access_hash\", \"type\": \"long\"}],\n    \"type\": \"InputEncryptedChat\"\n  }, {\n    \"id\": \"-1038136962\",\n    \"predicate\": \"encryptedFileEmpty\",\n    \"params\": [],\n    \"type\": \"EncryptedFile\"\n  }, {\n    \"id\": \"1248893260\",\n    \"predicate\": \"encryptedFile\",\n    \"params\": [{\"name\": \"id\", \"type\": \"long\"}, {\"name\": \"access_hash\", \"type\": \"long\"}, {\n      \"name\": \"size\",\n      \"type\": \"int\"\n    }, {\"name\": \"dc_id\", \"type\": \"int\"}, {\"name\": \"key_fingerprint\", \"type\": \"int\"}],\n    \"type\": \"EncryptedFile\"\n  }, {\n    \"id\": \"406307684\",\n    \"predicate\": \"inputEncryptedFileEmpty\",\n    \"params\": [],\n    \"type\": \"InputEncryptedFile\"\n  }, {\n    \"id\": \"1690108678\",\n    \"predicate\": \"inputEncryptedFileUploaded\",\n    \"params\": [{\"name\": \"id\", \"type\": \"long\"}, {\"name\": \"parts\", \"type\": \"int\"}, {\n      \"name\": \"md5_checksum\",\n      \"type\": \"string\"\n    }, {\"name\": \"key_fingerprint\", \"type\": \"int\"}],\n    \"type\": \"InputEncryptedFile\"\n  }, {\n    \"id\": \"1511503333\",\n    \"predicate\": \"inputEncryptedFile\",\n    \"params\": [{\"name\": \"id\", \"type\": \"long\"}, {\"name\": \"access_hash\", \"type\": \"long\"}],\n    \"type\": \"InputEncryptedFile\"\n  }, {\n    \"id\": \"-182231723\",\n    \"predicate\": \"inputEncryptedFileLocation\",\n    \"params\": [{\"name\": \"id\", \"type\": \"long\"}, {\"name\": \"access_hash\", \"type\": \"long\"}],\n    \"type\": \"InputFileLocation\"\n  }, {\n    \"id\": \"-317144808\",\n    \"predicate\": \"encryptedMessage\",\n    \"params\": [{\"name\": \"random_id\", \"type\": \"long\"}, {\"name\": \"chat_id\", \"type\": \"int\"}, {\n      \"name\": \"date\",\n      \"type\": \"int\"\n    }, {\"name\": \"bytes\", \"type\": \"bytes\"}, {\"name\": \"file\", \"type\": \"EncryptedFile\"}],\n    \"type\": \"EncryptedMessage\"\n  }, {\n    \"id\": \"594758406\",\n    \"predicate\": \"encryptedMessageService\",\n    \"params\": [{\"name\": \"random_id\", \"type\": \"long\"}, {\"name\": \"chat_id\", \"type\": \"int\"}, {\n      \"name\": \"date\",\n      \"type\": \"int\"\n    }, {\"name\": \"bytes\", \"type\": \"bytes\"}],\n    \"type\": \"EncryptedMessage\"\n  }, {\n    \"id\": \"-1058912715\",\n    \"predicate\": \"messages.dhConfigNotModified\",\n    \"params\": [{\"name\": \"random\", \"type\": \"bytes\"}],\n    \"type\": \"messages.DhConfig\"\n  }, {\n    \"id\": \"740433629\",\n    \"predicate\": \"messages.dhConfig\",\n    \"params\": [{\"name\": \"g\", \"type\": \"int\"}, {\"name\": \"p\", \"type\": \"bytes\"}, {\n      \"name\": \"version\",\n      \"type\": \"int\"\n    }, {\"name\": \"random\", \"type\": \"bytes\"}],\n    \"type\": \"messages.DhConfig\"\n  }, {\n    \"id\": \"1443858741\",\n    \"predicate\": \"messages.sentEncryptedMessage\",\n    \"params\": [{\"name\": \"date\", \"type\": \"int\"}],\n    \"type\": \"messages.SentEncryptedMessage\"\n  }, {\n    \"id\": \"-1802240206\",\n    \"predicate\": \"messages.sentEncryptedFile\",\n    \"params\": [{\"name\": \"date\", \"type\": \"int\"}, {\"name\": \"file\", \"type\": \"EncryptedFile\"}],\n    \"type\": \"messages.SentEncryptedMessage\"\n  }, {\n    \"id\": \"-95482955\",\n    \"predicate\": \"inputFileBig\",\n    \"params\": [{\"name\": \"id\", \"type\": \"long\"}, {\"name\": \"parts\", \"type\": \"int\"}, {\"name\": \"name\", \"type\": \"string\"}],\n    \"type\": \"InputFile\"\n  }, {\n    \"id\": \"767652808\",\n    \"predicate\": \"inputEncryptedFileBigUploaded\",\n    \"params\": [{\"name\": \"id\", \"type\": \"long\"}, {\"name\": \"parts\", \"type\": \"int\"}, {\n      \"name\": \"key_fingerprint\",\n      \"type\": \"int\"\n    }],\n    \"type\": \"InputEncryptedFile\"\n  }, {\n    \"id\": \"-364179876\",\n    \"predicate\": \"updateChatParticipantAdd\",\n    \"params\": [{\"name\": \"chat_id\", \"type\": \"int\"}, {\"name\": \"user_id\", \"type\": \"int\"}, {\n      \"name\": \"inviter_id\",\n      \"type\": \"int\"\n    }, {\"name\": \"date\", \"type\": \"int\"}, {\"name\": \"version\", \"type\": \"int\"}],\n    \"type\": \"Update\"\n  }, {\n    \"id\": \"1851755554\",\n    \"predicate\": \"updateChatParticipantDelete\",\n    \"params\": [{\"name\": \"chat_id\", \"type\": \"int\"}, {\"name\": \"user_id\", \"type\": \"int\"}, {\n      \"name\": \"version\",\n      \"type\": \"int\"\n    }],\n    \"type\": \"Update\"\n  }, {\n    \"id\": \"-1906403213\",\n    \"predicate\": \"updateDcOptions\",\n    \"params\": [{\"name\": \"dc_options\", \"type\": \"Vector<DcOption>\"}],\n    \"type\": \"Update\"\n  }, {\n    \"id\": \"1530447553\",\n    \"predicate\": \"inputMediaUploadedDocument\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"nosound_video\", \"type\": \"flags.3?true\"}, {\n      \"name\": \"file\",\n      \"type\": \"InputFile\"\n    }, {\"name\": \"thumb\", \"type\": \"flags.2?InputFile\"}, {\"name\": \"mime_type\", \"type\": \"string\"}, {\n      \"name\": \"attributes\",\n      \"type\": \"Vector<DocumentAttribute>\"\n    }, {\"name\": \"stickers\", \"type\": \"flags.0?Vector<InputDocument>\"}, {\"name\": \"ttl_seconds\", \"type\": \"flags.1?int\"}],\n    \"type\": \"InputMedia\"\n  }, {\n    \"id\": \"598418386\",\n    \"predicate\": \"inputMediaDocument\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"id\", \"type\": \"InputDocument\"}, {\n      \"name\": \"ttl_seconds\",\n      \"type\": \"flags.0?int\"\n    }],\n    \"type\": \"InputMedia\"\n  }, {\n    \"id\": \"-1666158377\",\n    \"predicate\": \"messageMediaDocument\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"document\", \"type\": \"flags.0?Document\"}, {\n      \"name\": \"ttl_seconds\",\n      \"type\": \"flags.2?int\"\n    }],\n    \"type\": \"MessageMedia\"\n  }, {\"id\": \"1928391342\", \"predicate\": \"inputDocumentEmpty\", \"params\": [], \"type\": \"InputDocument\"}, {\n    \"id\": \"448771445\",\n    \"predicate\": \"inputDocument\",\n    \"params\": [{\"name\": \"id\", \"type\": \"long\"}, {\"name\": \"access_hash\", \"type\": \"long\"}, {\n      \"name\": \"file_reference\",\n      \"type\": \"bytes\"\n    }],\n    \"type\": \"InputDocument\"\n  }, {\n    \"id\": \"-1160743548\",\n    \"predicate\": \"inputDocumentFileLocation\",\n    \"params\": [{\"name\": \"id\", \"type\": \"long\"}, {\"name\": \"access_hash\", \"type\": \"long\"}, {\n      \"name\": \"file_reference\",\n      \"type\": \"bytes\"\n    }, {\"name\": \"thumb_size\", \"type\": \"string\"}],\n    \"type\": \"InputFileLocation\"\n  }, {\n    \"id\": \"922273905\",\n    \"predicate\": \"documentEmpty\",\n    \"params\": [{\"name\": \"id\", \"type\": \"long\"}],\n    \"type\": \"Document\"\n  }, {\n    \"id\": \"-1683841855\",\n    \"predicate\": \"document\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"id\", \"type\": \"long\"}, {\n      \"name\": \"access_hash\",\n      \"type\": \"long\"\n    }, {\"name\": \"file_reference\", \"type\": \"bytes\"}, {\"name\": \"date\", \"type\": \"int\"}, {\n      \"name\": \"mime_type\",\n      \"type\": \"string\"\n    }, {\"name\": \"size\", \"type\": \"int\"}, {\"name\": \"thumbs\", \"type\": \"flags.0?Vector<PhotoSize>\"}, {\n      \"name\": \"dc_id\",\n      \"type\": \"int\"\n    }, {\"name\": \"attributes\", \"type\": \"Vector<DocumentAttribute>\"}],\n    \"type\": \"Document\"\n  }, {\n    \"id\": \"398898678\",\n    \"predicate\": \"help.support\",\n    \"params\": [{\"name\": \"phone_number\", \"type\": \"string\"}, {\"name\": \"user\", \"type\": \"User\"}],\n    \"type\": \"help.Support\"\n  }, {\n    \"id\": \"-1613493288\",\n    \"predicate\": \"notifyPeer\",\n    \"params\": [{\"name\": \"peer\", \"type\": \"Peer\"}],\n    \"type\": \"NotifyPeer\"\n  }, {\"id\": \"-1261946036\", \"predicate\": \"notifyUsers\", \"params\": [], \"type\": \"NotifyPeer\"}, {\n    \"id\": \"-1073230141\",\n    \"predicate\": \"notifyChats\",\n    \"params\": [],\n    \"type\": \"NotifyPeer\"\n  }, {\n    \"id\": \"-2131957734\",\n    \"predicate\": \"updateUserBlocked\",\n    \"params\": [{\"name\": \"user_id\", \"type\": \"int\"}, {\"name\": \"blocked\", \"type\": \"Bool\"}],\n    \"type\": \"Update\"\n  }, {\n    \"id\": \"-1094555409\",\n    \"predicate\": \"updateNotifySettings\",\n    \"params\": [{\"name\": \"peer\", \"type\": \"NotifyPeer\"}, {\"name\": \"notify_settings\", \"type\": \"PeerNotifySettings\"}],\n    \"type\": \"Update\"\n  }, {\n    \"id\": \"381645902\",\n    \"predicate\": \"sendMessageTypingAction\",\n    \"params\": [],\n    \"type\": \"SendMessageAction\"\n  }, {\n    \"id\": \"-44119819\",\n    \"predicate\": \"sendMessageCancelAction\",\n    \"params\": [],\n    \"type\": \"SendMessageAction\"\n  }, {\n    \"id\": \"-1584933265\",\n    \"predicate\": \"sendMessageRecordVideoAction\",\n    \"params\": [],\n    \"type\": \"SendMessageAction\"\n  }, {\n    \"id\": \"-378127636\",\n    \"predicate\": \"sendMessageUploadVideoAction\",\n    \"params\": [{\"name\": \"progress\", \"type\": \"int\"}],\n    \"type\": \"SendMessageAction\"\n  }, {\n    \"id\": \"-718310409\",\n    \"predicate\": \"sendMessageRecordAudioAction\",\n    \"params\": [],\n    \"type\": \"SendMessageAction\"\n  }, {\n    \"id\": \"-212740181\",\n    \"predicate\": \"sendMessageUploadAudioAction\",\n    \"params\": [{\"name\": \"progress\", \"type\": \"int\"}],\n    \"type\": \"SendMessageAction\"\n  }, {\n    \"id\": \"-774682074\",\n    \"predicate\": \"sendMessageUploadPhotoAction\",\n    \"params\": [{\"name\": \"progress\", \"type\": \"int\"}],\n    \"type\": \"SendMessageAction\"\n  }, {\n    \"id\": \"-1441998364\",\n    \"predicate\": \"sendMessageUploadDocumentAction\",\n    \"params\": [{\"name\": \"progress\", \"type\": \"int\"}],\n    \"type\": \"SendMessageAction\"\n  }, {\n    \"id\": \"393186209\",\n    \"predicate\": \"sendMessageGeoLocationAction\",\n    \"params\": [],\n    \"type\": \"SendMessageAction\"\n  }, {\n    \"id\": \"1653390447\",\n    \"predicate\": \"sendMessageChooseContactAction\",\n    \"params\": [],\n    \"type\": \"SendMessageAction\"\n  }, {\n    \"id\": \"-1290580579\",\n    \"predicate\": \"contacts.found\",\n    \"params\": [{\"name\": \"my_results\", \"type\": \"Vector<Peer>\"}, {\n      \"name\": \"results\",\n      \"type\": \"Vector<Peer>\"\n    }, {\"name\": \"chats\", \"type\": \"Vector<Chat>\"}, {\"name\": \"users\", \"type\": \"Vector<User>\"}],\n    \"type\": \"contacts.Found\"\n  }, {\n    \"id\": \"-337352679\",\n    \"predicate\": \"updateServiceNotification\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"popup\", \"type\": \"flags.0?true\"}, {\n      \"name\": \"inbox_date\",\n      \"type\": \"flags.1?int\"\n    }, {\"name\": \"type\", \"type\": \"string\"}, {\"name\": \"message\", \"type\": \"string\"}, {\n      \"name\": \"media\",\n      \"type\": \"MessageMedia\"\n    }, {\"name\": \"entities\", \"type\": \"Vector<MessageEntity>\"}],\n    \"type\": \"Update\"\n  }, {\"id\": \"-496024847\", \"predicate\": \"userStatusRecently\", \"params\": [], \"type\": \"UserStatus\"}, {\n    \"id\": \"129960444\",\n    \"predicate\": \"userStatusLastWeek\",\n    \"params\": [],\n    \"type\": \"UserStatus\"\n  }, {\"id\": \"2011940674\", \"predicate\": \"userStatusLastMonth\", \"params\": [], \"type\": \"UserStatus\"}, {\n    \"id\": \"-298113238\",\n    \"predicate\": \"updatePrivacy\",\n    \"params\": [{\"name\": \"key\", \"type\": \"PrivacyKey\"}, {\"name\": \"rules\", \"type\": \"Vector<PrivacyRule>\"}],\n    \"type\": \"Update\"\n  }, {\n    \"id\": \"1335282456\",\n    \"predicate\": \"inputPrivacyKeyStatusTimestamp\",\n    \"params\": [],\n    \"type\": \"InputPrivacyKey\"\n  }, {\n    \"id\": \"-1137792208\",\n    \"predicate\": \"privacyKeyStatusTimestamp\",\n    \"params\": [],\n    \"type\": \"PrivacyKey\"\n  }, {\n    \"id\": \"218751099\",\n    \"predicate\": \"inputPrivacyValueAllowContacts\",\n    \"params\": [],\n    \"type\": \"InputPrivacyRule\"\n  }, {\n    \"id\": \"407582158\",\n    \"predicate\": \"inputPrivacyValueAllowAll\",\n    \"params\": [],\n    \"type\": \"InputPrivacyRule\"\n  }, {\n    \"id\": \"320652927\",\n    \"predicate\": \"inputPrivacyValueAllowUsers\",\n    \"params\": [{\"name\": \"users\", \"type\": \"Vector<InputUser>\"}],\n    \"type\": \"InputPrivacyRule\"\n  }, {\n    \"id\": \"195371015\",\n    \"predicate\": \"inputPrivacyValueDisallowContacts\",\n    \"params\": [],\n    \"type\": \"InputPrivacyRule\"\n  }, {\n    \"id\": \"-697604407\",\n    \"predicate\": \"inputPrivacyValueDisallowAll\",\n    \"params\": [],\n    \"type\": \"InputPrivacyRule\"\n  }, {\n    \"id\": \"-1877932953\",\n    \"predicate\": \"inputPrivacyValueDisallowUsers\",\n    \"params\": [{\"name\": \"users\", \"type\": \"Vector<InputUser>\"}],\n    \"type\": \"InputPrivacyRule\"\n  }, {\n    \"id\": \"-123988\",\n    \"predicate\": \"privacyValueAllowContacts\",\n    \"params\": [],\n    \"type\": \"PrivacyRule\"\n  }, {\n    \"id\": \"1698855810\",\n    \"predicate\": \"privacyValueAllowAll\",\n    \"params\": [],\n    \"type\": \"PrivacyRule\"\n  }, {\n    \"id\": \"1297858060\",\n    \"predicate\": \"privacyValueAllowUsers\",\n    \"params\": [{\"name\": \"users\", \"type\": \"Vector<int>\"}],\n    \"type\": \"PrivacyRule\"\n  }, {\n    \"id\": \"-125240806\",\n    \"predicate\": \"privacyValueDisallowContacts\",\n    \"params\": [],\n    \"type\": \"PrivacyRule\"\n  }, {\n    \"id\": \"-1955338397\",\n    \"predicate\": \"privacyValueDisallowAll\",\n    \"params\": [],\n    \"type\": \"PrivacyRule\"\n  }, {\n    \"id\": \"209668535\",\n    \"predicate\": \"privacyValueDisallowUsers\",\n    \"params\": [{\"name\": \"users\", \"type\": \"Vector<int>\"}],\n    \"type\": \"PrivacyRule\"\n  }, {\n    \"id\": \"1352683077\",\n    \"predicate\": \"account.privacyRules\",\n    \"params\": [{\"name\": \"rules\", \"type\": \"Vector<PrivacyRule>\"}, {\n      \"name\": \"chats\",\n      \"type\": \"Vector<Chat>\"\n    }, {\"name\": \"users\", \"type\": \"Vector<User>\"}],\n    \"type\": \"account.PrivacyRules\"\n  }, {\n    \"id\": \"-1194283041\",\n    \"predicate\": \"accountDaysTTL\",\n    \"params\": [{\"name\": \"days\", \"type\": \"int\"}],\n    \"type\": \"AccountDaysTTL\"\n  }, {\n    \"id\": \"314130811\",\n    \"predicate\": \"updateUserPhone\",\n    \"params\": [{\"name\": \"user_id\", \"type\": \"int\"}, {\"name\": \"phone\", \"type\": \"string\"}],\n    \"type\": \"Update\"\n  }, {\n    \"id\": \"1815593308\",\n    \"predicate\": \"documentAttributeImageSize\",\n    \"params\": [{\"name\": \"w\", \"type\": \"int\"}, {\"name\": \"h\", \"type\": \"int\"}],\n    \"type\": \"DocumentAttribute\"\n  }, {\n    \"id\": \"297109817\",\n    \"predicate\": \"documentAttributeAnimated\",\n    \"params\": [],\n    \"type\": \"DocumentAttribute\"\n  }, {\n    \"id\": \"1662637586\",\n    \"predicate\": \"documentAttributeSticker\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"mask\", \"type\": \"flags.1?true\"}, {\n      \"name\": \"alt\",\n      \"type\": \"string\"\n    }, {\"name\": \"stickerset\", \"type\": \"InputStickerSet\"}, {\"name\": \"mask_coords\", \"type\": \"flags.0?MaskCoords\"}],\n    \"type\": \"DocumentAttribute\"\n  }, {\n    \"id\": \"250621158\",\n    \"predicate\": \"documentAttributeVideo\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\n      \"name\": \"round_message\",\n      \"type\": \"flags.0?true\"\n    }, {\"name\": \"supports_streaming\", \"type\": \"flags.1?true\"}, {\"name\": \"duration\", \"type\": \"int\"}, {\n      \"name\": \"w\",\n      \"type\": \"int\"\n    }, {\"name\": \"h\", \"type\": \"int\"}],\n    \"type\": \"DocumentAttribute\"\n  }, {\n    \"id\": \"-1739392570\",\n    \"predicate\": \"documentAttributeAudio\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"voice\", \"type\": \"flags.10?true\"}, {\n      \"name\": \"duration\",\n      \"type\": \"int\"\n    }, {\"name\": \"title\", \"type\": \"flags.0?string\"}, {\n      \"name\": \"performer\",\n      \"type\": \"flags.1?string\"\n    }, {\"name\": \"waveform\", \"type\": \"flags.2?bytes\"}],\n    \"type\": \"DocumentAttribute\"\n  }, {\n    \"id\": \"358154344\",\n    \"predicate\": \"documentAttributeFilename\",\n    \"params\": [{\"name\": \"file_name\", \"type\": \"string\"}],\n    \"type\": \"DocumentAttribute\"\n  }, {\n    \"id\": \"-244016606\",\n    \"predicate\": \"messages.stickersNotModified\",\n    \"params\": [],\n    \"type\": \"messages.Stickers\"\n  }, {\n    \"id\": \"-463889475\",\n    \"predicate\": \"messages.stickers\",\n    \"params\": [{\"name\": \"hash\", \"type\": \"int\"}, {\"name\": \"stickers\", \"type\": \"Vector<Document>\"}],\n    \"type\": \"messages.Stickers\"\n  }, {\n    \"id\": \"313694676\",\n    \"predicate\": \"stickerPack\",\n    \"params\": [{\"name\": \"emoticon\", \"type\": \"string\"}, {\"name\": \"documents\", \"type\": \"Vector<long>\"}],\n    \"type\": \"StickerPack\"\n  }, {\n    \"id\": \"-395967805\",\n    \"predicate\": \"messages.allStickersNotModified\",\n    \"params\": [],\n    \"type\": \"messages.AllStickers\"\n  }, {\n    \"id\": \"-302170017\",\n    \"predicate\": \"messages.allStickers\",\n    \"params\": [{\"name\": \"hash\", \"type\": \"int\"}, {\"name\": \"sets\", \"type\": \"Vector<StickerSet>\"}],\n    \"type\": \"messages.AllStickers\"\n  }, {\n    \"id\": \"-1667805217\",\n    \"predicate\": \"updateReadHistoryInbox\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"folder_id\", \"type\": \"flags.0?int\"}, {\n      \"name\": \"peer\",\n      \"type\": \"Peer\"\n    }, {\"name\": \"max_id\", \"type\": \"int\"}, {\"name\": \"still_unread_count\", \"type\": \"int\"}, {\n      \"name\": \"pts\",\n      \"type\": \"int\"\n    }, {\"name\": \"pts_count\", \"type\": \"int\"}],\n    \"type\": \"Update\"\n  }, {\n    \"id\": \"791617983\",\n    \"predicate\": \"updateReadHistoryOutbox\",\n    \"params\": [{\"name\": \"peer\", \"type\": \"Peer\"}, {\"name\": \"max_id\", \"type\": \"int\"}, {\n      \"name\": \"pts\",\n      \"type\": \"int\"\n    }, {\"name\": \"pts_count\", \"type\": \"int\"}],\n    \"type\": \"Update\"\n  }, {\n    \"id\": \"-2066640507\",\n    \"predicate\": \"messages.affectedMessages\",\n    \"params\": [{\"name\": \"pts\", \"type\": \"int\"}, {\"name\": \"pts_count\", \"type\": \"int\"}],\n    \"type\": \"messages.AffectedMessages\"\n  }, {\n    \"id\": \"2139689491\",\n    \"predicate\": \"updateWebPage\",\n    \"params\": [{\"name\": \"webpage\", \"type\": \"WebPage\"}, {\"name\": \"pts\", \"type\": \"int\"}, {\n      \"name\": \"pts_count\",\n      \"type\": \"int\"\n    }],\n    \"type\": \"Update\"\n  }, {\n    \"id\": \"-350980120\",\n    \"predicate\": \"webPageEmpty\",\n    \"params\": [{\"name\": \"id\", \"type\": \"long\"}],\n    \"type\": \"WebPage\"\n  }, {\n    \"id\": \"-981018084\",\n    \"predicate\": \"webPagePending\",\n    \"params\": [{\"name\": \"id\", \"type\": \"long\"}, {\"name\": \"date\", \"type\": \"int\"}],\n    \"type\": \"WebPage\"\n  }, {\n    \"id\": \"-94051982\",\n    \"predicate\": \"webPage\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"id\", \"type\": \"long\"}, {\n      \"name\": \"url\",\n      \"type\": \"string\"\n    }, {\"name\": \"display_url\", \"type\": \"string\"}, {\"name\": \"hash\", \"type\": \"int\"}, {\n      \"name\": \"type\",\n      \"type\": \"flags.0?string\"\n    }, {\"name\": \"site_name\", \"type\": \"flags.1?string\"}, {\n      \"name\": \"title\",\n      \"type\": \"flags.2?string\"\n    }, {\"name\": \"description\", \"type\": \"flags.3?string\"}, {\n      \"name\": \"photo\",\n      \"type\": \"flags.4?Photo\"\n    }, {\"name\": \"embed_url\", \"type\": \"flags.5?string\"}, {\n      \"name\": \"embed_type\",\n      \"type\": \"flags.5?string\"\n    }, {\"name\": \"embed_width\", \"type\": \"flags.6?int\"}, {\n      \"name\": \"embed_height\",\n      \"type\": \"flags.6?int\"\n    }, {\"name\": \"duration\", \"type\": \"flags.7?int\"}, {\"name\": \"author\", \"type\": \"flags.8?string\"}, {\n      \"name\": \"document\",\n      \"type\": \"flags.9?Document\"\n    }, {\"name\": \"documents\", \"type\": \"flags.11?Vector<Document>\"}, {\"name\": \"cached_page\", \"type\": \"flags.10?Page\"}],\n    \"type\": \"WebPage\"\n  }, {\n    \"id\": \"-1557277184\",\n    \"predicate\": \"messageMediaWebPage\",\n    \"params\": [{\"name\": \"webpage\", \"type\": \"WebPage\"}],\n    \"type\": \"MessageMedia\"\n  }, {\n    \"id\": \"-1392388579\",\n    \"predicate\": \"authorization\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"current\", \"type\": \"flags.0?true\"}, {\n      \"name\": \"official_app\",\n      \"type\": \"flags.1?true\"\n    }, {\"name\": \"password_pending\", \"type\": \"flags.2?true\"}, {\"name\": \"hash\", \"type\": \"long\"}, {\n      \"name\": \"device_model\",\n      \"type\": \"string\"\n    }, {\"name\": \"platform\", \"type\": \"string\"}, {\"name\": \"system_version\", \"type\": \"string\"}, {\n      \"name\": \"api_id\",\n      \"type\": \"int\"\n    }, {\"name\": \"app_name\", \"type\": \"string\"}, {\"name\": \"app_version\", \"type\": \"string\"}, {\n      \"name\": \"date_created\",\n      \"type\": \"int\"\n    }, {\"name\": \"date_active\", \"type\": \"int\"}, {\"name\": \"ip\", \"type\": \"string\"}, {\n      \"name\": \"country\",\n      \"type\": \"string\"\n    }, {\"name\": \"region\", \"type\": \"string\"}],\n    \"type\": \"Authorization\"\n  }, {\n    \"id\": \"307276766\",\n    \"predicate\": \"account.authorizations\",\n    \"params\": [{\"name\": \"authorizations\", \"type\": \"Vector<Authorization>\"}],\n    \"type\": \"account.Authorizations\"\n  }, {\n    \"id\": \"-1390001672\",\n    \"predicate\": \"account.password\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\n      \"name\": \"has_recovery\",\n      \"type\": \"flags.0?true\"\n    }, {\"name\": \"has_secure_values\", \"type\": \"flags.1?true\"}, {\n      \"name\": \"has_password\",\n      \"type\": \"flags.2?true\"\n    }, {\"name\": \"current_algo\", \"type\": \"flags.2?PasswordKdfAlgo\"}, {\n      \"name\": \"srp_B\",\n      \"type\": \"flags.2?bytes\"\n    }, {\"name\": \"srp_id\", \"type\": \"flags.2?long\"}, {\n      \"name\": \"hint\",\n      \"type\": \"flags.3?string\"\n    }, {\"name\": \"email_unconfirmed_pattern\", \"type\": \"flags.4?string\"}, {\n      \"name\": \"new_algo\",\n      \"type\": \"PasswordKdfAlgo\"\n    }, {\"name\": \"new_secure_algo\", \"type\": \"SecurePasswordKdfAlgo\"}, {\"name\": \"secure_random\", \"type\": \"bytes\"}],\n    \"type\": \"account.Password\"\n  }, {\n    \"id\": \"-1705233435\",\n    \"predicate\": \"account.passwordSettings\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"email\", \"type\": \"flags.0?string\"}, {\n      \"name\": \"secure_settings\",\n      \"type\": \"flags.1?SecureSecretSettings\"\n    }],\n    \"type\": \"account.PasswordSettings\"\n  }, {\n    \"id\": \"-1036572727\",\n    \"predicate\": \"account.passwordInputSettings\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\n      \"name\": \"new_algo\",\n      \"type\": \"flags.0?PasswordKdfAlgo\"\n    }, {\"name\": \"new_password_hash\", \"type\": \"flags.0?bytes\"}, {\n      \"name\": \"hint\",\n      \"type\": \"flags.0?string\"\n    }, {\"name\": \"email\", \"type\": \"flags.1?string\"}, {\n      \"name\": \"new_secure_settings\",\n      \"type\": \"flags.2?SecureSecretSettings\"\n    }],\n    \"type\": \"account.PasswordInputSettings\"\n  }, {\n    \"id\": \"326715557\",\n    \"predicate\": \"auth.passwordRecovery\",\n    \"params\": [{\"name\": \"email_pattern\", \"type\": \"string\"}],\n    \"type\": \"auth.PasswordRecovery\"\n  }, {\n    \"id\": \"-1052959727\",\n    \"predicate\": \"inputMediaVenue\",\n    \"params\": [{\"name\": \"geo_point\", \"type\": \"InputGeoPoint\"}, {\"name\": \"title\", \"type\": \"string\"}, {\n      \"name\": \"address\",\n      \"type\": \"string\"\n    }, {\"name\": \"provider\", \"type\": \"string\"}, {\"name\": \"venue_id\", \"type\": \"string\"}, {\n      \"name\": \"venue_type\",\n      \"type\": \"string\"\n    }],\n    \"type\": \"InputMedia\"\n  }, {\n    \"id\": \"784356159\",\n    \"predicate\": \"messageMediaVenue\",\n    \"params\": [{\"name\": \"geo\", \"type\": \"GeoPoint\"}, {\"name\": \"title\", \"type\": \"string\"}, {\n      \"name\": \"address\",\n      \"type\": \"string\"\n    }, {\"name\": \"provider\", \"type\": \"string\"}, {\"name\": \"venue_id\", \"type\": \"string\"}, {\n      \"name\": \"venue_type\",\n      \"type\": \"string\"\n    }],\n    \"type\": \"MessageMedia\"\n  }, {\n    \"id\": \"-1551583367\",\n    \"predicate\": \"receivedNotifyMessage\",\n    \"params\": [{\"name\": \"id\", \"type\": \"int\"}, {\"name\": \"flags\", \"type\": \"int\"}],\n    \"type\": \"ReceivedNotifyMessage\"\n  }, {\n    \"id\": \"1776236393\",\n    \"predicate\": \"chatInviteEmpty\",\n    \"params\": [],\n    \"type\": \"ExportedChatInvite\"\n  }, {\n    \"id\": \"-64092740\",\n    \"predicate\": \"chatInviteExported\",\n    \"params\": [{\"name\": \"link\", \"type\": \"string\"}],\n    \"type\": \"ExportedChatInvite\"\n  }, {\n    \"id\": \"1516793212\",\n    \"predicate\": \"chatInviteAlready\",\n    \"params\": [{\"name\": \"chat\", \"type\": \"Chat\"}],\n    \"type\": \"ChatInvite\"\n  }, {\n    \"id\": \"-540871282\",\n    \"predicate\": \"chatInvite\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"channel\", \"type\": \"flags.0?true\"}, {\n      \"name\": \"broadcast\",\n      \"type\": \"flags.1?true\"\n    }, {\"name\": \"public\", \"type\": \"flags.2?true\"}, {\"name\": \"megagroup\", \"type\": \"flags.3?true\"}, {\n      \"name\": \"title\",\n      \"type\": \"string\"\n    }, {\"name\": \"photo\", \"type\": \"Photo\"}, {\"name\": \"participants_count\", \"type\": \"int\"}, {\n      \"name\": \"participants\",\n      \"type\": \"flags.4?Vector<User>\"\n    }],\n    \"type\": \"ChatInvite\"\n  }, {\n    \"id\": \"-123931160\",\n    \"predicate\": \"messageActionChatJoinedByLink\",\n    \"params\": [{\"name\": \"inviter_id\", \"type\": \"int\"}],\n    \"type\": \"MessageAction\"\n  }, {\n    \"id\": \"1757493555\",\n    \"predicate\": \"updateReadMessagesContents\",\n    \"params\": [{\"name\": \"messages\", \"type\": \"Vector<int>\"}, {\"name\": \"pts\", \"type\": \"int\"}, {\n      \"name\": \"pts_count\",\n      \"type\": \"int\"\n    }],\n    \"type\": \"Update\"\n  }, {\n    \"id\": \"-4838507\",\n    \"predicate\": \"inputStickerSetEmpty\",\n    \"params\": [],\n    \"type\": \"InputStickerSet\"\n  }, {\n    \"id\": \"-1645763991\",\n    \"predicate\": \"inputStickerSetID\",\n    \"params\": [{\"name\": \"id\", \"type\": \"long\"}, {\"name\": \"access_hash\", \"type\": \"long\"}],\n    \"type\": \"InputStickerSet\"\n  }, {\n    \"id\": \"-2044933984\",\n    \"predicate\": \"inputStickerSetShortName\",\n    \"params\": [{\"name\": \"short_name\", \"type\": \"string\"}],\n    \"type\": \"InputStickerSet\"\n  }, {\n    \"id\": \"-290164953\",\n    \"predicate\": \"stickerSet\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"archived\", \"type\": \"flags.1?true\"}, {\n      \"name\": \"official\",\n      \"type\": \"flags.2?true\"\n    }, {\"name\": \"masks\", \"type\": \"flags.3?true\"}, {\n      \"name\": \"animated\",\n      \"type\": \"flags.5?true\"\n    }, {\"name\": \"installed_date\", \"type\": \"flags.0?int\"}, {\"name\": \"id\", \"type\": \"long\"}, {\n      \"name\": \"access_hash\",\n      \"type\": \"long\"\n    }, {\"name\": \"title\", \"type\": \"string\"}, {\"name\": \"short_name\", \"type\": \"string\"}, {\n      \"name\": \"thumb\",\n      \"type\": \"flags.4?PhotoSize\"\n    }, {\"name\": \"thumb_dc_id\", \"type\": \"flags.4?int\"}, {\"name\": \"count\", \"type\": \"int\"}, {\n      \"name\": \"hash\",\n      \"type\": \"int\"\n    }],\n    \"type\": \"StickerSet\"\n  }, {\n    \"id\": \"-1240849242\",\n    \"predicate\": \"messages.stickerSet\",\n    \"params\": [{\"name\": \"set\", \"type\": \"StickerSet\"}, {\n      \"name\": \"packs\",\n      \"type\": \"Vector<StickerPack>\"\n    }, {\"name\": \"documents\", \"type\": \"Vector<Document>\"}],\n    \"type\": \"messages.StickerSet\"\n  }, {\n    \"id\": \"-1820043071\",\n    \"predicate\": \"user\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"self\", \"type\": \"flags.10?true\"}, {\n      \"name\": \"contact\",\n      \"type\": \"flags.11?true\"\n    }, {\"name\": \"mutual_contact\", \"type\": \"flags.12?true\"}, {\n      \"name\": \"deleted\",\n      \"type\": \"flags.13?true\"\n    }, {\"name\": \"bot\", \"type\": \"flags.14?true\"}, {\n      \"name\": \"bot_chat_history\",\n      \"type\": \"flags.15?true\"\n    }, {\"name\": \"bot_nochats\", \"type\": \"flags.16?true\"}, {\n      \"name\": \"verified\",\n      \"type\": \"flags.17?true\"\n    }, {\"name\": \"restricted\", \"type\": \"flags.18?true\"}, {\n      \"name\": \"min\",\n      \"type\": \"flags.20?true\"\n    }, {\"name\": \"bot_inline_geo\", \"type\": \"flags.21?true\"}, {\n      \"name\": \"support\",\n      \"type\": \"flags.23?true\"\n    }, {\"name\": \"scam\", \"type\": \"flags.24?true\"}, {\"name\": \"id\", \"type\": \"int\"}, {\n      \"name\": \"access_hash\",\n      \"type\": \"flags.0?long\"\n    }, {\"name\": \"first_name\", \"type\": \"flags.1?string\"}, {\n      \"name\": \"last_name\",\n      \"type\": \"flags.2?string\"\n    }, {\"name\": \"username\", \"type\": \"flags.3?string\"}, {\"name\": \"phone\", \"type\": \"flags.4?string\"}, {\n      \"name\": \"photo\",\n      \"type\": \"flags.5?UserProfilePhoto\"\n    }, {\"name\": \"status\", \"type\": \"flags.6?UserStatus\"}, {\n      \"name\": \"bot_info_version\",\n      \"type\": \"flags.14?int\"\n    }, {\"name\": \"restriction_reason\", \"type\": \"flags.18?Vector<RestrictionReason>\"}, {\n      \"name\": \"bot_inline_placeholder\",\n      \"type\": \"flags.19?string\"\n    }, {\"name\": \"lang_code\", \"type\": \"flags.22?string\"}],\n    \"type\": \"User\"\n  }, {\n    \"id\": \"-1032140601\",\n    \"predicate\": \"botCommand\",\n    \"params\": [{\"name\": \"command\", \"type\": \"string\"}, {\"name\": \"description\", \"type\": \"string\"}],\n    \"type\": \"BotCommand\"\n  }, {\n    \"id\": \"-1729618630\",\n    \"predicate\": \"botInfo\",\n    \"params\": [{\"name\": \"user_id\", \"type\": \"int\"}, {\"name\": \"description\", \"type\": \"string\"}, {\n      \"name\": \"commands\",\n      \"type\": \"Vector<BotCommand>\"\n    }],\n    \"type\": \"BotInfo\"\n  }, {\n    \"id\": \"-1560655744\",\n    \"predicate\": \"keyboardButton\",\n    \"params\": [{\"name\": \"text\", \"type\": \"string\"}],\n    \"type\": \"KeyboardButton\"\n  }, {\n    \"id\": \"2002815875\",\n    \"predicate\": \"keyboardButtonRow\",\n    \"params\": [{\"name\": \"buttons\", \"type\": \"Vector<KeyboardButton>\"}],\n    \"type\": \"KeyboardButtonRow\"\n  }, {\n    \"id\": \"-1606526075\",\n    \"predicate\": \"replyKeyboardHide\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"selective\", \"type\": \"flags.2?true\"}],\n    \"type\": \"ReplyMarkup\"\n  }, {\n    \"id\": \"-200242528\",\n    \"predicate\": \"replyKeyboardForceReply\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"single_use\", \"type\": \"flags.1?true\"}, {\n      \"name\": \"selective\",\n      \"type\": \"flags.2?true\"\n    }],\n    \"type\": \"ReplyMarkup\"\n  }, {\n    \"id\": \"889353612\",\n    \"predicate\": \"replyKeyboardMarkup\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"resize\", \"type\": \"flags.0?true\"}, {\n      \"name\": \"single_use\",\n      \"type\": \"flags.1?true\"\n    }, {\"name\": \"selective\", \"type\": \"flags.2?true\"}, {\"name\": \"rows\", \"type\": \"Vector<KeyboardButtonRow>\"}],\n    \"type\": \"ReplyMarkup\"\n  }, {\n    \"id\": \"2072935910\",\n    \"predicate\": \"inputPeerUser\",\n    \"params\": [{\"name\": \"user_id\", \"type\": \"int\"}, {\"name\": \"access_hash\", \"type\": \"long\"}],\n    \"type\": \"InputPeer\"\n  }, {\n    \"id\": \"-668391402\",\n    \"predicate\": \"inputUser\",\n    \"params\": [{\"name\": \"user_id\", \"type\": \"int\"}, {\"name\": \"access_hash\", \"type\": \"long\"}],\n    \"type\": \"InputUser\"\n  }, {\n    \"id\": \"-1148011883\",\n    \"predicate\": \"messageEntityUnknown\",\n    \"params\": [{\"name\": \"offset\", \"type\": \"int\"}, {\"name\": \"length\", \"type\": \"int\"}],\n    \"type\": \"MessageEntity\"\n  }, {\n    \"id\": \"-100378723\",\n    \"predicate\": \"messageEntityMention\",\n    \"params\": [{\"name\": \"offset\", \"type\": \"int\"}, {\"name\": \"length\", \"type\": \"int\"}],\n    \"type\": \"MessageEntity\"\n  }, {\n    \"id\": \"1868782349\",\n    \"predicate\": \"messageEntityHashtag\",\n    \"params\": [{\"name\": \"offset\", \"type\": \"int\"}, {\"name\": \"length\", \"type\": \"int\"}],\n    \"type\": \"MessageEntity\"\n  }, {\n    \"id\": \"1827637959\",\n    \"predicate\": \"messageEntityBotCommand\",\n    \"params\": [{\"name\": \"offset\", \"type\": \"int\"}, {\"name\": \"length\", \"type\": \"int\"}],\n    \"type\": \"MessageEntity\"\n  }, {\n    \"id\": \"1859134776\",\n    \"predicate\": \"messageEntityUrl\",\n    \"params\": [{\"name\": \"offset\", \"type\": \"int\"}, {\"name\": \"length\", \"type\": \"int\"}],\n    \"type\": \"MessageEntity\"\n  }, {\n    \"id\": \"1692693954\",\n    \"predicate\": \"messageEntityEmail\",\n    \"params\": [{\"name\": \"offset\", \"type\": \"int\"}, {\"name\": \"length\", \"type\": \"int\"}],\n    \"type\": \"MessageEntity\"\n  }, {\n    \"id\": \"-1117713463\",\n    \"predicate\": \"messageEntityBold\",\n    \"params\": [{\"name\": \"offset\", \"type\": \"int\"}, {\"name\": \"length\", \"type\": \"int\"}],\n    \"type\": \"MessageEntity\"\n  }, {\n    \"id\": \"-2106619040\",\n    \"predicate\": \"messageEntityItalic\",\n    \"params\": [{\"name\": \"offset\", \"type\": \"int\"}, {\"name\": \"length\", \"type\": \"int\"}],\n    \"type\": \"MessageEntity\"\n  }, {\n    \"id\": \"681706865\",\n    \"predicate\": \"messageEntityCode\",\n    \"params\": [{\"name\": \"offset\", \"type\": \"int\"}, {\"name\": \"length\", \"type\": \"int\"}],\n    \"type\": \"MessageEntity\"\n  }, {\n    \"id\": \"1938967520\",\n    \"predicate\": \"messageEntityPre\",\n    \"params\": [{\"name\": \"offset\", \"type\": \"int\"}, {\"name\": \"length\", \"type\": \"int\"}, {\n      \"name\": \"language\",\n      \"type\": \"string\"\n    }],\n    \"type\": \"MessageEntity\"\n  }, {\n    \"id\": \"1990644519\",\n    \"predicate\": \"messageEntityTextUrl\",\n    \"params\": [{\"name\": \"offset\", \"type\": \"int\"}, {\"name\": \"length\", \"type\": \"int\"}, {\"name\": \"url\", \"type\": \"string\"}],\n    \"type\": \"MessageEntity\"\n  }, {\n    \"id\": \"301019932\",\n    \"predicate\": \"updateShortSentMessage\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"out\", \"type\": \"flags.1?true\"}, {\n      \"name\": \"id\",\n      \"type\": \"int\"\n    }, {\"name\": \"pts\", \"type\": \"int\"}, {\"name\": \"pts_count\", \"type\": \"int\"}, {\n      \"name\": \"date\",\n      \"type\": \"int\"\n    }, {\"name\": \"media\", \"type\": \"flags.9?MessageMedia\"}, {\n      \"name\": \"entities\",\n      \"type\": \"flags.7?Vector<MessageEntity>\"\n    }],\n    \"type\": \"Updates\"\n  }, {\"id\": \"-292807034\", \"predicate\": \"inputChannelEmpty\", \"params\": [], \"type\": \"InputChannel\"}, {\n    \"id\": \"-1343524562\",\n    \"predicate\": \"inputChannel\",\n    \"params\": [{\"name\": \"channel_id\", \"type\": \"int\"}, {\"name\": \"access_hash\", \"type\": \"long\"}],\n    \"type\": \"InputChannel\"\n  }, {\n    \"id\": \"-1109531342\",\n    \"predicate\": \"peerChannel\",\n    \"params\": [{\"name\": \"channel_id\", \"type\": \"int\"}],\n    \"type\": \"Peer\"\n  }, {\n    \"id\": \"548253432\",\n    \"predicate\": \"inputPeerChannel\",\n    \"params\": [{\"name\": \"channel_id\", \"type\": \"int\"}, {\"name\": \"access_hash\", \"type\": \"long\"}],\n    \"type\": \"InputPeer\"\n  }, {\n    \"id\": \"-753232354\",\n    \"predicate\": \"channel\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"creator\", \"type\": \"flags.0?true\"}, {\n      \"name\": \"left\",\n      \"type\": \"flags.2?true\"\n    }, {\"name\": \"broadcast\", \"type\": \"flags.5?true\"}, {\n      \"name\": \"verified\",\n      \"type\": \"flags.7?true\"\n    }, {\"name\": \"megagroup\", \"type\": \"flags.8?true\"}, {\n      \"name\": \"restricted\",\n      \"type\": \"flags.9?true\"\n    }, {\"name\": \"signatures\", \"type\": \"flags.11?true\"}, {\"name\": \"min\", \"type\": \"flags.12?true\"}, {\n      \"name\": \"scam\",\n      \"type\": \"flags.19?true\"\n    }, {\"name\": \"has_link\", \"type\": \"flags.20?true\"}, {\n      \"name\": \"has_geo\",\n      \"type\": \"flags.21?true\"\n    }, {\"name\": \"slowmode_enabled\", \"type\": \"flags.22?true\"}, {\"name\": \"id\", \"type\": \"int\"}, {\n      \"name\": \"access_hash\",\n      \"type\": \"flags.13?long\"\n    }, {\"name\": \"title\", \"type\": \"string\"}, {\"name\": \"username\", \"type\": \"flags.6?string\"}, {\n      \"name\": \"photo\",\n      \"type\": \"ChatPhoto\"\n    }, {\"name\": \"date\", \"type\": \"int\"}, {\"name\": \"version\", \"type\": \"int\"}, {\n      \"name\": \"restriction_reason\",\n      \"type\": \"flags.9?Vector<RestrictionReason>\"\n    }, {\"name\": \"admin_rights\", \"type\": \"flags.14?ChatAdminRights\"}, {\n      \"name\": \"banned_rights\",\n      \"type\": \"flags.15?ChatBannedRights\"\n    }, {\"name\": \"default_banned_rights\", \"type\": \"flags.18?ChatBannedRights\"}, {\n      \"name\": \"participants_count\",\n      \"type\": \"flags.17?int\"\n    }],\n    \"type\": \"Chat\"\n  }, {\n    \"id\": \"681420594\",\n    \"predicate\": \"channelForbidden\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"broadcast\", \"type\": \"flags.5?true\"}, {\n      \"name\": \"megagroup\",\n      \"type\": \"flags.8?true\"\n    }, {\"name\": \"id\", \"type\": \"int\"}, {\"name\": \"access_hash\", \"type\": \"long\"}, {\n      \"name\": \"title\",\n      \"type\": \"string\"\n    }, {\"name\": \"until_date\", \"type\": \"flags.16?int\"}],\n    \"type\": \"Chat\"\n  }, {\n    \"id\": \"2131196633\",\n    \"predicate\": \"contacts.resolvedPeer\",\n    \"params\": [{\"name\": \"peer\", \"type\": \"Peer\"}, {\"name\": \"chats\", \"type\": \"Vector<Chat>\"}, {\n      \"name\": \"users\",\n      \"type\": \"Vector<User>\"\n    }],\n    \"type\": \"contacts.ResolvedPeer\"\n  }, {\n    \"id\": \"763976820\",\n    \"predicate\": \"channelFull\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\n      \"name\": \"can_view_participants\",\n      \"type\": \"flags.3?true\"\n    }, {\"name\": \"can_set_username\", \"type\": \"flags.6?true\"}, {\n      \"name\": \"can_set_stickers\",\n      \"type\": \"flags.7?true\"\n    }, {\"name\": \"hidden_prehistory\", \"type\": \"flags.10?true\"}, {\n      \"name\": \"can_view_stats\",\n      \"type\": \"flags.12?true\"\n    }, {\"name\": \"can_set_location\", \"type\": \"flags.16?true\"}, {\n      \"name\": \"has_scheduled\",\n      \"type\": \"flags.19?true\"\n    }, {\"name\": \"id\", \"type\": \"int\"}, {\"name\": \"about\", \"type\": \"string\"}, {\n      \"name\": \"participants_count\",\n      \"type\": \"flags.0?int\"\n    }, {\"name\": \"admins_count\", \"type\": \"flags.1?int\"}, {\n      \"name\": \"kicked_count\",\n      \"type\": \"flags.2?int\"\n    }, {\"name\": \"banned_count\", \"type\": \"flags.2?int\"}, {\n      \"name\": \"online_count\",\n      \"type\": \"flags.13?int\"\n    }, {\"name\": \"read_inbox_max_id\", \"type\": \"int\"}, {\n      \"name\": \"read_outbox_max_id\",\n      \"type\": \"int\"\n    }, {\"name\": \"unread_count\", \"type\": \"int\"}, {\"name\": \"chat_photo\", \"type\": \"Photo\"}, {\n      \"name\": \"notify_settings\",\n      \"type\": \"PeerNotifySettings\"\n    }, {\"name\": \"exported_invite\", \"type\": \"ExportedChatInvite\"}, {\n      \"name\": \"bot_info\",\n      \"type\": \"Vector<BotInfo>\"\n    }, {\"name\": \"migrated_from_chat_id\", \"type\": \"flags.4?int\"}, {\n      \"name\": \"migrated_from_max_id\",\n      \"type\": \"flags.4?int\"\n    }, {\"name\": \"pinned_msg_id\", \"type\": \"flags.5?int\"}, {\n      \"name\": \"stickerset\",\n      \"type\": \"flags.8?StickerSet\"\n    }, {\"name\": \"available_min_id\", \"type\": \"flags.9?int\"}, {\n      \"name\": \"folder_id\",\n      \"type\": \"flags.11?int\"\n    }, {\"name\": \"linked_chat_id\", \"type\": \"flags.14?int\"}, {\n      \"name\": \"location\",\n      \"type\": \"flags.15?ChannelLocation\"\n    }, {\"name\": \"slowmode_seconds\", \"type\": \"flags.17?int\"}, {\n      \"name\": \"slowmode_next_send_date\",\n      \"type\": \"flags.18?int\"\n    }, {\"name\": \"pts\", \"type\": \"int\"}],\n    \"type\": \"ChatFull\"\n  }, {\n    \"id\": \"182649427\",\n    \"predicate\": \"messageRange\",\n    \"params\": [{\"name\": \"min_id\", \"type\": \"int\"}, {\"name\": \"max_id\", \"type\": \"int\"}],\n    \"type\": \"MessageRange\"\n  }, {\n    \"id\": \"-1725551049\",\n    \"predicate\": \"messages.channelMessages\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"inexact\", \"type\": \"flags.1?true\"}, {\n      \"name\": \"pts\",\n      \"type\": \"int\"\n    }, {\"name\": \"count\", \"type\": \"int\"}, {\"name\": \"messages\", \"type\": \"Vector<Message>\"}, {\n      \"name\": \"chats\",\n      \"type\": \"Vector<Chat>\"\n    }, {\"name\": \"users\", \"type\": \"Vector<User>\"}],\n    \"type\": \"messages.Messages\"\n  }, {\n    \"id\": \"-1781355374\",\n    \"predicate\": \"messageActionChannelCreate\",\n    \"params\": [{\"name\": \"title\", \"type\": \"string\"}],\n    \"type\": \"MessageAction\"\n  }, {\n    \"id\": \"-352032773\",\n    \"predicate\": \"updateChannelTooLong\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"channel_id\", \"type\": \"int\"}, {\n      \"name\": \"pts\",\n      \"type\": \"flags.0?int\"\n    }],\n    \"type\": \"Update\"\n  }, {\n    \"id\": \"-1227598250\",\n    \"predicate\": \"updateChannel\",\n    \"params\": [{\"name\": \"channel_id\", \"type\": \"int\"}],\n    \"type\": \"Update\"\n  }, {\n    \"id\": \"1656358105\",\n    \"predicate\": \"updateNewChannelMessage\",\n    \"params\": [{\"name\": \"message\", \"type\": \"Message\"}, {\"name\": \"pts\", \"type\": \"int\"}, {\n      \"name\": \"pts_count\",\n      \"type\": \"int\"\n    }],\n    \"type\": \"Update\"\n  }, {\n    \"id\": \"856380452\",\n    \"predicate\": \"updateReadChannelInbox\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"folder_id\", \"type\": \"flags.0?int\"}, {\n      \"name\": \"channel_id\",\n      \"type\": \"int\"\n    }, {\"name\": \"max_id\", \"type\": \"int\"}, {\"name\": \"still_unread_count\", \"type\": \"int\"}, {\n      \"name\": \"pts\",\n      \"type\": \"int\"\n    }],\n    \"type\": \"Update\"\n  }, {\n    \"id\": \"-1015733815\",\n    \"predicate\": \"updateDeleteChannelMessages\",\n    \"params\": [{\"name\": \"channel_id\", \"type\": \"int\"}, {\"name\": \"messages\", \"type\": \"Vector<int>\"}, {\n      \"name\": \"pts\",\n      \"type\": \"int\"\n    }, {\"name\": \"pts_count\", \"type\": \"int\"}],\n    \"type\": \"Update\"\n  }, {\n    \"id\": \"-1734268085\",\n    \"predicate\": \"updateChannelMessageViews\",\n    \"params\": [{\"name\": \"channel_id\", \"type\": \"int\"}, {\"name\": \"id\", \"type\": \"int\"}, {\"name\": \"views\", \"type\": \"int\"}],\n    \"type\": \"Update\"\n  }, {\n    \"id\": \"1041346555\",\n    \"predicate\": \"updates.channelDifferenceEmpty\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"final\", \"type\": \"flags.0?true\"}, {\n      \"name\": \"pts\",\n      \"type\": \"int\"\n    }, {\"name\": \"timeout\", \"type\": \"flags.1?int\"}],\n    \"type\": \"updates.ChannelDifference\"\n  }, {\n    \"id\": \"-1531132162\",\n    \"predicate\": \"updates.channelDifferenceTooLong\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"final\", \"type\": \"flags.0?true\"}, {\n      \"name\": \"timeout\",\n      \"type\": \"flags.1?int\"\n    }, {\"name\": \"dialog\", \"type\": \"Dialog\"}, {\"name\": \"messages\", \"type\": \"Vector<Message>\"}, {\n      \"name\": \"chats\",\n      \"type\": \"Vector<Chat>\"\n    }, {\"name\": \"users\", \"type\": \"Vector<User>\"}],\n    \"type\": \"updates.ChannelDifference\"\n  }, {\n    \"id\": \"543450958\",\n    \"predicate\": \"updates.channelDifference\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"final\", \"type\": \"flags.0?true\"}, {\n      \"name\": \"pts\",\n      \"type\": \"int\"\n    }, {\"name\": \"timeout\", \"type\": \"flags.1?int\"}, {\n      \"name\": \"new_messages\",\n      \"type\": \"Vector<Message>\"\n    }, {\"name\": \"other_updates\", \"type\": \"Vector<Update>\"}, {\"name\": \"chats\", \"type\": \"Vector<Chat>\"}, {\n      \"name\": \"users\",\n      \"type\": \"Vector<User>\"\n    }],\n    \"type\": \"updates.ChannelDifference\"\n  }, {\n    \"id\": \"-1798033689\",\n    \"predicate\": \"channelMessagesFilterEmpty\",\n    \"params\": [],\n    \"type\": \"ChannelMessagesFilter\"\n  }, {\n    \"id\": \"-847783593\",\n    \"predicate\": \"channelMessagesFilter\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\n      \"name\": \"exclude_new_messages\",\n      \"type\": \"flags.1?true\"\n    }, {\"name\": \"ranges\", \"type\": \"Vector<MessageRange>\"}],\n    \"type\": \"ChannelMessagesFilter\"\n  }, {\n    \"id\": \"367766557\",\n    \"predicate\": \"channelParticipant\",\n    \"params\": [{\"name\": \"user_id\", \"type\": \"int\"}, {\"name\": \"date\", \"type\": \"int\"}],\n    \"type\": \"ChannelParticipant\"\n  }, {\n    \"id\": \"-1557620115\",\n    \"predicate\": \"channelParticipantSelf\",\n    \"params\": [{\"name\": \"user_id\", \"type\": \"int\"}, {\"name\": \"inviter_id\", \"type\": \"int\"}, {\n      \"name\": \"date\",\n      \"type\": \"int\"\n    }],\n    \"type\": \"ChannelParticipant\"\n  }, {\n    \"id\": \"-2138237532\",\n    \"predicate\": \"channelParticipantCreator\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"user_id\", \"type\": \"int\"}, {\n      \"name\": \"rank\",\n      \"type\": \"flags.0?string\"\n    }],\n    \"type\": \"ChannelParticipant\"\n  }, {\n    \"id\": \"-566281095\",\n    \"predicate\": \"channelParticipantsRecent\",\n    \"params\": [],\n    \"type\": \"ChannelParticipantsFilter\"\n  }, {\n    \"id\": \"-1268741783\",\n    \"predicate\": \"channelParticipantsAdmins\",\n    \"params\": [],\n    \"type\": \"ChannelParticipantsFilter\"\n  }, {\n    \"id\": \"-1548400251\",\n    \"predicate\": \"channelParticipantsKicked\",\n    \"params\": [{\"name\": \"q\", \"type\": \"string\"}],\n    \"type\": \"ChannelParticipantsFilter\"\n  }, {\n    \"id\": \"-177282392\",\n    \"predicate\": \"channels.channelParticipants\",\n    \"params\": [{\"name\": \"count\", \"type\": \"int\"}, {\n      \"name\": \"participants\",\n      \"type\": \"Vector<ChannelParticipant>\"\n    }, {\"name\": \"users\", \"type\": \"Vector<User>\"}],\n    \"type\": \"channels.ChannelParticipants\"\n  }, {\n    \"id\": \"-791039645\",\n    \"predicate\": \"channels.channelParticipant\",\n    \"params\": [{\"name\": \"participant\", \"type\": \"ChannelParticipant\"}, {\"name\": \"users\", \"type\": \"Vector<User>\"}],\n    \"type\": \"channels.ChannelParticipant\"\n  }, {\n    \"id\": \"-636267638\",\n    \"predicate\": \"chatParticipantCreator\",\n    \"params\": [{\"name\": \"user_id\", \"type\": \"int\"}],\n    \"type\": \"ChatParticipant\"\n  }, {\n    \"id\": \"-489233354\",\n    \"predicate\": \"chatParticipantAdmin\",\n    \"params\": [{\"name\": \"user_id\", \"type\": \"int\"}, {\"name\": \"inviter_id\", \"type\": \"int\"}, {\n      \"name\": \"date\",\n      \"type\": \"int\"\n    }],\n    \"type\": \"ChatParticipant\"\n  }, {\n    \"id\": \"-1232070311\",\n    \"predicate\": \"updateChatParticipantAdmin\",\n    \"params\": [{\"name\": \"chat_id\", \"type\": \"int\"}, {\"name\": \"user_id\", \"type\": \"int\"}, {\n      \"name\": \"is_admin\",\n      \"type\": \"Bool\"\n    }, {\"name\": \"version\", \"type\": \"int\"}],\n    \"type\": \"Update\"\n  }, {\n    \"id\": \"1371385889\",\n    \"predicate\": \"messageActionChatMigrateTo\",\n    \"params\": [{\"name\": \"channel_id\", \"type\": \"int\"}],\n    \"type\": \"MessageAction\"\n  }, {\n    \"id\": \"-1336546578\",\n    \"predicate\": \"messageActionChannelMigrateFrom\",\n    \"params\": [{\"name\": \"title\", \"type\": \"string\"}, {\"name\": \"chat_id\", \"type\": \"int\"}],\n    \"type\": \"MessageAction\"\n  }, {\n    \"id\": \"-1328445861\",\n    \"predicate\": \"channelParticipantsBots\",\n    \"params\": [],\n    \"type\": \"ChannelParticipantsFilter\"\n  }, {\n    \"id\": \"2013922064\",\n    \"predicate\": \"help.termsOfService\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"popup\", \"type\": \"flags.0?true\"}, {\n      \"name\": \"id\",\n      \"type\": \"DataJSON\"\n    }, {\"name\": \"text\", \"type\": \"string\"}, {\n      \"name\": \"entities\",\n      \"type\": \"Vector<MessageEntity>\"\n    }, {\"name\": \"min_age_confirm\", \"type\": \"flags.1?int\"}],\n    \"type\": \"help.TermsOfService\"\n  }, {\n    \"id\": \"1753886890\",\n    \"predicate\": \"updateNewStickerSet\",\n    \"params\": [{\"name\": \"stickerset\", \"type\": \"messages.StickerSet\"}],\n    \"type\": \"Update\"\n  }, {\n    \"id\": \"196268545\",\n    \"predicate\": \"updateStickerSetsOrder\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"masks\", \"type\": \"flags.0?true\"}, {\n      \"name\": \"order\",\n      \"type\": \"Vector<long>\"\n    }],\n    \"type\": \"Update\"\n  }, {\"id\": \"1135492588\", \"predicate\": \"updateStickerSets\", \"params\": [], \"type\": \"Update\"}, {\n    \"id\": \"372165663\",\n    \"predicate\": \"foundGif\",\n    \"params\": [{\"name\": \"url\", \"type\": \"string\"}, {\"name\": \"thumb_url\", \"type\": \"string\"}, {\n      \"name\": \"content_url\",\n      \"type\": \"string\"\n    }, {\"name\": \"content_type\", \"type\": \"string\"}, {\"name\": \"w\", \"type\": \"int\"}, {\"name\": \"h\", \"type\": \"int\"}],\n    \"type\": \"FoundGif\"\n  }, {\n    \"id\": \"-1670052855\",\n    \"predicate\": \"foundGifCached\",\n    \"params\": [{\"name\": \"url\", \"type\": \"string\"}, {\"name\": \"photo\", \"type\": \"Photo\"}, {\n      \"name\": \"document\",\n      \"type\": \"Document\"\n    }],\n    \"type\": \"FoundGif\"\n  }, {\n    \"id\": \"1212395773\",\n    \"predicate\": \"inputMediaGifExternal\",\n    \"params\": [{\"name\": \"url\", \"type\": \"string\"}, {\"name\": \"q\", \"type\": \"string\"}],\n    \"type\": \"InputMedia\"\n  }, {\n    \"id\": \"1158290442\",\n    \"predicate\": \"messages.foundGifs\",\n    \"params\": [{\"name\": \"next_offset\", \"type\": \"int\"}, {\"name\": \"results\", \"type\": \"Vector<FoundGif>\"}],\n    \"type\": \"messages.FoundGifs\"\n  }, {\n    \"id\": \"-402498398\",\n    \"predicate\": \"messages.savedGifsNotModified\",\n    \"params\": [],\n    \"type\": \"messages.SavedGifs\"\n  }, {\n    \"id\": \"772213157\",\n    \"predicate\": \"messages.savedGifs\",\n    \"params\": [{\"name\": \"hash\", \"type\": \"int\"}, {\"name\": \"gifs\", \"type\": \"Vector<Document>\"}],\n    \"type\": \"messages.SavedGifs\"\n  }, {\"id\": \"-1821035490\", \"predicate\": \"updateSavedGifs\", \"params\": [], \"type\": \"Update\"}, {\n    \"id\": \"864077702\",\n    \"predicate\": \"inputBotInlineMessageMediaAuto\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"message\", \"type\": \"string\"}, {\n      \"name\": \"entities\",\n      \"type\": \"flags.1?Vector<MessageEntity>\"\n    }, {\"name\": \"reply_markup\", \"type\": \"flags.2?ReplyMarkup\"}],\n    \"type\": \"InputBotInlineMessage\"\n  }, {\n    \"id\": \"1036876423\",\n    \"predicate\": \"inputBotInlineMessageText\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"no_webpage\", \"type\": \"flags.0?true\"}, {\n      \"name\": \"message\",\n      \"type\": \"string\"\n    }, {\"name\": \"entities\", \"type\": \"flags.1?Vector<MessageEntity>\"}, {\n      \"name\": \"reply_markup\",\n      \"type\": \"flags.2?ReplyMarkup\"\n    }],\n    \"type\": \"InputBotInlineMessage\"\n  }, {\n    \"id\": \"-2000710887\",\n    \"predicate\": \"inputBotInlineResult\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"id\", \"type\": \"string\"}, {\n      \"name\": \"type\",\n      \"type\": \"string\"\n    }, {\"name\": \"title\", \"type\": \"flags.1?string\"}, {\"name\": \"description\", \"type\": \"flags.2?string\"}, {\n      \"name\": \"url\",\n      \"type\": \"flags.3?string\"\n    }, {\"name\": \"thumb\", \"type\": \"flags.4?InputWebDocument\"}, {\n      \"name\": \"content\",\n      \"type\": \"flags.5?InputWebDocument\"\n    }, {\"name\": \"send_message\", \"type\": \"InputBotInlineMessage\"}],\n    \"type\": \"InputBotInlineResult\"\n  }, {\n    \"id\": \"1984755728\",\n    \"predicate\": \"botInlineMessageMediaAuto\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"message\", \"type\": \"string\"}, {\n      \"name\": \"entities\",\n      \"type\": \"flags.1?Vector<MessageEntity>\"\n    }, {\"name\": \"reply_markup\", \"type\": \"flags.2?ReplyMarkup\"}],\n    \"type\": \"BotInlineMessage\"\n  }, {\n    \"id\": \"-1937807902\",\n    \"predicate\": \"botInlineMessageText\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"no_webpage\", \"type\": \"flags.0?true\"}, {\n      \"name\": \"message\",\n      \"type\": \"string\"\n    }, {\"name\": \"entities\", \"type\": \"flags.1?Vector<MessageEntity>\"}, {\n      \"name\": \"reply_markup\",\n      \"type\": \"flags.2?ReplyMarkup\"\n    }],\n    \"type\": \"BotInlineMessage\"\n  }, {\n    \"id\": \"295067450\",\n    \"predicate\": \"botInlineResult\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"id\", \"type\": \"string\"}, {\n      \"name\": \"type\",\n      \"type\": \"string\"\n    }, {\"name\": \"title\", \"type\": \"flags.1?string\"}, {\"name\": \"description\", \"type\": \"flags.2?string\"}, {\n      \"name\": \"url\",\n      \"type\": \"flags.3?string\"\n    }, {\"name\": \"thumb\", \"type\": \"flags.4?WebDocument\"}, {\n      \"name\": \"content\",\n      \"type\": \"flags.5?WebDocument\"\n    }, {\"name\": \"send_message\", \"type\": \"BotInlineMessage\"}],\n    \"type\": \"BotInlineResult\"\n  }, {\n    \"id\": \"-1803769784\",\n    \"predicate\": \"messages.botResults\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"gallery\", \"type\": \"flags.0?true\"}, {\n      \"name\": \"query_id\",\n      \"type\": \"long\"\n    }, {\"name\": \"next_offset\", \"type\": \"flags.1?string\"}, {\n      \"name\": \"switch_pm\",\n      \"type\": \"flags.2?InlineBotSwitchPM\"\n    }, {\"name\": \"results\", \"type\": \"Vector<BotInlineResult>\"}, {\"name\": \"cache_time\", \"type\": \"int\"}, {\n      \"name\": \"users\",\n      \"type\": \"Vector<User>\"\n    }],\n    \"type\": \"messages.BotResults\"\n  }, {\n    \"id\": \"1417832080\",\n    \"predicate\": \"updateBotInlineQuery\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"query_id\", \"type\": \"long\"}, {\n      \"name\": \"user_id\",\n      \"type\": \"int\"\n    }, {\"name\": \"query\", \"type\": \"string\"}, {\"name\": \"geo\", \"type\": \"flags.0?GeoPoint\"}, {\n      \"name\": \"offset\",\n      \"type\": \"string\"\n    }],\n    \"type\": \"Update\"\n  }, {\n    \"id\": \"239663460\",\n    \"predicate\": \"updateBotInlineSend\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"user_id\", \"type\": \"int\"}, {\n      \"name\": \"query\",\n      \"type\": \"string\"\n    }, {\"name\": \"geo\", \"type\": \"flags.0?GeoPoint\"}, {\"name\": \"id\", \"type\": \"string\"}, {\n      \"name\": \"msg_id\",\n      \"type\": \"flags.1?InputBotInlineMessageID\"\n    }],\n    \"type\": \"Update\"\n  }, {\n    \"id\": \"1358283666\",\n    \"predicate\": \"inputMessagesFilterVoice\",\n    \"params\": [],\n    \"type\": \"MessagesFilter\"\n  }, {\n    \"id\": \"928101534\",\n    \"predicate\": \"inputMessagesFilterMusic\",\n    \"params\": [],\n    \"type\": \"MessagesFilter\"\n  }, {\n    \"id\": \"-1107622874\",\n    \"predicate\": \"inputPrivacyKeyChatInvite\",\n    \"params\": [],\n    \"type\": \"InputPrivacyKey\"\n  }, {\"id\": \"1343122938\", \"predicate\": \"privacyKeyChatInvite\", \"params\": [], \"type\": \"PrivacyKey\"}, {\n    \"id\": \"1571494644\",\n    \"predicate\": \"exportedMessageLink\",\n    \"params\": [{\"name\": \"link\", \"type\": \"string\"}, {\"name\": \"html\", \"type\": \"string\"}],\n    \"type\": \"ExportedMessageLink\"\n  }, {\n    \"id\": \"-332168592\",\n    \"predicate\": \"messageFwdHeader\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"from_id\", \"type\": \"flags.0?int\"}, {\n      \"name\": \"from_name\",\n      \"type\": \"flags.5?string\"\n    }, {\"name\": \"date\", \"type\": \"int\"}, {\"name\": \"channel_id\", \"type\": \"flags.1?int\"}, {\n      \"name\": \"channel_post\",\n      \"type\": \"flags.2?int\"\n    }, {\"name\": \"post_author\", \"type\": \"flags.3?string\"}, {\n      \"name\": \"saved_from_peer\",\n      \"type\": \"flags.4?Peer\"\n    }, {\"name\": \"saved_from_msg_id\", \"type\": \"flags.4?int\"}],\n    \"type\": \"MessageFwdHeader\"\n  }, {\n    \"id\": \"457133559\",\n    \"predicate\": \"updateEditChannelMessage\",\n    \"params\": [{\"name\": \"message\", \"type\": \"Message\"}, {\"name\": \"pts\", \"type\": \"int\"}, {\n      \"name\": \"pts_count\",\n      \"type\": \"int\"\n    }],\n    \"type\": \"Update\"\n  }, {\n    \"id\": \"-1738988427\",\n    \"predicate\": \"updateChannelPinnedMessage\",\n    \"params\": [{\"name\": \"channel_id\", \"type\": \"int\"}, {\"name\": \"id\", \"type\": \"int\"}],\n    \"type\": \"Update\"\n  }, {\n    \"id\": \"-1799538451\",\n    \"predicate\": \"messageActionPinMessage\",\n    \"params\": [],\n    \"type\": \"MessageAction\"\n  }, {\"id\": \"1923290508\", \"predicate\": \"auth.codeTypeSms\", \"params\": [], \"type\": \"auth.CodeType\"}, {\n    \"id\": \"1948046307\",\n    \"predicate\": \"auth.codeTypeCall\",\n    \"params\": [],\n    \"type\": \"auth.CodeType\"\n  }, {\n    \"id\": \"577556219\",\n    \"predicate\": \"auth.codeTypeFlashCall\",\n    \"params\": [],\n    \"type\": \"auth.CodeType\"\n  }, {\n    \"id\": \"1035688326\",\n    \"predicate\": \"auth.sentCodeTypeApp\",\n    \"params\": [{\"name\": \"length\", \"type\": \"int\"}],\n    \"type\": \"auth.SentCodeType\"\n  }, {\n    \"id\": \"-1073693790\",\n    \"predicate\": \"auth.sentCodeTypeSms\",\n    \"params\": [{\"name\": \"length\", \"type\": \"int\"}],\n    \"type\": \"auth.SentCodeType\"\n  }, {\n    \"id\": \"1398007207\",\n    \"predicate\": \"auth.sentCodeTypeCall\",\n    \"params\": [{\"name\": \"length\", \"type\": \"int\"}],\n    \"type\": \"auth.SentCodeType\"\n  }, {\n    \"id\": \"-1425815847\",\n    \"predicate\": \"auth.sentCodeTypeFlashCall\",\n    \"params\": [{\"name\": \"pattern\", \"type\": \"string\"}],\n    \"type\": \"auth.SentCodeType\"\n  }, {\n    \"id\": \"629866245\",\n    \"predicate\": \"keyboardButtonUrl\",\n    \"params\": [{\"name\": \"text\", \"type\": \"string\"}, {\"name\": \"url\", \"type\": \"string\"}],\n    \"type\": \"KeyboardButton\"\n  }, {\n    \"id\": \"1748655686\",\n    \"predicate\": \"keyboardButtonCallback\",\n    \"params\": [{\"name\": \"text\", \"type\": \"string\"}, {\"name\": \"data\", \"type\": \"bytes\"}],\n    \"type\": \"KeyboardButton\"\n  }, {\n    \"id\": \"-1318425559\",\n    \"predicate\": \"keyboardButtonRequestPhone\",\n    \"params\": [{\"name\": \"text\", \"type\": \"string\"}],\n    \"type\": \"KeyboardButton\"\n  }, {\n    \"id\": \"-59151553\",\n    \"predicate\": \"keyboardButtonRequestGeoLocation\",\n    \"params\": [{\"name\": \"text\", \"type\": \"string\"}],\n    \"type\": \"KeyboardButton\"\n  }, {\n    \"id\": \"90744648\",\n    \"predicate\": \"keyboardButtonSwitchInline\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"same_peer\", \"type\": \"flags.0?true\"}, {\n      \"name\": \"text\",\n      \"type\": \"string\"\n    }, {\"name\": \"query\", \"type\": \"string\"}],\n    \"type\": \"KeyboardButton\"\n  }, {\n    \"id\": \"1218642516\",\n    \"predicate\": \"replyInlineMarkup\",\n    \"params\": [{\"name\": \"rows\", \"type\": \"Vector<KeyboardButtonRow>\"}],\n    \"type\": \"ReplyMarkup\"\n  }, {\n    \"id\": \"911761060\",\n    \"predicate\": \"messages.botCallbackAnswer\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"alert\", \"type\": \"flags.1?true\"}, {\n      \"name\": \"has_url\",\n      \"type\": \"flags.3?true\"\n    }, {\"name\": \"native_ui\", \"type\": \"flags.4?true\"}, {\"name\": \"message\", \"type\": \"flags.0?string\"}, {\n      \"name\": \"url\",\n      \"type\": \"flags.2?string\"\n    }, {\"name\": \"cache_time\", \"type\": \"int\"}],\n    \"type\": \"messages.BotCallbackAnswer\"\n  }, {\n    \"id\": \"-415938591\",\n    \"predicate\": \"updateBotCallbackQuery\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"query_id\", \"type\": \"long\"}, {\n      \"name\": \"user_id\",\n      \"type\": \"int\"\n    }, {\"name\": \"peer\", \"type\": \"Peer\"}, {\"name\": \"msg_id\", \"type\": \"int\"}, {\n      \"name\": \"chat_instance\",\n      \"type\": \"long\"\n    }, {\"name\": \"data\", \"type\": \"flags.0?bytes\"}, {\"name\": \"game_short_name\", \"type\": \"flags.1?string\"}],\n    \"type\": \"Update\"\n  }, {\n    \"id\": \"649453030\",\n    \"predicate\": \"messages.messageEditData\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"caption\", \"type\": \"flags.0?true\"}],\n    \"type\": \"messages.MessageEditData\"\n  }, {\n    \"id\": \"-469536605\",\n    \"predicate\": \"updateEditMessage\",\n    \"params\": [{\"name\": \"message\", \"type\": \"Message\"}, {\"name\": \"pts\", \"type\": \"int\"}, {\n      \"name\": \"pts_count\",\n      \"type\": \"int\"\n    }],\n    \"type\": \"Update\"\n  }, {\n    \"id\": \"-1045340827\",\n    \"predicate\": \"inputBotInlineMessageMediaGeo\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"geo_point\", \"type\": \"InputGeoPoint\"}, {\n      \"name\": \"period\",\n      \"type\": \"int\"\n    }, {\"name\": \"reply_markup\", \"type\": \"flags.2?ReplyMarkup\"}],\n    \"type\": \"InputBotInlineMessage\"\n  }, {\n    \"id\": \"1098628881\",\n    \"predicate\": \"inputBotInlineMessageMediaVenue\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"geo_point\", \"type\": \"InputGeoPoint\"}, {\n      \"name\": \"title\",\n      \"type\": \"string\"\n    }, {\"name\": \"address\", \"type\": \"string\"}, {\"name\": \"provider\", \"type\": \"string\"}, {\n      \"name\": \"venue_id\",\n      \"type\": \"string\"\n    }, {\"name\": \"venue_type\", \"type\": \"string\"}, {\"name\": \"reply_markup\", \"type\": \"flags.2?ReplyMarkup\"}],\n    \"type\": \"InputBotInlineMessage\"\n  }, {\n    \"id\": \"-1494368259\",\n    \"predicate\": \"inputBotInlineMessageMediaContact\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"phone_number\", \"type\": \"string\"}, {\n      \"name\": \"first_name\",\n      \"type\": \"string\"\n    }, {\"name\": \"last_name\", \"type\": \"string\"}, {\"name\": \"vcard\", \"type\": \"string\"}, {\n      \"name\": \"reply_markup\",\n      \"type\": \"flags.2?ReplyMarkup\"\n    }],\n    \"type\": \"InputBotInlineMessage\"\n  }, {\n    \"id\": \"-1222451611\",\n    \"predicate\": \"botInlineMessageMediaGeo\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"geo\", \"type\": \"GeoPoint\"}, {\n      \"name\": \"period\",\n      \"type\": \"int\"\n    }, {\"name\": \"reply_markup\", \"type\": \"flags.2?ReplyMarkup\"}],\n    \"type\": \"BotInlineMessage\"\n  }, {\n    \"id\": \"-1970903652\",\n    \"predicate\": \"botInlineMessageMediaVenue\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"geo\", \"type\": \"GeoPoint\"}, {\n      \"name\": \"title\",\n      \"type\": \"string\"\n    }, {\"name\": \"address\", \"type\": \"string\"}, {\"name\": \"provider\", \"type\": \"string\"}, {\n      \"name\": \"venue_id\",\n      \"type\": \"string\"\n    }, {\"name\": \"venue_type\", \"type\": \"string\"}, {\"name\": \"reply_markup\", \"type\": \"flags.2?ReplyMarkup\"}],\n    \"type\": \"BotInlineMessage\"\n  }, {\n    \"id\": \"416402882\",\n    \"predicate\": \"botInlineMessageMediaContact\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"phone_number\", \"type\": \"string\"}, {\n      \"name\": \"first_name\",\n      \"type\": \"string\"\n    }, {\"name\": \"last_name\", \"type\": \"string\"}, {\"name\": \"vcard\", \"type\": \"string\"}, {\n      \"name\": \"reply_markup\",\n      \"type\": \"flags.2?ReplyMarkup\"\n    }],\n    \"type\": \"BotInlineMessage\"\n  }, {\n    \"id\": \"-1462213465\",\n    \"predicate\": \"inputBotInlineResultPhoto\",\n    \"params\": [{\"name\": \"id\", \"type\": \"string\"}, {\"name\": \"type\", \"type\": \"string\"}, {\n      \"name\": \"photo\",\n      \"type\": \"InputPhoto\"\n    }, {\"name\": \"send_message\", \"type\": \"InputBotInlineMessage\"}],\n    \"type\": \"InputBotInlineResult\"\n  }, {\n    \"id\": \"-459324\",\n    \"predicate\": \"inputBotInlineResultDocument\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"id\", \"type\": \"string\"}, {\n      \"name\": \"type\",\n      \"type\": \"string\"\n    }, {\"name\": \"title\", \"type\": \"flags.1?string\"}, {\n      \"name\": \"description\",\n      \"type\": \"flags.2?string\"\n    }, {\"name\": \"document\", \"type\": \"InputDocument\"}, {\"name\": \"send_message\", \"type\": \"InputBotInlineMessage\"}],\n    \"type\": \"InputBotInlineResult\"\n  }, {\n    \"id\": \"400266251\",\n    \"predicate\": \"botInlineMediaResult\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"id\", \"type\": \"string\"}, {\n      \"name\": \"type\",\n      \"type\": \"string\"\n    }, {\"name\": \"photo\", \"type\": \"flags.0?Photo\"}, {\"name\": \"document\", \"type\": \"flags.1?Document\"}, {\n      \"name\": \"title\",\n      \"type\": \"flags.2?string\"\n    }, {\"name\": \"description\", \"type\": \"flags.3?string\"}, {\"name\": \"send_message\", \"type\": \"BotInlineMessage\"}],\n    \"type\": \"BotInlineResult\"\n  }, {\n    \"id\": \"-1995686519\",\n    \"predicate\": \"inputBotInlineMessageID\",\n    \"params\": [{\"name\": \"dc_id\", \"type\": \"int\"}, {\"name\": \"id\", \"type\": \"long\"}, {\n      \"name\": \"access_hash\",\n      \"type\": \"long\"\n    }],\n    \"type\": \"InputBotInlineMessageID\"\n  }, {\n    \"id\": \"-103646630\",\n    \"predicate\": \"updateInlineBotCallbackQuery\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"query_id\", \"type\": \"long\"}, {\n      \"name\": \"user_id\",\n      \"type\": \"int\"\n    }, {\"name\": \"msg_id\", \"type\": \"InputBotInlineMessageID\"}, {\n      \"name\": \"chat_instance\",\n      \"type\": \"long\"\n    }, {\"name\": \"data\", \"type\": \"flags.0?bytes\"}, {\"name\": \"game_short_name\", \"type\": \"flags.1?string\"}],\n    \"type\": \"Update\"\n  }, {\n    \"id\": \"1008755359\",\n    \"predicate\": \"inlineBotSwitchPM\",\n    \"params\": [{\"name\": \"text\", \"type\": \"string\"}, {\"name\": \"start_param\", \"type\": \"string\"}],\n    \"type\": \"InlineBotSwitchPM\"\n  }, {\n    \"id\": \"863093588\",\n    \"predicate\": \"messages.peerDialogs\",\n    \"params\": [{\"name\": \"dialogs\", \"type\": \"Vector<Dialog>\"}, {\n      \"name\": \"messages\",\n      \"type\": \"Vector<Message>\"\n    }, {\"name\": \"chats\", \"type\": \"Vector<Chat>\"}, {\"name\": \"users\", \"type\": \"Vector<User>\"}, {\n      \"name\": \"state\",\n      \"type\": \"updates.State\"\n    }],\n    \"type\": \"messages.PeerDialogs\"\n  }, {\n    \"id\": \"-305282981\",\n    \"predicate\": \"topPeer\",\n    \"params\": [{\"name\": \"peer\", \"type\": \"Peer\"}, {\"name\": \"rating\", \"type\": \"double\"}],\n    \"type\": \"TopPeer\"\n  }, {\n    \"id\": \"-1419371685\",\n    \"predicate\": \"topPeerCategoryBotsPM\",\n    \"params\": [],\n    \"type\": \"TopPeerCategory\"\n  }, {\n    \"id\": \"344356834\",\n    \"predicate\": \"topPeerCategoryBotsInline\",\n    \"params\": [],\n    \"type\": \"TopPeerCategory\"\n  }, {\n    \"id\": \"104314861\",\n    \"predicate\": \"topPeerCategoryCorrespondents\",\n    \"params\": [],\n    \"type\": \"TopPeerCategory\"\n  }, {\n    \"id\": \"-1122524854\",\n    \"predicate\": \"topPeerCategoryGroups\",\n    \"params\": [],\n    \"type\": \"TopPeerCategory\"\n  }, {\n    \"id\": \"371037736\",\n    \"predicate\": \"topPeerCategoryChannels\",\n    \"params\": [],\n    \"type\": \"TopPeerCategory\"\n  }, {\n    \"id\": \"-75283823\",\n    \"predicate\": \"topPeerCategoryPeers\",\n    \"params\": [{\"name\": \"category\", \"type\": \"TopPeerCategory\"}, {\"name\": \"count\", \"type\": \"int\"}, {\n      \"name\": \"peers\",\n      \"type\": \"Vector<TopPeer>\"\n    }],\n    \"type\": \"TopPeerCategoryPeers\"\n  }, {\n    \"id\": \"-567906571\",\n    \"predicate\": \"contacts.topPeersNotModified\",\n    \"params\": [],\n    \"type\": \"contacts.TopPeers\"\n  }, {\n    \"id\": \"1891070632\",\n    \"predicate\": \"contacts.topPeers\",\n    \"params\": [{\"name\": \"categories\", \"type\": \"Vector<TopPeerCategoryPeers>\"}, {\n      \"name\": \"chats\",\n      \"type\": \"Vector<Chat>\"\n    }, {\"name\": \"users\", \"type\": \"Vector<User>\"}],\n    \"type\": \"contacts.TopPeers\"\n  }, {\n    \"id\": \"892193368\",\n    \"predicate\": \"messageEntityMentionName\",\n    \"params\": [{\"name\": \"offset\", \"type\": \"int\"}, {\"name\": \"length\", \"type\": \"int\"}, {\n      \"name\": \"user_id\",\n      \"type\": \"int\"\n    }],\n    \"type\": \"MessageEntity\"\n  }, {\n    \"id\": \"546203849\",\n    \"predicate\": \"inputMessageEntityMentionName\",\n    \"params\": [{\"name\": \"offset\", \"type\": \"int\"}, {\"name\": \"length\", \"type\": \"int\"}, {\n      \"name\": \"user_id\",\n      \"type\": \"InputUser\"\n    }],\n    \"type\": \"MessageEntity\"\n  }, {\n    \"id\": \"975236280\",\n    \"predicate\": \"inputMessagesFilterChatPhotos\",\n    \"params\": [],\n    \"type\": \"MessagesFilter\"\n  }, {\n    \"id\": \"634833351\",\n    \"predicate\": \"updateReadChannelOutbox\",\n    \"params\": [{\"name\": \"channel_id\", \"type\": \"int\"}, {\"name\": \"max_id\", \"type\": \"int\"}],\n    \"type\": \"Update\"\n  }, {\n    \"id\": \"-299124375\",\n    \"predicate\": \"updateDraftMessage\",\n    \"params\": [{\"name\": \"peer\", \"type\": \"Peer\"}, {\"name\": \"draft\", \"type\": \"DraftMessage\"}],\n    \"type\": \"Update\"\n  }, {\n    \"id\": \"453805082\",\n    \"predicate\": \"draftMessageEmpty\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"date\", \"type\": \"flags.0?int\"}],\n    \"type\": \"DraftMessage\"\n  }, {\n    \"id\": \"-40996577\",\n    \"predicate\": \"draftMessage\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\n      \"name\": \"no_webpage\",\n      \"type\": \"flags.1?true\"\n    }, {\"name\": \"reply_to_msg_id\", \"type\": \"flags.0?int\"}, {\"name\": \"message\", \"type\": \"string\"}, {\n      \"name\": \"entities\",\n      \"type\": \"flags.3?Vector<MessageEntity>\"\n    }, {\"name\": \"date\", \"type\": \"int\"}],\n    \"type\": \"DraftMessage\"\n  }, {\n    \"id\": \"-1615153660\",\n    \"predicate\": \"messageActionHistoryClear\",\n    \"params\": [],\n    \"type\": \"MessageAction\"\n  }, {\n    \"id\": \"82699215\",\n    \"predicate\": \"messages.featuredStickersNotModified\",\n    \"params\": [],\n    \"type\": \"messages.FeaturedStickers\"\n  }, {\n    \"id\": \"-123893531\",\n    \"predicate\": \"messages.featuredStickers\",\n    \"params\": [{\"name\": \"hash\", \"type\": \"int\"}, {\n      \"name\": \"sets\",\n      \"type\": \"Vector<StickerSetCovered>\"\n    }, {\"name\": \"unread\", \"type\": \"Vector<long>\"}],\n    \"type\": \"messages.FeaturedStickers\"\n  }, {\n    \"id\": \"1461528386\",\n    \"predicate\": \"updateReadFeaturedStickers\",\n    \"params\": [],\n    \"type\": \"Update\"\n  }, {\n    \"id\": \"186120336\",\n    \"predicate\": \"messages.recentStickersNotModified\",\n    \"params\": [],\n    \"type\": \"messages.RecentStickers\"\n  }, {\n    \"id\": \"586395571\",\n    \"predicate\": \"messages.recentStickers\",\n    \"params\": [{\"name\": \"hash\", \"type\": \"int\"}, {\"name\": \"packs\", \"type\": \"Vector<StickerPack>\"}, {\n      \"name\": \"stickers\",\n      \"type\": \"Vector<Document>\"\n    }, {\"name\": \"dates\", \"type\": \"Vector<int>\"}],\n    \"type\": \"messages.RecentStickers\"\n  }, {\"id\": \"-1706939360\", \"predicate\": \"updateRecentStickers\", \"params\": [], \"type\": \"Update\"}, {\n    \"id\": \"1338747336\",\n    \"predicate\": \"messages.archivedStickers\",\n    \"params\": [{\"name\": \"count\", \"type\": \"int\"}, {\"name\": \"sets\", \"type\": \"Vector<StickerSetCovered>\"}],\n    \"type\": \"messages.ArchivedStickers\"\n  }, {\n    \"id\": \"946083368\",\n    \"predicate\": \"messages.stickerSetInstallResultSuccess\",\n    \"params\": [],\n    \"type\": \"messages.StickerSetInstallResult\"\n  }, {\n    \"id\": \"904138920\",\n    \"predicate\": \"messages.stickerSetInstallResultArchive\",\n    \"params\": [{\"name\": \"sets\", \"type\": \"Vector<StickerSetCovered>\"}],\n    \"type\": \"messages.StickerSetInstallResult\"\n  }, {\n    \"id\": \"1678812626\",\n    \"predicate\": \"stickerSetCovered\",\n    \"params\": [{\"name\": \"set\", \"type\": \"StickerSet\"}, {\"name\": \"cover\", \"type\": \"Document\"}],\n    \"type\": \"StickerSetCovered\"\n  }, {\"id\": \"-1574314746\", \"predicate\": \"updateConfig\", \"params\": [], \"type\": \"Update\"}, {\n    \"id\": \"861169551\",\n    \"predicate\": \"updatePtsChanged\",\n    \"params\": [],\n    \"type\": \"Update\"\n  }, {\n    \"id\": \"-440664550\",\n    \"predicate\": \"inputMediaPhotoExternal\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"url\", \"type\": \"string\"}, {\n      \"name\": \"ttl_seconds\",\n      \"type\": \"flags.0?int\"\n    }],\n    \"type\": \"InputMedia\"\n  }, {\n    \"id\": \"-78455655\",\n    \"predicate\": \"inputMediaDocumentExternal\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"url\", \"type\": \"string\"}, {\n      \"name\": \"ttl_seconds\",\n      \"type\": \"flags.0?int\"\n    }],\n    \"type\": \"InputMedia\"\n  }, {\n    \"id\": \"872932635\",\n    \"predicate\": \"stickerSetMultiCovered\",\n    \"params\": [{\"name\": \"set\", \"type\": \"StickerSet\"}, {\"name\": \"covers\", \"type\": \"Vector<Document>\"}],\n    \"type\": \"StickerSetCovered\"\n  }, {\n    \"id\": \"-1361650766\",\n    \"predicate\": \"maskCoords\",\n    \"params\": [{\"name\": \"n\", \"type\": \"int\"}, {\"name\": \"x\", \"type\": \"double\"}, {\n      \"name\": \"y\",\n      \"type\": \"double\"\n    }, {\"name\": \"zoom\", \"type\": \"double\"}],\n    \"type\": \"MaskCoords\"\n  }, {\n    \"id\": \"-1744710921\",\n    \"predicate\": \"documentAttributeHasStickers\",\n    \"params\": [],\n    \"type\": \"DocumentAttribute\"\n  }, {\n    \"id\": \"1251549527\",\n    \"predicate\": \"inputStickeredMediaPhoto\",\n    \"params\": [{\"name\": \"id\", \"type\": \"InputPhoto\"}],\n    \"type\": \"InputStickeredMedia\"\n  }, {\n    \"id\": \"70813275\",\n    \"predicate\": \"inputStickeredMediaDocument\",\n    \"params\": [{\"name\": \"id\", \"type\": \"InputDocument\"}],\n    \"type\": \"InputStickeredMedia\"\n  }, {\n    \"id\": \"-1107729093\",\n    \"predicate\": \"game\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"id\", \"type\": \"long\"}, {\n      \"name\": \"access_hash\",\n      \"type\": \"long\"\n    }, {\"name\": \"short_name\", \"type\": \"string\"}, {\"name\": \"title\", \"type\": \"string\"}, {\n      \"name\": \"description\",\n      \"type\": \"string\"\n    }, {\"name\": \"photo\", \"type\": \"Photo\"}, {\"name\": \"document\", \"type\": \"flags.0?Document\"}],\n    \"type\": \"Game\"\n  }, {\n    \"id\": \"1336154098\",\n    \"predicate\": \"inputBotInlineResultGame\",\n    \"params\": [{\"name\": \"id\", \"type\": \"string\"}, {\"name\": \"short_name\", \"type\": \"string\"}, {\n      \"name\": \"send_message\",\n      \"type\": \"InputBotInlineMessage\"\n    }],\n    \"type\": \"InputBotInlineResult\"\n  }, {\n    \"id\": \"1262639204\",\n    \"predicate\": \"inputBotInlineMessageGame\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"reply_markup\", \"type\": \"flags.2?ReplyMarkup\"}],\n    \"type\": \"InputBotInlineMessage\"\n  }, {\n    \"id\": \"-38694904\",\n    \"predicate\": \"messageMediaGame\",\n    \"params\": [{\"name\": \"game\", \"type\": \"Game\"}],\n    \"type\": \"MessageMedia\"\n  }, {\n    \"id\": \"-750828557\",\n    \"predicate\": \"inputMediaGame\",\n    \"params\": [{\"name\": \"id\", \"type\": \"InputGame\"}],\n    \"type\": \"InputMedia\"\n  }, {\n    \"id\": \"53231223\",\n    \"predicate\": \"inputGameID\",\n    \"params\": [{\"name\": \"id\", \"type\": \"long\"}, {\"name\": \"access_hash\", \"type\": \"long\"}],\n    \"type\": \"InputGame\"\n  }, {\n    \"id\": \"-1020139510\",\n    \"predicate\": \"inputGameShortName\",\n    \"params\": [{\"name\": \"bot_id\", \"type\": \"InputUser\"}, {\"name\": \"short_name\", \"type\": \"string\"}],\n    \"type\": \"InputGame\"\n  }, {\n    \"id\": \"1358175439\",\n    \"predicate\": \"keyboardButtonGame\",\n    \"params\": [{\"name\": \"text\", \"type\": \"string\"}],\n    \"type\": \"KeyboardButton\"\n  }, {\n    \"id\": \"-1834538890\",\n    \"predicate\": \"messageActionGameScore\",\n    \"params\": [{\"name\": \"game_id\", \"type\": \"long\"}, {\"name\": \"score\", \"type\": \"int\"}],\n    \"type\": \"MessageAction\"\n  }, {\n    \"id\": \"1493171408\",\n    \"predicate\": \"highScore\",\n    \"params\": [{\"name\": \"pos\", \"type\": \"int\"}, {\"name\": \"user_id\", \"type\": \"int\"}, {\"name\": \"score\", \"type\": \"int\"}],\n    \"type\": \"HighScore\"\n  }, {\n    \"id\": \"-1707344487\",\n    \"predicate\": \"messages.highScores\",\n    \"params\": [{\"name\": \"scores\", \"type\": \"Vector<HighScore>\"}, {\"name\": \"users\", \"type\": \"Vector<User>\"}],\n    \"type\": \"messages.HighScores\"\n  }, {\n    \"id\": \"1258196845\",\n    \"predicate\": \"updates.differenceTooLong\",\n    \"params\": [{\"name\": \"pts\", \"type\": \"int\"}],\n    \"type\": \"updates.Difference\"\n  }, {\n    \"id\": \"1081547008\",\n    \"predicate\": \"updateChannelWebPage\",\n    \"params\": [{\"name\": \"channel_id\", \"type\": \"int\"}, {\"name\": \"webpage\", \"type\": \"WebPage\"}, {\n      \"name\": \"pts\",\n      \"type\": \"int\"\n    }, {\"name\": \"pts_count\", \"type\": \"int\"}],\n    \"type\": \"Update\"\n  }, {\n    \"id\": \"-1663561404\",\n    \"predicate\": \"messages.chatsSlice\",\n    \"params\": [{\"name\": \"count\", \"type\": \"int\"}, {\"name\": \"chats\", \"type\": \"Vector<Chat>\"}],\n    \"type\": \"messages.Chats\"\n  }, {\"id\": \"-599948721\", \"predicate\": \"textEmpty\", \"params\": [], \"type\": \"RichText\"}, {\n    \"id\": \"1950782688\",\n    \"predicate\": \"textPlain\",\n    \"params\": [{\"name\": \"text\", \"type\": \"string\"}],\n    \"type\": \"RichText\"\n  }, {\n    \"id\": \"1730456516\",\n    \"predicate\": \"textBold\",\n    \"params\": [{\"name\": \"text\", \"type\": \"RichText\"}],\n    \"type\": \"RichText\"\n  }, {\n    \"id\": \"-653089380\",\n    \"predicate\": \"textItalic\",\n    \"params\": [{\"name\": \"text\", \"type\": \"RichText\"}],\n    \"type\": \"RichText\"\n  }, {\n    \"id\": \"-1054465340\",\n    \"predicate\": \"textUnderline\",\n    \"params\": [{\"name\": \"text\", \"type\": \"RichText\"}],\n    \"type\": \"RichText\"\n  }, {\n    \"id\": \"-1678197867\",\n    \"predicate\": \"textStrike\",\n    \"params\": [{\"name\": \"text\", \"type\": \"RichText\"}],\n    \"type\": \"RichText\"\n  }, {\n    \"id\": \"1816074681\",\n    \"predicate\": \"textFixed\",\n    \"params\": [{\"name\": \"text\", \"type\": \"RichText\"}],\n    \"type\": \"RichText\"\n  }, {\n    \"id\": \"1009288385\",\n    \"predicate\": \"textUrl\",\n    \"params\": [{\"name\": \"text\", \"type\": \"RichText\"}, {\"name\": \"url\", \"type\": \"string\"}, {\n      \"name\": \"webpage_id\",\n      \"type\": \"long\"\n    }],\n    \"type\": \"RichText\"\n  }, {\n    \"id\": \"-564523562\",\n    \"predicate\": \"textEmail\",\n    \"params\": [{\"name\": \"text\", \"type\": \"RichText\"}, {\"name\": \"email\", \"type\": \"string\"}],\n    \"type\": \"RichText\"\n  }, {\n    \"id\": \"2120376535\",\n    \"predicate\": \"textConcat\",\n    \"params\": [{\"name\": \"texts\", \"type\": \"Vector<RichText>\"}],\n    \"type\": \"RichText\"\n  }, {\"id\": \"324435594\", \"predicate\": \"pageBlockUnsupported\", \"params\": [], \"type\": \"PageBlock\"}, {\n    \"id\": \"1890305021\",\n    \"predicate\": \"pageBlockTitle\",\n    \"params\": [{\"name\": \"text\", \"type\": \"RichText\"}],\n    \"type\": \"PageBlock\"\n  }, {\n    \"id\": \"-1879401953\",\n    \"predicate\": \"pageBlockSubtitle\",\n    \"params\": [{\"name\": \"text\", \"type\": \"RichText\"}],\n    \"type\": \"PageBlock\"\n  }, {\n    \"id\": \"-1162877472\",\n    \"predicate\": \"pageBlockAuthorDate\",\n    \"params\": [{\"name\": \"author\", \"type\": \"RichText\"}, {\"name\": \"published_date\", \"type\": \"int\"}],\n    \"type\": \"PageBlock\"\n  }, {\n    \"id\": \"-1076861716\",\n    \"predicate\": \"pageBlockHeader\",\n    \"params\": [{\"name\": \"text\", \"type\": \"RichText\"}],\n    \"type\": \"PageBlock\"\n  }, {\n    \"id\": \"-248793375\",\n    \"predicate\": \"pageBlockSubheader\",\n    \"params\": [{\"name\": \"text\", \"type\": \"RichText\"}],\n    \"type\": \"PageBlock\"\n  }, {\n    \"id\": \"1182402406\",\n    \"predicate\": \"pageBlockParagraph\",\n    \"params\": [{\"name\": \"text\", \"type\": \"RichText\"}],\n    \"type\": \"PageBlock\"\n  }, {\n    \"id\": \"-1066346178\",\n    \"predicate\": \"pageBlockPreformatted\",\n    \"params\": [{\"name\": \"text\", \"type\": \"RichText\"}, {\"name\": \"language\", \"type\": \"string\"}],\n    \"type\": \"PageBlock\"\n  }, {\n    \"id\": \"1216809369\",\n    \"predicate\": \"pageBlockFooter\",\n    \"params\": [{\"name\": \"text\", \"type\": \"RichText\"}],\n    \"type\": \"PageBlock\"\n  }, {\"id\": \"-618614392\", \"predicate\": \"pageBlockDivider\", \"params\": [], \"type\": \"PageBlock\"}, {\n    \"id\": \"-837994576\",\n    \"predicate\": \"pageBlockAnchor\",\n    \"params\": [{\"name\": \"name\", \"type\": \"string\"}],\n    \"type\": \"PageBlock\"\n  }, {\n    \"id\": \"-454524911\",\n    \"predicate\": \"pageBlockList\",\n    \"params\": [{\"name\": \"items\", \"type\": \"Vector<PageListItem>\"}],\n    \"type\": \"PageBlock\"\n  }, {\n    \"id\": \"641563686\",\n    \"predicate\": \"pageBlockBlockquote\",\n    \"params\": [{\"name\": \"text\", \"type\": \"RichText\"}, {\"name\": \"caption\", \"type\": \"RichText\"}],\n    \"type\": \"PageBlock\"\n  }, {\n    \"id\": \"1329878739\",\n    \"predicate\": \"pageBlockPullquote\",\n    \"params\": [{\"name\": \"text\", \"type\": \"RichText\"}, {\"name\": \"caption\", \"type\": \"RichText\"}],\n    \"type\": \"PageBlock\"\n  }, {\n    \"id\": \"391759200\",\n    \"predicate\": \"pageBlockPhoto\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"photo_id\", \"type\": \"long\"}, {\n      \"name\": \"caption\",\n      \"type\": \"PageCaption\"\n    }, {\"name\": \"url\", \"type\": \"flags.0?string\"}, {\"name\": \"webpage_id\", \"type\": \"flags.0?long\"}],\n    \"type\": \"PageBlock\"\n  }, {\n    \"id\": \"2089805750\",\n    \"predicate\": \"pageBlockVideo\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"autoplay\", \"type\": \"flags.0?true\"}, {\n      \"name\": \"loop\",\n      \"type\": \"flags.1?true\"\n    }, {\"name\": \"video_id\", \"type\": \"long\"}, {\"name\": \"caption\", \"type\": \"PageCaption\"}],\n    \"type\": \"PageBlock\"\n  }, {\n    \"id\": \"972174080\",\n    \"predicate\": \"pageBlockCover\",\n    \"params\": [{\"name\": \"cover\", \"type\": \"PageBlock\"}],\n    \"type\": \"PageBlock\"\n  }, {\n    \"id\": \"-1468953147\",\n    \"predicate\": \"pageBlockEmbed\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\n      \"name\": \"full_width\",\n      \"type\": \"flags.0?true\"\n    }, {\"name\": \"allow_scrolling\", \"type\": \"flags.3?true\"}, {\"name\": \"url\", \"type\": \"flags.1?string\"}, {\n      \"name\": \"html\",\n      \"type\": \"flags.2?string\"\n    }, {\"name\": \"poster_photo_id\", \"type\": \"flags.4?long\"}, {\"name\": \"w\", \"type\": \"flags.5?int\"}, {\n      \"name\": \"h\",\n      \"type\": \"flags.5?int\"\n    }, {\"name\": \"caption\", \"type\": \"PageCaption\"}],\n    \"type\": \"PageBlock\"\n  }, {\n    \"id\": \"-229005301\",\n    \"predicate\": \"pageBlockEmbedPost\",\n    \"params\": [{\"name\": \"url\", \"type\": \"string\"}, {\"name\": \"webpage_id\", \"type\": \"long\"}, {\n      \"name\": \"author_photo_id\",\n      \"type\": \"long\"\n    }, {\"name\": \"author\", \"type\": \"string\"}, {\"name\": \"date\", \"type\": \"int\"}, {\n      \"name\": \"blocks\",\n      \"type\": \"Vector<PageBlock>\"\n    }, {\"name\": \"caption\", \"type\": \"PageCaption\"}],\n    \"type\": \"PageBlock\"\n  }, {\n    \"id\": \"1705048653\",\n    \"predicate\": \"pageBlockCollage\",\n    \"params\": [{\"name\": \"items\", \"type\": \"Vector<PageBlock>\"}, {\"name\": \"caption\", \"type\": \"PageCaption\"}],\n    \"type\": \"PageBlock\"\n  }, {\n    \"id\": \"52401552\",\n    \"predicate\": \"pageBlockSlideshow\",\n    \"params\": [{\"name\": \"items\", \"type\": \"Vector<PageBlock>\"}, {\"name\": \"caption\", \"type\": \"PageCaption\"}],\n    \"type\": \"PageBlock\"\n  }, {\"id\": \"-2054908813\", \"predicate\": \"webPageNotModified\", \"params\": [], \"type\": \"WebPage\"}, {\n    \"id\": \"-88417185\",\n    \"predicate\": \"inputPrivacyKeyPhoneCall\",\n    \"params\": [],\n    \"type\": \"InputPrivacyKey\"\n  }, {\"id\": \"1030105979\", \"predicate\": \"privacyKeyPhoneCall\", \"params\": [], \"type\": \"PrivacyKey\"}, {\n    \"id\": \"-580219064\",\n    \"predicate\": \"sendMessageGamePlayAction\",\n    \"params\": [],\n    \"type\": \"SendMessageAction\"\n  }, {\n    \"id\": \"-2048646399\",\n    \"predicate\": \"phoneCallDiscardReasonMissed\",\n    \"params\": [],\n    \"type\": \"PhoneCallDiscardReason\"\n  }, {\n    \"id\": \"-527056480\",\n    \"predicate\": \"phoneCallDiscardReasonDisconnect\",\n    \"params\": [],\n    \"type\": \"PhoneCallDiscardReason\"\n  }, {\n    \"id\": \"1471006352\",\n    \"predicate\": \"phoneCallDiscardReasonHangup\",\n    \"params\": [],\n    \"type\": \"PhoneCallDiscardReason\"\n  }, {\n    \"id\": \"-84416311\",\n    \"predicate\": \"phoneCallDiscardReasonBusy\",\n    \"params\": [],\n    \"type\": \"PhoneCallDiscardReason\"\n  }, {\n    \"id\": \"1852826908\",\n    \"predicate\": \"updateDialogPinned\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"pinned\", \"type\": \"flags.0?true\"}, {\n      \"name\": \"folder_id\",\n      \"type\": \"flags.1?int\"\n    }, {\"name\": \"peer\", \"type\": \"DialogPeer\"}],\n    \"type\": \"Update\"\n  }, {\n    \"id\": \"-99664734\",\n    \"predicate\": \"updatePinnedDialogs\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"folder_id\", \"type\": \"flags.1?int\"}, {\n      \"name\": \"order\",\n      \"type\": \"flags.0?Vector<DialogPeer>\"\n    }],\n    \"type\": \"Update\"\n  }, {\n    \"id\": \"2104790276\",\n    \"predicate\": \"dataJSON\",\n    \"params\": [{\"name\": \"data\", \"type\": \"string\"}],\n    \"type\": \"DataJSON\"\n  }, {\n    \"id\": \"-2095595325\",\n    \"predicate\": \"updateBotWebhookJSON\",\n    \"params\": [{\"name\": \"data\", \"type\": \"DataJSON\"}],\n    \"type\": \"Update\"\n  }, {\n    \"id\": \"-1684914010\",\n    \"predicate\": \"updateBotWebhookJSONQuery\",\n    \"params\": [{\"name\": \"query_id\", \"type\": \"long\"}, {\"name\": \"data\", \"type\": \"DataJSON\"}, {\n      \"name\": \"timeout\",\n      \"type\": \"int\"\n    }],\n    \"type\": \"Update\"\n  }, {\n    \"id\": \"-886477832\",\n    \"predicate\": \"labeledPrice\",\n    \"params\": [{\"name\": \"label\", \"type\": \"string\"}, {\"name\": \"amount\", \"type\": \"long\"}],\n    \"type\": \"LabeledPrice\"\n  }, {\n    \"id\": \"-1022713000\",\n    \"predicate\": \"invoice\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"test\", \"type\": \"flags.0?true\"}, {\n      \"name\": \"name_requested\",\n      \"type\": \"flags.1?true\"\n    }, {\"name\": \"phone_requested\", \"type\": \"flags.2?true\"}, {\n      \"name\": \"email_requested\",\n      \"type\": \"flags.3?true\"\n    }, {\"name\": \"shipping_address_requested\", \"type\": \"flags.4?true\"}, {\n      \"name\": \"flexible\",\n      \"type\": \"flags.5?true\"\n    }, {\"name\": \"phone_to_provider\", \"type\": \"flags.6?true\"}, {\n      \"name\": \"email_to_provider\",\n      \"type\": \"flags.7?true\"\n    }, {\"name\": \"currency\", \"type\": \"string\"}, {\"name\": \"prices\", \"type\": \"Vector<LabeledPrice>\"}],\n    \"type\": \"Invoice\"\n  }, {\n    \"id\": \"-186607933\",\n    \"predicate\": \"inputMediaInvoice\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"title\", \"type\": \"string\"}, {\n      \"name\": \"description\",\n      \"type\": \"string\"\n    }, {\"name\": \"photo\", \"type\": \"flags.0?InputWebDocument\"}, {\n      \"name\": \"invoice\",\n      \"type\": \"Invoice\"\n    }, {\"name\": \"payload\", \"type\": \"bytes\"}, {\"name\": \"provider\", \"type\": \"string\"}, {\n      \"name\": \"provider_data\",\n      \"type\": \"DataJSON\"\n    }, {\"name\": \"start_param\", \"type\": \"string\"}],\n    \"type\": \"InputMedia\"\n  }, {\n    \"id\": \"-368917890\",\n    \"predicate\": \"paymentCharge\",\n    \"params\": [{\"name\": \"id\", \"type\": \"string\"}, {\"name\": \"provider_charge_id\", \"type\": \"string\"}],\n    \"type\": \"PaymentCharge\"\n  }, {\n    \"id\": \"-1892568281\",\n    \"predicate\": \"messageActionPaymentSentMe\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"currency\", \"type\": \"string\"}, {\n      \"name\": \"total_amount\",\n      \"type\": \"long\"\n    }, {\"name\": \"payload\", \"type\": \"bytes\"}, {\n      \"name\": \"info\",\n      \"type\": \"flags.0?PaymentRequestedInfo\"\n    }, {\"name\": \"shipping_option_id\", \"type\": \"flags.1?string\"}, {\"name\": \"charge\", \"type\": \"PaymentCharge\"}],\n    \"type\": \"MessageAction\"\n  }, {\n    \"id\": \"-2074799289\",\n    \"predicate\": \"messageMediaInvoice\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\n      \"name\": \"shipping_address_requested\",\n      \"type\": \"flags.1?true\"\n    }, {\"name\": \"test\", \"type\": \"flags.3?true\"}, {\"name\": \"title\", \"type\": \"string\"}, {\n      \"name\": \"description\",\n      \"type\": \"string\"\n    }, {\"name\": \"photo\", \"type\": \"flags.0?WebDocument\"}, {\n      \"name\": \"receipt_msg_id\",\n      \"type\": \"flags.2?int\"\n    }, {\"name\": \"currency\", \"type\": \"string\"}, {\"name\": \"total_amount\", \"type\": \"long\"}, {\n      \"name\": \"start_param\",\n      \"type\": \"string\"\n    }],\n    \"type\": \"MessageMedia\"\n  }, {\n    \"id\": \"512535275\",\n    \"predicate\": \"postAddress\",\n    \"params\": [{\"name\": \"street_line1\", \"type\": \"string\"}, {\"name\": \"street_line2\", \"type\": \"string\"}, {\n      \"name\": \"city\",\n      \"type\": \"string\"\n    }, {\"name\": \"state\", \"type\": \"string\"}, {\"name\": \"country_iso2\", \"type\": \"string\"}, {\n      \"name\": \"post_code\",\n      \"type\": \"string\"\n    }],\n    \"type\": \"PostAddress\"\n  }, {\n    \"id\": \"-1868808300\",\n    \"predicate\": \"paymentRequestedInfo\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"name\", \"type\": \"flags.0?string\"}, {\n      \"name\": \"phone\",\n      \"type\": \"flags.1?string\"\n    }, {\"name\": \"email\", \"type\": \"flags.2?string\"}, {\"name\": \"shipping_address\", \"type\": \"flags.3?PostAddress\"}],\n    \"type\": \"PaymentRequestedInfo\"\n  }, {\n    \"id\": \"-1344716869\",\n    \"predicate\": \"keyboardButtonBuy\",\n    \"params\": [{\"name\": \"text\", \"type\": \"string\"}],\n    \"type\": \"KeyboardButton\"\n  }, {\n    \"id\": \"1080663248\",\n    \"predicate\": \"messageActionPaymentSent\",\n    \"params\": [{\"name\": \"currency\", \"type\": \"string\"}, {\"name\": \"total_amount\", \"type\": \"long\"}],\n    \"type\": \"MessageAction\"\n  }, {\n    \"id\": \"-842892769\",\n    \"predicate\": \"paymentSavedCredentialsCard\",\n    \"params\": [{\"name\": \"id\", \"type\": \"string\"}, {\"name\": \"title\", \"type\": \"string\"}],\n    \"type\": \"PaymentSavedCredentials\"\n  }, {\n    \"id\": \"475467473\",\n    \"predicate\": \"webDocument\",\n    \"params\": [{\"name\": \"url\", \"type\": \"string\"}, {\"name\": \"access_hash\", \"type\": \"long\"}, {\n      \"name\": \"size\",\n      \"type\": \"int\"\n    }, {\"name\": \"mime_type\", \"type\": \"string\"}, {\"name\": \"attributes\", \"type\": \"Vector<DocumentAttribute>\"}],\n    \"type\": \"WebDocument\"\n  }, {\n    \"id\": \"-1678949555\",\n    \"predicate\": \"inputWebDocument\",\n    \"params\": [{\"name\": \"url\", \"type\": \"string\"}, {\"name\": \"size\", \"type\": \"int\"}, {\n      \"name\": \"mime_type\",\n      \"type\": \"string\"\n    }, {\"name\": \"attributes\", \"type\": \"Vector<DocumentAttribute>\"}],\n    \"type\": \"InputWebDocument\"\n  }, {\n    \"id\": \"-1036396922\",\n    \"predicate\": \"inputWebFileLocation\",\n    \"params\": [{\"name\": \"url\", \"type\": \"string\"}, {\"name\": \"access_hash\", \"type\": \"long\"}],\n    \"type\": \"InputWebFileLocation\"\n  }, {\n    \"id\": \"568808380\",\n    \"predicate\": \"upload.webFile\",\n    \"params\": [{\"name\": \"size\", \"type\": \"int\"}, {\"name\": \"mime_type\", \"type\": \"string\"}, {\n      \"name\": \"file_type\",\n      \"type\": \"storage.FileType\"\n    }, {\"name\": \"mtime\", \"type\": \"int\"}, {\"name\": \"bytes\", \"type\": \"bytes\"}],\n    \"type\": \"upload.WebFile\"\n  }, {\n    \"id\": \"1062645411\",\n    \"predicate\": \"payments.paymentForm\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\n      \"name\": \"can_save_credentials\",\n      \"type\": \"flags.2?true\"\n    }, {\"name\": \"password_missing\", \"type\": \"flags.3?true\"}, {\"name\": \"bot_id\", \"type\": \"int\"}, {\n      \"name\": \"invoice\",\n      \"type\": \"Invoice\"\n    }, {\"name\": \"provider_id\", \"type\": \"int\"}, {\"name\": \"url\", \"type\": \"string\"}, {\n      \"name\": \"native_provider\",\n      \"type\": \"flags.4?string\"\n    }, {\"name\": \"native_params\", \"type\": \"flags.4?DataJSON\"}, {\n      \"name\": \"saved_info\",\n      \"type\": \"flags.0?PaymentRequestedInfo\"\n    }, {\"name\": \"saved_credentials\", \"type\": \"flags.1?PaymentSavedCredentials\"}, {\n      \"name\": \"users\",\n      \"type\": \"Vector<User>\"\n    }],\n    \"type\": \"payments.PaymentForm\"\n  }, {\n    \"id\": \"-784000893\",\n    \"predicate\": \"payments.validatedRequestedInfo\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"id\", \"type\": \"flags.0?string\"}, {\n      \"name\": \"shipping_options\",\n      \"type\": \"flags.1?Vector<ShippingOption>\"\n    }],\n    \"type\": \"payments.ValidatedRequestedInfo\"\n  }, {\n    \"id\": \"1314881805\",\n    \"predicate\": \"payments.paymentResult\",\n    \"params\": [{\"name\": \"updates\", \"type\": \"Updates\"}],\n    \"type\": \"payments.PaymentResult\"\n  }, {\n    \"id\": \"1342771681\",\n    \"predicate\": \"payments.paymentReceipt\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"date\", \"type\": \"int\"}, {\n      \"name\": \"bot_id\",\n      \"type\": \"int\"\n    }, {\"name\": \"invoice\", \"type\": \"Invoice\"}, {\"name\": \"provider_id\", \"type\": \"int\"}, {\n      \"name\": \"info\",\n      \"type\": \"flags.0?PaymentRequestedInfo\"\n    }, {\"name\": \"shipping\", \"type\": \"flags.1?ShippingOption\"}, {\n      \"name\": \"currency\",\n      \"type\": \"string\"\n    }, {\"name\": \"total_amount\", \"type\": \"long\"}, {\"name\": \"credentials_title\", \"type\": \"string\"}, {\n      \"name\": \"users\",\n      \"type\": \"Vector<User>\"\n    }],\n    \"type\": \"payments.PaymentReceipt\"\n  }, {\n    \"id\": \"-74456004\",\n    \"predicate\": \"payments.savedInfo\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\n      \"name\": \"has_saved_credentials\",\n      \"type\": \"flags.1?true\"\n    }, {\"name\": \"saved_info\", \"type\": \"flags.0?PaymentRequestedInfo\"}],\n    \"type\": \"payments.SavedInfo\"\n  }, {\n    \"id\": \"-1056001329\",\n    \"predicate\": \"inputPaymentCredentialsSaved\",\n    \"params\": [{\"name\": \"id\", \"type\": \"string\"}, {\"name\": \"tmp_password\", \"type\": \"bytes\"}],\n    \"type\": \"InputPaymentCredentials\"\n  }, {\n    \"id\": \"873977640\",\n    \"predicate\": \"inputPaymentCredentials\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"save\", \"type\": \"flags.0?true\"}, {\n      \"name\": \"data\",\n      \"type\": \"DataJSON\"\n    }],\n    \"type\": \"InputPaymentCredentials\"\n  }, {\n    \"id\": \"-614138572\",\n    \"predicate\": \"account.tmpPassword\",\n    \"params\": [{\"name\": \"tmp_password\", \"type\": \"bytes\"}, {\"name\": \"valid_until\", \"type\": \"int\"}],\n    \"type\": \"account.TmpPassword\"\n  }, {\n    \"id\": \"-1239335713\",\n    \"predicate\": \"shippingOption\",\n    \"params\": [{\"name\": \"id\", \"type\": \"string\"}, {\"name\": \"title\", \"type\": \"string\"}, {\n      \"name\": \"prices\",\n      \"type\": \"Vector<LabeledPrice>\"\n    }],\n    \"type\": \"ShippingOption\"\n  }, {\n    \"id\": \"-523384512\",\n    \"predicate\": \"updateBotShippingQuery\",\n    \"params\": [{\"name\": \"query_id\", \"type\": \"long\"}, {\"name\": \"user_id\", \"type\": \"int\"}, {\n      \"name\": \"payload\",\n      \"type\": \"bytes\"\n    }, {\"name\": \"shipping_address\", \"type\": \"PostAddress\"}],\n    \"type\": \"Update\"\n  }, {\n    \"id\": \"1563376297\",\n    \"predicate\": \"updateBotPrecheckoutQuery\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"query_id\", \"type\": \"long\"}, {\n      \"name\": \"user_id\",\n      \"type\": \"int\"\n    }, {\"name\": \"payload\", \"type\": \"bytes\"}, {\n      \"name\": \"info\",\n      \"type\": \"flags.0?PaymentRequestedInfo\"\n    }, {\"name\": \"shipping_option_id\", \"type\": \"flags.1?string\"}, {\n      \"name\": \"currency\",\n      \"type\": \"string\"\n    }, {\"name\": \"total_amount\", \"type\": \"long\"}],\n    \"type\": \"Update\"\n  }, {\n    \"id\": \"-6249322\",\n    \"predicate\": \"inputStickerSetItem\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"document\", \"type\": \"InputDocument\"}, {\n      \"name\": \"emoji\",\n      \"type\": \"string\"\n    }, {\"name\": \"mask_coords\", \"type\": \"flags.0?MaskCoords\"}],\n    \"type\": \"InputStickerSetItem\"\n  }, {\n    \"id\": \"-1425052898\",\n    \"predicate\": \"updatePhoneCall\",\n    \"params\": [{\"name\": \"phone_call\", \"type\": \"PhoneCall\"}],\n    \"type\": \"Update\"\n  }, {\n    \"id\": \"506920429\",\n    \"predicate\": \"inputPhoneCall\",\n    \"params\": [{\"name\": \"id\", \"type\": \"long\"}, {\"name\": \"access_hash\", \"type\": \"long\"}],\n    \"type\": \"InputPhoneCall\"\n  }, {\n    \"id\": \"1399245077\",\n    \"predicate\": \"phoneCallEmpty\",\n    \"params\": [{\"name\": \"id\", \"type\": \"long\"}],\n    \"type\": \"PhoneCall\"\n  }, {\n    \"id\": \"462375633\",\n    \"predicate\": \"phoneCallWaiting\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"video\", \"type\": \"flags.5?true\"}, {\n      \"name\": \"id\",\n      \"type\": \"long\"\n    }, {\"name\": \"access_hash\", \"type\": \"long\"}, {\"name\": \"date\", \"type\": \"int\"}, {\n      \"name\": \"admin_id\",\n      \"type\": \"int\"\n    }, {\"name\": \"participant_id\", \"type\": \"int\"}, {\n      \"name\": \"protocol\",\n      \"type\": \"PhoneCallProtocol\"\n    }, {\"name\": \"receive_date\", \"type\": \"flags.0?int\"}],\n    \"type\": \"PhoneCall\"\n  }, {\n    \"id\": \"-2014659757\",\n    \"predicate\": \"phoneCallRequested\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"video\", \"type\": \"flags.5?true\"}, {\n      \"name\": \"id\",\n      \"type\": \"long\"\n    }, {\"name\": \"access_hash\", \"type\": \"long\"}, {\"name\": \"date\", \"type\": \"int\"}, {\n      \"name\": \"admin_id\",\n      \"type\": \"int\"\n    }, {\"name\": \"participant_id\", \"type\": \"int\"}, {\"name\": \"g_a_hash\", \"type\": \"bytes\"}, {\n      \"name\": \"protocol\",\n      \"type\": \"PhoneCallProtocol\"\n    }],\n    \"type\": \"PhoneCall\"\n  }, {\n    \"id\": \"-1719909046\",\n    \"predicate\": \"phoneCallAccepted\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"video\", \"type\": \"flags.5?true\"}, {\n      \"name\": \"id\",\n      \"type\": \"long\"\n    }, {\"name\": \"access_hash\", \"type\": \"long\"}, {\"name\": \"date\", \"type\": \"int\"}, {\n      \"name\": \"admin_id\",\n      \"type\": \"int\"\n    }, {\"name\": \"participant_id\", \"type\": \"int\"}, {\"name\": \"g_b\", \"type\": \"bytes\"}, {\n      \"name\": \"protocol\",\n      \"type\": \"PhoneCallProtocol\"\n    }],\n    \"type\": \"PhoneCall\"\n  }, {\n    \"id\": \"-2025673089\",\n    \"predicate\": \"phoneCall\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"p2p_allowed\", \"type\": \"flags.5?true\"}, {\n      \"name\": \"id\",\n      \"type\": \"long\"\n    }, {\"name\": \"access_hash\", \"type\": \"long\"}, {\"name\": \"date\", \"type\": \"int\"}, {\n      \"name\": \"admin_id\",\n      \"type\": \"int\"\n    }, {\"name\": \"participant_id\", \"type\": \"int\"}, {\"name\": \"g_a_or_b\", \"type\": \"bytes\"}, {\n      \"name\": \"key_fingerprint\",\n      \"type\": \"long\"\n    }, {\"name\": \"protocol\", \"type\": \"PhoneCallProtocol\"}, {\n      \"name\": \"connections\",\n      \"type\": \"Vector<PhoneConnection>\"\n    }, {\"name\": \"start_date\", \"type\": \"int\"}],\n    \"type\": \"PhoneCall\"\n  }, {\n    \"id\": \"1355435489\",\n    \"predicate\": \"phoneCallDiscarded\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"need_rating\", \"type\": \"flags.2?true\"}, {\n      \"name\": \"need_debug\",\n      \"type\": \"flags.3?true\"\n    }, {\"name\": \"video\", \"type\": \"flags.5?true\"}, {\"name\": \"id\", \"type\": \"long\"}, {\n      \"name\": \"reason\",\n      \"type\": \"flags.0?PhoneCallDiscardReason\"\n    }, {\"name\": \"duration\", \"type\": \"flags.1?int\"}],\n    \"type\": \"PhoneCall\"\n  }, {\n    \"id\": \"-1655957568\",\n    \"predicate\": \"phoneConnection\",\n    \"params\": [{\"name\": \"id\", \"type\": \"long\"}, {\"name\": \"ip\", \"type\": \"string\"}, {\n      \"name\": \"ipv6\",\n      \"type\": \"string\"\n    }, {\"name\": \"port\", \"type\": \"int\"}, {\"name\": \"peer_tag\", \"type\": \"bytes\"}],\n    \"type\": \"PhoneConnection\"\n  }, {\n    \"id\": \"-1564789301\",\n    \"predicate\": \"phoneCallProtocol\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"udp_p2p\", \"type\": \"flags.0?true\"}, {\n      \"name\": \"udp_reflector\",\n      \"type\": \"flags.1?true\"\n    }, {\"name\": \"min_layer\", \"type\": \"int\"}, {\"name\": \"max_layer\", \"type\": \"int\"}],\n    \"type\": \"PhoneCallProtocol\"\n  }, {\n    \"id\": \"-326966976\",\n    \"predicate\": \"phone.phoneCall\",\n    \"params\": [{\"name\": \"phone_call\", \"type\": \"PhoneCall\"}, {\"name\": \"users\", \"type\": \"Vector<User>\"}],\n    \"type\": \"phone.PhoneCall\"\n  }, {\n    \"id\": \"-2134272152\",\n    \"predicate\": \"inputMessagesFilterPhoneCalls\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"missed\", \"type\": \"flags.0?true\"}],\n    \"type\": \"MessagesFilter\"\n  }, {\n    \"id\": \"-2132731265\",\n    \"predicate\": \"messageActionPhoneCall\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"video\", \"type\": \"flags.2?true\"}, {\n      \"name\": \"call_id\",\n      \"type\": \"long\"\n    }, {\"name\": \"reason\", \"type\": \"flags.0?PhoneCallDiscardReason\"}, {\"name\": \"duration\", \"type\": \"flags.1?int\"}],\n    \"type\": \"MessageAction\"\n  }, {\n    \"id\": \"2054952868\",\n    \"predicate\": \"inputMessagesFilterRoundVoice\",\n    \"params\": [],\n    \"type\": \"MessagesFilter\"\n  }, {\n    \"id\": \"-1253451181\",\n    \"predicate\": \"inputMessagesFilterRoundVideo\",\n    \"params\": [],\n    \"type\": \"MessagesFilter\"\n  }, {\n    \"id\": \"-1997373508\",\n    \"predicate\": \"sendMessageRecordRoundAction\",\n    \"params\": [],\n    \"type\": \"SendMessageAction\"\n  }, {\n    \"id\": \"608050278\",\n    \"predicate\": \"sendMessageUploadRoundAction\",\n    \"params\": [{\"name\": \"progress\", \"type\": \"int\"}],\n    \"type\": \"SendMessageAction\"\n  }, {\n    \"id\": \"-242427324\",\n    \"predicate\": \"upload.fileCdnRedirect\",\n    \"params\": [{\"name\": \"dc_id\", \"type\": \"int\"}, {\"name\": \"file_token\", \"type\": \"bytes\"}, {\n      \"name\": \"encryption_key\",\n      \"type\": \"bytes\"\n    }, {\"name\": \"encryption_iv\", \"type\": \"bytes\"}, {\"name\": \"file_hashes\", \"type\": \"Vector<FileHash>\"}],\n    \"type\": \"upload.File\"\n  }, {\n    \"id\": \"-290921362\",\n    \"predicate\": \"upload.cdnFileReuploadNeeded\",\n    \"params\": [{\"name\": \"request_token\", \"type\": \"bytes\"}],\n    \"type\": \"upload.CdnFile\"\n  }, {\n    \"id\": \"-1449145777\",\n    \"predicate\": \"upload.cdnFile\",\n    \"params\": [{\"name\": \"bytes\", \"type\": \"bytes\"}],\n    \"type\": \"upload.CdnFile\"\n  }, {\n    \"id\": \"-914167110\",\n    \"predicate\": \"cdnPublicKey\",\n    \"params\": [{\"name\": \"dc_id\", \"type\": \"int\"}, {\"name\": \"public_key\", \"type\": \"string\"}],\n    \"type\": \"CdnPublicKey\"\n  }, {\n    \"id\": \"1462101002\",\n    \"predicate\": \"cdnConfig\",\n    \"params\": [{\"name\": \"public_keys\", \"type\": \"Vector<CdnPublicKey>\"}],\n    \"type\": \"CdnConfig\"\n  }, {\n    \"id\": \"-283684427\",\n    \"predicate\": \"pageBlockChannel\",\n    \"params\": [{\"name\": \"channel\", \"type\": \"Chat\"}],\n    \"type\": \"PageBlock\"\n  }, {\n    \"id\": \"-892239370\",\n    \"predicate\": \"langPackString\",\n    \"params\": [{\"name\": \"key\", \"type\": \"string\"}, {\"name\": \"value\", \"type\": \"string\"}],\n    \"type\": \"LangPackString\"\n  }, {\n    \"id\": \"1816636575\",\n    \"predicate\": \"langPackStringPluralized\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"key\", \"type\": \"string\"}, {\n      \"name\": \"zero_value\",\n      \"type\": \"flags.0?string\"\n    }, {\"name\": \"one_value\", \"type\": \"flags.1?string\"}, {\n      \"name\": \"two_value\",\n      \"type\": \"flags.2?string\"\n    }, {\"name\": \"few_value\", \"type\": \"flags.3?string\"}, {\n      \"name\": \"many_value\",\n      \"type\": \"flags.4?string\"\n    }, {\"name\": \"other_value\", \"type\": \"string\"}],\n    \"type\": \"LangPackString\"\n  }, {\n    \"id\": \"695856818\",\n    \"predicate\": \"langPackStringDeleted\",\n    \"params\": [{\"name\": \"key\", \"type\": \"string\"}],\n    \"type\": \"LangPackString\"\n  }, {\n    \"id\": \"-209337866\",\n    \"predicate\": \"langPackDifference\",\n    \"params\": [{\"name\": \"lang_code\", \"type\": \"string\"}, {\"name\": \"from_version\", \"type\": \"int\"}, {\n      \"name\": \"version\",\n      \"type\": \"int\"\n    }, {\"name\": \"strings\", \"type\": \"Vector<LangPackString>\"}],\n    \"type\": \"LangPackDifference\"\n  }, {\n    \"id\": \"-288727837\",\n    \"predicate\": \"langPackLanguage\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"official\", \"type\": \"flags.0?true\"}, {\n      \"name\": \"rtl\",\n      \"type\": \"flags.2?true\"\n    }, {\"name\": \"beta\", \"type\": \"flags.3?true\"}, {\"name\": \"name\", \"type\": \"string\"}, {\n      \"name\": \"native_name\",\n      \"type\": \"string\"\n    }, {\"name\": \"lang_code\", \"type\": \"string\"}, {\n      \"name\": \"base_lang_code\",\n      \"type\": \"flags.1?string\"\n    }, {\"name\": \"plural_code\", \"type\": \"string\"}, {\"name\": \"strings_count\", \"type\": \"int\"}, {\n      \"name\": \"translated_count\",\n      \"type\": \"int\"\n    }, {\"name\": \"translations_url\", \"type\": \"string\"}],\n    \"type\": \"LangPackLanguage\"\n  }, {\n    \"id\": \"1180041828\",\n    \"predicate\": \"updateLangPackTooLong\",\n    \"params\": [{\"name\": \"lang_code\", \"type\": \"string\"}],\n    \"type\": \"Update\"\n  }, {\n    \"id\": \"1442983757\",\n    \"predicate\": \"updateLangPack\",\n    \"params\": [{\"name\": \"difference\", \"type\": \"LangPackDifference\"}],\n    \"type\": \"Update\"\n  }, {\n    \"id\": \"-859915345\",\n    \"predicate\": \"channelParticipantAdmin\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"can_edit\", \"type\": \"flags.0?true\"}, {\n      \"name\": \"self\",\n      \"type\": \"flags.1?true\"\n    }, {\"name\": \"user_id\", \"type\": \"int\"}, {\"name\": \"inviter_id\", \"type\": \"flags.1?int\"}, {\n      \"name\": \"promoted_by\",\n      \"type\": \"int\"\n    }, {\"name\": \"date\", \"type\": \"int\"}, {\"name\": \"admin_rights\", \"type\": \"ChatAdminRights\"}, {\n      \"name\": \"rank\",\n      \"type\": \"flags.2?string\"\n    }],\n    \"type\": \"ChannelParticipant\"\n  }, {\n    \"id\": \"470789295\",\n    \"predicate\": \"channelParticipantBanned\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"left\", \"type\": \"flags.0?true\"}, {\n      \"name\": \"user_id\",\n      \"type\": \"int\"\n    }, {\"name\": \"kicked_by\", \"type\": \"int\"}, {\"name\": \"date\", \"type\": \"int\"}, {\n      \"name\": \"banned_rights\",\n      \"type\": \"ChatBannedRights\"\n    }],\n    \"type\": \"ChannelParticipant\"\n  }, {\n    \"id\": \"338142689\",\n    \"predicate\": \"channelParticipantsBanned\",\n    \"params\": [{\"name\": \"q\", \"type\": \"string\"}],\n    \"type\": \"ChannelParticipantsFilter\"\n  }, {\n    \"id\": \"106343499\",\n    \"predicate\": \"channelParticipantsSearch\",\n    \"params\": [{\"name\": \"q\", \"type\": \"string\"}],\n    \"type\": \"ChannelParticipantsFilter\"\n  }, {\n    \"id\": \"-421545947\",\n    \"predicate\": \"channelAdminLogEventActionChangeTitle\",\n    \"params\": [{\"name\": \"prev_value\", \"type\": \"string\"}, {\"name\": \"new_value\", \"type\": \"string\"}],\n    \"type\": \"ChannelAdminLogEventAction\"\n  }, {\n    \"id\": \"1427671598\",\n    \"predicate\": \"channelAdminLogEventActionChangeAbout\",\n    \"params\": [{\"name\": \"prev_value\", \"type\": \"string\"}, {\"name\": \"new_value\", \"type\": \"string\"}],\n    \"type\": \"ChannelAdminLogEventAction\"\n  }, {\n    \"id\": \"1783299128\",\n    \"predicate\": \"channelAdminLogEventActionChangeUsername\",\n    \"params\": [{\"name\": \"prev_value\", \"type\": \"string\"}, {\"name\": \"new_value\", \"type\": \"string\"}],\n    \"type\": \"ChannelAdminLogEventAction\"\n  }, {\n    \"id\": \"1129042607\",\n    \"predicate\": \"channelAdminLogEventActionChangePhoto\",\n    \"params\": [{\"name\": \"prev_photo\", \"type\": \"Photo\"}, {\"name\": \"new_photo\", \"type\": \"Photo\"}],\n    \"type\": \"ChannelAdminLogEventAction\"\n  }, {\n    \"id\": \"460916654\",\n    \"predicate\": \"channelAdminLogEventActionToggleInvites\",\n    \"params\": [{\"name\": \"new_value\", \"type\": \"Bool\"}],\n    \"type\": \"ChannelAdminLogEventAction\"\n  }, {\n    \"id\": \"648939889\",\n    \"predicate\": \"channelAdminLogEventActionToggleSignatures\",\n    \"params\": [{\"name\": \"new_value\", \"type\": \"Bool\"}],\n    \"type\": \"ChannelAdminLogEventAction\"\n  }, {\n    \"id\": \"-370660328\",\n    \"predicate\": \"channelAdminLogEventActionUpdatePinned\",\n    \"params\": [{\"name\": \"message\", \"type\": \"Message\"}],\n    \"type\": \"ChannelAdminLogEventAction\"\n  }, {\n    \"id\": \"1889215493\",\n    \"predicate\": \"channelAdminLogEventActionEditMessage\",\n    \"params\": [{\"name\": \"prev_message\", \"type\": \"Message\"}, {\"name\": \"new_message\", \"type\": \"Message\"}],\n    \"type\": \"ChannelAdminLogEventAction\"\n  }, {\n    \"id\": \"1121994683\",\n    \"predicate\": \"channelAdminLogEventActionDeleteMessage\",\n    \"params\": [{\"name\": \"message\", \"type\": \"Message\"}],\n    \"type\": \"ChannelAdminLogEventAction\"\n  }, {\n    \"id\": \"405815507\",\n    \"predicate\": \"channelAdminLogEventActionParticipantJoin\",\n    \"params\": [],\n    \"type\": \"ChannelAdminLogEventAction\"\n  }, {\n    \"id\": \"-124291086\",\n    \"predicate\": \"channelAdminLogEventActionParticipantLeave\",\n    \"params\": [],\n    \"type\": \"ChannelAdminLogEventAction\"\n  }, {\n    \"id\": \"-484690728\",\n    \"predicate\": \"channelAdminLogEventActionParticipantInvite\",\n    \"params\": [{\"name\": \"participant\", \"type\": \"ChannelParticipant\"}],\n    \"type\": \"ChannelAdminLogEventAction\"\n  }, {\n    \"id\": \"-422036098\",\n    \"predicate\": \"channelAdminLogEventActionParticipantToggleBan\",\n    \"params\": [{\"name\": \"prev_participant\", \"type\": \"ChannelParticipant\"}, {\n      \"name\": \"new_participant\",\n      \"type\": \"ChannelParticipant\"\n    }],\n    \"type\": \"ChannelAdminLogEventAction\"\n  }, {\n    \"id\": \"-714643696\",\n    \"predicate\": \"channelAdminLogEventActionParticipantToggleAdmin\",\n    \"params\": [{\"name\": \"prev_participant\", \"type\": \"ChannelParticipant\"}, {\n      \"name\": \"new_participant\",\n      \"type\": \"ChannelParticipant\"\n    }],\n    \"type\": \"ChannelAdminLogEventAction\"\n  }, {\n    \"id\": \"995769920\",\n    \"predicate\": \"channelAdminLogEvent\",\n    \"params\": [{\"name\": \"id\", \"type\": \"long\"}, {\"name\": \"date\", \"type\": \"int\"}, {\n      \"name\": \"user_id\",\n      \"type\": \"int\"\n    }, {\"name\": \"action\", \"type\": \"ChannelAdminLogEventAction\"}],\n    \"type\": \"ChannelAdminLogEvent\"\n  }, {\n    \"id\": \"-309659827\",\n    \"predicate\": \"channels.adminLogResults\",\n    \"params\": [{\"name\": \"events\", \"type\": \"Vector<ChannelAdminLogEvent>\"}, {\n      \"name\": \"chats\",\n      \"type\": \"Vector<Chat>\"\n    }, {\"name\": \"users\", \"type\": \"Vector<User>\"}],\n    \"type\": \"channels.AdminLogResults\"\n  }, {\n    \"id\": \"-368018716\",\n    \"predicate\": \"channelAdminLogEventsFilter\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"join\", \"type\": \"flags.0?true\"}, {\n      \"name\": \"leave\",\n      \"type\": \"flags.1?true\"\n    }, {\"name\": \"invite\", \"type\": \"flags.2?true\"}, {\"name\": \"ban\", \"type\": \"flags.3?true\"}, {\n      \"name\": \"unban\",\n      \"type\": \"flags.4?true\"\n    }, {\"name\": \"kick\", \"type\": \"flags.5?true\"}, {\"name\": \"unkick\", \"type\": \"flags.6?true\"}, {\n      \"name\": \"promote\",\n      \"type\": \"flags.7?true\"\n    }, {\"name\": \"demote\", \"type\": \"flags.8?true\"}, {\"name\": \"info\", \"type\": \"flags.9?true\"}, {\n      \"name\": \"settings\",\n      \"type\": \"flags.10?true\"\n    }, {\"name\": \"pinned\", \"type\": \"flags.11?true\"}, {\"name\": \"edit\", \"type\": \"flags.12?true\"}, {\n      \"name\": \"delete\",\n      \"type\": \"flags.13?true\"\n    }],\n    \"type\": \"ChannelAdminLogEventsFilter\"\n  }, {\n    \"id\": \"511092620\",\n    \"predicate\": \"topPeerCategoryPhoneCalls\",\n    \"params\": [],\n    \"type\": \"TopPeerCategory\"\n  }, {\n    \"id\": \"-2143067670\",\n    \"predicate\": \"pageBlockAudio\",\n    \"params\": [{\"name\": \"audio_id\", \"type\": \"long\"}, {\"name\": \"caption\", \"type\": \"PageCaption\"}],\n    \"type\": \"PageBlock\"\n  }, {\n    \"id\": \"1558266229\",\n    \"predicate\": \"popularContact\",\n    \"params\": [{\"name\": \"client_id\", \"type\": \"long\"}, {\"name\": \"importers\", \"type\": \"int\"}],\n    \"type\": \"PopularContact\"\n  }, {\n    \"id\": \"1200788123\",\n    \"predicate\": \"messageActionScreenshotTaken\",\n    \"params\": [],\n    \"type\": \"MessageAction\"\n  }, {\n    \"id\": \"-1634752813\",\n    \"predicate\": \"messages.favedStickersNotModified\",\n    \"params\": [],\n    \"type\": \"messages.FavedStickers\"\n  }, {\n    \"id\": \"-209768682\",\n    \"predicate\": \"messages.favedStickers\",\n    \"params\": [{\"name\": \"hash\", \"type\": \"int\"}, {\"name\": \"packs\", \"type\": \"Vector<StickerPack>\"}, {\n      \"name\": \"stickers\",\n      \"type\": \"Vector<Document>\"\n    }],\n    \"type\": \"messages.FavedStickers\"\n  }, {\"id\": \"-451831443\", \"predicate\": \"updateFavedStickers\", \"params\": [], \"type\": \"Update\"}, {\n    \"id\": \"-1987495099\",\n    \"predicate\": \"updateChannelReadMessagesContents\",\n    \"params\": [{\"name\": \"channel_id\", \"type\": \"int\"}, {\"name\": \"messages\", \"type\": \"Vector<int>\"}],\n    \"type\": \"Update\"\n  }, {\n    \"id\": \"-1040652646\",\n    \"predicate\": \"inputMessagesFilterMyMentions\",\n    \"params\": [],\n    \"type\": \"MessagesFilter\"\n  }, {\"id\": \"1887741886\", \"predicate\": \"updateContactsReset\", \"params\": [], \"type\": \"Update\"}, {\n    \"id\": \"-1312568665\",\n    \"predicate\": \"channelAdminLogEventActionChangeStickerSet\",\n    \"params\": [{\"name\": \"prev_stickerset\", \"type\": \"InputStickerSet\"}, {\n      \"name\": \"new_stickerset\",\n      \"type\": \"InputStickerSet\"\n    }],\n    \"type\": \"ChannelAdminLogEventAction\"\n  }, {\n    \"id\": \"-85549226\",\n    \"predicate\": \"messageActionCustomAction\",\n    \"params\": [{\"name\": \"message\", \"type\": \"string\"}],\n    \"type\": \"MessageAction\"\n  }, {\n    \"id\": \"178373535\",\n    \"predicate\": \"inputPaymentCredentialsApplePay\",\n    \"params\": [{\"name\": \"payment_data\", \"type\": \"DataJSON\"}],\n    \"type\": \"InputPaymentCredentials\"\n  }, {\n    \"id\": \"-905587442\",\n    \"predicate\": \"inputPaymentCredentialsAndroidPay\",\n    \"params\": [{\"name\": \"payment_token\", \"type\": \"DataJSON\"}, {\"name\": \"google_transaction_id\", \"type\": \"string\"}],\n    \"type\": \"InputPaymentCredentials\"\n  }, {\n    \"id\": \"-419271411\",\n    \"predicate\": \"inputMessagesFilterGeo\",\n    \"params\": [],\n    \"type\": \"MessagesFilter\"\n  }, {\n    \"id\": \"-530392189\",\n    \"predicate\": \"inputMessagesFilterContacts\",\n    \"params\": [],\n    \"type\": \"MessagesFilter\"\n  }, {\n    \"id\": \"1893427255\",\n    \"predicate\": \"updateChannelAvailableMessages\",\n    \"params\": [{\"name\": \"channel_id\", \"type\": \"int\"}, {\"name\": \"available_min_id\", \"type\": \"int\"}],\n    \"type\": \"Update\"\n  }, {\n    \"id\": \"1599903217\",\n    \"predicate\": \"channelAdminLogEventActionTogglePreHistoryHidden\",\n    \"params\": [{\"name\": \"new_value\", \"type\": \"Bool\"}],\n    \"type\": \"ChannelAdminLogEventAction\"\n  }, {\n    \"id\": \"-833715459\",\n    \"predicate\": \"inputMediaGeoLive\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"stopped\", \"type\": \"flags.0?true\"}, {\n      \"name\": \"geo_point\",\n      \"type\": \"InputGeoPoint\"\n    }, {\"name\": \"period\", \"type\": \"flags.1?int\"}],\n    \"type\": \"InputMedia\"\n  }, {\n    \"id\": \"2084316681\",\n    \"predicate\": \"messageMediaGeoLive\",\n    \"params\": [{\"name\": \"geo\", \"type\": \"GeoPoint\"}, {\"name\": \"period\", \"type\": \"int\"}],\n    \"type\": \"MessageMedia\"\n  }, {\n    \"id\": \"1189204285\",\n    \"predicate\": \"recentMeUrlUnknown\",\n    \"params\": [{\"name\": \"url\", \"type\": \"string\"}],\n    \"type\": \"RecentMeUrl\"\n  }, {\n    \"id\": \"-1917045962\",\n    \"predicate\": \"recentMeUrlUser\",\n    \"params\": [{\"name\": \"url\", \"type\": \"string\"}, {\"name\": \"user_id\", \"type\": \"int\"}],\n    \"type\": \"RecentMeUrl\"\n  }, {\n    \"id\": \"-1608834311\",\n    \"predicate\": \"recentMeUrlChat\",\n    \"params\": [{\"name\": \"url\", \"type\": \"string\"}, {\"name\": \"chat_id\", \"type\": \"int\"}],\n    \"type\": \"RecentMeUrl\"\n  }, {\n    \"id\": \"-347535331\",\n    \"predicate\": \"recentMeUrlChatInvite\",\n    \"params\": [{\"name\": \"url\", \"type\": \"string\"}, {\"name\": \"chat_invite\", \"type\": \"ChatInvite\"}],\n    \"type\": \"RecentMeUrl\"\n  }, {\n    \"id\": \"-1140172836\",\n    \"predicate\": \"recentMeUrlStickerSet\",\n    \"params\": [{\"name\": \"url\", \"type\": \"string\"}, {\"name\": \"set\", \"type\": \"StickerSetCovered\"}],\n    \"type\": \"RecentMeUrl\"\n  }, {\n    \"id\": \"235081943\",\n    \"predicate\": \"help.recentMeUrls\",\n    \"params\": [{\"name\": \"urls\", \"type\": \"Vector<RecentMeUrl>\"}, {\n      \"name\": \"chats\",\n      \"type\": \"Vector<Chat>\"\n    }, {\"name\": \"users\", \"type\": \"Vector<User>\"}],\n    \"type\": \"help.RecentMeUrls\"\n  }, {\n    \"id\": \"-266911767\",\n    \"predicate\": \"channels.channelParticipantsNotModified\",\n    \"params\": [],\n    \"type\": \"channels.ChannelParticipants\"\n  }, {\n    \"id\": \"1951620897\",\n    \"predicate\": \"messages.messagesNotModified\",\n    \"params\": [{\"name\": \"count\", \"type\": \"int\"}],\n    \"type\": \"messages.Messages\"\n  }, {\n    \"id\": \"482797855\",\n    \"predicate\": \"inputSingleMedia\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"media\", \"type\": \"InputMedia\"}, {\n      \"name\": \"random_id\",\n      \"type\": \"long\"\n    }, {\"name\": \"message\", \"type\": \"string\"}, {\"name\": \"entities\", \"type\": \"flags.0?Vector<MessageEntity>\"}],\n    \"type\": \"InputSingleMedia\"\n  }, {\n    \"id\": \"-892779534\",\n    \"predicate\": \"webAuthorization\",\n    \"params\": [{\"name\": \"hash\", \"type\": \"long\"}, {\"name\": \"bot_id\", \"type\": \"int\"}, {\n      \"name\": \"domain\",\n      \"type\": \"string\"\n    }, {\"name\": \"browser\", \"type\": \"string\"}, {\"name\": \"platform\", \"type\": \"string\"}, {\n      \"name\": \"date_created\",\n      \"type\": \"int\"\n    }, {\"name\": \"date_active\", \"type\": \"int\"}, {\"name\": \"ip\", \"type\": \"string\"}, {\"name\": \"region\", \"type\": \"string\"}],\n    \"type\": \"WebAuthorization\"\n  }, {\n    \"id\": \"-313079300\",\n    \"predicate\": \"account.webAuthorizations\",\n    \"params\": [{\"name\": \"authorizations\", \"type\": \"Vector<WebAuthorization>\"}, {\n      \"name\": \"users\",\n      \"type\": \"Vector<User>\"\n    }],\n    \"type\": \"account.WebAuthorizations\"\n  }, {\n    \"id\": \"-1502174430\",\n    \"predicate\": \"inputMessageID\",\n    \"params\": [{\"name\": \"id\", \"type\": \"int\"}],\n    \"type\": \"InputMessage\"\n  }, {\n    \"id\": \"-1160215659\",\n    \"predicate\": \"inputMessageReplyTo\",\n    \"params\": [{\"name\": \"id\", \"type\": \"int\"}],\n    \"type\": \"InputMessage\"\n  }, {\n    \"id\": \"-2037963464\",\n    \"predicate\": \"inputMessagePinned\",\n    \"params\": [],\n    \"type\": \"InputMessage\"\n  }, {\n    \"id\": \"-1687559349\",\n    \"predicate\": \"messageEntityPhone\",\n    \"params\": [{\"name\": \"offset\", \"type\": \"int\"}, {\"name\": \"length\", \"type\": \"int\"}],\n    \"type\": \"MessageEntity\"\n  }, {\n    \"id\": \"1280209983\",\n    \"predicate\": \"messageEntityCashtag\",\n    \"params\": [{\"name\": \"offset\", \"type\": \"int\"}, {\"name\": \"length\", \"type\": \"int\"}],\n    \"type\": \"MessageEntity\"\n  }, {\n    \"id\": \"-1410748418\",\n    \"predicate\": \"messageActionBotAllowed\",\n    \"params\": [{\"name\": \"domain\", \"type\": \"string\"}],\n    \"type\": \"MessageAction\"\n  }, {\n    \"id\": \"-55902537\",\n    \"predicate\": \"inputDialogPeer\",\n    \"params\": [{\"name\": \"peer\", \"type\": \"InputPeer\"}],\n    \"type\": \"InputDialogPeer\"\n  }, {\n    \"id\": \"-445792507\",\n    \"predicate\": \"dialogPeer\",\n    \"params\": [{\"name\": \"peer\", \"type\": \"Peer\"}],\n    \"type\": \"DialogPeer\"\n  }, {\n    \"id\": \"223655517\",\n    \"predicate\": \"messages.foundStickerSetsNotModified\",\n    \"params\": [],\n    \"type\": \"messages.FoundStickerSets\"\n  }, {\n    \"id\": \"1359533640\",\n    \"predicate\": \"messages.foundStickerSets\",\n    \"params\": [{\"name\": \"hash\", \"type\": \"int\"}, {\"name\": \"sets\", \"type\": \"Vector<StickerSetCovered>\"}],\n    \"type\": \"messages.FoundStickerSets\"\n  }, {\n    \"id\": \"1648543603\",\n    \"predicate\": \"fileHash\",\n    \"params\": [{\"name\": \"offset\", \"type\": \"int\"}, {\"name\": \"limit\", \"type\": \"int\"}, {\"name\": \"hash\", \"type\": \"bytes\"}],\n    \"type\": \"FileHash\"\n  }, {\n    \"id\": \"-104284986\",\n    \"predicate\": \"webDocumentNoProxy\",\n    \"params\": [{\"name\": \"url\", \"type\": \"string\"}, {\"name\": \"size\", \"type\": \"int\"}, {\n      \"name\": \"mime_type\",\n      \"type\": \"string\"\n    }, {\"name\": \"attributes\", \"type\": \"Vector<DocumentAttribute>\"}],\n    \"type\": \"WebDocument\"\n  }, {\n    \"id\": \"1968737087\",\n    \"predicate\": \"inputClientProxy\",\n    \"params\": [{\"name\": \"address\", \"type\": \"string\"}, {\"name\": \"port\", \"type\": \"int\"}],\n    \"type\": \"InputClientProxy\"\n  }, {\n    \"id\": \"-526508104\",\n    \"predicate\": \"help.proxyDataEmpty\",\n    \"params\": [{\"name\": \"expires\", \"type\": \"int\"}],\n    \"type\": \"help.ProxyData\"\n  }, {\n    \"id\": \"737668643\",\n    \"predicate\": \"help.proxyDataPromo\",\n    \"params\": [{\"name\": \"expires\", \"type\": \"int\"}, {\"name\": \"peer\", \"type\": \"Peer\"}, {\n      \"name\": \"chats\",\n      \"type\": \"Vector<Chat>\"\n    }, {\"name\": \"users\", \"type\": \"Vector<User>\"}],\n    \"type\": \"help.ProxyData\"\n  }, {\n    \"id\": \"-483352705\",\n    \"predicate\": \"help.termsOfServiceUpdateEmpty\",\n    \"params\": [{\"name\": \"expires\", \"type\": \"int\"}],\n    \"type\": \"help.TermsOfServiceUpdate\"\n  }, {\n    \"id\": \"686618977\",\n    \"predicate\": \"help.termsOfServiceUpdate\",\n    \"params\": [{\"name\": \"expires\", \"type\": \"int\"}, {\"name\": \"terms_of_service\", \"type\": \"help.TermsOfService\"}],\n    \"type\": \"help.TermsOfServiceUpdate\"\n  }, {\n    \"id\": \"859091184\",\n    \"predicate\": \"inputSecureFileUploaded\",\n    \"params\": [{\"name\": \"id\", \"type\": \"long\"}, {\"name\": \"parts\", \"type\": \"int\"}, {\n      \"name\": \"md5_checksum\",\n      \"type\": \"string\"\n    }, {\"name\": \"file_hash\", \"type\": \"bytes\"}, {\"name\": \"secret\", \"type\": \"bytes\"}],\n    \"type\": \"InputSecureFile\"\n  }, {\n    \"id\": \"1399317950\",\n    \"predicate\": \"inputSecureFile\",\n    \"params\": [{\"name\": \"id\", \"type\": \"long\"}, {\"name\": \"access_hash\", \"type\": \"long\"}],\n    \"type\": \"InputSecureFile\"\n  }, {\n    \"id\": \"-876089816\",\n    \"predicate\": \"inputSecureFileLocation\",\n    \"params\": [{\"name\": \"id\", \"type\": \"long\"}, {\"name\": \"access_hash\", \"type\": \"long\"}],\n    \"type\": \"InputFileLocation\"\n  }, {\"id\": \"1679398724\", \"predicate\": \"secureFileEmpty\", \"params\": [], \"type\": \"SecureFile\"}, {\n    \"id\": \"-534283678\",\n    \"predicate\": \"secureFile\",\n    \"params\": [{\"name\": \"id\", \"type\": \"long\"}, {\"name\": \"access_hash\", \"type\": \"long\"}, {\n      \"name\": \"size\",\n      \"type\": \"int\"\n    }, {\"name\": \"dc_id\", \"type\": \"int\"}, {\"name\": \"date\", \"type\": \"int\"}, {\n      \"name\": \"file_hash\",\n      \"type\": \"bytes\"\n    }, {\"name\": \"secret\", \"type\": \"bytes\"}],\n    \"type\": \"SecureFile\"\n  }, {\n    \"id\": \"-1964327229\",\n    \"predicate\": \"secureData\",\n    \"params\": [{\"name\": \"data\", \"type\": \"bytes\"}, {\"name\": \"data_hash\", \"type\": \"bytes\"}, {\n      \"name\": \"secret\",\n      \"type\": \"bytes\"\n    }],\n    \"type\": \"SecureData\"\n  }, {\n    \"id\": \"2103482845\",\n    \"predicate\": \"securePlainPhone\",\n    \"params\": [{\"name\": \"phone\", \"type\": \"string\"}],\n    \"type\": \"SecurePlainData\"\n  }, {\n    \"id\": \"569137759\",\n    \"predicate\": \"securePlainEmail\",\n    \"params\": [{\"name\": \"email\", \"type\": \"string\"}],\n    \"type\": \"SecurePlainData\"\n  }, {\n    \"id\": \"-1658158621\",\n    \"predicate\": \"secureValueTypePersonalDetails\",\n    \"params\": [],\n    \"type\": \"SecureValueType\"\n  }, {\n    \"id\": \"1034709504\",\n    \"predicate\": \"secureValueTypePassport\",\n    \"params\": [],\n    \"type\": \"SecureValueType\"\n  }, {\n    \"id\": \"115615172\",\n    \"predicate\": \"secureValueTypeDriverLicense\",\n    \"params\": [],\n    \"type\": \"SecureValueType\"\n  }, {\n    \"id\": \"-1596951477\",\n    \"predicate\": \"secureValueTypeIdentityCard\",\n    \"params\": [],\n    \"type\": \"SecureValueType\"\n  }, {\n    \"id\": \"-1717268701\",\n    \"predicate\": \"secureValueTypeInternalPassport\",\n    \"params\": [],\n    \"type\": \"SecureValueType\"\n  }, {\n    \"id\": \"-874308058\",\n    \"predicate\": \"secureValueTypeAddress\",\n    \"params\": [],\n    \"type\": \"SecureValueType\"\n  }, {\n    \"id\": \"-63531698\",\n    \"predicate\": \"secureValueTypeUtilityBill\",\n    \"params\": [],\n    \"type\": \"SecureValueType\"\n  }, {\n    \"id\": \"-1995211763\",\n    \"predicate\": \"secureValueTypeBankStatement\",\n    \"params\": [],\n    \"type\": \"SecureValueType\"\n  }, {\n    \"id\": \"-1954007928\",\n    \"predicate\": \"secureValueTypeRentalAgreement\",\n    \"params\": [],\n    \"type\": \"SecureValueType\"\n  }, {\n    \"id\": \"-1713143702\",\n    \"predicate\": \"secureValueTypePassportRegistration\",\n    \"params\": [],\n    \"type\": \"SecureValueType\"\n  }, {\n    \"id\": \"-368907213\",\n    \"predicate\": \"secureValueTypeTemporaryRegistration\",\n    \"params\": [],\n    \"type\": \"SecureValueType\"\n  }, {\n    \"id\": \"-1289704741\",\n    \"predicate\": \"secureValueTypePhone\",\n    \"params\": [],\n    \"type\": \"SecureValueType\"\n  }, {\n    \"id\": \"-1908627474\",\n    \"predicate\": \"secureValueTypeEmail\",\n    \"params\": [],\n    \"type\": \"SecureValueType\"\n  }, {\n    \"id\": \"411017418\",\n    \"predicate\": \"secureValue\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"type\", \"type\": \"SecureValueType\"}, {\n      \"name\": \"data\",\n      \"type\": \"flags.0?SecureData\"\n    }, {\"name\": \"front_side\", \"type\": \"flags.1?SecureFile\"}, {\n      \"name\": \"reverse_side\",\n      \"type\": \"flags.2?SecureFile\"\n    }, {\"name\": \"selfie\", \"type\": \"flags.3?SecureFile\"}, {\n      \"name\": \"translation\",\n      \"type\": \"flags.6?Vector<SecureFile>\"\n    }, {\"name\": \"files\", \"type\": \"flags.4?Vector<SecureFile>\"}, {\n      \"name\": \"plain_data\",\n      \"type\": \"flags.5?SecurePlainData\"\n    }, {\"name\": \"hash\", \"type\": \"bytes\"}],\n    \"type\": \"SecureValue\"\n  }, {\n    \"id\": \"-618540889\",\n    \"predicate\": \"inputSecureValue\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"type\", \"type\": \"SecureValueType\"}, {\n      \"name\": \"data\",\n      \"type\": \"flags.0?SecureData\"\n    }, {\"name\": \"front_side\", \"type\": \"flags.1?InputSecureFile\"}, {\n      \"name\": \"reverse_side\",\n      \"type\": \"flags.2?InputSecureFile\"\n    }, {\"name\": \"selfie\", \"type\": \"flags.3?InputSecureFile\"}, {\n      \"name\": \"translation\",\n      \"type\": \"flags.6?Vector<InputSecureFile>\"\n    }, {\"name\": \"files\", \"type\": \"flags.4?Vector<InputSecureFile>\"}, {\n      \"name\": \"plain_data\",\n      \"type\": \"flags.5?SecurePlainData\"\n    }],\n    \"type\": \"InputSecureValue\"\n  }, {\n    \"id\": \"-316748368\",\n    \"predicate\": \"secureValueHash\",\n    \"params\": [{\"name\": \"type\", \"type\": \"SecureValueType\"}, {\"name\": \"hash\", \"type\": \"bytes\"}],\n    \"type\": \"SecureValueHash\"\n  }, {\n    \"id\": \"-391902247\",\n    \"predicate\": \"secureValueErrorData\",\n    \"params\": [{\"name\": \"type\", \"type\": \"SecureValueType\"}, {\"name\": \"data_hash\", \"type\": \"bytes\"}, {\n      \"name\": \"field\",\n      \"type\": \"string\"\n    }, {\"name\": \"text\", \"type\": \"string\"}],\n    \"type\": \"SecureValueError\"\n  }, {\n    \"id\": \"12467706\",\n    \"predicate\": \"secureValueErrorFrontSide\",\n    \"params\": [{\"name\": \"type\", \"type\": \"SecureValueType\"}, {\"name\": \"file_hash\", \"type\": \"bytes\"}, {\n      \"name\": \"text\",\n      \"type\": \"string\"\n    }],\n    \"type\": \"SecureValueError\"\n  }, {\n    \"id\": \"-2037765467\",\n    \"predicate\": \"secureValueErrorReverseSide\",\n    \"params\": [{\"name\": \"type\", \"type\": \"SecureValueType\"}, {\"name\": \"file_hash\", \"type\": \"bytes\"}, {\n      \"name\": \"text\",\n      \"type\": \"string\"\n    }],\n    \"type\": \"SecureValueError\"\n  }, {\n    \"id\": \"-449327402\",\n    \"predicate\": \"secureValueErrorSelfie\",\n    \"params\": [{\"name\": \"type\", \"type\": \"SecureValueType\"}, {\"name\": \"file_hash\", \"type\": \"bytes\"}, {\n      \"name\": \"text\",\n      \"type\": \"string\"\n    }],\n    \"type\": \"SecureValueError\"\n  }, {\n    \"id\": \"2054162547\",\n    \"predicate\": \"secureValueErrorFile\",\n    \"params\": [{\"name\": \"type\", \"type\": \"SecureValueType\"}, {\"name\": \"file_hash\", \"type\": \"bytes\"}, {\n      \"name\": \"text\",\n      \"type\": \"string\"\n    }],\n    \"type\": \"SecureValueError\"\n  }, {\n    \"id\": \"1717706985\",\n    \"predicate\": \"secureValueErrorFiles\",\n    \"params\": [{\"name\": \"type\", \"type\": \"SecureValueType\"}, {\n      \"name\": \"file_hash\",\n      \"type\": \"Vector<bytes>\"\n    }, {\"name\": \"text\", \"type\": \"string\"}],\n    \"type\": \"SecureValueError\"\n  }, {\n    \"id\": \"871426631\",\n    \"predicate\": \"secureCredentialsEncrypted\",\n    \"params\": [{\"name\": \"data\", \"type\": \"bytes\"}, {\"name\": \"hash\", \"type\": \"bytes\"}, {\n      \"name\": \"secret\",\n      \"type\": \"bytes\"\n    }],\n    \"type\": \"SecureCredentialsEncrypted\"\n  }, {\n    \"id\": \"-1389486888\",\n    \"predicate\": \"account.authorizationForm\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\n      \"name\": \"required_types\",\n      \"type\": \"Vector<SecureRequiredType>\"\n    }, {\"name\": \"values\", \"type\": \"Vector<SecureValue>\"}, {\n      \"name\": \"errors\",\n      \"type\": \"Vector<SecureValueError>\"\n    }, {\"name\": \"users\", \"type\": \"Vector<User>\"}, {\"name\": \"privacy_policy_url\", \"type\": \"flags.0?string\"}],\n    \"type\": \"account.AuthorizationForm\"\n  }, {\n    \"id\": \"-2128640689\",\n    \"predicate\": \"account.sentEmailCode\",\n    \"params\": [{\"name\": \"email_pattern\", \"type\": \"string\"}, {\"name\": \"length\", \"type\": \"int\"}],\n    \"type\": \"account.SentEmailCode\"\n  }, {\n    \"id\": \"455635795\",\n    \"predicate\": \"messageActionSecureValuesSentMe\",\n    \"params\": [{\"name\": \"values\", \"type\": \"Vector<SecureValue>\"}, {\n      \"name\": \"credentials\",\n      \"type\": \"SecureCredentialsEncrypted\"\n    }],\n    \"type\": \"MessageAction\"\n  }, {\n    \"id\": \"-648257196\",\n    \"predicate\": \"messageActionSecureValuesSent\",\n    \"params\": [{\"name\": \"types\", \"type\": \"Vector<SecureValueType>\"}],\n    \"type\": \"MessageAction\"\n  }, {\n    \"id\": \"1722786150\",\n    \"predicate\": \"help.deepLinkInfoEmpty\",\n    \"params\": [],\n    \"type\": \"help.DeepLinkInfo\"\n  }, {\n    \"id\": \"1783556146\",\n    \"predicate\": \"help.deepLinkInfo\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"update_app\", \"type\": \"flags.0?true\"}, {\n      \"name\": \"message\",\n      \"type\": \"string\"\n    }, {\"name\": \"entities\", \"type\": \"flags.1?Vector<MessageEntity>\"}],\n    \"type\": \"help.DeepLinkInfo\"\n  }, {\n    \"id\": \"289586518\",\n    \"predicate\": \"savedPhoneContact\",\n    \"params\": [{\"name\": \"phone\", \"type\": \"string\"}, {\"name\": \"first_name\", \"type\": \"string\"}, {\n      \"name\": \"last_name\",\n      \"type\": \"string\"\n    }, {\"name\": \"date\", \"type\": \"int\"}],\n    \"type\": \"SavedContact\"\n  }, {\n    \"id\": \"1304052993\",\n    \"predicate\": \"account.takeout\",\n    \"params\": [{\"name\": \"id\", \"type\": \"long\"}],\n    \"type\": \"account.Takeout\"\n  }, {\n    \"id\": \"700340377\",\n    \"predicate\": \"inputTakeoutFileLocation\",\n    \"params\": [],\n    \"type\": \"InputFileLocation\"\n  }, {\n    \"id\": \"-513517117\",\n    \"predicate\": \"updateDialogUnreadMark\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"unread\", \"type\": \"flags.0?true\"}, {\n      \"name\": \"peer\",\n      \"type\": \"DialogPeer\"\n    }],\n    \"type\": \"Update\"\n  }, {\n    \"id\": \"-253500010\",\n    \"predicate\": \"messages.dialogsNotModified\",\n    \"params\": [{\"name\": \"count\", \"type\": \"int\"}],\n    \"type\": \"messages.Dialogs\"\n  }, {\n    \"id\": \"-1625153079\",\n    \"predicate\": \"inputWebFileGeoPointLocation\",\n    \"params\": [{\"name\": \"geo_point\", \"type\": \"InputGeoPoint\"}, {\"name\": \"access_hash\", \"type\": \"long\"}, {\n      \"name\": \"w\",\n      \"type\": \"int\"\n    }, {\"name\": \"h\", \"type\": \"int\"}, {\"name\": \"zoom\", \"type\": \"int\"}, {\"name\": \"scale\", \"type\": \"int\"}],\n    \"type\": \"InputWebFileLocation\"\n  }, {\n    \"id\": \"-1255369827\",\n    \"predicate\": \"contacts.topPeersDisabled\",\n    \"params\": [],\n    \"type\": \"contacts.TopPeers\"\n  }, {\n    \"id\": \"-1685456582\",\n    \"predicate\": \"inputReportReasonCopyright\",\n    \"params\": [],\n    \"type\": \"ReportReason\"\n  }, {\n    \"id\": \"-732254058\",\n    \"predicate\": \"passwordKdfAlgoUnknown\",\n    \"params\": [],\n    \"type\": \"PasswordKdfAlgo\"\n  }, {\n    \"id\": \"4883767\",\n    \"predicate\": \"securePasswordKdfAlgoUnknown\",\n    \"params\": [],\n    \"type\": \"SecurePasswordKdfAlgo\"\n  }, {\n    \"id\": \"-1141711456\",\n    \"predicate\": \"securePasswordKdfAlgoPBKDF2HMACSHA512iter100000\",\n    \"params\": [{\"name\": \"salt\", \"type\": \"bytes\"}],\n    \"type\": \"SecurePasswordKdfAlgo\"\n  }, {\n    \"id\": \"-2042159726\",\n    \"predicate\": \"securePasswordKdfAlgoSHA512\",\n    \"params\": [{\"name\": \"salt\", \"type\": \"bytes\"}],\n    \"type\": \"SecurePasswordKdfAlgo\"\n  }, {\n    \"id\": \"354925740\",\n    \"predicate\": \"secureSecretSettings\",\n    \"params\": [{\"name\": \"secure_algo\", \"type\": \"SecurePasswordKdfAlgo\"}, {\n      \"name\": \"secure_secret\",\n      \"type\": \"bytes\"\n    }, {\"name\": \"secure_secret_id\", \"type\": \"long\"}],\n    \"type\": \"SecureSecretSettings\"\n  }, {\n    \"id\": \"982592842\",\n    \"predicate\": \"passwordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow\",\n    \"params\": [{\"name\": \"salt1\", \"type\": \"bytes\"}, {\"name\": \"salt2\", \"type\": \"bytes\"}, {\n      \"name\": \"g\",\n      \"type\": \"int\"\n    }, {\"name\": \"p\", \"type\": \"bytes\"}],\n    \"type\": \"PasswordKdfAlgo\"\n  }, {\n    \"id\": \"-1736378792\",\n    \"predicate\": \"inputCheckPasswordEmpty\",\n    \"params\": [],\n    \"type\": \"InputCheckPasswordSRP\"\n  }, {\n    \"id\": \"-763367294\",\n    \"predicate\": \"inputCheckPasswordSRP\",\n    \"params\": [{\"name\": \"srp_id\", \"type\": \"long\"}, {\"name\": \"A\", \"type\": \"bytes\"}, {\"name\": \"M1\", \"type\": \"bytes\"}],\n    \"type\": \"InputCheckPasswordSRP\"\n  }, {\n    \"id\": \"-2036501105\",\n    \"predicate\": \"secureValueError\",\n    \"params\": [{\"name\": \"type\", \"type\": \"SecureValueType\"}, {\"name\": \"hash\", \"type\": \"bytes\"}, {\n      \"name\": \"text\",\n      \"type\": \"string\"\n    }],\n    \"type\": \"SecureValueError\"\n  }, {\n    \"id\": \"-1592506512\",\n    \"predicate\": \"secureValueErrorTranslationFile\",\n    \"params\": [{\"name\": \"type\", \"type\": \"SecureValueType\"}, {\"name\": \"file_hash\", \"type\": \"bytes\"}, {\n      \"name\": \"text\",\n      \"type\": \"string\"\n    }],\n    \"type\": \"SecureValueError\"\n  }, {\n    \"id\": \"878931416\",\n    \"predicate\": \"secureValueErrorTranslationFiles\",\n    \"params\": [{\"name\": \"type\", \"type\": \"SecureValueType\"}, {\n      \"name\": \"file_hash\",\n      \"type\": \"Vector<bytes>\"\n    }, {\"name\": \"text\", \"type\": \"string\"}],\n    \"type\": \"SecureValueError\"\n  }, {\n    \"id\": \"-2103600678\",\n    \"predicate\": \"secureRequiredType\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\n      \"name\": \"native_names\",\n      \"type\": \"flags.0?true\"\n    }, {\"name\": \"selfie_required\", \"type\": \"flags.1?true\"}, {\n      \"name\": \"translation_required\",\n      \"type\": \"flags.2?true\"\n    }, {\"name\": \"type\", \"type\": \"SecureValueType\"}],\n    \"type\": \"SecureRequiredType\"\n  }, {\n    \"id\": \"41187252\",\n    \"predicate\": \"secureRequiredTypeOneOf\",\n    \"params\": [{\"name\": \"types\", \"type\": \"Vector<SecureRequiredType>\"}],\n    \"type\": \"SecureRequiredType\"\n  }, {\n    \"id\": \"-1078332329\",\n    \"predicate\": \"help.passportConfigNotModified\",\n    \"params\": [],\n    \"type\": \"help.PassportConfig\"\n  }, {\n    \"id\": \"-1600596305\",\n    \"predicate\": \"help.passportConfig\",\n    \"params\": [{\"name\": \"hash\", \"type\": \"int\"}, {\"name\": \"countries_langs\", \"type\": \"DataJSON\"}],\n    \"type\": \"help.PassportConfig\"\n  }, {\n    \"id\": \"488313413\",\n    \"predicate\": \"inputAppEvent\",\n    \"params\": [{\"name\": \"time\", \"type\": \"double\"}, {\"name\": \"type\", \"type\": \"string\"}, {\n      \"name\": \"peer\",\n      \"type\": \"long\"\n    }, {\"name\": \"data\", \"type\": \"JSONValue\"}],\n    \"type\": \"InputAppEvent\"\n  }, {\n    \"id\": \"-1059185703\",\n    \"predicate\": \"jsonObjectValue\",\n    \"params\": [{\"name\": \"key\", \"type\": \"string\"}, {\"name\": \"value\", \"type\": \"JSONValue\"}],\n    \"type\": \"JSONObjectValue\"\n  }, {\"id\": \"1064139624\", \"predicate\": \"jsonNull\", \"params\": [], \"type\": \"JSONValue\"}, {\n    \"id\": \"-952869270\",\n    \"predicate\": \"jsonBool\",\n    \"params\": [{\"name\": \"value\", \"type\": \"Bool\"}],\n    \"type\": \"JSONValue\"\n  }, {\n    \"id\": \"736157604\",\n    \"predicate\": \"jsonNumber\",\n    \"params\": [{\"name\": \"value\", \"type\": \"double\"}],\n    \"type\": \"JSONValue\"\n  }, {\n    \"id\": \"-1222740358\",\n    \"predicate\": \"jsonString\",\n    \"params\": [{\"name\": \"value\", \"type\": \"string\"}],\n    \"type\": \"JSONValue\"\n  }, {\n    \"id\": \"-146520221\",\n    \"predicate\": \"jsonArray\",\n    \"params\": [{\"name\": \"value\", \"type\": \"Vector<JSONValue>\"}],\n    \"type\": \"JSONValue\"\n  }, {\n    \"id\": \"-1715350371\",\n    \"predicate\": \"jsonObject\",\n    \"params\": [{\"name\": \"value\", \"type\": \"Vector<JSONObjectValue>\"}],\n    \"type\": \"JSONValue\"\n  }, {\n    \"id\": \"1279515160\",\n    \"predicate\": \"updateUserPinnedMessage\",\n    \"params\": [{\"name\": \"user_id\", \"type\": \"int\"}, {\"name\": \"id\", \"type\": \"int\"}],\n    \"type\": \"Update\"\n  }, {\n    \"id\": \"-519195831\",\n    \"predicate\": \"updateChatPinnedMessage\",\n    \"params\": [{\"name\": \"chat_id\", \"type\": \"int\"}, {\"name\": \"id\", \"type\": \"int\"}, {\"name\": \"version\", \"type\": \"int\"}],\n    \"type\": \"Update\"\n  }, {\n    \"id\": \"-1311015810\",\n    \"predicate\": \"inputNotifyBroadcasts\",\n    \"params\": [],\n    \"type\": \"InputNotifyPeer\"\n  }, {\"id\": \"-703403793\", \"predicate\": \"notifyBroadcasts\", \"params\": [], \"type\": \"NotifyPeer\"}, {\n    \"id\": \"-311786236\",\n    \"predicate\": \"textSubscript\",\n    \"params\": [{\"name\": \"text\", \"type\": \"RichText\"}],\n    \"type\": \"RichText\"\n  }, {\n    \"id\": \"-939827711\",\n    \"predicate\": \"textSuperscript\",\n    \"params\": [{\"name\": \"text\", \"type\": \"RichText\"}],\n    \"type\": \"RichText\"\n  }, {\n    \"id\": \"55281185\",\n    \"predicate\": \"textMarked\",\n    \"params\": [{\"name\": \"text\", \"type\": \"RichText\"}],\n    \"type\": \"RichText\"\n  }, {\n    \"id\": \"483104362\",\n    \"predicate\": \"textPhone\",\n    \"params\": [{\"name\": \"text\", \"type\": \"RichText\"}, {\"name\": \"phone\", \"type\": \"string\"}],\n    \"type\": \"RichText\"\n  }, {\n    \"id\": \"136105807\",\n    \"predicate\": \"textImage\",\n    \"params\": [{\"name\": \"document_id\", \"type\": \"long\"}, {\"name\": \"w\", \"type\": \"int\"}, {\"name\": \"h\", \"type\": \"int\"}],\n    \"type\": \"RichText\"\n  }, {\n    \"id\": \"504660880\",\n    \"predicate\": \"pageBlockKicker\",\n    \"params\": [{\"name\": \"text\", \"type\": \"RichText\"}],\n    \"type\": \"PageBlock\"\n  }, {\n    \"id\": \"878078826\",\n    \"predicate\": \"pageTableCell\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"header\", \"type\": \"flags.0?true\"}, {\n      \"name\": \"align_center\",\n      \"type\": \"flags.3?true\"\n    }, {\"name\": \"align_right\", \"type\": \"flags.4?true\"}, {\n      \"name\": \"valign_middle\",\n      \"type\": \"flags.5?true\"\n    }, {\"name\": \"valign_bottom\", \"type\": \"flags.6?true\"}, {\n      \"name\": \"text\",\n      \"type\": \"flags.7?RichText\"\n    }, {\"name\": \"colspan\", \"type\": \"flags.1?int\"}, {\"name\": \"rowspan\", \"type\": \"flags.2?int\"}],\n    \"type\": \"PageTableCell\"\n  }, {\n    \"id\": \"-524237339\",\n    \"predicate\": \"pageTableRow\",\n    \"params\": [{\"name\": \"cells\", \"type\": \"Vector<PageTableCell>\"}],\n    \"type\": \"PageTableRow\"\n  }, {\n    \"id\": \"-1085412734\",\n    \"predicate\": \"pageBlockTable\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"bordered\", \"type\": \"flags.0?true\"}, {\n      \"name\": \"striped\",\n      \"type\": \"flags.1?true\"\n    }, {\"name\": \"title\", \"type\": \"RichText\"}, {\"name\": \"rows\", \"type\": \"Vector<PageTableRow>\"}],\n    \"type\": \"PageBlock\"\n  }, {\n    \"id\": \"1869903447\",\n    \"predicate\": \"pageCaption\",\n    \"params\": [{\"name\": \"text\", \"type\": \"RichText\"}, {\"name\": \"credit\", \"type\": \"RichText\"}],\n    \"type\": \"PageCaption\"\n  }, {\n    \"id\": \"-1188055347\",\n    \"predicate\": \"pageListItemText\",\n    \"params\": [{\"name\": \"text\", \"type\": \"RichText\"}],\n    \"type\": \"PageListItem\"\n  }, {\n    \"id\": \"635466748\",\n    \"predicate\": \"pageListItemBlocks\",\n    \"params\": [{\"name\": \"blocks\", \"type\": \"Vector<PageBlock>\"}],\n    \"type\": \"PageListItem\"\n  }, {\n    \"id\": \"1577484359\",\n    \"predicate\": \"pageListOrderedItemText\",\n    \"params\": [{\"name\": \"num\", \"type\": \"string\"}, {\"name\": \"text\", \"type\": \"RichText\"}],\n    \"type\": \"PageListOrderedItem\"\n  }, {\n    \"id\": \"-1730311882\",\n    \"predicate\": \"pageListOrderedItemBlocks\",\n    \"params\": [{\"name\": \"num\", \"type\": \"string\"}, {\"name\": \"blocks\", \"type\": \"Vector<PageBlock>\"}],\n    \"type\": \"PageListOrderedItem\"\n  }, {\n    \"id\": \"-1702174239\",\n    \"predicate\": \"pageBlockOrderedList\",\n    \"params\": [{\"name\": \"items\", \"type\": \"Vector<PageListOrderedItem>\"}],\n    \"type\": \"PageBlock\"\n  }, {\n    \"id\": \"1987480557\",\n    \"predicate\": \"pageBlockDetails\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"open\", \"type\": \"flags.0?true\"}, {\n      \"name\": \"blocks\",\n      \"type\": \"Vector<PageBlock>\"\n    }, {\"name\": \"title\", \"type\": \"RichText\"}],\n    \"type\": \"PageBlock\"\n  }, {\n    \"id\": \"-1282352120\",\n    \"predicate\": \"pageRelatedArticle\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"url\", \"type\": \"string\"}, {\n      \"name\": \"webpage_id\",\n      \"type\": \"long\"\n    }, {\"name\": \"title\", \"type\": \"flags.0?string\"}, {\n      \"name\": \"description\",\n      \"type\": \"flags.1?string\"\n    }, {\"name\": \"photo_id\", \"type\": \"flags.2?long\"}, {\n      \"name\": \"author\",\n      \"type\": \"flags.3?string\"\n    }, {\"name\": \"published_date\", \"type\": \"flags.4?int\"}],\n    \"type\": \"PageRelatedArticle\"\n  }, {\n    \"id\": \"370236054\",\n    \"predicate\": \"pageBlockRelatedArticles\",\n    \"params\": [{\"name\": \"title\", \"type\": \"RichText\"}, {\"name\": \"articles\", \"type\": \"Vector<PageRelatedArticle>\"}],\n    \"type\": \"PageBlock\"\n  }, {\n    \"id\": \"-1538310410\",\n    \"predicate\": \"pageBlockMap\",\n    \"params\": [{\"name\": \"geo\", \"type\": \"GeoPoint\"}, {\"name\": \"zoom\", \"type\": \"int\"}, {\n      \"name\": \"w\",\n      \"type\": \"int\"\n    }, {\"name\": \"h\", \"type\": \"int\"}, {\"name\": \"caption\", \"type\": \"PageCaption\"}],\n    \"type\": \"PageBlock\"\n  }, {\n    \"id\": \"-1366746132\",\n    \"predicate\": \"page\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"part\", \"type\": \"flags.0?true\"}, {\n      \"name\": \"rtl\",\n      \"type\": \"flags.1?true\"\n    }, {\"name\": \"v2\", \"type\": \"flags.2?true\"}, {\"name\": \"url\", \"type\": \"string\"}, {\n      \"name\": \"blocks\",\n      \"type\": \"Vector<PageBlock>\"\n    }, {\"name\": \"photos\", \"type\": \"Vector<Photo>\"}, {\"name\": \"documents\", \"type\": \"Vector<Document>\"}],\n    \"type\": \"Page\"\n  }, {\n    \"id\": \"-610373422\",\n    \"predicate\": \"inputPrivacyKeyPhoneP2P\",\n    \"params\": [],\n    \"type\": \"InputPrivacyKey\"\n  }, {\"id\": \"961092808\", \"predicate\": \"privacyKeyPhoneP2P\", \"params\": [], \"type\": \"PrivacyKey\"}, {\n    \"id\": \"894777186\",\n    \"predicate\": \"textAnchor\",\n    \"params\": [{\"name\": \"text\", \"type\": \"RichText\"}, {\"name\": \"name\", \"type\": \"string\"}],\n    \"type\": \"RichText\"\n  }, {\n    \"id\": \"-1945767479\",\n    \"predicate\": \"help.supportName\",\n    \"params\": [{\"name\": \"name\", \"type\": \"string\"}],\n    \"type\": \"help.SupportName\"\n  }, {\"id\": \"-206688531\", \"predicate\": \"help.userInfoEmpty\", \"params\": [], \"type\": \"help.UserInfo\"}, {\n    \"id\": \"32192344\",\n    \"predicate\": \"help.userInfo\",\n    \"params\": [{\"name\": \"message\", \"type\": \"string\"}, {\n      \"name\": \"entities\",\n      \"type\": \"Vector<MessageEntity>\"\n    }, {\"name\": \"author\", \"type\": \"string\"}, {\"name\": \"date\", \"type\": \"int\"}],\n    \"type\": \"help.UserInfo\"\n  }, {\n    \"id\": \"-202219658\",\n    \"predicate\": \"messageActionContactSignUp\",\n    \"params\": [],\n    \"type\": \"MessageAction\"\n  }, {\n    \"id\": \"-1398708869\",\n    \"predicate\": \"updateMessagePoll\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"poll_id\", \"type\": \"long\"}, {\n      \"name\": \"poll\",\n      \"type\": \"flags.0?Poll\"\n    }, {\"name\": \"results\", \"type\": \"PollResults\"}],\n    \"type\": \"Update\"\n  }, {\n    \"id\": \"1823064809\",\n    \"predicate\": \"pollAnswer\",\n    \"params\": [{\"name\": \"text\", \"type\": \"string\"}, {\"name\": \"option\", \"type\": \"bytes\"}],\n    \"type\": \"PollAnswer\"\n  }, {\n    \"id\": \"-716006138\",\n    \"predicate\": \"poll\",\n    \"params\": [{\"name\": \"id\", \"type\": \"long\"}, {\"name\": \"flags\", \"type\": \"#\"}, {\n      \"name\": \"closed\",\n      \"type\": \"flags.0?true\"\n    }, {\"name\": \"question\", \"type\": \"string\"}, {\"name\": \"answers\", \"type\": \"Vector<PollAnswer>\"}],\n    \"type\": \"Poll\"\n  }, {\n    \"id\": \"997055186\",\n    \"predicate\": \"pollAnswerVoters\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"chosen\", \"type\": \"flags.0?true\"}, {\n      \"name\": \"option\",\n      \"type\": \"bytes\"\n    }, {\"name\": \"voters\", \"type\": \"int\"}],\n    \"type\": \"PollAnswerVoters\"\n  }, {\n    \"id\": \"1465219162\",\n    \"predicate\": \"pollResults\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"min\", \"type\": \"flags.0?true\"}, {\n      \"name\": \"results\",\n      \"type\": \"flags.1?Vector<PollAnswerVoters>\"\n    }, {\"name\": \"total_voters\", \"type\": \"flags.2?int\"}],\n    \"type\": \"PollResults\"\n  }, {\n    \"id\": \"112424539\",\n    \"predicate\": \"inputMediaPoll\",\n    \"params\": [{\"name\": \"poll\", \"type\": \"Poll\"}],\n    \"type\": \"InputMedia\"\n  }, {\n    \"id\": \"1272375192\",\n    \"predicate\": \"messageMediaPoll\",\n    \"params\": [{\"name\": \"poll\", \"type\": \"Poll\"}, {\"name\": \"results\", \"type\": \"PollResults\"}],\n    \"type\": \"MessageMedia\"\n  }, {\n    \"id\": \"-264117680\",\n    \"predicate\": \"chatOnlines\",\n    \"params\": [{\"name\": \"onlines\", \"type\": \"int\"}],\n    \"type\": \"ChatOnlines\"\n  }, {\n    \"id\": \"1202287072\",\n    \"predicate\": \"statsURL\",\n    \"params\": [{\"name\": \"url\", \"type\": \"string\"}],\n    \"type\": \"StatsURL\"\n  }, {\n    \"id\": \"-525288402\",\n    \"predicate\": \"photoStrippedSize\",\n    \"params\": [{\"name\": \"type\", \"type\": \"string\"}, {\"name\": \"bytes\", \"type\": \"bytes\"}],\n    \"type\": \"PhotoSize\"\n  }, {\n    \"id\": \"1605510357\",\n    \"predicate\": \"chatAdminRights\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\n      \"name\": \"change_info\",\n      \"type\": \"flags.0?true\"\n    }, {\"name\": \"post_messages\", \"type\": \"flags.1?true\"}, {\n      \"name\": \"edit_messages\",\n      \"type\": \"flags.2?true\"\n    }, {\"name\": \"delete_messages\", \"type\": \"flags.3?true\"}, {\n      \"name\": \"ban_users\",\n      \"type\": \"flags.4?true\"\n    }, {\"name\": \"invite_users\", \"type\": \"flags.5?true\"}, {\n      \"name\": \"pin_messages\",\n      \"type\": \"flags.7?true\"\n    }, {\"name\": \"add_admins\", \"type\": \"flags.9?true\"}],\n    \"type\": \"ChatAdminRights\"\n  }, {\n    \"id\": \"-1626209256\",\n    \"predicate\": \"chatBannedRights\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\n      \"name\": \"view_messages\",\n      \"type\": \"flags.0?true\"\n    }, {\"name\": \"send_messages\", \"type\": \"flags.1?true\"}, {\n      \"name\": \"send_media\",\n      \"type\": \"flags.2?true\"\n    }, {\"name\": \"send_stickers\", \"type\": \"flags.3?true\"}, {\n      \"name\": \"send_gifs\",\n      \"type\": \"flags.4?true\"\n    }, {\"name\": \"send_games\", \"type\": \"flags.5?true\"}, {\n      \"name\": \"send_inline\",\n      \"type\": \"flags.6?true\"\n    }, {\"name\": \"embed_links\", \"type\": \"flags.7?true\"}, {\n      \"name\": \"send_polls\",\n      \"type\": \"flags.8?true\"\n    }, {\"name\": \"change_info\", \"type\": \"flags.10?true\"}, {\n      \"name\": \"invite_users\",\n      \"type\": \"flags.15?true\"\n    }, {\"name\": \"pin_messages\", \"type\": \"flags.17?true\"}, {\"name\": \"until_date\", \"type\": \"int\"}],\n    \"type\": \"ChatBannedRights\"\n  }, {\n    \"id\": \"1421875280\",\n    \"predicate\": \"updateChatDefaultBannedRights\",\n    \"params\": [{\"name\": \"peer\", \"type\": \"Peer\"}, {\n      \"name\": \"default_banned_rights\",\n      \"type\": \"ChatBannedRights\"\n    }, {\"name\": \"version\", \"type\": \"int\"}],\n    \"type\": \"Update\"\n  }, {\n    \"id\": \"-433014407\",\n    \"predicate\": \"inputWallPaper\",\n    \"params\": [{\"name\": \"id\", \"type\": \"long\"}, {\"name\": \"access_hash\", \"type\": \"long\"}],\n    \"type\": \"InputWallPaper\"\n  }, {\n    \"id\": \"1913199744\",\n    \"predicate\": \"inputWallPaperSlug\",\n    \"params\": [{\"name\": \"slug\", \"type\": \"string\"}],\n    \"type\": \"InputWallPaper\"\n  }, {\n    \"id\": \"-1150621555\",\n    \"predicate\": \"channelParticipantsContacts\",\n    \"params\": [{\"name\": \"q\", \"type\": \"string\"}],\n    \"type\": \"ChannelParticipantsFilter\"\n  }, {\n    \"id\": \"771095562\",\n    \"predicate\": \"channelAdminLogEventActionDefaultBannedRights\",\n    \"params\": [{\"name\": \"prev_banned_rights\", \"type\": \"ChatBannedRights\"}, {\n      \"name\": \"new_banned_rights\",\n      \"type\": \"ChatBannedRights\"\n    }],\n    \"type\": \"ChannelAdminLogEventAction\"\n  }, {\n    \"id\": \"-1895328189\",\n    \"predicate\": \"channelAdminLogEventActionStopPoll\",\n    \"params\": [{\"name\": \"message\", \"type\": \"Message\"}],\n    \"type\": \"ChannelAdminLogEventAction\"\n  }, {\n    \"id\": \"471437699\",\n    \"predicate\": \"account.wallPapersNotModified\",\n    \"params\": [],\n    \"type\": \"account.WallPapers\"\n  }, {\n    \"id\": \"1881892265\",\n    \"predicate\": \"account.wallPapers\",\n    \"params\": [{\"name\": \"hash\", \"type\": \"int\"}, {\"name\": \"wallpapers\", \"type\": \"Vector<WallPaper>\"}],\n    \"type\": \"account.WallPapers\"\n  }, {\n    \"id\": \"-557924733\",\n    \"predicate\": \"codeSettings\",\n    \"params\": [\n      {\"name\": \"flags\", \"type\": \"#\"},\n      {\"name\": \"allow_flashcall\", \"type\": \"flags.0?true\"},\n      {\"name\": \"current_number\", \"type\": \"flags.1?true\"},\n      {\"name\": \"allow_app_hash\", \"type\": \"flags.4?true\"}\n    ],\n    \"type\": \"CodeSettings\"\n  }, {\n    \"id\": \"-1590738760\",\n    \"predicate\": \"wallPaperSettings\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"blur\", \"type\": \"flags.1?true\"}, {\n      \"name\": \"motion\",\n      \"type\": \"flags.2?true\"\n    }, {\"name\": \"background_color\", \"type\": \"flags.0?int\"}, {\"name\": \"intensity\", \"type\": \"flags.3?int\"}],\n    \"type\": \"WallPaperSettings\"\n  }, {\n    \"id\": \"-767099577\",\n    \"predicate\": \"autoDownloadSettings\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\n      \"name\": \"disabled\",\n      \"type\": \"flags.0?true\"\n    }, {\"name\": \"video_preload_large\", \"type\": \"flags.1?true\"}, {\n      \"name\": \"audio_preload_next\",\n      \"type\": \"flags.2?true\"\n    }, {\"name\": \"phonecalls_less_data\", \"type\": \"flags.3?true\"}, {\n      \"name\": \"photo_size_max\",\n      \"type\": \"int\"\n    }, {\"name\": \"video_size_max\", \"type\": \"int\"}, {\"name\": \"file_size_max\", \"type\": \"int\"}],\n    \"type\": \"AutoDownloadSettings\"\n  }, {\n    \"id\": \"1674235686\",\n    \"predicate\": \"account.autoDownloadSettings\",\n    \"params\": [{\"name\": \"low\", \"type\": \"AutoDownloadSettings\"}, {\n      \"name\": \"medium\",\n      \"type\": \"AutoDownloadSettings\"\n    }, {\"name\": \"high\", \"type\": \"AutoDownloadSettings\"}],\n    \"type\": \"account.AutoDownloadSettings\"\n  }, {\n    \"id\": \"-709641735\",\n    \"predicate\": \"emojiKeyword\",\n    \"params\": [{\"name\": \"keyword\", \"type\": \"string\"}, {\"name\": \"emoticons\", \"type\": \"Vector<string>\"}],\n    \"type\": \"EmojiKeyword\"\n  }, {\n    \"id\": \"594408994\",\n    \"predicate\": \"emojiKeywordDeleted\",\n    \"params\": [{\"name\": \"keyword\", \"type\": \"string\"}, {\"name\": \"emoticons\", \"type\": \"Vector<string>\"}],\n    \"type\": \"EmojiKeyword\"\n  }, {\n    \"id\": \"1556570557\",\n    \"predicate\": \"emojiKeywordsDifference\",\n    \"params\": [{\"name\": \"lang_code\", \"type\": \"string\"}, {\"name\": \"from_version\", \"type\": \"int\"}, {\n      \"name\": \"version\",\n      \"type\": \"int\"\n    }, {\"name\": \"keywords\", \"type\": \"Vector<EmojiKeyword>\"}],\n    \"type\": \"EmojiKeywordsDifference\"\n  }, {\n    \"id\": \"-1519029347\",\n    \"predicate\": \"emojiURL\",\n    \"params\": [{\"name\": \"url\", \"type\": \"string\"}],\n    \"type\": \"EmojiURL\"\n  }, {\n    \"id\": \"-1275374751\",\n    \"predicate\": \"emojiLanguage\",\n    \"params\": [{\"name\": \"lang_code\", \"type\": \"string\"}],\n    \"type\": \"EmojiLanguage\"\n  }, {\n    \"id\": \"-1529000952\",\n    \"predicate\": \"inputPrivacyKeyForwards\",\n    \"params\": [],\n    \"type\": \"InputPrivacyKey\"\n  }, {\"id\": \"1777096355\", \"predicate\": \"privacyKeyForwards\", \"params\": [], \"type\": \"PrivacyKey\"}, {\n    \"id\": \"1461304012\",\n    \"predicate\": \"inputPrivacyKeyProfilePhoto\",\n    \"params\": [],\n    \"type\": \"InputPrivacyKey\"\n  }, {\n    \"id\": \"-1777000467\",\n    \"predicate\": \"privacyKeyProfilePhoto\",\n    \"params\": [],\n    \"type\": \"PrivacyKey\"\n  }, {\n    \"id\": \"-1132476723\",\n    \"predicate\": \"fileLocationToBeDeprecated\",\n    \"params\": [{\"name\": \"volume_id\", \"type\": \"long\"}, {\"name\": \"local_id\", \"type\": \"int\"}],\n    \"type\": \"FileLocation\"\n  }, {\n    \"id\": \"1075322878\",\n    \"predicate\": \"inputPhotoFileLocation\",\n    \"params\": [{\"name\": \"id\", \"type\": \"long\"}, {\"name\": \"access_hash\", \"type\": \"long\"}, {\n      \"name\": \"file_reference\",\n      \"type\": \"bytes\"\n    }, {\"name\": \"thumb_size\", \"type\": \"string\"}],\n    \"type\": \"InputFileLocation\"\n  }, {\n    \"id\": \"-667654413\",\n    \"predicate\": \"inputPhotoLegacyFileLocation\",\n    \"params\": [{\"name\": \"id\", \"type\": \"long\"}, {\"name\": \"access_hash\", \"type\": \"long\"}, {\n      \"name\": \"file_reference\",\n      \"type\": \"bytes\"\n    }, {\"name\": \"volume_id\", \"type\": \"long\"}, {\"name\": \"local_id\", \"type\": \"int\"}, {\"name\": \"secret\", \"type\": \"long\"}],\n    \"type\": \"InputFileLocation\"\n  }, {\n    \"id\": \"668375447\",\n    \"predicate\": \"inputPeerPhotoFileLocation\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"big\", \"type\": \"flags.0?true\"}, {\n      \"name\": \"peer\",\n      \"type\": \"InputPeer\"\n    }, {\"name\": \"volume_id\", \"type\": \"long\"}, {\"name\": \"local_id\", \"type\": \"int\"}],\n    \"type\": \"InputFileLocation\"\n  }, {\n    \"id\": \"230353641\",\n    \"predicate\": \"inputStickerSetThumb\",\n    \"params\": [{\"name\": \"stickerset\", \"type\": \"InputStickerSet\"}, {\n      \"name\": \"volume_id\",\n      \"type\": \"long\"\n    }, {\"name\": \"local_id\", \"type\": \"int\"}],\n    \"type\": \"InputFileLocation\"\n  }, {\n    \"id\": \"-11252123\",\n    \"predicate\": \"folder\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\n      \"name\": \"autofill_new_broadcasts\",\n      \"type\": \"flags.0?true\"\n    }, {\"name\": \"autofill_public_groups\", \"type\": \"flags.1?true\"}, {\n      \"name\": \"autofill_new_correspondents\",\n      \"type\": \"flags.2?true\"\n    }, {\"name\": \"id\", \"type\": \"int\"}, {\"name\": \"title\", \"type\": \"string\"}, {\n      \"name\": \"photo\",\n      \"type\": \"flags.3?ChatPhoto\"\n    }],\n    \"type\": \"Folder\"\n  }, {\n    \"id\": \"1908216652\",\n    \"predicate\": \"dialogFolder\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"pinned\", \"type\": \"flags.2?true\"}, {\n      \"name\": \"folder\",\n      \"type\": \"Folder\"\n    }, {\"name\": \"peer\", \"type\": \"Peer\"}, {\"name\": \"top_message\", \"type\": \"int\"}, {\n      \"name\": \"unread_muted_peers_count\",\n      \"type\": \"int\"\n    }, {\"name\": \"unread_unmuted_peers_count\", \"type\": \"int\"}, {\n      \"name\": \"unread_muted_messages_count\",\n      \"type\": \"int\"\n    }, {\"name\": \"unread_unmuted_messages_count\", \"type\": \"int\"}],\n    \"type\": \"Dialog\"\n  }, {\n    \"id\": \"1684014375\",\n    \"predicate\": \"inputDialogPeerFolder\",\n    \"params\": [{\"name\": \"folder_id\", \"type\": \"int\"}],\n    \"type\": \"InputDialogPeer\"\n  }, {\n    \"id\": \"1363483106\",\n    \"predicate\": \"dialogPeerFolder\",\n    \"params\": [{\"name\": \"folder_id\", \"type\": \"int\"}],\n    \"type\": \"DialogPeer\"\n  }, {\n    \"id\": \"-70073706\",\n    \"predicate\": \"inputFolderPeer\",\n    \"params\": [{\"name\": \"peer\", \"type\": \"InputPeer\"}, {\"name\": \"folder_id\", \"type\": \"int\"}],\n    \"type\": \"InputFolderPeer\"\n  }, {\n    \"id\": \"-373643672\",\n    \"predicate\": \"folderPeer\",\n    \"params\": [{\"name\": \"peer\", \"type\": \"Peer\"}, {\"name\": \"folder_id\", \"type\": \"int\"}],\n    \"type\": \"FolderPeer\"\n  }, {\n    \"id\": \"422972864\",\n    \"predicate\": \"updateFolderPeers\",\n    \"params\": [{\"name\": \"folder_peers\", \"type\": \"Vector<FolderPeer>\"}, {\n      \"name\": \"pts\",\n      \"type\": \"int\"\n    }, {\"name\": \"pts_count\", \"type\": \"int\"}],\n    \"type\": \"Update\"\n  }, {\n    \"id\": \"756118935\",\n    \"predicate\": \"inputUserFromMessage\",\n    \"params\": [{\"name\": \"peer\", \"type\": \"InputPeer\"}, {\"name\": \"msg_id\", \"type\": \"int\"}, {\n      \"name\": \"user_id\",\n      \"type\": \"int\"\n    }],\n    \"type\": \"InputUser\"\n  }, {\n    \"id\": \"707290417\",\n    \"predicate\": \"inputChannelFromMessage\",\n    \"params\": [{\"name\": \"peer\", \"type\": \"InputPeer\"}, {\"name\": \"msg_id\", \"type\": \"int\"}, {\n      \"name\": \"channel_id\",\n      \"type\": \"int\"\n    }],\n    \"type\": \"InputChannel\"\n  }, {\n    \"id\": \"398123750\",\n    \"predicate\": \"inputPeerUserFromMessage\",\n    \"params\": [{\"name\": \"peer\", \"type\": \"InputPeer\"}, {\"name\": \"msg_id\", \"type\": \"int\"}, {\n      \"name\": \"user_id\",\n      \"type\": \"int\"\n    }],\n    \"type\": \"InputPeer\"\n  }, {\n    \"id\": \"-1667893317\",\n    \"predicate\": \"inputPeerChannelFromMessage\",\n    \"params\": [{\"name\": \"peer\", \"type\": \"InputPeer\"}, {\"name\": \"msg_id\", \"type\": \"int\"}, {\n      \"name\": \"channel_id\",\n      \"type\": \"int\"\n    }],\n    \"type\": \"InputPeer\"\n  }, {\n    \"id\": \"55761658\",\n    \"predicate\": \"inputPrivacyKeyPhoneNumber\",\n    \"params\": [],\n    \"type\": \"InputPrivacyKey\"\n  }, {\n    \"id\": \"-778378131\",\n    \"predicate\": \"privacyKeyPhoneNumber\",\n    \"params\": [],\n    \"type\": \"PrivacyKey\"\n  }, {\n    \"id\": \"-1472172887\",\n    \"predicate\": \"topPeerCategoryForwardUsers\",\n    \"params\": [],\n    \"type\": \"TopPeerCategory\"\n  }, {\n    \"id\": \"-68239120\",\n    \"predicate\": \"topPeerCategoryForwardChats\",\n    \"params\": [],\n    \"type\": \"TopPeerCategory\"\n  }, {\n    \"id\": \"-1569748965\",\n    \"predicate\": \"channelAdminLogEventActionChangeLinkedChat\",\n    \"params\": [{\"name\": \"prev_value\", \"type\": \"int\"}, {\"name\": \"new_value\", \"type\": \"int\"}],\n    \"type\": \"ChannelAdminLogEventAction\"\n  }, {\n    \"id\": \"-398136321\",\n    \"predicate\": \"messages.searchCounter\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"inexact\", \"type\": \"flags.1?true\"}, {\n      \"name\": \"filter\",\n      \"type\": \"MessagesFilter\"\n    }, {\"name\": \"count\", \"type\": \"int\"}],\n    \"type\": \"messages.SearchCounter\"\n  }, {\n    \"id\": \"280464681\",\n    \"predicate\": \"keyboardButtonUrlAuth\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"text\", \"type\": \"string\"}, {\n      \"name\": \"fwd_text\",\n      \"type\": \"flags.0?string\"\n    }, {\"name\": \"url\", \"type\": \"string\"}, {\"name\": \"button_id\", \"type\": \"int\"}],\n    \"type\": \"KeyboardButton\"\n  }, {\n    \"id\": \"-802258988\",\n    \"predicate\": \"inputKeyboardButtonUrlAuth\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\n      \"name\": \"request_write_access\",\n      \"type\": \"flags.0?true\"\n    }, {\"name\": \"text\", \"type\": \"string\"}, {\"name\": \"fwd_text\", \"type\": \"flags.1?string\"}, {\n      \"name\": \"url\",\n      \"type\": \"string\"\n    }, {\"name\": \"bot\", \"type\": \"InputUser\"}],\n    \"type\": \"KeyboardButton\"\n  }, {\n    \"id\": \"-1831650802\",\n    \"predicate\": \"urlAuthResultRequest\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"request_write_access\", \"type\": \"flags.0?true\"}, {\n      \"name\": \"bot\",\n      \"type\": \"User\"\n    }, {\"name\": \"domain\", \"type\": \"string\"}],\n    \"type\": \"UrlAuthResult\"\n  }, {\n    \"id\": \"-1886646706\",\n    \"predicate\": \"urlAuthResultAccepted\",\n    \"params\": [{\"name\": \"url\", \"type\": \"string\"}],\n    \"type\": \"UrlAuthResult\"\n  }, {\n    \"id\": \"-1445536993\",\n    \"predicate\": \"urlAuthResultDefault\",\n    \"params\": [],\n    \"type\": \"UrlAuthResult\"\n  }, {\n    \"id\": \"1283572154\",\n    \"predicate\": \"inputPrivacyValueAllowChatParticipants\",\n    \"params\": [{\"name\": \"chats\", \"type\": \"Vector<int>\"}],\n    \"type\": \"InputPrivacyRule\"\n  }, {\n    \"id\": \"-668769361\",\n    \"predicate\": \"inputPrivacyValueDisallowChatParticipants\",\n    \"params\": [{\"name\": \"chats\", \"type\": \"Vector<int>\"}],\n    \"type\": \"InputPrivacyRule\"\n  }, {\n    \"id\": \"415136107\",\n    \"predicate\": \"privacyValueAllowChatParticipants\",\n    \"params\": [{\"name\": \"chats\", \"type\": \"Vector<int>\"}],\n    \"type\": \"PrivacyRule\"\n  }, {\n    \"id\": \"-1397881200\",\n    \"predicate\": \"privacyValueDisallowChatParticipants\",\n    \"params\": [{\"name\": \"chats\", \"type\": \"Vector<int>\"}],\n    \"type\": \"PrivacyRule\"\n  }, {\n    \"id\": \"-1672577397\",\n    \"predicate\": \"messageEntityUnderline\",\n    \"params\": [{\"name\": \"offset\", \"type\": \"int\"}, {\"name\": \"length\", \"type\": \"int\"}],\n    \"type\": \"MessageEntity\"\n  }, {\n    \"id\": \"-1090087980\",\n    \"predicate\": \"messageEntityStrike\",\n    \"params\": [{\"name\": \"offset\", \"type\": \"int\"}, {\"name\": \"length\", \"type\": \"int\"}],\n    \"type\": \"MessageEntity\"\n  }, {\n    \"id\": \"34469328\",\n    \"predicate\": \"messageEntityBlockquote\",\n    \"params\": [{\"name\": \"offset\", \"type\": \"int\"}, {\"name\": \"length\", \"type\": \"int\"}],\n    \"type\": \"MessageEntity\"\n  }, {\n    \"id\": \"1786671974\",\n    \"predicate\": \"updatePeerSettings\",\n    \"params\": [{\"name\": \"peer\", \"type\": \"Peer\"}, {\"name\": \"settings\", \"type\": \"PeerSettings\"}],\n    \"type\": \"Update\"\n  }, {\n    \"id\": \"-1078612597\",\n    \"predicate\": \"channelLocationEmpty\",\n    \"params\": [],\n    \"type\": \"ChannelLocation\"\n  }, {\n    \"id\": \"547062491\",\n    \"predicate\": \"channelLocation\",\n    \"params\": [{\"name\": \"geo_point\", \"type\": \"GeoPoint\"}, {\"name\": \"address\", \"type\": \"string\"}],\n    \"type\": \"ChannelLocation\"\n  }, {\n    \"id\": \"-901375139\",\n    \"predicate\": \"peerLocated\",\n    \"params\": [{\"name\": \"peer\", \"type\": \"Peer\"}, {\"name\": \"expires\", \"type\": \"int\"}, {\n      \"name\": \"distance\",\n      \"type\": \"int\"\n    }],\n    \"type\": \"PeerLocated\"\n  }, {\n    \"id\": \"-1263546448\",\n    \"predicate\": \"updatePeerLocated\",\n    \"params\": [{\"name\": \"peers\", \"type\": \"Vector<PeerLocated>\"}],\n    \"type\": \"Update\"\n  }, {\n    \"id\": \"241923758\",\n    \"predicate\": \"channelAdminLogEventActionChangeLocation\",\n    \"params\": [{\"name\": \"prev_value\", \"type\": \"ChannelLocation\"}, {\"name\": \"new_value\", \"type\": \"ChannelLocation\"}],\n    \"type\": \"ChannelAdminLogEventAction\"\n  }, {\n    \"id\": \"-606798099\",\n    \"predicate\": \"inputReportReasonGeoIrrelevant\",\n    \"params\": [],\n    \"type\": \"ReportReason\"\n  }, {\n    \"id\": \"1401984889\",\n    \"predicate\": \"channelAdminLogEventActionToggleSlowMode\",\n    \"params\": [{\"name\": \"prev_value\", \"type\": \"int\"}, {\"name\": \"new_value\", \"type\": \"int\"}],\n    \"type\": \"ChannelAdminLogEventAction\"\n  }, {\n    \"id\": \"1148485274\",\n    \"predicate\": \"auth.authorizationSignUpRequired\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"terms_of_service\", \"type\": \"flags.0?help.TermsOfService\"}],\n    \"type\": \"auth.Authorization\"\n  }, {\n    \"id\": \"-666824391\",\n    \"predicate\": \"payments.paymentVerificationNeeded\",\n    \"params\": [{\"name\": \"url\", \"type\": \"string\"}],\n    \"type\": \"payments.PaymentResult\"\n  }, {\n    \"id\": \"42402760\",\n    \"predicate\": \"inputStickerSetAnimatedEmoji\",\n    \"params\": [],\n    \"type\": \"InputStickerSet\"\n  }, {\n    \"id\": \"967122427\",\n    \"predicate\": \"updateNewScheduledMessage\",\n    \"params\": [{\"name\": \"message\", \"type\": \"Message\"}],\n    \"type\": \"Update\"\n  }, {\n    \"id\": \"-1870238482\",\n    \"predicate\": \"updateDeleteScheduledMessages\",\n    \"params\": [{\"name\": \"peer\", \"type\": \"Peer\"}, {\"name\": \"messages\", \"type\": \"Vector<int>\"}],\n    \"type\": \"Update\"\n  }, {\n    \"id\": \"-797791052\",\n    \"predicate\": \"restrictionReason\",\n    \"params\": [{\"name\": \"platform\", \"type\": \"string\"}, {\"name\": \"reason\", \"type\": \"string\"}, {\n      \"name\": \"text\",\n      \"type\": \"string\"\n    }],\n    \"type\": \"RestrictionReason\"\n  }, {\n    \"id\": \"1012306921\",\n    \"predicate\": \"inputTheme\",\n    \"params\": [{\"name\": \"id\", \"type\": \"long\"}, {\"name\": \"access_hash\", \"type\": \"long\"}],\n    \"type\": \"InputTheme\"\n  }, {\n    \"id\": \"-175567375\",\n    \"predicate\": \"inputThemeSlug\",\n    \"params\": [{\"name\": \"slug\", \"type\": \"string\"}],\n    \"type\": \"InputTheme\"\n  }, {\"id\": \"1211967244\", \"predicate\": \"themeDocumentNotModified\", \"params\": [], \"type\": \"Theme\"}, {\n    \"id\": \"-136770336\",\n    \"predicate\": \"theme\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"creator\", \"type\": \"flags.0?true\"}, {\n      \"name\": \"default\",\n      \"type\": \"flags.1?true\"\n    }, {\"name\": \"id\", \"type\": \"long\"}, {\"name\": \"access_hash\", \"type\": \"long\"}, {\n      \"name\": \"slug\",\n      \"type\": \"string\"\n    }, {\"name\": \"title\", \"type\": \"string\"}, {\"name\": \"document\", \"type\": \"flags.2?Document\"}, {\n      \"name\": \"installs_count\",\n      \"type\": \"int\"\n    }],\n    \"type\": \"Theme\"\n  }, {\n    \"id\": \"-199313886\",\n    \"predicate\": \"account.themesNotModified\",\n    \"params\": [],\n    \"type\": \"account.Themes\"\n  }, {\n    \"id\": \"2137482273\",\n    \"predicate\": \"account.themes\",\n    \"params\": [{\"name\": \"hash\", \"type\": \"int\"}, {\"name\": \"themes\", \"type\": \"Vector<Theme>\"}],\n    \"type\": \"account.Themes\"\n  }, {\n    \"id\": \"-2112423005\",\n    \"predicate\": \"updateTheme\",\n    \"params\": [{\"name\": \"theme\", \"type\": \"Theme\"}],\n    \"type\": \"Update\"\n  }, {\n    \"id\": \"-786326563\",\n    \"predicate\": \"inputPrivacyKeyAddedByPhone\",\n    \"params\": [],\n    \"type\": \"InputPrivacyKey\"\n  },\n    {\n      \"id\": \"1124062251\",\n      \"predicate\": \"privacyKeyAddedByPhone\",\n      \"params\": [],\n      \"type\": \"PrivacyKey\"\n    }\n  ],\n\n\n  \"methods\": [{\n    \"id\": \"-878758099\",\n    \"method\": \"invokeAfterMsg\",\n    \"params\": [{\"name\": \"msg_id\", \"type\": \"long\"}, {\"name\": \"query\", \"type\": \"!X\"}],\n    \"type\": \"X\"\n  }, {\n    \"id\": \"1036301552\",\n    \"method\": \"invokeAfterMsgs\",\n    \"params\": [{\"name\": \"msg_ids\", \"type\": \"Vector<long>\"}, {\"name\": \"query\", \"type\": \"!X\"}],\n    \"type\": \"X\"\n  },\n\n  //   {\n  //   \"id\": \"-1502141361\",\n  //   \"method\": \"auth.sendCode\",\n  //   \"params\": [\n  //     {\"name\": \"phone_number\", \"type\": \"string\"},\n  //     {\"name\": \"api_id\", \"type\": \"int\"},\n  //     {\"name\": \"api_hash\", \"type\": \"string\"},\n  //     {\"name\": \"settings\", \"type\": \"CodeSettings\"}],\n  //   \"type\": \"auth.SentCode\"\n  // },\n\n    {\n      \"id\":\"-2035355412\",\n      \"method\":\"auth.sendCode\",\n      \"params\":[\n        {\"name\":\"flags\",\"type\":\"#\"},\n        {\"name\":\"allow_flashcall\",\"type\":\"flags.0?true\"},\n        {\"name\":\"phone_number\",\"type\":\"string\"},\n        {\"name\":\"current_number\",\"type\":\"flags.0?Bool\"},\n        {\"name\":\"api_id\",\"type\":\"int\"},\n        {\"name\":\"api_hash\",\"type\":\"string\"}\n      ],\n      \"type\":\"auth.SentCode\"\n    },\n\n\n\n    {\n    \"id\": \"-2131827673\",\n    \"method\": \"auth.signUp\",\n    \"params\": [{\"name\": \"phone_number\", \"type\": \"string\"}, {\n      \"name\": \"phone_code_hash\",\n      \"type\": \"string\"\n    }, {\"name\": \"first_name\", \"type\": \"string\"}, {\"name\": \"last_name\", \"type\": \"string\"}],\n    \"type\": \"auth.Authorization\"\n  }, {\n    \"id\": \"-1126886015\",\n    \"method\": \"auth.signIn\",\n    \"params\": [{\"name\": \"phone_number\", \"type\": \"string\"}, {\n      \"name\": \"phone_code_hash\",\n      \"type\": \"string\"\n    }, {\"name\": \"phone_code\", \"type\": \"string\"}],\n    \"type\": \"auth.Authorization\"\n  }, {\"id\": \"1461180992\", \"method\": \"auth.logOut\", \"params\": [], \"type\": \"Bool\"}, {\n    \"id\": \"-1616179942\",\n    \"method\": \"auth.resetAuthorizations\",\n    \"params\": [],\n    \"type\": \"Bool\"\n  }, {\n    \"id\": \"-440401971\",\n    \"method\": \"auth.exportAuthorization\",\n    \"params\": [{\"name\": \"dc_id\", \"type\": \"int\"}],\n    \"type\": \"auth.ExportedAuthorization\"\n  }, {\n    \"id\": \"-470837741\",\n    \"method\": \"auth.importAuthorization\",\n    \"params\": [{\"name\": \"id\", \"type\": \"int\"}, {\"name\": \"bytes\", \"type\": \"bytes\"}],\n    \"type\": \"auth.Authorization\"\n  }, {\n    \"id\": \"-841733627\",\n    \"method\": \"auth.bindTempAuthKey\",\n    \"params\": [{\"name\": \"perm_auth_key_id\", \"type\": \"long\"}, {\"name\": \"nonce\", \"type\": \"long\"}, {\n      \"name\": \"expires_at\",\n      \"type\": \"int\"\n    }, {\"name\": \"encrypted_message\", \"type\": \"bytes\"}],\n    \"type\": \"Bool\"\n  }, {\n    \"id\": \"1754754159\",\n    \"method\": \"account.registerDevice\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"no_muted\", \"type\": \"flags.0?true\"}, {\n      \"name\": \"token_type\",\n      \"type\": \"int\"\n    }, {\"name\": \"token\", \"type\": \"string\"}, {\"name\": \"app_sandbox\", \"type\": \"Bool\"}, {\n      \"name\": \"secret\",\n      \"type\": \"bytes\"\n    }, {\"name\": \"other_uids\", \"type\": \"Vector<int>\"}],\n    \"type\": \"Bool\"\n  }, {\n    \"id\": \"813089983\",\n    \"method\": \"account.unregisterDevice\",\n    \"params\": [{\"name\": \"token_type\", \"type\": \"int\"}, {\"name\": \"token\", \"type\": \"string\"}, {\n      \"name\": \"other_uids\",\n      \"type\": \"Vector<int>\"\n    }],\n    \"type\": \"Bool\"\n  }, {\n    \"id\": \"-2067899501\",\n    \"method\": \"account.updateNotifySettings\",\n    \"params\": [{\"name\": \"peer\", \"type\": \"InputNotifyPeer\"}, {\"name\": \"settings\", \"type\": \"InputPeerNotifySettings\"}],\n    \"type\": \"Bool\"\n  }, {\n    \"id\": \"313765169\",\n    \"method\": \"account.getNotifySettings\",\n    \"params\": [{\"name\": \"peer\", \"type\": \"InputNotifyPeer\"}],\n    \"type\": \"PeerNotifySettings\"\n  }, {\"id\": \"-612493497\", \"method\": \"account.resetNotifySettings\", \"params\": [], \"type\": \"Bool\"}, {\n    \"id\": \"2018596725\",\n    \"method\": \"account.updateProfile\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"first_name\", \"type\": \"flags.0?string\"}, {\n      \"name\": \"last_name\",\n      \"type\": \"flags.1?string\"\n    }, {\"name\": \"about\", \"type\": \"flags.2?string\"}],\n    \"type\": \"User\"\n  }, {\n    \"id\": \"1713919532\",\n    \"method\": \"account.updateStatus\",\n    \"params\": [{\"name\": \"offline\", \"type\": \"Bool\"}],\n    \"type\": \"Bool\"\n  }, {\n    \"id\": \"-1430579357\",\n    \"method\": \"account.getWallPapers\",\n    \"params\": [{\"name\": \"hash\", \"type\": \"int\"}],\n    \"type\": \"account.WallPapers\"\n  }, {\n    \"id\": \"-1374118561\",\n    \"method\": \"account.reportPeer\",\n    \"params\": [{\"name\": \"peer\", \"type\": \"InputPeer\"}, {\"name\": \"reason\", \"type\": \"ReportReason\"}],\n    \"type\": \"Bool\"\n  }, {\n    \"id\": \"227648840\",\n    \"method\": \"users.getUsers\",\n    \"params\": [{\"name\": \"id\", \"type\": \"Vector<InputUser>\"}],\n    \"type\": \"Vector<User>\"\n  }, {\n    \"id\": \"-902781519\",\n    \"method\": \"users.getFullUser\",\n    \"params\": [{\"name\": \"id\", \"type\": \"InputUser\"}],\n    \"type\": \"UserFull\"\n  }, {\n    \"id\": \"749357634\",\n    \"method\": \"contacts.getContactIDs\",\n    \"params\": [{\"name\": \"hash\", \"type\": \"int\"}],\n    \"type\": \"Vector<int>\"\n  }, {\n    \"id\": \"-995929106\",\n    \"method\": \"contacts.getStatuses\",\n    \"params\": [],\n    \"type\": \"Vector<ContactStatus>\"\n  }, {\n    \"id\": \"-1071414113\",\n    \"method\": \"contacts.getContacts\",\n    \"params\": [{\"name\": \"hash\", \"type\": \"int\"}],\n    \"type\": \"contacts.Contacts\"\n  }, {\n    \"id\": \"746589157\",\n    \"method\": \"contacts.importContacts\",\n    \"params\": [{\"name\": \"contacts\", \"type\": \"Vector<InputContact>\"}],\n    \"type\": \"contacts.ImportedContacts\"\n  }, {\n    \"id\": \"157945344\",\n    \"method\": \"contacts.deleteContacts\",\n    \"params\": [{\"name\": \"id\", \"type\": \"Vector<InputUser>\"}],\n    \"type\": \"Updates\"\n  }, {\n    \"id\": \"269745566\",\n    \"method\": \"contacts.deleteByPhones\",\n    \"params\": [{\"name\": \"phones\", \"type\": \"Vector<string>\"}],\n    \"type\": \"Bool\"\n  }, {\n    \"id\": \"858475004\",\n    \"method\": \"contacts.block\",\n    \"params\": [{\"name\": \"id\", \"type\": \"InputUser\"}],\n    \"type\": \"Bool\"\n  }, {\n    \"id\": \"-448724803\",\n    \"method\": \"contacts.unblock\",\n    \"params\": [{\"name\": \"id\", \"type\": \"InputUser\"}],\n    \"type\": \"Bool\"\n  }, {\n    \"id\": \"-176409329\",\n    \"method\": \"contacts.getBlocked\",\n    \"params\": [{\"name\": \"offset\", \"type\": \"int\"}, {\"name\": \"limit\", \"type\": \"int\"}],\n    \"type\": \"contacts.Blocked\"\n  }, {\n    \"id\": \"1673946374\",\n    \"method\": \"messages.getMessages\",\n    \"params\": [{\"name\": \"id\", \"type\": \"Vector<InputMessage>\"}],\n    \"type\": \"messages.Messages\"\n  }, {\n    \"id\": \"-1594999949\",\n    \"method\": \"messages.getDialogs\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"exclude_pinned\", \"type\": \"flags.0?true\"}, {\n      \"name\": \"folder_id\",\n      \"type\": \"flags.1?int\"\n    }, {\"name\": \"offset_date\", \"type\": \"int\"}, {\"name\": \"offset_id\", \"type\": \"int\"}, {\n      \"name\": \"offset_peer\",\n      \"type\": \"InputPeer\"\n    }, {\"name\": \"limit\", \"type\": \"int\"}, {\"name\": \"hash\", \"type\": \"int\"}],\n    \"type\": \"messages.Dialogs\"\n  }, {\n    \"id\": \"-591691168\",\n    \"method\": \"messages.getHistory\",\n    \"params\": [{\"name\": \"peer\", \"type\": \"InputPeer\"}, {\"name\": \"offset_id\", \"type\": \"int\"}, {\n      \"name\": \"offset_date\",\n      \"type\": \"int\"\n    }, {\"name\": \"add_offset\", \"type\": \"int\"}, {\"name\": \"limit\", \"type\": \"int\"}, {\n      \"name\": \"max_id\",\n      \"type\": \"int\"\n    }, {\"name\": \"min_id\", \"type\": \"int\"}, {\"name\": \"hash\", \"type\": \"int\"}],\n    \"type\": \"messages.Messages\"\n  }, {\n    \"id\": \"-2045448344\",\n    \"method\": \"messages.search\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"peer\", \"type\": \"InputPeer\"}, {\n      \"name\": \"q\",\n      \"type\": \"string\"\n    }, {\"name\": \"from_id\", \"type\": \"flags.0?InputUser\"}, {\n      \"name\": \"filter\",\n      \"type\": \"MessagesFilter\"\n    }, {\"name\": \"min_date\", \"type\": \"int\"}, {\"name\": \"max_date\", \"type\": \"int\"}, {\n      \"name\": \"offset_id\",\n      \"type\": \"int\"\n    }, {\"name\": \"add_offset\", \"type\": \"int\"}, {\"name\": \"limit\", \"type\": \"int\"}, {\n      \"name\": \"max_id\",\n      \"type\": \"int\"\n    }, {\"name\": \"min_id\", \"type\": \"int\"}, {\"name\": \"hash\", \"type\": \"int\"}],\n    \"type\": \"messages.Messages\"\n  }, {\n    \"id\": \"238054714\",\n    \"method\": \"messages.readHistory\",\n    \"params\": [{\"name\": \"peer\", \"type\": \"InputPeer\"}, {\"name\": \"max_id\", \"type\": \"int\"}],\n    \"type\": \"messages.AffectedMessages\"\n  }, {\n    \"id\": \"469850889\",\n    \"method\": \"messages.deleteHistory\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"just_clear\", \"type\": \"flags.0?true\"}, {\n      \"name\": \"revoke\",\n      \"type\": \"flags.1?true\"\n    }, {\"name\": \"peer\", \"type\": \"InputPeer\"}, {\"name\": \"max_id\", \"type\": \"int\"}],\n    \"type\": \"messages.AffectedHistory\"\n  }, {\n    \"id\": \"-443640366\",\n    \"method\": \"messages.deleteMessages\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"revoke\", \"type\": \"flags.0?true\"}, {\n      \"name\": \"id\",\n      \"type\": \"Vector<int>\"\n    }],\n    \"type\": \"messages.AffectedMessages\"\n  }, {\n    \"id\": \"94983360\",\n    \"method\": \"messages.receivedMessages\",\n    \"params\": [{\"name\": \"max_id\", \"type\": \"int\"}],\n    \"type\": \"Vector<ReceivedNotifyMessage>\"\n  }, {\n    \"id\": \"-1551737264\",\n    \"method\": \"messages.setTyping\",\n    \"params\": [{\"name\": \"peer\", \"type\": \"InputPeer\"}, {\"name\": \"action\", \"type\": \"SendMessageAction\"}],\n    \"type\": \"Bool\"\n  }, {\n    \"id\": \"1376532592\",\n    \"method\": \"messages.sendMessage\",\n    \"params\": [\n      {\"name\": \"flags\", \"type\": \"#\"},\n      {\"name\": \"no_webpage\", \"type\": \"flags.1?true\"},\n      {\"name\": \"silent\", \"type\": \"flags.5?true\"},\n      {\"name\": \"background\", \"type\": \"flags.6?true\"},\n      {\"name\": \"clear_draft\", \"type\": \"flags.7?true\"},\n      {\"name\": \"peer\", \"type\": \"InputPeer\"},\n      {\"name\": \"reply_to_msg_id\", \"type\": \"flags.0?int\"},\n      {\"name\": \"message\", \"type\": \"string\"},\n      {\"name\": \"random_id\", \"type\": \"long\"},\n      {\"name\": \"reply_markup\", \"type\": \"flags.2?ReplyMarkup\"},\n      {\"name\": \"entities\", \"type\": \"flags.3?Vector<MessageEntity>\"},\n      {\"name\": \"schedule_date\", \"type\": \"flags.10?int\"}\n    ],\n    \"type\": \"Updates\"\n  }, {\n    \"id\": \"881978281\",\n    \"method\": \"messages.sendMedia\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"silent\", \"type\": \"flags.5?true\"}, {\n      \"name\": \"background\",\n      \"type\": \"flags.6?true\"\n    }, {\"name\": \"clear_draft\", \"type\": \"flags.7?true\"}, {\n      \"name\": \"peer\",\n      \"type\": \"InputPeer\"\n    }, {\"name\": \"reply_to_msg_id\", \"type\": \"flags.0?int\"}, {\"name\": \"media\", \"type\": \"InputMedia\"}, {\n      \"name\": \"message\",\n      \"type\": \"string\"\n    }, {\"name\": \"random_id\", \"type\": \"long\"}, {\n      \"name\": \"reply_markup\",\n      \"type\": \"flags.2?ReplyMarkup\"\n    }, {\"name\": \"entities\", \"type\": \"flags.3?Vector<MessageEntity>\"}, {\n      \"name\": \"schedule_date\",\n      \"type\": \"flags.10?int\"\n    }],\n    \"type\": \"Updates\"\n  }, {\n    // \"id\": \"-637606386\",\n    \"method\": \"messages.forwardMessages\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"silent\", \"type\": \"flags.5?true\"}, {\n      \"name\": \"background\",\n      \"type\": \"flags.6?true\"\n    }, {\"name\": \"with_my_score\", \"type\": \"flags.8?true\"}, {\n      \"name\": \"grouped\",\n      \"type\": \"flags.9?true\"\n    }, {\"name\": \"from_peer\", \"type\": \"InputPeer\"}, {\"name\": \"id\", \"type\": \"Vector<int>\"}, {\n      \"name\": \"random_id\",\n      \"type\": \"Vector<long>\"\n    }, {\"name\": \"to_peer\", \"type\": \"InputPeer\"}, {\"name\": \"schedule_date\", \"type\": \"flags.10?int\"}],\n    \"type\": \"Updates\"\n  }, {\n    \"id\": \"-820669733\",\n    \"method\": \"messages.reportSpam\",\n    \"params\": [{\"name\": \"peer\", \"type\": \"InputPeer\"}],\n    \"type\": \"Bool\"\n  }, {\n    \"id\": \"913498268\",\n    \"method\": \"messages.getPeerSettings\",\n    \"params\": [{\"name\": \"peer\", \"type\": \"InputPeer\"}],\n    \"type\": \"PeerSettings\"\n  }, {\n    \"id\": \"-1115507112\",\n    \"method\": \"messages.report\",\n    \"params\": [{\"name\": \"peer\", \"type\": \"InputPeer\"}, {\"name\": \"id\", \"type\": \"Vector<int>\"}, {\n      \"name\": \"reason\",\n      \"type\": \"ReportReason\"\n    }],\n    \"type\": \"Bool\"\n  }, {\n    \"id\": \"1013621127\",\n    \"method\": \"messages.getChats\",\n    \"params\": [{\"name\": \"id\", \"type\": \"Vector<int>\"}],\n    \"type\": \"messages.Chats\"\n  }, {\n    \"id\": \"998448230\",\n    \"method\": \"messages.getFullChat\",\n    \"params\": [{\"name\": \"chat_id\", \"type\": \"int\"}],\n    \"type\": \"messages.ChatFull\"\n  }, {\n    \"id\": \"-599447467\",\n    \"method\": \"messages.editChatTitle\",\n    \"params\": [{\"name\": \"chat_id\", \"type\": \"int\"}, {\"name\": \"title\", \"type\": \"string\"}],\n    \"type\": \"Updates\"\n  }, {\n    \"id\": \"-900957736\",\n    \"method\": \"messages.editChatPhoto\",\n    \"params\": [{\"name\": \"chat_id\", \"type\": \"int\"}, {\"name\": \"photo\", \"type\": \"InputChatPhoto\"}],\n    \"type\": \"Updates\"\n  }, {\n    \"id\": \"-106911223\",\n    \"method\": \"messages.addChatUser\",\n    \"params\": [{\"name\": \"chat_id\", \"type\": \"int\"}, {\"name\": \"user_id\", \"type\": \"InputUser\"}, {\n      \"name\": \"fwd_limit\",\n      \"type\": \"int\"\n    }],\n    \"type\": \"Updates\"\n  }, {\n    \"id\": \"-530505962\",\n    \"method\": \"messages.deleteChatUser\",\n    \"params\": [{\"name\": \"chat_id\", \"type\": \"int\"}, {\"name\": \"user_id\", \"type\": \"InputUser\"}],\n    \"type\": \"Updates\"\n  }, {\n    \"id\": \"164303470\",\n    \"method\": \"messages.createChat\",\n    \"params\": [{\"name\": \"users\", \"type\": \"Vector<InputUser>\"}, {\"name\": \"title\", \"type\": \"string\"}],\n    \"type\": \"Updates\"\n  }, {\"id\": \"-304838614\", \"method\": \"updates.getState\", \"params\": [], \"type\": \"updates.State\"}, {\n    \"id\": \"630429265\",\n    \"method\": \"updates.getDifference\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"pts\", \"type\": \"int\"}, {\n      \"name\": \"pts_total_limit\",\n      \"type\": \"flags.0?int\"\n    }, {\"name\": \"date\", \"type\": \"int\"}, {\"name\": \"qts\", \"type\": \"int\"}],\n    \"type\": \"updates.Difference\"\n  }, {\n    \"id\": \"-256159406\",\n    \"method\": \"photos.updateProfilePhoto\",\n    \"params\": [{\"name\": \"id\", \"type\": \"InputPhoto\"}],\n    \"type\": \"UserProfilePhoto\"\n  }, {\n    \"id\": \"1328726168\",\n    \"method\": \"photos.uploadProfilePhoto\",\n    \"params\": [{\"name\": \"file\", \"type\": \"InputFile\"}],\n    \"type\": \"photos.Photo\"\n  }, {\n    \"id\": \"-2016444625\",\n    \"method\": \"photos.deletePhotos\",\n    \"params\": [{\"name\": \"id\", \"type\": \"Vector<InputPhoto>\"}],\n    \"type\": \"Vector<long>\"\n  }, {\n    \"id\": \"-1291540959\",\n    \"method\": \"upload.saveFilePart\",\n    \"params\": [{\"name\": \"file_id\", \"type\": \"long\"}, {\"name\": \"file_part\", \"type\": \"int\"}, {\n      \"name\": \"bytes\",\n      \"type\": \"bytes\"\n    }],\n    \"type\": \"Bool\"\n  }, {\n    \"id\": \"-1319462148\",\n    \"method\": \"upload.getFile\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"precise\", \"type\": \"flags.0?true\"}, {\n      \"name\": \"location\",\n      \"type\": \"InputFileLocation\"\n    }, {\"name\": \"offset\", \"type\": \"int\"}, {\"name\": \"limit\", \"type\": \"int\"}],\n    \"type\": \"upload.File\"\n  }, {\"id\": \"-990308245\", \"method\": \"help.getConfig\", \"params\": [], \"type\": \"Config\"}, {\n    \"id\": \"531836966\",\n    \"method\": \"help.getNearestDc\",\n    \"params\": [],\n    \"type\": \"NearestDc\"\n  }, {\n    \"id\": \"1378703997\",\n    \"method\": \"help.getAppUpdate\",\n    \"params\": [{\"name\": \"source\", \"type\": \"string\"}],\n    \"type\": \"help.AppUpdate\"\n  }, {\n    \"id\": \"1295590211\",\n    \"method\": \"help.getInviteText\",\n    \"params\": [],\n    \"type\": \"help.InviteText\"\n  }, {\n    \"id\": \"-1848823128\",\n    \"method\": \"photos.getUserPhotos\",\n    \"params\": [{\"name\": \"user_id\", \"type\": \"InputUser\"}, {\"name\": \"offset\", \"type\": \"int\"}, {\n      \"name\": \"max_id\",\n      \"type\": \"long\"\n    }, {\"name\": \"limit\", \"type\": \"int\"}],\n    \"type\": \"photos.Photos\"\n  }, {\n    \"id\": \"651135312\",\n    \"method\": \"messages.getDhConfig\",\n    \"params\": [{\"name\": \"version\", \"type\": \"int\"}, {\"name\": \"random_length\", \"type\": \"int\"}],\n    \"type\": \"messages.DhConfig\"\n  }, {\n    \"id\": \"-162681021\",\n    \"method\": \"messages.requestEncryption\",\n    \"params\": [{\"name\": \"user_id\", \"type\": \"InputUser\"}, {\"name\": \"random_id\", \"type\": \"int\"}, {\n      \"name\": \"g_a\",\n      \"type\": \"bytes\"\n    }],\n    \"type\": \"EncryptedChat\"\n  }, {\n    \"id\": \"1035731989\",\n    \"method\": \"messages.acceptEncryption\",\n    \"params\": [{\"name\": \"peer\", \"type\": \"InputEncryptedChat\"}, {\n      \"name\": \"g_b\",\n      \"type\": \"bytes\"\n    }, {\"name\": \"key_fingerprint\", \"type\": \"long\"}],\n    \"type\": \"EncryptedChat\"\n  }, {\n    \"id\": \"-304536635\",\n    \"method\": \"messages.discardEncryption\",\n    \"params\": [{\"name\": \"chat_id\", \"type\": \"int\"}],\n    \"type\": \"Bool\"\n  }, {\n    \"id\": \"2031374829\",\n    \"method\": \"messages.setEncryptedTyping\",\n    \"params\": [{\"name\": \"peer\", \"type\": \"InputEncryptedChat\"}, {\"name\": \"typing\", \"type\": \"Bool\"}],\n    \"type\": \"Bool\"\n  }, {\n    \"id\": \"2135648522\",\n    \"method\": \"messages.readEncryptedHistory\",\n    \"params\": [{\"name\": \"peer\", \"type\": \"InputEncryptedChat\"}, {\"name\": \"max_date\", \"type\": \"int\"}],\n    \"type\": \"Bool\"\n  }, {\n    \"id\": \"-1451792525\",\n    \"method\": \"messages.sendEncrypted\",\n    \"params\": [{\"name\": \"peer\", \"type\": \"InputEncryptedChat\"}, {\"name\": \"random_id\", \"type\": \"long\"}, {\n      \"name\": \"data\",\n      \"type\": \"bytes\"\n    }],\n    \"type\": \"messages.SentEncryptedMessage\"\n  }, {\n    \"id\": \"-1701831834\",\n    \"method\": \"messages.sendEncryptedFile\",\n    \"params\": [{\"name\": \"peer\", \"type\": \"InputEncryptedChat\"}, {\"name\": \"random_id\", \"type\": \"long\"}, {\n      \"name\": \"data\",\n      \"type\": \"bytes\"\n    }, {\"name\": \"file\", \"type\": \"InputEncryptedFile\"}],\n    \"type\": \"messages.SentEncryptedMessage\"\n  }, {\n    \"id\": \"852769188\",\n    \"method\": \"messages.sendEncryptedService\",\n    \"params\": [{\"name\": \"peer\", \"type\": \"InputEncryptedChat\"}, {\"name\": \"random_id\", \"type\": \"long\"}, {\n      \"name\": \"data\",\n      \"type\": \"bytes\"\n    }],\n    \"type\": \"messages.SentEncryptedMessage\"\n  }, {\n    \"id\": \"1436924774\",\n    \"method\": \"messages.receivedQueue\",\n    \"params\": [{\"name\": \"max_qts\", \"type\": \"int\"}],\n    \"type\": \"Vector<long>\"\n  }, {\n    \"id\": \"1259113487\",\n    \"method\": \"messages.reportEncryptedSpam\",\n    \"params\": [{\"name\": \"peer\", \"type\": \"InputEncryptedChat\"}],\n    \"type\": \"Bool\"\n  }, {\n    \"id\": \"-562337987\",\n    \"method\": \"upload.saveBigFilePart\",\n    \"params\": [{\"name\": \"file_id\", \"type\": \"long\"}, {\"name\": \"file_part\", \"type\": \"int\"}, {\n      \"name\": \"file_total_parts\",\n      \"type\": \"int\"\n    }, {\"name\": \"bytes\", \"type\": \"bytes\"}],\n    \"type\": \"Bool\"\n  }, {\n    \"id\": \"2018609336\",\n    \"method\": \"initConnection\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"api_id\", \"type\": \"int\"}, {\n      \"name\": \"device_model\",\n      \"type\": \"string\"\n    }, {\"name\": \"system_version\", \"type\": \"string\"}, {\n      \"name\": \"app_version\",\n      \"type\": \"string\"\n    }, {\"name\": \"system_lang_code\", \"type\": \"string\"}, {\"name\": \"lang_pack\", \"type\": \"string\"}, {\n      \"name\": \"lang_code\",\n      \"type\": \"string\"\n    }, {\"name\": \"proxy\", \"type\": \"flags.0?InputClientProxy\"}, {\"name\": \"query\", \"type\": \"!X\"}],\n    \"type\": \"X\"\n  }, {\"id\": \"-1663104819\", \"method\": \"help.getSupport\", \"params\": [], \"type\": \"help.Support\"}, {\n    \"id\": \"916930423\",\n    \"method\": \"messages.readMessageContents\",\n    \"params\": [{\"name\": \"id\", \"type\": \"Vector<int>\"}],\n    \"type\": \"messages.AffectedMessages\"\n  }, {\n    \"id\": \"655677548\",\n    \"method\": \"account.checkUsername\",\n    \"params\": [{\"name\": \"username\", \"type\": \"string\"}],\n    \"type\": \"Bool\"\n  }, {\n    \"id\": \"1040964988\",\n    \"method\": \"account.updateUsername\",\n    \"params\": [{\"name\": \"username\", \"type\": \"string\"}],\n    \"type\": \"User\"\n  }, {\n    \"id\": \"301470424\",\n    \"method\": \"contacts.search\",\n    \"params\": [{\"name\": \"q\", \"type\": \"string\"}, {\"name\": \"limit\", \"type\": \"int\"}],\n    \"type\": \"contacts.Found\"\n  }, {\n    \"id\": \"-623130288\",\n    \"method\": \"account.getPrivacy\",\n    \"params\": [{\"name\": \"key\", \"type\": \"InputPrivacyKey\"}],\n    \"type\": \"account.PrivacyRules\"\n  }, {\n    \"id\": \"-906486552\",\n    \"method\": \"account.setPrivacy\",\n    \"params\": [{\"name\": \"key\", \"type\": \"InputPrivacyKey\"}, {\"name\": \"rules\", \"type\": \"Vector<InputPrivacyRule>\"}],\n    \"type\": \"account.PrivacyRules\"\n  }, {\n    \"id\": \"1099779595\",\n    \"method\": \"account.deleteAccount\",\n    \"params\": [{\"name\": \"reason\", \"type\": \"string\"}],\n    \"type\": \"Bool\"\n  }, {\"id\": \"150761757\", \"method\": \"account.getAccountTTL\", \"params\": [], \"type\": \"AccountDaysTTL\"}, {\n    \"id\": \"608323678\",\n    \"method\": \"account.setAccountTTL\",\n    \"params\": [{\"name\": \"ttl\", \"type\": \"AccountDaysTTL\"}],\n    \"type\": \"Bool\"\n  }, {\n    \"id\": \"-627372787\",\n    \"method\": \"invokeWithLayer\",\n    \"params\": [{\"name\": \"layer\", \"type\": \"int\"}, {\"name\": \"query\", \"type\": \"!X\"}],\n    \"type\": \"X\"\n  }, {\n    \"id\": \"-113456221\",\n    \"method\": \"contacts.resolveUsername\",\n    \"params\": [{\"name\": \"username\", \"type\": \"string\"}],\n    \"type\": \"contacts.ResolvedPeer\"\n  }, {\n    \"id\": \"-2108208411\",\n    \"method\": \"account.sendChangePhoneCode\",\n    \"params\": [{\"name\": \"phone_number\", \"type\": \"string\"}, {\"name\": \"settings\", \"type\": \"CodeSettings\"}],\n    \"type\": \"auth.SentCode\"\n  }, {\n    \"id\": \"1891839707\",\n    \"method\": \"account.changePhone\",\n    \"params\": [{\"name\": \"phone_number\", \"type\": \"string\"}, {\n      \"name\": \"phone_code_hash\",\n      \"type\": \"string\"\n    }, {\"name\": \"phone_code\", \"type\": \"string\"}],\n    \"type\": \"User\"\n  }, {\n    \"id\": \"71126828\",\n    \"method\": \"messages.getStickers\",\n    \"params\": [{\"name\": \"emoticon\", \"type\": \"string\"}, {\"name\": \"hash\", \"type\": \"int\"}],\n    \"type\": \"messages.Stickers\"\n  }, {\n    \"id\": \"479598769\",\n    \"method\": \"messages.getAllStickers\",\n    \"params\": [{\"name\": \"hash\", \"type\": \"int\"}],\n    \"type\": \"messages.AllStickers\"\n  }, {\n    \"id\": \"954152242\",\n    \"method\": \"account.updateDeviceLocked\",\n    \"params\": [{\"name\": \"period\", \"type\": \"int\"}],\n    \"type\": \"Bool\"\n  }, {\n    \"id\": \"1738800940\",\n    \"method\": \"auth.importBotAuthorization\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"int\"}, {\"name\": \"api_id\", \"type\": \"int\"}, {\n      \"name\": \"api_hash\",\n      \"type\": \"string\"\n    }, {\"name\": \"bot_auth_token\", \"type\": \"string\"}],\n    \"type\": \"auth.Authorization\"\n  }, {\n    \"id\": \"-1956073268\",\n    \"method\": \"messages.getWebPagePreview\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"message\", \"type\": \"string\"}, {\n      \"name\": \"entities\",\n      \"type\": \"flags.3?Vector<MessageEntity>\"\n    }],\n    \"type\": \"MessageMedia\"\n  }, {\n    \"id\": \"-484392616\",\n    \"method\": \"account.getAuthorizations\",\n    \"params\": [],\n    \"type\": \"account.Authorizations\"\n  }, {\n    \"id\": \"-545786948\",\n    \"method\": \"account.resetAuthorization\",\n    \"params\": [{\"name\": \"hash\", \"type\": \"long\"}],\n    \"type\": \"Bool\"\n  }, {\n    \"id\": \"1418342645\",\n    \"method\": \"account.getPassword\",\n    \"params\": [],\n    \"type\": \"account.Password\"\n  }, {\n    \"id\": \"-1663767815\",\n    \"method\": \"account.getPasswordSettings\",\n    \"params\": [{\"name\": \"password\", \"type\": \"InputCheckPasswordSRP\"}],\n    \"type\": \"account.PasswordSettings\"\n  }, {\n    \"id\": \"-1516564433\",\n    \"method\": \"account.updatePasswordSettings\",\n    \"params\": [{\"name\": \"password\", \"type\": \"InputCheckPasswordSRP\"}, {\n      \"name\": \"new_settings\",\n      \"type\": \"account.PasswordInputSettings\"\n    }],\n    \"type\": \"Bool\"\n  }, {\n    \"id\": \"-779399914\",\n    \"method\": \"auth.checkPassword\",\n    \"params\": [{\"name\": \"password\", \"type\": \"InputCheckPasswordSRP\"}],\n    \"type\": \"auth.Authorization\"\n  }, {\n    \"id\": \"-661144474\",\n    \"method\": \"auth.requestPasswordRecovery\",\n    \"params\": [],\n    \"type\": \"auth.PasswordRecovery\"\n  }, {\n    \"id\": \"1319464594\",\n    \"method\": \"auth.recoverPassword\",\n    \"params\": [{\"name\": \"code\", \"type\": \"string\"}],\n    \"type\": \"auth.Authorization\"\n  }, {\n    \"id\": \"-1080796745\",\n    \"method\": \"invokeWithoutUpdates\",\n    \"params\": [{\"name\": \"query\", \"type\": \"!X\"}],\n    \"type\": \"X\"\n  }, {\n    \"id\": \"234312524\",\n    \"method\": \"messages.exportChatInvite\",\n    \"params\": [{\"name\": \"peer\", \"type\": \"InputPeer\"}],\n    \"type\": \"ExportedChatInvite\"\n  }, {\n    \"id\": \"1051570619\",\n    \"method\": \"messages.checkChatInvite\",\n    \"params\": [{\"name\": \"hash\", \"type\": \"string\"}],\n    \"type\": \"ChatInvite\"\n  }, {\n    \"id\": \"1817183516\",\n    \"method\": \"messages.importChatInvite\",\n    \"params\": [{\"name\": \"hash\", \"type\": \"string\"}],\n    \"type\": \"Updates\"\n  }, {\n    \"id\": \"639215886\",\n    \"method\": \"messages.getStickerSet\",\n    \"params\": [{\"name\": \"stickerset\", \"type\": \"InputStickerSet\"}],\n    \"type\": \"messages.StickerSet\"\n  }, {\n    \"id\": \"-946871200\",\n    \"method\": \"messages.installStickerSet\",\n    \"params\": [{\"name\": \"stickerset\", \"type\": \"InputStickerSet\"}, {\"name\": \"archived\", \"type\": \"Bool\"}],\n    \"type\": \"messages.StickerSetInstallResult\"\n  }, {\n    \"id\": \"-110209570\",\n    \"method\": \"messages.uninstallStickerSet\",\n    \"params\": [{\"name\": \"stickerset\", \"type\": \"InputStickerSet\"}],\n    \"type\": \"Bool\"\n  }, {\n    \"id\": \"-421563528\",\n    \"method\": \"messages.startBot\",\n    \"params\": [{\"name\": \"bot\", \"type\": \"InputUser\"}, {\"name\": \"peer\", \"type\": \"InputPeer\"}, {\n      \"name\": \"random_id\",\n      \"type\": \"long\"\n    }, {\"name\": \"start_param\", \"type\": \"string\"}],\n    \"type\": \"Updates\"\n  }, {\n    \"id\": \"-1877938321\",\n    \"method\": \"help.getAppChangelog\",\n    \"params\": [{\"name\": \"prev_app_version\", \"type\": \"string\"}],\n    \"type\": \"Updates\"\n  }, {\n    \"id\": \"-993483427\",\n    \"method\": \"messages.getMessagesViews\",\n    \"params\": [{\"name\": \"peer\", \"type\": \"InputPeer\"}, {\"name\": \"id\", \"type\": \"Vector<int>\"}, {\n      \"name\": \"increment\",\n      \"type\": \"Bool\"\n    }],\n    \"type\": \"Vector<int>\"\n  }, {\n    \"id\": \"-871347913\",\n    \"method\": \"channels.readHistory\",\n    \"params\": [{\"name\": \"channel\", \"type\": \"InputChannel\"}, {\"name\": \"max_id\", \"type\": \"int\"}],\n    \"type\": \"Bool\"\n  }, {\n    \"id\": \"-2067661490\",\n    \"method\": \"channels.deleteMessages\",\n    \"params\": [{\"name\": \"channel\", \"type\": \"InputChannel\"}, {\"name\": \"id\", \"type\": \"Vector<int>\"}],\n    \"type\": \"messages.AffectedMessages\"\n  }, {\n    \"id\": \"-787622117\",\n    \"method\": \"channels.deleteUserHistory\",\n    \"params\": [{\"name\": \"channel\", \"type\": \"InputChannel\"}, {\"name\": \"user_id\", \"type\": \"InputUser\"}],\n    \"type\": \"messages.AffectedHistory\"\n  }, {\n    \"id\": \"-32999408\",\n    \"method\": \"channels.reportSpam\",\n    \"params\": [{\"name\": \"channel\", \"type\": \"InputChannel\"}, {\"name\": \"user_id\", \"type\": \"InputUser\"}, {\n      \"name\": \"id\",\n      \"type\": \"Vector<int>\"\n    }],\n    \"type\": \"Bool\"\n  }, {\n    \"id\": \"-1383294429\",\n    \"method\": \"channels.getMessages\",\n    \"params\": [{\"name\": \"channel\", \"type\": \"InputChannel\"}, {\"name\": \"id\", \"type\": \"Vector<InputMessage>\"}],\n    \"type\": \"messages.Messages\"\n  }, {\n    \"id\": \"306054633\",\n    \"method\": \"channels.getParticipants\",\n    \"params\": [{\"name\": \"channel\", \"type\": \"InputChannel\"}, {\n      \"name\": \"filter\",\n      \"type\": \"ChannelParticipantsFilter\"\n    }, {\"name\": \"offset\", \"type\": \"int\"}, {\"name\": \"limit\", \"type\": \"int\"}, {\"name\": \"hash\", \"type\": \"int\"}],\n    \"type\": \"channels.ChannelParticipants\"\n  }, {\n    \"id\": \"1416484774\",\n    \"method\": \"channels.getParticipant\",\n    \"params\": [{\"name\": \"channel\", \"type\": \"InputChannel\"}, {\"name\": \"user_id\", \"type\": \"InputUser\"}],\n    \"type\": \"channels.ChannelParticipant\"\n  }, {\n    \"id\": \"176122811\",\n    \"method\": \"channels.getChannels\",\n    \"params\": [{\"name\": \"id\", \"type\": \"Vector<InputChannel>\"}],\n    \"type\": \"messages.Chats\"\n  }, {\n    \"id\": \"141781513\",\n    \"method\": \"channels.getFullChannel\",\n    \"params\": [{\"name\": \"channel\", \"type\": \"InputChannel\"}],\n    \"type\": \"messages.ChatFull\"\n  }, {\n    \"id\": \"1029681423\",\n    \"method\": \"channels.createChannel\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"broadcast\", \"type\": \"flags.0?true\"}, {\n      \"name\": \"megagroup\",\n      \"type\": \"flags.1?true\"\n    }, {\"name\": \"title\", \"type\": \"string\"}, {\"name\": \"about\", \"type\": \"string\"}, {\n      \"name\": \"geo_point\",\n      \"type\": \"flags.2?InputGeoPoint\"\n    }, {\"name\": \"address\", \"type\": \"flags.2?string\"}],\n    \"type\": \"Updates\"\n  }, {\n    \"id\": \"-751007486\",\n    \"method\": \"channels.editAdmin\",\n    \"params\": [{\"name\": \"channel\", \"type\": \"InputChannel\"}, {\n      \"name\": \"user_id\",\n      \"type\": \"InputUser\"\n    }, {\"name\": \"admin_rights\", \"type\": \"ChatAdminRights\"}, {\"name\": \"rank\", \"type\": \"string\"}],\n    \"type\": \"Updates\"\n  }, {\n    \"id\": \"1450044624\",\n    \"method\": \"channels.editTitle\",\n    \"params\": [{\"name\": \"channel\", \"type\": \"InputChannel\"}, {\"name\": \"title\", \"type\": \"string\"}],\n    \"type\": \"Updates\"\n  }, {\n    \"id\": \"-248621111\",\n    \"method\": \"channels.editPhoto\",\n    \"params\": [{\"name\": \"channel\", \"type\": \"InputChannel\"}, {\"name\": \"photo\", \"type\": \"InputChatPhoto\"}],\n    \"type\": \"Updates\"\n  }, {\n    \"id\": \"283557164\",\n    \"method\": \"channels.checkUsername\",\n    \"params\": [{\"name\": \"channel\", \"type\": \"InputChannel\"}, {\"name\": \"username\", \"type\": \"string\"}],\n    \"type\": \"Bool\"\n  }, {\n    \"id\": \"890549214\",\n    \"method\": \"channels.updateUsername\",\n    \"params\": [{\"name\": \"channel\", \"type\": \"InputChannel\"}, {\"name\": \"username\", \"type\": \"string\"}],\n    \"type\": \"Bool\"\n  }, {\n    \"id\": \"615851205\",\n    \"method\": \"channels.joinChannel\",\n    \"params\": [{\"name\": \"channel\", \"type\": \"InputChannel\"}],\n    \"type\": \"Updates\"\n  }, {\n    \"id\": \"-130635115\",\n    \"method\": \"channels.leaveChannel\",\n    \"params\": [{\"name\": \"channel\", \"type\": \"InputChannel\"}],\n    \"type\": \"Updates\"\n  }, {\n    \"id\": \"429865580\",\n    \"method\": \"channels.inviteToChannel\",\n    \"params\": [{\"name\": \"channel\", \"type\": \"InputChannel\"}, {\"name\": \"users\", \"type\": \"Vector<InputUser>\"}],\n    \"type\": \"Updates\"\n  }, {\n    \"id\": \"-1072619549\",\n    \"method\": \"channels.deleteChannel\",\n    \"params\": [{\"name\": \"channel\", \"type\": \"InputChannel\"}],\n    \"type\": \"Updates\"\n  }, {\n    \"id\": \"51854712\",\n    \"method\": \"updates.getChannelDifference\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"force\", \"type\": \"flags.0?true\"}, {\n      \"name\": \"channel\",\n      \"type\": \"InputChannel\"\n    }, {\"name\": \"filter\", \"type\": \"ChannelMessagesFilter\"}, {\"name\": \"pts\", \"type\": \"int\"}, {\n      \"name\": \"limit\",\n      \"type\": \"int\"\n    }],\n    \"type\": \"updates.ChannelDifference\"\n  }, {\n    \"id\": \"-1444503762\",\n    \"method\": \"messages.editChatAdmin\",\n    \"params\": [{\"name\": \"chat_id\", \"type\": \"int\"}, {\"name\": \"user_id\", \"type\": \"InputUser\"}, {\n      \"name\": \"is_admin\",\n      \"type\": \"Bool\"\n    }],\n    \"type\": \"Bool\"\n  }, {\n    \"id\": \"363051235\",\n    \"method\": \"messages.migrateChat\",\n    \"params\": [{\"name\": \"chat_id\", \"type\": \"int\"}],\n    \"type\": \"Updates\"\n  }, {\n    \"id\": \"-1083038300\",\n    \"method\": \"messages.searchGlobal\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"folder_id\", \"type\": \"flags.0?int\"}, {\n      \"name\": \"q\",\n      \"type\": \"string\"\n    }, {\"name\": \"offset_rate\", \"type\": \"int\"}, {\"name\": \"offset_peer\", \"type\": \"InputPeer\"}, {\n      \"name\": \"offset_id\",\n      \"type\": \"int\"\n    }, {\"name\": \"limit\", \"type\": \"int\"}],\n    \"type\": \"messages.Messages\"\n  }, {\n    \"id\": \"2016638777\",\n    \"method\": \"messages.reorderStickerSets\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"masks\", \"type\": \"flags.0?true\"}, {\n      \"name\": \"order\",\n      \"type\": \"Vector<long>\"\n    }],\n    \"type\": \"Bool\"\n  }, {\n    \"id\": \"864953444\",\n    \"method\": \"messages.getDocumentByHash\",\n    \"params\": [{\"name\": \"sha256\", \"type\": \"bytes\"}, {\"name\": \"size\", \"type\": \"int\"}, {\n      \"name\": \"mime_type\",\n      \"type\": \"string\"\n    }],\n    \"type\": \"Document\"\n  }, {\n    \"id\": \"-1080395925\",\n    \"method\": \"messages.searchGifs\",\n    \"params\": [{\"name\": \"q\", \"type\": \"string\"}, {\"name\": \"offset\", \"type\": \"int\"}],\n    \"type\": \"messages.FoundGifs\"\n  }, {\n    \"id\": \"-2084618926\",\n    \"method\": \"messages.getSavedGifs\",\n    \"params\": [{\"name\": \"hash\", \"type\": \"int\"}],\n    \"type\": \"messages.SavedGifs\"\n  }, {\n    \"id\": \"846868683\",\n    \"method\": \"messages.saveGif\",\n    \"params\": [{\"name\": \"id\", \"type\": \"InputDocument\"}, {\"name\": \"unsave\", \"type\": \"Bool\"}],\n    \"type\": \"Bool\"\n  }, {\n    \"id\": \"1364105629\",\n    \"method\": \"messages.getInlineBotResults\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"bot\", \"type\": \"InputUser\"}, {\n      \"name\": \"peer\",\n      \"type\": \"InputPeer\"\n    }, {\"name\": \"geo_point\", \"type\": \"flags.0?InputGeoPoint\"}, {\"name\": \"query\", \"type\": \"string\"}, {\n      \"name\": \"offset\",\n      \"type\": \"string\"\n    }],\n    \"type\": \"messages.BotResults\"\n  }, {\n    \"id\": \"-346119674\",\n    \"method\": \"messages.setInlineBotResults\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"gallery\", \"type\": \"flags.0?true\"}, {\n      \"name\": \"private\",\n      \"type\": \"flags.1?true\"\n    }, {\"name\": \"query_id\", \"type\": \"long\"}, {\n      \"name\": \"results\",\n      \"type\": \"Vector<InputBotInlineResult>\"\n    }, {\"name\": \"cache_time\", \"type\": \"int\"}, {\"name\": \"next_offset\", \"type\": \"flags.2?string\"}, {\n      \"name\": \"switch_pm\",\n      \"type\": \"flags.3?InlineBotSwitchPM\"\n    }],\n    \"type\": \"Bool\"\n  }, {\n    \"id\": \"570955184\",\n    \"method\": \"messages.sendInlineBotResult\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"silent\", \"type\": \"flags.5?true\"}, {\n      \"name\": \"background\",\n      \"type\": \"flags.6?true\"\n    }, {\"name\": \"clear_draft\", \"type\": \"flags.7?true\"}, {\"name\": \"hide_via\", \"type\": \"flags.11?true\"}, {\n      \"name\": \"peer\",\n      \"type\": \"InputPeer\"\n    }, {\"name\": \"reply_to_msg_id\", \"type\": \"flags.0?int\"}, {\"name\": \"random_id\", \"type\": \"long\"}, {\n      \"name\": \"query_id\",\n      \"type\": \"long\"\n    }, {\"name\": \"id\", \"type\": \"string\"}, {\"name\": \"schedule_date\", \"type\": \"flags.10?int\"}],\n    \"type\": \"Updates\"\n  }, {\n    \"id\": \"-826838685\",\n    \"method\": \"channels.exportMessageLink\",\n    \"params\": [{\"name\": \"channel\", \"type\": \"InputChannel\"}, {\"name\": \"id\", \"type\": \"int\"}, {\n      \"name\": \"grouped\",\n      \"type\": \"Bool\"\n    }],\n    \"type\": \"ExportedMessageLink\"\n  }, {\n    \"id\": \"527021574\",\n    \"method\": \"channels.toggleSignatures\",\n    \"params\": [{\"name\": \"channel\", \"type\": \"InputChannel\"}, {\"name\": \"enabled\", \"type\": \"Bool\"}],\n    \"type\": \"Updates\"\n  }, {\n    \"id\": \"1056025023\",\n    \"method\": \"auth.resendCode\",\n    \"params\": [{\"name\": \"phone_number\", \"type\": \"string\"}, {\"name\": \"phone_code_hash\", \"type\": \"string\"}],\n    \"type\": \"auth.SentCode\"\n  }, {\n    \"id\": \"520357240\",\n    \"method\": \"auth.cancelCode\",\n    \"params\": [{\"name\": \"phone_number\", \"type\": \"string\"}, {\"name\": \"phone_code_hash\", \"type\": \"string\"}],\n    \"type\": \"Bool\"\n  }, {\n    \"id\": \"-39416522\",\n    \"method\": \"messages.getMessageEditData\",\n    \"params\": [{\"name\": \"peer\", \"type\": \"InputPeer\"}, {\"name\": \"id\", \"type\": \"int\"}],\n    \"type\": \"messages.MessageEditData\"\n  }, {\n    \"id\": \"1224152952\",\n    \"method\": \"messages.editMessage\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"no_webpage\", \"type\": \"flags.1?true\"}, {\n      \"name\": \"peer\",\n      \"type\": \"InputPeer\"\n    }, {\"name\": \"id\", \"type\": \"int\"}, {\"name\": \"message\", \"type\": \"flags.11?string\"}, {\n      \"name\": \"media\",\n      \"type\": \"flags.14?InputMedia\"\n    }, {\"name\": \"reply_markup\", \"type\": \"flags.2?ReplyMarkup\"}, {\n      \"name\": \"entities\",\n      \"type\": \"flags.3?Vector<MessageEntity>\"\n    }, {\"name\": \"schedule_date\", \"type\": \"flags.15?int\"}],\n    \"type\": \"Updates\"\n  }, {\n    \"id\": \"-2091549254\",\n    \"method\": \"messages.editInlineBotMessage\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"no_webpage\", \"type\": \"flags.1?true\"}, {\n      \"name\": \"id\",\n      \"type\": \"InputBotInlineMessageID\"\n    }, {\"name\": \"message\", \"type\": \"flags.11?string\"}, {\n      \"name\": \"media\",\n      \"type\": \"flags.14?InputMedia\"\n    }, {\"name\": \"reply_markup\", \"type\": \"flags.2?ReplyMarkup\"}, {\n      \"name\": \"entities\",\n      \"type\": \"flags.3?Vector<MessageEntity>\"\n    }],\n    \"type\": \"Bool\"\n  }, {\n    \"id\": \"-2130010132\",\n    \"method\": \"messages.getBotCallbackAnswer\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"game\", \"type\": \"flags.1?true\"}, {\n      \"name\": \"peer\",\n      \"type\": \"InputPeer\"\n    }, {\"name\": \"msg_id\", \"type\": \"int\"}, {\"name\": \"data\", \"type\": \"flags.0?bytes\"}],\n    \"type\": \"messages.BotCallbackAnswer\"\n  }, {\n    \"id\": \"-712043766\",\n    \"method\": \"messages.setBotCallbackAnswer\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"alert\", \"type\": \"flags.1?true\"}, {\n      \"name\": \"query_id\",\n      \"type\": \"long\"\n    }, {\"name\": \"message\", \"type\": \"flags.0?string\"}, {\"name\": \"url\", \"type\": \"flags.2?string\"}, {\n      \"name\": \"cache_time\",\n      \"type\": \"int\"\n    }],\n    \"type\": \"Bool\"\n  }, {\n    \"id\": \"-728224331\",\n    \"method\": \"contacts.getTopPeers\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"correspondents\", \"type\": \"flags.0?true\"}, {\n      \"name\": \"bots_pm\",\n      \"type\": \"flags.1?true\"\n    }, {\"name\": \"bots_inline\", \"type\": \"flags.2?true\"}, {\n      \"name\": \"phone_calls\",\n      \"type\": \"flags.3?true\"\n    }, {\"name\": \"forward_users\", \"type\": \"flags.4?true\"}, {\n      \"name\": \"forward_chats\",\n      \"type\": \"flags.5?true\"\n    }, {\"name\": \"groups\", \"type\": \"flags.10?true\"}, {\"name\": \"channels\", \"type\": \"flags.15?true\"}, {\n      \"name\": \"offset\",\n      \"type\": \"int\"\n    }, {\"name\": \"limit\", \"type\": \"int\"}, {\"name\": \"hash\", \"type\": \"int\"}],\n    \"type\": \"contacts.TopPeers\"\n  }, {\n    \"id\": \"451113900\",\n    \"method\": \"contacts.resetTopPeerRating\",\n    \"params\": [{\"name\": \"category\", \"type\": \"TopPeerCategory\"}, {\"name\": \"peer\", \"type\": \"InputPeer\"}],\n    \"type\": \"Bool\"\n  }, {\n    \"id\": \"-462373635\",\n    \"method\": \"messages.getPeerDialogs\",\n    \"params\": [{\"name\": \"peers\", \"type\": \"Vector<InputDialogPeer>\"}],\n    \"type\": \"messages.PeerDialogs\"\n  }, {\n    \"id\": \"-1137057461\",\n    \"method\": \"messages.saveDraft\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\n      \"name\": \"no_webpage\",\n      \"type\": \"flags.1?true\"\n    }, {\"name\": \"reply_to_msg_id\", \"type\": \"flags.0?int\"}, {\"name\": \"peer\", \"type\": \"InputPeer\"}, {\n      \"name\": \"message\",\n      \"type\": \"string\"\n    }, {\"name\": \"entities\", \"type\": \"flags.3?Vector<MessageEntity>\"}],\n    \"type\": \"Bool\"\n  }, {\"id\": \"1782549861\", \"method\": \"messages.getAllDrafts\", \"params\": [], \"type\": \"Updates\"}, {\n    \"id\": \"766298703\",\n    \"method\": \"messages.getFeaturedStickers\",\n    \"params\": [{\"name\": \"hash\", \"type\": \"int\"}],\n    \"type\": \"messages.FeaturedStickers\"\n  }, {\n    \"id\": \"1527873830\",\n    \"method\": \"messages.readFeaturedStickers\",\n    \"params\": [{\"name\": \"id\", \"type\": \"Vector<long>\"}],\n    \"type\": \"Bool\"\n  }, {\n    \"id\": \"1587647177\",\n    \"method\": \"messages.getRecentStickers\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"attached\", \"type\": \"flags.0?true\"}, {\n      \"name\": \"hash\",\n      \"type\": \"int\"\n    }],\n    \"type\": \"messages.RecentStickers\"\n  }, {\n    \"id\": \"958863608\",\n    \"method\": \"messages.saveRecentSticker\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"attached\", \"type\": \"flags.0?true\"}, {\n      \"name\": \"id\",\n      \"type\": \"InputDocument\"\n    }, {\"name\": \"unsave\", \"type\": \"Bool\"}],\n    \"type\": \"Bool\"\n  }, {\n    \"id\": \"-1986437075\",\n    \"method\": \"messages.clearRecentStickers\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"attached\", \"type\": \"flags.0?true\"}],\n    \"type\": \"Bool\"\n  }, {\n    \"id\": \"1475442322\",\n    \"method\": \"messages.getArchivedStickers\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"masks\", \"type\": \"flags.0?true\"}, {\n      \"name\": \"offset_id\",\n      \"type\": \"long\"\n    }, {\"name\": \"limit\", \"type\": \"int\"}],\n    \"type\": \"messages.ArchivedStickers\"\n  }, {\n    \"id\": \"457157256\",\n    \"method\": \"account.sendConfirmPhoneCode\",\n    \"params\": [{\"name\": \"hash\", \"type\": \"string\"}, {\"name\": \"settings\", \"type\": \"CodeSettings\"}],\n    \"type\": \"auth.SentCode\"\n  }, {\n    \"id\": \"1596029123\",\n    \"method\": \"account.confirmPhone\",\n    \"params\": [{\"name\": \"phone_code_hash\", \"type\": \"string\"}, {\"name\": \"phone_code\", \"type\": \"string\"}],\n    \"type\": \"Bool\"\n  }, {\n    \"id\": \"-122669393\",\n    \"method\": \"channels.getAdminedPublicChannels\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"by_location\", \"type\": \"flags.0?true\"}, {\n      \"name\": \"check_limit\",\n      \"type\": \"flags.1?true\"\n    }],\n    \"type\": \"messages.Chats\"\n  }, {\n    \"id\": \"1706608543\",\n    \"method\": \"messages.getMaskStickers\",\n    \"params\": [{\"name\": \"hash\", \"type\": \"int\"}],\n    \"type\": \"messages.AllStickers\"\n  }, {\n    \"id\": \"-866424884\",\n    \"method\": \"messages.getAttachedStickers\",\n    \"params\": [{\"name\": \"media\", \"type\": \"InputStickeredMedia\"}],\n    \"type\": \"Vector<StickerSetCovered>\"\n  }, {\n    \"id\": \"-1907842680\",\n    \"method\": \"auth.dropTempAuthKeys\",\n    \"params\": [{\"name\": \"except_auth_keys\", \"type\": \"Vector<long>\"}],\n    \"type\": \"Bool\"\n  }, {\n    \"id\": \"-1896289088\",\n    \"method\": \"messages.setGameScore\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"edit_message\", \"type\": \"flags.0?true\"}, {\n      \"name\": \"force\",\n      \"type\": \"flags.1?true\"\n    }, {\"name\": \"peer\", \"type\": \"InputPeer\"}, {\"name\": \"id\", \"type\": \"int\"}, {\n      \"name\": \"user_id\",\n      \"type\": \"InputUser\"\n    }, {\"name\": \"score\", \"type\": \"int\"}],\n    \"type\": \"Updates\"\n  }, {\n    \"id\": \"363700068\",\n    \"method\": \"messages.setInlineGameScore\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"edit_message\", \"type\": \"flags.0?true\"}, {\n      \"name\": \"force\",\n      \"type\": \"flags.1?true\"\n    }, {\"name\": \"id\", \"type\": \"InputBotInlineMessageID\"}, {\"name\": \"user_id\", \"type\": \"InputUser\"}, {\n      \"name\": \"score\",\n      \"type\": \"int\"\n    }],\n    \"type\": \"Bool\"\n  }, {\n    \"id\": \"-400399203\",\n    \"method\": \"messages.getGameHighScores\",\n    \"params\": [{\"name\": \"peer\", \"type\": \"InputPeer\"}, {\"name\": \"id\", \"type\": \"int\"}, {\n      \"name\": \"user_id\",\n      \"type\": \"InputUser\"\n    }],\n    \"type\": \"messages.HighScores\"\n  }, {\n    \"id\": \"258170395\",\n    \"method\": \"messages.getInlineGameHighScores\",\n    \"params\": [{\"name\": \"id\", \"type\": \"InputBotInlineMessageID\"}, {\"name\": \"user_id\", \"type\": \"InputUser\"}],\n    \"type\": \"messages.HighScores\"\n  }, {\n    \"id\": \"218777796\",\n    \"method\": \"messages.getCommonChats\",\n    \"params\": [{\"name\": \"user_id\", \"type\": \"InputUser\"}, {\"name\": \"max_id\", \"type\": \"int\"}, {\n      \"name\": \"limit\",\n      \"type\": \"int\"\n    }],\n    \"type\": \"messages.Chats\"\n  }, {\n    \"id\": \"-341307408\",\n    \"method\": \"messages.getAllChats\",\n    \"params\": [{\"name\": \"except_ids\", \"type\": \"Vector<int>\"}],\n    \"type\": \"messages.Chats\"\n  }, {\n    \"id\": \"-333262899\",\n    \"method\": \"help.setBotUpdatesStatus\",\n    \"params\": [{\"name\": \"pending_updates_count\", \"type\": \"int\"}, {\"name\": \"message\", \"type\": \"string\"}],\n    \"type\": \"Bool\"\n  }, {\n    \"id\": \"852135825\",\n    \"method\": \"messages.getWebPage\",\n    \"params\": [{\"name\": \"url\", \"type\": \"string\"}, {\"name\": \"hash\", \"type\": \"int\"}],\n    \"type\": \"WebPage\"\n  }, {\n    \"id\": \"-1489903017\",\n    \"method\": \"messages.toggleDialogPin\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"pinned\", \"type\": \"flags.0?true\"}, {\n      \"name\": \"peer\",\n      \"type\": \"InputDialogPeer\"\n    }],\n    \"type\": \"Bool\"\n  }, {\n    \"id\": \"991616823\",\n    \"method\": \"messages.reorderPinnedDialogs\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"force\", \"type\": \"flags.0?true\"}, {\n      \"name\": \"folder_id\",\n      \"type\": \"int\"\n    }, {\"name\": \"order\", \"type\": \"Vector<InputDialogPeer>\"}],\n    \"type\": \"Bool\"\n  }, {\n    \"id\": \"-692498958\",\n    \"method\": \"messages.getPinnedDialogs\",\n    \"params\": [{\"name\": \"folder_id\", \"type\": \"int\"}],\n    \"type\": \"messages.PeerDialogs\"\n  }, {\n    \"id\": \"-1440257555\",\n    \"method\": \"bots.sendCustomRequest\",\n    \"params\": [{\"name\": \"custom_method\", \"type\": \"string\"}, {\"name\": \"params\", \"type\": \"DataJSON\"}],\n    \"type\": \"DataJSON\"\n  }, {\n    \"id\": \"-434028723\",\n    \"method\": \"bots.answerWebhookJSONQuery\",\n    \"params\": [{\"name\": \"query_id\", \"type\": \"long\"}, {\"name\": \"data\", \"type\": \"DataJSON\"}],\n    \"type\": \"Bool\"\n  }, {\n    \"id\": \"619086221\",\n    \"method\": \"upload.getWebFile\",\n    \"params\": [{\"name\": \"location\", \"type\": \"InputWebFileLocation\"}, {\n      \"name\": \"offset\",\n      \"type\": \"int\"\n    }, {\"name\": \"limit\", \"type\": \"int\"}],\n    \"type\": \"upload.WebFile\"\n  }, {\n    \"id\": \"-1712285883\",\n    \"method\": \"payments.getPaymentForm\",\n    \"params\": [{\"name\": \"msg_id\", \"type\": \"int\"}],\n    \"type\": \"payments.PaymentForm\"\n  }, {\n    \"id\": \"-1601001088\",\n    \"method\": \"payments.getPaymentReceipt\",\n    \"params\": [{\"name\": \"msg_id\", \"type\": \"int\"}],\n    \"type\": \"payments.PaymentReceipt\"\n  }, {\n    \"id\": \"1997180532\",\n    \"method\": \"payments.validateRequestedInfo\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"save\", \"type\": \"flags.0?true\"}, {\n      \"name\": \"msg_id\",\n      \"type\": \"int\"\n    }, {\"name\": \"info\", \"type\": \"PaymentRequestedInfo\"}],\n    \"type\": \"payments.ValidatedRequestedInfo\"\n  }, {\n    \"id\": \"730364339\",\n    \"method\": \"payments.sendPaymentForm\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"msg_id\", \"type\": \"int\"}, {\n      \"name\": \"requested_info_id\",\n      \"type\": \"flags.0?string\"\n    }, {\"name\": \"shipping_option_id\", \"type\": \"flags.1?string\"}, {\n      \"name\": \"credentials\",\n      \"type\": \"InputPaymentCredentials\"\n    }],\n    \"type\": \"payments.PaymentResult\"\n  }, {\n    \"id\": \"1151208273\",\n    \"method\": \"account.getTmpPassword\",\n    \"params\": [{\"name\": \"password\", \"type\": \"InputCheckPasswordSRP\"}, {\"name\": \"period\", \"type\": \"int\"}],\n    \"type\": \"account.TmpPassword\"\n  }, {\n    \"id\": \"578650699\",\n    \"method\": \"payments.getSavedInfo\",\n    \"params\": [],\n    \"type\": \"payments.SavedInfo\"\n  }, {\n    \"id\": \"-667062079\",\n    \"method\": \"payments.clearSavedInfo\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"credentials\", \"type\": \"flags.0?true\"}, {\n      \"name\": \"info\",\n      \"type\": \"flags.1?true\"\n    }],\n    \"type\": \"Bool\"\n  }, {\n    \"id\": \"-436833542\",\n    \"method\": \"messages.setBotShippingResults\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"query_id\", \"type\": \"long\"}, {\n      \"name\": \"error\",\n      \"type\": \"flags.0?string\"\n    }, {\"name\": \"shipping_options\", \"type\": \"flags.1?Vector<ShippingOption>\"}],\n    \"type\": \"Bool\"\n  }, {\n    \"id\": \"163765653\",\n    \"method\": \"messages.setBotPrecheckoutResults\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"success\", \"type\": \"flags.1?true\"}, {\n      \"name\": \"query_id\",\n      \"type\": \"long\"\n    }, {\"name\": \"error\", \"type\": \"flags.0?string\"}],\n    \"type\": \"Bool\"\n  }, {\n    \"id\": \"-1680314774\",\n    \"method\": \"stickers.createStickerSet\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"masks\", \"type\": \"flags.0?true\"}, {\n      \"name\": \"user_id\",\n      \"type\": \"InputUser\"\n    }, {\"name\": \"title\", \"type\": \"string\"}, {\"name\": \"short_name\", \"type\": \"string\"}, {\n      \"name\": \"stickers\",\n      \"type\": \"Vector<InputStickerSetItem>\"\n    }],\n    \"type\": \"messages.StickerSet\"\n  }, {\n    \"id\": \"-143257775\",\n    \"method\": \"stickers.removeStickerFromSet\",\n    \"params\": [{\"name\": \"sticker\", \"type\": \"InputDocument\"}],\n    \"type\": \"messages.StickerSet\"\n  }, {\n    \"id\": \"-4795190\",\n    \"method\": \"stickers.changeStickerPosition\",\n    \"params\": [{\"name\": \"sticker\", \"type\": \"InputDocument\"}, {\"name\": \"position\", \"type\": \"int\"}],\n    \"type\": \"messages.StickerSet\"\n  }, {\n    \"id\": \"-2041315650\",\n    \"method\": \"stickers.addStickerToSet\",\n    \"params\": [{\"name\": \"stickerset\", \"type\": \"InputStickerSet\"}, {\"name\": \"sticker\", \"type\": \"InputStickerSetItem\"}],\n    \"type\": \"messages.StickerSet\"\n  }, {\n    \"id\": \"1369162417\",\n    \"method\": \"messages.uploadMedia\",\n    \"params\": [{\"name\": \"peer\", \"type\": \"InputPeer\"}, {\"name\": \"media\", \"type\": \"InputMedia\"}],\n    \"type\": \"MessageMedia\"\n  }, {\"id\": \"1430593449\", \"method\": \"phone.getCallConfig\", \"params\": [], \"type\": \"DataJSON\"}, {\n    \"id\": \"1124046573\",\n    \"method\": \"phone.requestCall\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"video\", \"type\": \"flags.0?true\"}, {\n      \"name\": \"user_id\",\n      \"type\": \"InputUser\"\n    }, {\"name\": \"random_id\", \"type\": \"int\"}, {\"name\": \"g_a_hash\", \"type\": \"bytes\"}, {\n      \"name\": \"protocol\",\n      \"type\": \"PhoneCallProtocol\"\n    }],\n    \"type\": \"phone.PhoneCall\"\n  }, {\n    \"id\": \"1003664544\",\n    \"method\": \"phone.acceptCall\",\n    \"params\": [{\"name\": \"peer\", \"type\": \"InputPhoneCall\"}, {\"name\": \"g_b\", \"type\": \"bytes\"}, {\n      \"name\": \"protocol\",\n      \"type\": \"PhoneCallProtocol\"\n    }],\n    \"type\": \"phone.PhoneCall\"\n  }, {\n    \"id\": \"788404002\",\n    \"method\": \"phone.confirmCall\",\n    \"params\": [{\"name\": \"peer\", \"type\": \"InputPhoneCall\"}, {\"name\": \"g_a\", \"type\": \"bytes\"}, {\n      \"name\": \"key_fingerprint\",\n      \"type\": \"long\"\n    }, {\"name\": \"protocol\", \"type\": \"PhoneCallProtocol\"}],\n    \"type\": \"phone.PhoneCall\"\n  }, {\n    \"id\": \"399855457\",\n    \"method\": \"phone.receivedCall\",\n    \"params\": [{\"name\": \"peer\", \"type\": \"InputPhoneCall\"}],\n    \"type\": \"Bool\"\n  }, {\n    \"id\": \"-1295269440\",\n    \"method\": \"phone.discardCall\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"video\", \"type\": \"flags.0?true\"}, {\n      \"name\": \"peer\",\n      \"type\": \"InputPhoneCall\"\n    }, {\"name\": \"duration\", \"type\": \"int\"}, {\n      \"name\": \"reason\",\n      \"type\": \"PhoneCallDiscardReason\"\n    }, {\"name\": \"connection_id\", \"type\": \"long\"}],\n    \"type\": \"Updates\"\n  }, {\n    \"id\": \"1508562471\",\n    \"method\": \"phone.setCallRating\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"user_initiative\", \"type\": \"flags.0?true\"}, {\n      \"name\": \"peer\",\n      \"type\": \"InputPhoneCall\"\n    }, {\"name\": \"rating\", \"type\": \"int\"}, {\"name\": \"comment\", \"type\": \"string\"}],\n    \"type\": \"Updates\"\n  }, {\n    \"id\": \"662363518\",\n    \"method\": \"phone.saveCallDebug\",\n    \"params\": [{\"name\": \"peer\", \"type\": \"InputPhoneCall\"}, {\"name\": \"debug\", \"type\": \"DataJSON\"}],\n    \"type\": \"Bool\"\n  }, {\n    \"id\": \"536919235\",\n    \"method\": \"upload.getCdnFile\",\n    \"params\": [{\"name\": \"file_token\", \"type\": \"bytes\"}, {\"name\": \"offset\", \"type\": \"int\"}, {\n      \"name\": \"limit\",\n      \"type\": \"int\"\n    }],\n    \"type\": \"upload.CdnFile\"\n  }, {\n    \"id\": \"-1691921240\",\n    \"method\": \"upload.reuploadCdnFile\",\n    \"params\": [{\"name\": \"file_token\", \"type\": \"bytes\"}, {\"name\": \"request_token\", \"type\": \"bytes\"}],\n    \"type\": \"Vector<FileHash>\"\n  }, {\"id\": \"1375900482\", \"method\": \"help.getCdnConfig\", \"params\": [], \"type\": \"CdnConfig\"}, {\n    \"id\": \"-219008246\",\n    \"method\": \"langpack.getLangPack\",\n    \"params\": [{\"name\": \"lang_pack\", \"type\": \"string\"}, {\"name\": \"lang_code\", \"type\": \"string\"}],\n    \"type\": \"LangPackDifference\"\n  }, {\n    \"id\": \"-269862909\",\n    \"method\": \"langpack.getStrings\",\n    \"params\": [{\"name\": \"lang_pack\", \"type\": \"string\"}, {\"name\": \"lang_code\", \"type\": \"string\"}, {\n      \"name\": \"keys\",\n      \"type\": \"Vector<string>\"\n    }],\n    \"type\": \"Vector<LangPackString>\"\n  }, {\n    \"id\": \"-845657435\",\n    \"method\": \"langpack.getDifference\",\n    \"params\": [{\"name\": \"lang_pack\", \"type\": \"string\"}, {\n      \"name\": \"lang_code\",\n      \"type\": \"string\"\n    }, {\"name\": \"from_version\", \"type\": \"int\"}],\n    \"type\": \"LangPackDifference\"\n  }, {\n    \"id\": \"1120311183\",\n    \"method\": \"langpack.getLanguages\",\n    \"params\": [{\"name\": \"lang_pack\", \"type\": \"string\"}],\n    \"type\": \"Vector<LangPackLanguage>\"\n  }, {\n    \"id\": \"1920559378\",\n    \"method\": \"channels.editBanned\",\n    \"params\": [{\"name\": \"channel\", \"type\": \"InputChannel\"}, {\n      \"name\": \"user_id\",\n      \"type\": \"InputUser\"\n    }, {\"name\": \"banned_rights\", \"type\": \"ChatBannedRights\"}],\n    \"type\": \"Updates\"\n  }, {\n    \"id\": \"870184064\",\n    \"method\": \"channels.getAdminLog\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"channel\", \"type\": \"InputChannel\"}, {\n      \"name\": \"q\",\n      \"type\": \"string\"\n    }, {\"name\": \"events_filter\", \"type\": \"flags.0?ChannelAdminLogEventsFilter\"}, {\n      \"name\": \"admins\",\n      \"type\": \"flags.1?Vector<InputUser>\"\n    }, {\"name\": \"max_id\", \"type\": \"long\"}, {\"name\": \"min_id\", \"type\": \"long\"}, {\"name\": \"limit\", \"type\": \"int\"}],\n    \"type\": \"channels.AdminLogResults\"\n  }, {\n    \"id\": \"1302676017\",\n    \"method\": \"upload.getCdnFileHashes\",\n    \"params\": [{\"name\": \"file_token\", \"type\": \"bytes\"}, {\"name\": \"offset\", \"type\": \"int\"}],\n    \"type\": \"Vector<FileHash>\"\n  }, {\n    \"id\": \"-914493408\",\n    \"method\": \"messages.sendScreenshotNotification\",\n    \"params\": [{\"name\": \"peer\", \"type\": \"InputPeer\"}, {\"name\": \"reply_to_msg_id\", \"type\": \"int\"}, {\n      \"name\": \"random_id\",\n      \"type\": \"long\"\n    }],\n    \"type\": \"Updates\"\n  }, {\n    \"id\": \"-359881479\",\n    \"method\": \"channels.setStickers\",\n    \"params\": [{\"name\": \"channel\", \"type\": \"InputChannel\"}, {\"name\": \"stickerset\", \"type\": \"InputStickerSet\"}],\n    \"type\": \"Bool\"\n  }, {\n    \"id\": \"567151374\",\n    \"method\": \"messages.getFavedStickers\",\n    \"params\": [{\"name\": \"hash\", \"type\": \"int\"}],\n    \"type\": \"messages.FavedStickers\"\n  }, {\n    \"id\": \"-1174420133\",\n    \"method\": \"messages.faveSticker\",\n    \"params\": [{\"name\": \"id\", \"type\": \"InputDocument\"}, {\"name\": \"unfave\", \"type\": \"Bool\"}],\n    \"type\": \"Bool\"\n  }, {\n    \"id\": \"-357180360\",\n    \"method\": \"channels.readMessageContents\",\n    \"params\": [{\"name\": \"channel\", \"type\": \"InputChannel\"}, {\"name\": \"id\", \"type\": \"Vector<int>\"}],\n    \"type\": \"Bool\"\n  }, {\"id\": \"-2020263951\", \"method\": \"contacts.resetSaved\", \"params\": [], \"type\": \"Bool\"}, {\n    \"id\": \"1180140658\",\n    \"method\": \"messages.getUnreadMentions\",\n    \"params\": [{\"name\": \"peer\", \"type\": \"InputPeer\"}, {\"name\": \"offset_id\", \"type\": \"int\"}, {\n      \"name\": \"add_offset\",\n      \"type\": \"int\"\n    }, {\"name\": \"limit\", \"type\": \"int\"}, {\"name\": \"max_id\", \"type\": \"int\"}, {\"name\": \"min_id\", \"type\": \"int\"}],\n    \"type\": \"messages.Messages\"\n  }, {\n    \"id\": \"-1355375294\",\n    \"method\": \"channels.deleteHistory\",\n    \"params\": [{\"name\": \"channel\", \"type\": \"InputChannel\"}, {\"name\": \"max_id\", \"type\": \"int\"}],\n    \"type\": \"Bool\"\n  }, {\n    \"id\": \"1036054804\",\n    \"method\": \"help.getRecentMeUrls\",\n    \"params\": [{\"name\": \"referer\", \"type\": \"string\"}],\n    \"type\": \"help.RecentMeUrls\"\n  }, {\n    \"id\": \"-356796084\",\n    \"method\": \"channels.togglePreHistoryHidden\",\n    \"params\": [{\"name\": \"channel\", \"type\": \"InputChannel\"}, {\"name\": \"enabled\", \"type\": \"Bool\"}],\n    \"type\": \"Updates\"\n  }, {\n    \"id\": \"251759059\",\n    \"method\": \"messages.readMentions\",\n    \"params\": [{\"name\": \"peer\", \"type\": \"InputPeer\"}],\n    \"type\": \"messages.AffectedHistory\"\n  }, {\n    \"id\": \"-1144759543\",\n    \"method\": \"messages.getRecentLocations\",\n    \"params\": [{\"name\": \"peer\", \"type\": \"InputPeer\"}, {\"name\": \"limit\", \"type\": \"int\"}, {\n      \"name\": \"hash\",\n      \"type\": \"int\"\n    }],\n    \"type\": \"messages.Messages\"\n  }, {\n    \"id\": \"-872345397\",\n    \"method\": \"messages.sendMultiMedia\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"silent\", \"type\": \"flags.5?true\"}, {\n      \"name\": \"background\",\n      \"type\": \"flags.6?true\"\n    }, {\"name\": \"clear_draft\", \"type\": \"flags.7?true\"}, {\n      \"name\": \"peer\",\n      \"type\": \"InputPeer\"\n    }, {\"name\": \"reply_to_msg_id\", \"type\": \"flags.0?int\"}, {\n      \"name\": \"multi_media\",\n      \"type\": \"Vector<InputSingleMedia>\"\n    }, {\"name\": \"schedule_date\", \"type\": \"flags.10?int\"}],\n    \"type\": \"Updates\"\n  }, {\n    \"id\": \"1347929239\",\n    \"method\": \"messages.uploadEncryptedFile\",\n    \"params\": [{\"name\": \"peer\", \"type\": \"InputEncryptedChat\"}, {\"name\": \"file\", \"type\": \"InputEncryptedFile\"}],\n    \"type\": \"EncryptedFile\"\n  }, {\n    \"id\": \"405695855\",\n    \"method\": \"account.getWebAuthorizations\",\n    \"params\": [],\n    \"type\": \"account.WebAuthorizations\"\n  }, {\n    \"id\": \"755087855\",\n    \"method\": \"account.resetWebAuthorization\",\n    \"params\": [{\"name\": \"hash\", \"type\": \"long\"}],\n    \"type\": \"Bool\"\n  }, {\n    \"id\": \"1747789204\",\n    \"method\": \"account.resetWebAuthorizations\",\n    \"params\": [],\n    \"type\": \"Bool\"\n  }, {\n    \"id\": \"-1028140917\",\n    \"method\": \"messages.searchStickerSets\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"exclude_featured\", \"type\": \"flags.0?true\"}, {\n      \"name\": \"q\",\n      \"type\": \"string\"\n    }, {\"name\": \"hash\", \"type\": \"int\"}],\n    \"type\": \"messages.FoundStickerSets\"\n  }, {\n    \"id\": \"-956147407\",\n    \"method\": \"upload.getFileHashes\",\n    \"params\": [{\"name\": \"location\", \"type\": \"InputFileLocation\"}, {\"name\": \"offset\", \"type\": \"int\"}],\n    \"type\": \"Vector<FileHash>\"\n  }, {\"id\": \"1031231713\", \"method\": \"help.getProxyData\", \"params\": [], \"type\": \"help.ProxyData\"}, {\n    \"id\": \"749019089\",\n    \"method\": \"help.getTermsOfServiceUpdate\",\n    \"params\": [],\n    \"type\": \"help.TermsOfServiceUpdate\"\n  }, {\n    \"id\": \"-294455398\",\n    \"method\": \"help.acceptTermsOfService\",\n    \"params\": [{\"name\": \"id\", \"type\": \"DataJSON\"}],\n    \"type\": \"Bool\"\n  }, {\n    \"id\": \"-1299661699\",\n    \"method\": \"account.getAllSecureValues\",\n    \"params\": [],\n    \"type\": \"Vector<SecureValue>\"\n  }, {\n    \"id\": \"1936088002\",\n    \"method\": \"account.getSecureValue\",\n    \"params\": [{\"name\": \"types\", \"type\": \"Vector<SecureValueType>\"}],\n    \"type\": \"Vector<SecureValue>\"\n  }, {\n    \"id\": \"-1986010339\",\n    \"method\": \"account.saveSecureValue\",\n    \"params\": [{\"name\": \"value\", \"type\": \"InputSecureValue\"}, {\"name\": \"secure_secret_id\", \"type\": \"long\"}],\n    \"type\": \"SecureValue\"\n  }, {\n    \"id\": \"-1199522741\",\n    \"method\": \"account.deleteSecureValue\",\n    \"params\": [{\"name\": \"types\", \"type\": \"Vector<SecureValueType>\"}],\n    \"type\": \"Bool\"\n  }, {\n    \"id\": \"-1865902923\",\n    \"method\": \"users.setSecureValueErrors\",\n    \"params\": [{\"name\": \"id\", \"type\": \"InputUser\"}, {\"name\": \"errors\", \"type\": \"Vector<SecureValueError>\"}],\n    \"type\": \"Bool\"\n  }, {\n    \"id\": \"-1200903967\",\n    \"method\": \"account.getAuthorizationForm\",\n    \"params\": [{\"name\": \"bot_id\", \"type\": \"int\"}, {\"name\": \"scope\", \"type\": \"string\"}, {\n      \"name\": \"public_key\",\n      \"type\": \"string\"\n    }],\n    \"type\": \"account.AuthorizationForm\"\n  }, {\n    \"id\": \"-419267436\",\n    \"method\": \"account.acceptAuthorization\",\n    \"params\": [{\"name\": \"bot_id\", \"type\": \"int\"}, {\"name\": \"scope\", \"type\": \"string\"}, {\n      \"name\": \"public_key\",\n      \"type\": \"string\"\n    }, {\"name\": \"value_hashes\", \"type\": \"Vector<SecureValueHash>\"}, {\n      \"name\": \"credentials\",\n      \"type\": \"SecureCredentialsEncrypted\"\n    }],\n    \"type\": \"Bool\"\n  }, {\n    \"id\": \"-1516022023\",\n    \"method\": \"account.sendVerifyPhoneCode\",\n    \"params\": [{\"name\": \"phone_number\", \"type\": \"string\"}, {\"name\": \"settings\", \"type\": \"CodeSettings\"}],\n    \"type\": \"auth.SentCode\"\n  }, {\n    \"id\": \"1305716726\",\n    \"method\": \"account.verifyPhone\",\n    \"params\": [{\"name\": \"phone_number\", \"type\": \"string\"}, {\n      \"name\": \"phone_code_hash\",\n      \"type\": \"string\"\n    }, {\"name\": \"phone_code\", \"type\": \"string\"}],\n    \"type\": \"Bool\"\n  }, {\n    \"id\": \"1880182943\",\n    \"method\": \"account.sendVerifyEmailCode\",\n    \"params\": [{\"name\": \"email\", \"type\": \"string\"}],\n    \"type\": \"account.SentEmailCode\"\n  }, {\n    \"id\": \"-323339813\",\n    \"method\": \"account.verifyEmail\",\n    \"params\": [{\"name\": \"email\", \"type\": \"string\"}, {\"name\": \"code\", \"type\": \"string\"}],\n    \"type\": \"Bool\"\n  }, {\n    \"id\": \"1072547679\",\n    \"method\": \"help.getDeepLinkInfo\",\n    \"params\": [{\"name\": \"path\", \"type\": \"string\"}],\n    \"type\": \"help.DeepLinkInfo\"\n  }, {\n    \"id\": \"-2098076769\",\n    \"method\": \"contacts.getSaved\",\n    \"params\": [],\n    \"type\": \"Vector<SavedContact>\"\n  }, {\n    \"id\": \"-2092831552\",\n    \"method\": \"channels.getLeftChannels\",\n    \"params\": [{\"name\": \"offset\", \"type\": \"int\"}],\n    \"type\": \"messages.Chats\"\n  }, {\n    \"id\": \"-262453244\",\n    \"method\": \"account.initTakeoutSession\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"contacts\", \"type\": \"flags.0?true\"}, {\n      \"name\": \"message_users\",\n      \"type\": \"flags.1?true\"\n    }, {\"name\": \"message_chats\", \"type\": \"flags.2?true\"}, {\n      \"name\": \"message_megagroups\",\n      \"type\": \"flags.3?true\"\n    }, {\"name\": \"message_channels\", \"type\": \"flags.4?true\"}, {\n      \"name\": \"files\",\n      \"type\": \"flags.5?true\"\n    }, {\"name\": \"file_max_size\", \"type\": \"flags.5?int\"}],\n    \"type\": \"account.Takeout\"\n  }, {\n    \"id\": \"489050862\",\n    \"method\": \"account.finishTakeoutSession\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"success\", \"type\": \"flags.0?true\"}],\n    \"type\": \"Bool\"\n  }, {\n    \"id\": \"486505992\",\n    \"method\": \"messages.getSplitRanges\",\n    \"params\": [],\n    \"type\": \"Vector<MessageRange>\"\n  }, {\n    \"id\": \"911373810\",\n    \"method\": \"invokeWithMessagesRange\",\n    \"params\": [{\"name\": \"range\", \"type\": \"MessageRange\"}, {\"name\": \"query\", \"type\": \"!X\"}],\n    \"type\": \"X\"\n  }, {\n    \"id\": \"-1398145746\",\n    \"method\": \"invokeWithTakeout\",\n    \"params\": [{\"name\": \"takeout_id\", \"type\": \"long\"}, {\"name\": \"query\", \"type\": \"!X\"}],\n    \"type\": \"X\"\n  }, {\n    \"id\": \"-1031349873\",\n    \"method\": \"messages.markDialogUnread\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"unread\", \"type\": \"flags.0?true\"}, {\n      \"name\": \"peer\",\n      \"type\": \"InputDialogPeer\"\n    }],\n    \"type\": \"Bool\"\n  }, {\n    \"id\": \"585256482\",\n    \"method\": \"messages.getDialogUnreadMarks\",\n    \"params\": [],\n    \"type\": \"Vector<DialogPeer>\"\n  }, {\n    \"id\": \"-2062238246\",\n    \"method\": \"contacts.toggleTopPeers\",\n    \"params\": [{\"name\": \"enabled\", \"type\": \"Bool\"}],\n    \"type\": \"Bool\"\n  }, {\"id\": \"2119757468\", \"method\": \"messages.clearAllDrafts\", \"params\": [], \"type\": \"Bool\"}, {\n    \"id\": \"-1735311088\",\n    \"method\": \"help.getAppConfig\",\n    \"params\": [],\n    \"type\": \"JSONValue\"\n  }, {\n    \"id\": \"1862465352\",\n    \"method\": \"help.saveAppLog\",\n    \"params\": [{\"name\": \"events\", \"type\": \"Vector<InputAppEvent>\"}],\n    \"type\": \"Bool\"\n  }, {\n    \"id\": \"-966677240\",\n    \"method\": \"help.getPassportConfig\",\n    \"params\": [{\"name\": \"hash\", \"type\": \"int\"}],\n    \"type\": \"help.PassportConfig\"\n  }, {\n    \"id\": \"1784243458\",\n    \"method\": \"langpack.getLanguage\",\n    \"params\": [{\"name\": \"lang_pack\", \"type\": \"string\"}, {\"name\": \"lang_code\", \"type\": \"string\"}],\n    \"type\": \"LangPackLanguage\"\n  }, {\n    \"id\": \"-760547348\",\n    \"method\": \"messages.updatePinnedMessage\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"silent\", \"type\": \"flags.0?true\"}, {\n      \"name\": \"peer\",\n      \"type\": \"InputPeer\"\n    }, {\"name\": \"id\", \"type\": \"int\"}],\n    \"type\": \"Updates\"\n  }, {\n    \"id\": \"-1881204448\",\n    \"method\": \"account.confirmPasswordEmail\",\n    \"params\": [{\"name\": \"code\", \"type\": \"string\"}],\n    \"type\": \"Bool\"\n  }, {\"id\": \"2055154197\", \"method\": \"account.resendPasswordEmail\", \"params\": [], \"type\": \"Bool\"}, {\n    \"id\": \"-1043606090\",\n    \"method\": \"account.cancelPasswordEmail\",\n    \"params\": [],\n    \"type\": \"Bool\"\n  }, {\"id\": \"-748624084\", \"method\": \"help.getSupportName\", \"params\": [], \"type\": \"help.SupportName\"}, {\n    \"id\": \"59377875\",\n    \"method\": \"help.getUserInfo\",\n    \"params\": [{\"name\": \"user_id\", \"type\": \"InputUser\"}],\n    \"type\": \"help.UserInfo\"\n  }, {\n    \"id\": \"1723407216\",\n    \"method\": \"help.editUserInfo\",\n    \"params\": [{\"name\": \"user_id\", \"type\": \"InputUser\"}, {\"name\": \"message\", \"type\": \"string\"}, {\n      \"name\": \"entities\",\n      \"type\": \"Vector<MessageEntity>\"\n    }],\n    \"type\": \"help.UserInfo\"\n  }, {\n    \"id\": \"-1626880216\",\n    \"method\": \"account.getContactSignUpNotification\",\n    \"params\": [],\n    \"type\": \"Bool\"\n  }, {\n    \"id\": \"-806076575\",\n    \"method\": \"account.setContactSignUpNotification\",\n    \"params\": [{\"name\": \"silent\", \"type\": \"Bool\"}],\n    \"type\": \"Bool\"\n  }, {\n    \"id\": \"1398240377\",\n    \"method\": \"account.getNotifyExceptions\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"compare_sound\", \"type\": \"flags.1?true\"}, {\n      \"name\": \"peer\",\n      \"type\": \"flags.0?InputNotifyPeer\"\n    }],\n    \"type\": \"Updates\"\n  }, {\n    \"id\": \"283795844\",\n    \"method\": \"messages.sendVote\",\n    \"params\": [{\"name\": \"peer\", \"type\": \"InputPeer\"}, {\"name\": \"msg_id\", \"type\": \"int\"}, {\n      \"name\": \"options\",\n      \"type\": \"Vector<bytes>\"\n    }],\n    \"type\": \"Updates\"\n  }, {\n    \"id\": \"1941660731\",\n    \"method\": \"messages.getPollResults\",\n    \"params\": [{\"name\": \"peer\", \"type\": \"InputPeer\"}, {\"name\": \"msg_id\", \"type\": \"int\"}],\n    \"type\": \"Updates\"\n  }, {\n    \"id\": \"1848369232\",\n    \"method\": \"messages.getOnlines\",\n    \"params\": [{\"name\": \"peer\", \"type\": \"InputPeer\"}],\n    \"type\": \"ChatOnlines\"\n  }, {\n    \"id\": \"-2127811866\",\n    \"method\": \"messages.getStatsURL\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"dark\", \"type\": \"flags.0?true\"}, {\n      \"name\": \"peer\",\n      \"type\": \"InputPeer\"\n    }, {\"name\": \"params\", \"type\": \"string\"}],\n    \"type\": \"StatsURL\"\n  }, {\n    \"id\": \"-554301545\",\n    \"method\": \"messages.editChatAbout\",\n    \"params\": [{\"name\": \"peer\", \"type\": \"InputPeer\"}, {\"name\": \"about\", \"type\": \"string\"}],\n    \"type\": \"Bool\"\n  }, {\n    \"id\": \"-1517917375\",\n    \"method\": \"messages.editChatDefaultBannedRights\",\n    \"params\": [{\"name\": \"peer\", \"type\": \"InputPeer\"}, {\"name\": \"banned_rights\", \"type\": \"ChatBannedRights\"}],\n    \"type\": \"Updates\"\n  }, {\n    \"id\": \"-57811990\",\n    \"method\": \"account.getWallPaper\",\n    \"params\": [{\"name\": \"wallpaper\", \"type\": \"InputWallPaper\"}],\n    \"type\": \"WallPaper\"\n  }, {\n    \"id\": \"-578472351\",\n    \"method\": \"account.uploadWallPaper\",\n    \"params\": [{\"name\": \"file\", \"type\": \"InputFile\"}, {\"name\": \"mime_type\", \"type\": \"string\"}, {\n      \"name\": \"settings\",\n      \"type\": \"WallPaperSettings\"\n    }],\n    \"type\": \"WallPaper\"\n  }, {\n    \"id\": \"1817860919\",\n    \"method\": \"account.saveWallPaper\",\n    \"params\": [{\"name\": \"wallpaper\", \"type\": \"InputWallPaper\"}, {\"name\": \"unsave\", \"type\": \"Bool\"}, {\n      \"name\": \"settings\",\n      \"type\": \"WallPaperSettings\"\n    }],\n    \"type\": \"Bool\"\n  }, {\n    \"id\": \"-18000023\",\n    \"method\": \"account.installWallPaper\",\n    \"params\": [{\"name\": \"wallpaper\", \"type\": \"InputWallPaper\"}, {\"name\": \"settings\", \"type\": \"WallPaperSettings\"}],\n    \"type\": \"Bool\"\n  }, {\"id\": \"-1153722364\", \"method\": \"account.resetWallPapers\", \"params\": [], \"type\": \"Bool\"}, {\n    \"id\": \"1457130303\",\n    \"method\": \"account.getAutoDownloadSettings\",\n    \"params\": [],\n    \"type\": \"account.AutoDownloadSettings\"\n  }, {\n    \"id\": \"1995661875\",\n    \"method\": \"account.saveAutoDownloadSettings\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"low\", \"type\": \"flags.0?true\"}, {\n      \"name\": \"high\",\n      \"type\": \"flags.1?true\"\n    }, {\"name\": \"settings\", \"type\": \"AutoDownloadSettings\"}],\n    \"type\": \"Bool\"\n  }, {\n    \"id\": \"899735650\",\n    \"method\": \"messages.getEmojiKeywords\",\n    \"params\": [{\"name\": \"lang_code\", \"type\": \"string\"}],\n    \"type\": \"EmojiKeywordsDifference\"\n  }, {\n    \"id\": \"352892591\",\n    \"method\": \"messages.getEmojiKeywordsDifference\",\n    \"params\": [{\"name\": \"lang_code\", \"type\": \"string\"}, {\"name\": \"from_version\", \"type\": \"int\"}],\n    \"type\": \"EmojiKeywordsDifference\"\n  }, {\n    \"id\": \"1318675378\",\n    \"method\": \"messages.getEmojiKeywordsLanguages\",\n    \"params\": [{\"name\": \"lang_codes\", \"type\": \"Vector<string>\"}],\n    \"type\": \"Vector<EmojiLanguage>\"\n  }, {\n    \"id\": \"-709817306\",\n    \"method\": \"messages.getEmojiURL\",\n    \"params\": [{\"name\": \"lang_code\", \"type\": \"string\"}],\n    \"type\": \"EmojiURL\"\n  }, {\n    \"id\": \"1749536939\",\n    \"method\": \"folders.editPeerFolders\",\n    \"params\": [{\"name\": \"folder_peers\", \"type\": \"Vector<InputFolderPeer>\"}],\n    \"type\": \"Updates\"\n  }, {\n    \"id\": \"472471681\",\n    \"method\": \"folders.deleteFolder\",\n    \"params\": [{\"name\": \"folder_id\", \"type\": \"int\"}],\n    \"type\": \"Updates\"\n  }, {\n    \"id\": \"1932455680\",\n    \"method\": \"messages.getSearchCounters\",\n    \"params\": [{\"name\": \"peer\", \"type\": \"InputPeer\"}, {\"name\": \"filters\", \"type\": \"Vector<MessagesFilter>\"}],\n    \"type\": \"Vector<messages.SearchCounter>\"\n  }, {\n    \"id\": \"-170208392\",\n    \"method\": \"channels.getGroupsForDiscussion\",\n    \"params\": [],\n    \"type\": \"messages.Chats\"\n  }, {\n    \"id\": \"1079520178\",\n    \"method\": \"channels.setDiscussionGroup\",\n    \"params\": [{\"name\": \"broadcast\", \"type\": \"InputChannel\"}, {\"name\": \"group\", \"type\": \"InputChannel\"}],\n    \"type\": \"Bool\"\n  }, {\n    \"id\": \"-482388461\",\n    \"method\": \"messages.requestUrlAuth\",\n    \"params\": [{\"name\": \"peer\", \"type\": \"InputPeer\"}, {\"name\": \"msg_id\", \"type\": \"int\"}, {\n      \"name\": \"button_id\",\n      \"type\": \"int\"\n    }],\n    \"type\": \"UrlAuthResult\"\n  }, {\n    \"id\": \"-148247912\",\n    \"method\": \"messages.acceptUrlAuth\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"write_allowed\", \"type\": \"flags.0?true\"}, {\n      \"name\": \"peer\",\n      \"type\": \"InputPeer\"\n    }, {\"name\": \"msg_id\", \"type\": \"int\"}, {\"name\": \"button_id\", \"type\": \"int\"}],\n    \"type\": \"UrlAuthResult\"\n  }, {\n    \"id\": \"1336717624\",\n    \"method\": \"messages.hidePeerSettingsBar\",\n    \"params\": [{\"name\": \"peer\", \"type\": \"InputPeer\"}],\n    \"type\": \"Bool\"\n  }, {\n    \"id\": \"-386636848\",\n    \"method\": \"contacts.addContact\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\n      \"name\": \"add_phone_privacy_exception\",\n      \"type\": \"flags.0?true\"\n    }, {\"name\": \"id\", \"type\": \"InputUser\"}, {\"name\": \"first_name\", \"type\": \"string\"}, {\n      \"name\": \"last_name\",\n      \"type\": \"string\"\n    }, {\"name\": \"phone\", \"type\": \"string\"}],\n    \"type\": \"Updates\"\n  }, {\n    \"id\": \"-130964977\",\n    \"method\": \"contacts.acceptContact\",\n    \"params\": [{\"name\": \"id\", \"type\": \"InputUser\"}],\n    \"type\": \"Updates\"\n  }, {\n    \"id\": \"-1892102881\",\n    \"method\": \"channels.editCreator\",\n    \"params\": [{\"name\": \"channel\", \"type\": \"InputChannel\"}, {\n      \"name\": \"user_id\",\n      \"type\": \"InputUser\"\n    }, {\"name\": \"password\", \"type\": \"InputCheckPasswordSRP\"}],\n    \"type\": \"Updates\"\n  }, {\n    \"id\": \"171270230\",\n    \"method\": \"contacts.getLocated\",\n    \"params\": [{\"name\": \"geo_point\", \"type\": \"InputGeoPoint\"}],\n    \"type\": \"Updates\"\n  }, {\n    \"id\": \"1491484525\",\n    \"method\": \"channels.editLocation\",\n    \"params\": [{\"name\": \"channel\", \"type\": \"InputChannel\"}, {\n      \"name\": \"geo_point\",\n      \"type\": \"InputGeoPoint\"\n    }, {\"name\": \"address\", \"type\": \"string\"}],\n    \"type\": \"Bool\"\n  }, {\n    \"id\": \"-304832784\",\n    \"method\": \"channels.toggleSlowMode\",\n    \"params\": [{\"name\": \"channel\", \"type\": \"InputChannel\"}, {\"name\": \"seconds\", \"type\": \"int\"}],\n    \"type\": \"Updates\"\n  }, {\n    \"id\": \"-490575781\",\n    \"method\": \"messages.getScheduledHistory\",\n    \"params\": [{\"name\": \"peer\", \"type\": \"InputPeer\"}, {\"name\": \"hash\", \"type\": \"int\"}],\n    \"type\": \"messages.Messages\"\n  }, {\n    \"id\": \"-1111817116\",\n    \"method\": \"messages.getScheduledMessages\",\n    \"params\": [{\"name\": \"peer\", \"type\": \"InputPeer\"}, {\"name\": \"id\", \"type\": \"Vector<int>\"}],\n    \"type\": \"messages.Messages\"\n  }, {\n    \"id\": \"-1120369398\",\n    \"method\": \"messages.sendScheduledMessages\",\n    \"params\": [{\"name\": \"peer\", \"type\": \"InputPeer\"}, {\"name\": \"id\", \"type\": \"Vector<int>\"}],\n    \"type\": \"Updates\"\n  }, {\n    \"id\": \"1504586518\",\n    \"method\": \"messages.deleteScheduledMessages\",\n    \"params\": [{\"name\": \"peer\", \"type\": \"InputPeer\"}, {\"name\": \"id\", \"type\": \"Vector<int>\"}],\n    \"type\": \"Updates\"\n  }, {\n    \"id\": \"473805619\",\n    \"method\": \"account.uploadTheme\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"file\", \"type\": \"InputFile\"}, {\n      \"name\": \"thumb\",\n      \"type\": \"flags.0?InputFile\"\n    }, {\"name\": \"file_name\", \"type\": \"string\"}, {\"name\": \"mime_type\", \"type\": \"string\"}],\n    \"type\": \"Document\"\n  }, {\n    \"id\": \"729808255\",\n    \"method\": \"account.createTheme\",\n    \"params\": [{\"name\": \"slug\", \"type\": \"string\"}, {\"name\": \"title\", \"type\": \"string\"}, {\n      \"name\": \"document\",\n      \"type\": \"InputDocument\"\n    }],\n    \"type\": \"Theme\"\n  }, {\n    \"id\": \"999203330\",\n    \"method\": \"account.updateTheme\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"format\", \"type\": \"string\"}, {\n      \"name\": \"theme\",\n      \"type\": \"InputTheme\"\n    }, {\"name\": \"slug\", \"type\": \"flags.0?string\"}, {\"name\": \"title\", \"type\": \"flags.1?string\"}, {\n      \"name\": \"document\",\n      \"type\": \"flags.2?InputDocument\"\n    }],\n    \"type\": \"Theme\"\n  }, {\n    \"id\": \"-229175188\",\n    \"method\": \"account.saveTheme\",\n    \"params\": [{\"name\": \"theme\", \"type\": \"InputTheme\"}, {\"name\": \"unsave\", \"type\": \"Bool\"}],\n    \"type\": \"Bool\"\n  }, {\n    \"id\": \"2061776695\",\n    \"method\": \"account.installTheme\",\n    \"params\": [{\"name\": \"flags\", \"type\": \"#\"}, {\"name\": \"dark\", \"type\": \"flags.0?true\"}, {\n      \"name\": \"format\",\n      \"type\": \"flags.1?string\"\n    }, {\"name\": \"theme\", \"type\": \"flags.1?InputTheme\"}],\n    \"type\": \"Bool\"\n  }, {\n    \"id\": \"-1919060949\",\n    \"method\": \"account.getTheme\",\n    \"params\": [{\"name\": \"format\", \"type\": \"string\"}, {\"name\": \"theme\", \"type\": \"InputTheme\"}, {\n      \"name\": \"document_id\",\n      \"type\": \"long\"\n    }],\n    \"type\": \"Theme\"\n  }, {\n    \"id\": \"676939512\",\n    \"method\": \"account.getThemes\",\n    \"params\": [{\"name\": \"format\", \"type\": \"string\"}, {\"name\": \"hash\", \"type\": \"int\"}],\n    \"type\": \"account.Themes\"\n  }]\n});\n\n\nconst layer74 = {\n  constructors: [\n    {\n      \"id\":\"2081952796\",\n      \"predicate\":\"account.password\",\n      \"params\": [\n        {\"name\":\"current_salt\",\"type\":\"bytes\"},\n        {\"name\":\"new_salt\",\"type\":\"bytes\"},\n        { \"name\":\"hint\",\"type\":\"string\"},\n        {\"name\":\"has_recovery\",\"type\":\"Bool\"},\n        {\"name\":\"email_unconfirmed_pattern\",\"type\":\"string\"}\n      ],\n      \"type\":\"account.Password\"\n    },\n\n    {\n      \"id\":\"773059779\",\n      \"predicate\":\"user\",\n      \"params\": [\n       {\"name\":\"flags\",\"type\":\"#\"},\n        {\"name\":\"self\",\"type\":\"flags.10?true\"},\n        {\"name\":\"contact\",\"type\":\"flags.11?true\"},\n        {\"name\":\"mutual_contact\",\"type\":\"flags.12?true\"},\n        {\"name\":\"deleted\",\"type\":\"flags.13?true\"},\n        {\"name\":\"bot\",\"type\":\"flags.14?true\"},\n        {\"name\":\"bot_chat_history\",\"type\":\"flags.15?true\"},\n        {\"name\":\"bot_nochats\",\"type\":\"flags.16?true\"},\n        {\"name\":\"verified\",\"type\":\"flags.17?true\"},\n        {\"name\":\"restricted\",\"type\":\"flags.18?true\"},\n        {\"name\":\"min\",\"type\":\"flags.20?true\"},\n        {\"name\":\"bot_inline_geo\",\"type\":\"flags.21?true\"},\n        {\"name\":\"id\",\"type\":\"int\"},\n        {\"name\":\"access_hash\",\"type\":\"flags.0?long\"},\n        {\"name\":\"first_name\",\"type\":\"flags.1?string\"},\n        {\"name\":\"last_name\",\"type\":\"flags.2?string\"},\n        {\"name\":\"username\",\"type\":\"flags.3?string\"},\n        {\"name\":\"phone\",\"type\":\"flags.4?string\"},\n        {\"name\":\"photo\",\"type\":\"flags.5?UserProfilePhoto\"},\n        {\"name\":\"status\",\"type\":\"flags.6?UserStatus\"},\n        {\"name\":\"bot_info_version\",\"type\":\"flags.14?int\"},\n        {\"name\":\"restriction_reason\",\"type\":\"flags.18?string\"},\n        {\"name\":\"bot_inline_placeholder\",\"type\":\"flags.19?string\"},\n        {\"name\":\"lang_code\",\"type\":\"flags.22?string\"}\n      ],\n      \"type\":\"User\"\n    },\n\n    {\n      \"id\":\"-715532088\",\n      \"predicate\":\"userProfilePhoto\",\n      \"params\":[{\"name\":\"photo_id\",\"type\":\"long\"},{\"name\":\"photo_small\",\"type\":\"FileLocation\"},{\"name\":\"photo_big\",\"type\":\"FileLocation\"}],\n      \"type\":\"UserProfilePhoto\"\n    },\n    {\n      \"id\":\"1406570614\",\n      \"predicate\":\"fileLocation\",\n      \"params\":[{\"name\":\"dc_id\",\"type\":\"int\"},{\"name\":\"volume_id\",\"type\":\"long\"},{\"name\":\"local_id\",\"type\":\"int\"},{\"name\":\"secret\",\"type\":\"long\"}],\n      \"type\":\"FileLocation\"\n    }\n  ],\n  methods: [\n    {\"id\":\"1418342645\",\"method\":\"account.getPassword\",\"params\":[],\"type\":\"account.Password\"},\n    {\"id\":\"174260510\",\"method\":\"auth.checkPassword\",\"params\":[{\"name\":\"password_hash\",\"type\":\"bytes\"}],\"type\":\"auth.Authorization\"},\n  ]\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/api/schema-api.js\n");

/***/ }),

/***/ "./src/api/schema-mtp.js":
/*!*******************************!*\
  !*** ./src/api/schema-mtp.js ***!
  \*******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  \"constructors\":\n    [\n      {\n        \"id\": \"481674261\",\n        \"predicate\": \"vector\",\n        \"params\": [],\n        \"type\": \"Vector t\"\n      },\n      {\n        \"id\": \"85337187\",\n        \"predicate\": \"resPQ\",\n        \"params\": [\n          {\"name\": \"nonce\", \"type\": \"int128\"},\n          {\"name\": \"server_nonce\", \"type\": \"int128\"},\n          {\"name\": \"pq\", \"type\": \"bytes\"},\n          {\"name\": \"server_public_key_fingerprints\", \"type\": \"Vector<long>\"}\n        ],\n        \"type\": \"ResPQ\"\n      },\n      {\n        \"id\": \"-2083955988\",\n        \"predicate\": \"p_q_inner_data\",\n        \"params\": [{\"name\": \"pq\", \"type\": \"bytes\"}, {\"name\": \"p\", \"type\": \"bytes\"}, {\n          \"name\": \"q\",\n          \"type\": \"bytes\"\n        }, {\"name\": \"nonce\", \"type\": \"int128\"}, {\"name\": \"server_nonce\", \"type\": \"int128\"}, {\n          \"name\": \"new_nonce\",\n          \"type\": \"int256\"\n        }],\n        \"type\": \"P_Q_inner_data\"\n      }, {\n      \"id\": \"1013613780\",\n      \"predicate\": \"p_q_inner_data_temp\",\n      \"params\": [{\"name\": \"pq\", \"type\": \"bytes\"}, {\"name\": \"p\", \"type\": \"bytes\"}, {\n        \"name\": \"q\",\n        \"type\": \"bytes\"\n      }, {\"name\": \"nonce\", \"type\": \"int128\"}, {\"name\": \"server_nonce\", \"type\": \"int128\"}, {\n        \"name\": \"new_nonce\",\n        \"type\": \"int256\"\n      }, {\"name\": \"expires_in\", \"type\": \"int\"}],\n      \"type\": \"P_Q_inner_data\"\n    }, {\n      \"id\": \"2043348061\",\n      \"predicate\": \"server_DH_params_fail\",\n      \"params\": [{\"name\": \"nonce\", \"type\": \"int128\"}, {\n        \"name\": \"server_nonce\",\n        \"type\": \"int128\"\n      }, {\"name\": \"new_nonce_hash\", \"type\": \"int128\"}],\n      \"type\": \"Server_DH_Params\"\n    }, {\n      \"id\": \"-790100132\",\n      \"predicate\": \"server_DH_params_ok\",\n      \"params\": [{\"name\": \"nonce\", \"type\": \"int128\"}, {\n        \"name\": \"server_nonce\",\n        \"type\": \"int128\"\n      }, {\"name\": \"encrypted_answer\", \"type\": \"bytes\"}],\n      \"type\": \"Server_DH_Params\"\n    }, {\n      \"id\": \"-1249309254\",\n      \"predicate\": \"server_DH_inner_data\",\n      \"params\": [{\"name\": \"nonce\", \"type\": \"int128\"}, {\"name\": \"server_nonce\", \"type\": \"int128\"}, {\n        \"name\": \"g\",\n        \"type\": \"int\"\n      }, {\"name\": \"dh_prime\", \"type\": \"bytes\"}, {\"name\": \"g_a\", \"type\": \"bytes\"}, {\"name\": \"server_time\", \"type\": \"int\"}],\n      \"type\": \"Server_DH_inner_data\"\n    }, {\n      \"id\": \"1715713620\",\n      \"predicate\": \"client_DH_inner_data\",\n      \"params\": [{\"name\": \"nonce\", \"type\": \"int128\"}, {\"name\": \"server_nonce\", \"type\": \"int128\"}, {\n        \"name\": \"retry_id\",\n        \"type\": \"long\"\n      }, {\"name\": \"g_b\", \"type\": \"bytes\"}],\n      \"type\": \"Client_DH_Inner_Data\"\n    }, {\n      \"id\": \"1003222836\",\n      \"predicate\": \"dh_gen_ok\",\n      \"params\": [{\"name\": \"nonce\", \"type\": \"int128\"}, {\n        \"name\": \"server_nonce\",\n        \"type\": \"int128\"\n      }, {\"name\": \"new_nonce_hash1\", \"type\": \"int128\"}],\n      \"type\": \"Set_client_DH_params_answer\"\n    }, {\n      \"id\": \"1188831161\",\n      \"predicate\": \"dh_gen_retry\",\n      \"params\": [{\"name\": \"nonce\", \"type\": \"int128\"}, {\n        \"name\": \"server_nonce\",\n        \"type\": \"int128\"\n      }, {\"name\": \"new_nonce_hash2\", \"type\": \"int128\"}],\n      \"type\": \"Set_client_DH_params_answer\"\n    }, {\n      \"id\": \"-1499615742\",\n      \"predicate\": \"dh_gen_fail\",\n      \"params\": [{\"name\": \"nonce\", \"type\": \"int128\"}, {\n        \"name\": \"server_nonce\",\n        \"type\": \"int128\"\n      }, {\"name\": \"new_nonce_hash3\", \"type\": \"int128\"}],\n      \"type\": \"Set_client_DH_params_answer\"\n    }, {\n      \"id\": \"-212046591\",\n      \"predicate\": \"rpc_result\",\n      \"params\": [{\"name\": \"req_msg_id\", \"type\": \"long\"}, {\"name\": \"result\", \"type\": \"Object\"}],\n      \"type\": \"RpcResult\"\n    }, {\n      \"id\": \"558156313\",\n      \"predicate\": \"rpc_error\",\n      \"params\": [{\"name\": \"error_code\", \"type\": \"int\"}, {\"name\": \"error_message\", \"type\": \"string\"}],\n      \"type\": \"RpcError\"\n    }, {\n      \"id\": \"1579864942\",\n      \"predicate\": \"rpc_answer_unknown\",\n      \"params\": [],\n      \"type\": \"RpcDropAnswer\"\n    }, {\n      \"id\": \"-847714938\",\n      \"predicate\": \"rpc_answer_dropped_running\",\n      \"params\": [],\n      \"type\": \"RpcDropAnswer\"\n    }, {\n      \"id\": \"-1539647305\",\n      \"predicate\": \"rpc_answer_dropped\",\n      \"params\": [{\"name\": \"msg_id\", \"type\": \"long\"}, {\"name\": \"seq_no\", \"type\": \"int\"}, {\"name\": \"bytes\", \"type\": \"int\"}],\n      \"type\": \"RpcDropAnswer\"\n    }, {\n      \"id\": \"155834844\",\n      \"predicate\": \"future_salt\",\n      \"params\": [{\"name\": \"valid_since\", \"type\": \"int\"}, {\"name\": \"valid_until\", \"type\": \"int\"}, {\n        \"name\": \"salt\",\n        \"type\": \"long\"\n      }],\n      \"type\": \"FutureSalt\"\n    }, {\n      \"id\": \"-1370486635\",\n      \"predicate\": \"future_salts\",\n      \"params\": [{\"name\": \"req_msg_id\", \"type\": \"long\"}, {\"name\": \"now\", \"type\": \"int\"}, {\n        \"name\": \"salts\",\n        \"type\": \"vector<future_salt>\"\n      }],\n      \"type\": \"FutureSalts\"\n    }, {\n      \"id\": \"880243653\",\n      \"predicate\": \"pong\",\n      \"params\": [{\"name\": \"msg_id\", \"type\": \"long\"}, {\"name\": \"ping_id\", \"type\": \"long\"}],\n      \"type\": \"Pong\"\n    }, {\n      \"id\": \"-501201412\",\n      \"predicate\": \"destroy_session_ok\",\n      \"params\": [{\"name\": \"session_id\", \"type\": \"long\"}],\n      \"type\": \"DestroySessionRes\"\n    }, {\n      \"id\": \"1658015945\",\n      \"predicate\": \"destroy_session_none\",\n      \"params\": [{\"name\": \"session_id\", \"type\": \"long\"}],\n      \"type\": \"DestroySessionRes\"\n    }, {\n      \"id\": \"-1631450872\",\n      \"predicate\": \"new_session_created\",\n      \"params\": [{\"name\": \"first_msg_id\", \"type\": \"long\"}, {\"name\": \"unique_id\", \"type\": \"long\"}, {\n        \"name\": \"server_salt\",\n        \"type\": \"long\"\n      }],\n      \"type\": \"NewSession\"\n    }, {\n      \"id\": \"1945237724\",\n      \"predicate\": \"msg_container\",\n      \"params\": [{\"name\": \"messages\", \"type\": \"vector<%Message>\"}],\n      \"type\": \"MessageContainer\"\n    }, {\n      \"id\": \"1538843921\",\n      \"predicate\": \"message\",\n      \"params\": [{\"name\": \"msg_id\", \"type\": \"long\"}, {\"name\": \"seqno\", \"type\": \"int\"}, {\n        \"name\": \"bytes\",\n        \"type\": \"int\"\n      }, {\"name\": \"body\", \"type\": \"Object\"}],\n      \"type\": \"Message\"\n    }, {\n      \"id\": \"-530561358\",\n      \"predicate\": \"msg_copy\",\n      \"params\": [{\"name\": \"orig_message\", \"type\": \"Message\"}],\n      \"type\": \"MessageCopy\"\n    }, {\n      \"id\": \"812830625\",\n      \"predicate\": \"gzip_packed\",\n      \"params\": [{\"name\": \"packed_data\", \"type\": \"bytes\"}],\n      \"type\": \"Object\"\n    }, {\n      \"id\": \"1658238041\",\n      \"predicate\": \"msgs_ack\",\n      \"params\": [{\"name\": \"msg_ids\", \"type\": \"Vector<long>\"}],\n      \"type\": \"MsgsAck\"\n    }, {\n      \"id\": \"-1477445615\",\n      \"predicate\": \"bad_msg_notification\",\n      \"params\": [{\"name\": \"bad_msg_id\", \"type\": \"long\"}, {\"name\": \"bad_msg_seqno\", \"type\": \"int\"}, {\n        \"name\": \"error_code\",\n        \"type\": \"int\"\n      }],\n      \"type\": \"BadMsgNotification\"\n    }, {\n      \"id\": \"-307542917\",\n      \"predicate\": \"bad_server_salt\",\n      \"params\": [{\"name\": \"bad_msg_id\", \"type\": \"long\"}, {\"name\": \"bad_msg_seqno\", \"type\": \"int\"}, {\n        \"name\": \"error_code\",\n        \"type\": \"int\"\n      }, {\"name\": \"new_server_salt\", \"type\": \"long\"}],\n      \"type\": \"BadMsgNotification\"\n    }, {\n      \"id\": \"2105940488\",\n      \"predicate\": \"msg_resend_req\",\n      \"params\": [{\"name\": \"msg_ids\", \"type\": \"Vector<long>\"}],\n      \"type\": \"MsgResendReq\"\n    }, {\n      \"id\": \"-630588590\",\n      \"predicate\": \"msgs_state_req\",\n      \"params\": [{\"name\": \"msg_ids\", \"type\": \"Vector<long>\"}],\n      \"type\": \"MsgsStateReq\"\n    }, {\n      \"id\": \"81704317\",\n      \"predicate\": \"msgs_state_info\",\n      \"params\": [{\"name\": \"req_msg_id\", \"type\": \"long\"}, {\"name\": \"info\", \"type\": \"bytes\"}],\n      \"type\": \"MsgsStateInfo\"\n    }, {\n      \"id\": \"-1933520591\",\n      \"predicate\": \"msgs_all_info\",\n      \"params\": [{\"name\": \"msg_ids\", \"type\": \"Vector<long>\"}, {\"name\": \"info\", \"type\": \"bytes\"}],\n      \"type\": \"MsgsAllInfo\"\n    }, {\n      \"id\": \"661470918\",\n      \"predicate\": \"msg_detailed_info\",\n      \"params\": [{\"name\": \"msg_id\", \"type\": \"long\"}, {\"name\": \"answer_msg_id\", \"type\": \"long\"}, {\n        \"name\": \"bytes\",\n        \"type\": \"int\"\n      }, {\"name\": \"status\", \"type\": \"int\"}],\n      \"type\": \"MsgDetailedInfo\"\n    }, {\n      \"id\": \"-2137147681\",\n      \"predicate\": \"msg_new_detailed_info\",\n      \"params\": [{\"name\": \"answer_msg_id\", \"type\": \"long\"}, {\"name\": \"bytes\", \"type\": \"int\"}, {\n        \"name\": \"status\",\n        \"type\": \"int\"\n      }],\n      \"type\": \"MsgDetailedInfo\"\n    }, {\n      \"id\": \"1973679973\",\n      \"predicate\": \"bind_auth_key_inner\",\n      \"params\": [{\"name\": \"nonce\", \"type\": \"long\"}, {\n        \"name\": \"temp_auth_key_id\",\n        \"type\": \"long\"\n      }, {\"name\": \"perm_auth_key_id\", \"type\": \"long\"}, {\"name\": \"temp_session_id\", \"type\": \"long\"}, {\n        \"name\": \"expires_at\",\n        \"type\": \"int\"\n      }],\n      \"type\": \"BindAuthKeyInner\"\n    }],\n  \"methods\":\n    [\n      {\n        \"id\": \"1615239032\",\n        \"method\": \"req_pq\",\n        \"params\": [{\"name\": \"nonce\", \"type\": \"int128\"}],\n        \"type\": \"ResPQ\"\n      },\n      {\n        \"id\": \"3195965169\",\n        \"method\": \"req_pq_multi\",\n        \"params\": [{\"name\": \"nonce\", \"type\": \"int128\"}],\n        \"type\": \"ResPQ\"\n      },\n      {\n        \"id\": \"-686627650\",\n        \"method\": \"req_DH_params\",\n        \"params\": [{\"name\": \"nonce\", \"type\": \"int128\"}, {\"name\": \"server_nonce\", \"type\": \"int128\"}, {\n          \"name\": \"p\",\n          \"type\": \"bytes\"\n        }, {\"name\": \"q\", \"type\": \"bytes\"}, {\"name\": \"public_key_fingerprint\", \"type\": \"long\"}, {\n          \"name\": \"encrypted_data\",\n          \"type\": \"bytes\"\n        }],\n        \"type\": \"Server_DH_Params\"\n      },\n      {\n        \"id\": \"-184262881\",\n        \"method\": \"set_client_DH_params\",\n        \"params\": [{\"name\": \"nonce\", \"type\": \"int128\"}, {\n          \"name\": \"server_nonce\",\n          \"type\": \"int128\"\n        }, {\"name\": \"encrypted_data\", \"type\": \"bytes\"}],\n        \"type\": \"Set_client_DH_params_answer\"\n      },\n      {\n        \"id\": \"1491380032\",\n        \"method\": \"rpc_drop_answer\",\n        \"params\": [{\"name\": \"req_msg_id\", \"type\": \"long\"}],\n        \"type\": \"RpcDropAnswer\"\n      },\n      {\n        \"id\": \"-1188971260\",\n        \"method\": \"get_future_salts\",\n        \"params\": [{\"name\": \"num\", \"type\": \"int\"}],\n        \"type\": \"FutureSalts\"\n      }, {\n      \"id\": \"2059302892\",\n      \"method\": \"ping\",\n      \"params\": [{\"name\": \"ping_id\", \"type\": \"long\"}],\n      \"type\": \"Pong\"\n    }, {\n      \"id\": \"-213746804\",\n      \"method\": \"ping_delay_disconnect\",\n      \"params\": [{\"name\": \"ping_id\", \"type\": \"long\"}, {\"name\": \"disconnect_delay\", \"type\": \"int\"}],\n      \"type\": \"Pong\"\n    }, {\n      \"id\": \"-414113498\",\n      \"method\": \"destroy_session\",\n      \"params\": [{\"name\": \"session_id\", \"type\": \"long\"}],\n      \"type\": \"DestroySessionRes\"\n    }, {\n      \"id\": \"-1835453025\",\n      \"method\": \"http_wait\",\n      \"params\": [\n        {\"name\": \"max_delay\", \"type\": \"int\"},\n        {\"name\": \"wait_after\", \"type\": \"int\"},\n        {\n          \"name\": \"max_wait\",\n          \"type\": \"int\"\n        }\n      ],\n      \"type\": \"HttpWait\"\n    },\n      {\n        \"id\": \"1658238041\",\n        \"method\": \"msgs_ack\",\n        \"params\": [\n          {\"name\": \"msg_ids\", \"type\": \"Vector<long>\"},\n        ],\n        \"type\": \"MsgsAck\"\n      }]\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/api/schema-mtp.js\n");

/***/ }),

/***/ "./src/api/time-manager.js":
/*!*********************************!*\
  !*** ./src/api/time-manager.js ***!
  \*********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return TimeManager; });\nclass TimeManager {\n  constructor() {\n    this.timeOffset = 0\n  }\n\n  static now(seconds) {\n    var t = +new Date() + (window.tsOffset || 0)\n    return seconds ? Math.floor(t / 1000) : t\n  }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvYXBpL3RpbWUtbWFuYWdlci5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL1RlbGVncmFtanMvLi9zcmMvYXBpL3RpbWUtbWFuYWdlci5qcz83ZDYyIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGNsYXNzIFRpbWVNYW5hZ2VyIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy50aW1lT2Zmc2V0ID0gMFxuICB9XG5cbiAgc3RhdGljIG5vdyhzZWNvbmRzKSB7XG4gICAgdmFyIHQgPSArbmV3IERhdGUoKSArICh3aW5kb3cudHNPZmZzZXQgfHwgMClcbiAgICByZXR1cm4gc2Vjb25kcyA/IE1hdGguZmxvb3IodCAvIDEwMDApIDogdFxuICB9XG59XG5cbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/api/time-manager.js\n");

/***/ }),

/***/ "./src/api/tl-deserializer-mtp.js":
/*!****************************************!*\
  !*** ./src/api/tl-deserializer-mtp.js ***!
  \****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return TlMtpDeserializer; });\n/* harmony import */ var _schema_mtp__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./schema-mtp */ \"./src/api/schema-mtp.js\");\n/* harmony import */ var _tl_deserializer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tl-deserializer */ \"./src/api/tl-deserializer.js\");\n\n\n\nclass TlMtpDeserializer extends _tl_deserializer__WEBPACK_IMPORTED_MODULE_1__[\"default\"] {\n  constructor(props) {\n    super(props);\n    this.mtproto = true;\n    this.schema = _schema_mtp__WEBPACK_IMPORTED_MODULE_0__[\"default\"];\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvYXBpL3RsLWRlc2VyaWFsaXplci1tdHAuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9UZWxlZ3JhbWpzLy4vc3JjL2FwaS90bC1kZXNlcmlhbGl6ZXItbXRwLmpzPzc2ZWYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IE1UUFNjaGVtYSBmcm9tICcuL3NjaGVtYS1tdHAnO1xuaW1wb3J0IFRMRGVzZXJpYWxpemVyIGZyb20gXCIuL3RsLWRlc2VyaWFsaXplclwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUbE10cERlc2VyaWFsaXplciBleHRlbmRzIFRMRGVzZXJpYWxpemVyIHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5tdHByb3RvID0gdHJ1ZTtcbiAgICB0aGlzLnNjaGVtYSA9IE1UUFNjaGVtYTtcbiAgfVxufVxuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/api/tl-deserializer-mtp.js\n");

/***/ }),

/***/ "./src/api/tl-deserializer.js":
/*!************************************!*\
  !*** ./src/api/tl-deserializer.js ***!
  \************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return TLDeserializer; });\n/* harmony import */ var _utils_numbers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../utils/numbers */ \"./src/utils/numbers.js\");\n/* harmony import */ var _schema_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./schema-api */ \"./src/api/schema-api.js\");\n/* harmony import */ var _schema_mtp__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./schema-mtp */ \"./src/api/schema-mtp.js\");\n/* harmony import */ var pako__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! pako */ \"./node_modules/pako/index.js\");\n/* harmony import */ var pako__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(pako__WEBPACK_IMPORTED_MODULE_3__);\n\n\n\n\n\n\n\nconst APISchema = _schema_api__WEBPACK_IMPORTED_MODULE_1__[\"default\"]\nconst LAYER_74 = _schema_api__WEBPACK_IMPORTED_MODULE_1__[\"layer74\"]\n\n/**\n * @abstract\n */\nclass TLDeserializer {\n  constructor(buffer, options = {}){\n    this.schema = undefined;\n\n    this.offset = 0 // in bytes\n    this.override = options.override || {}\n\n    this.buffer = buffer\n    this.intView = new Uint32Array(this.buffer)\n    this.byteView = new Uint8Array(this.buffer)\n  }\n\n  getOffset() {\n    return this.offset;\n  }\n\n  fetchLong(field){\n    var iLow = this.readInt((field || '') + ':long[low]')\n    var iHigh = this.readInt((field || '') + ':long[high]')\n\n    // var longDec = numbers.bigint(iHigh).shiftLeft(32).add(numbers.bigint(iLow)).toString()\n\n    return  new Int32Array([iLow, iHigh]).buffer;\n  }\n\n  fetchInt(field){\n    return this.readInt((field || '') + ':int')\n  }\n\n  readInt (field) {\n    if (this.offset >= this.intView.length * 4) {\n      console.trace()\n      throw new Error('Nothing to fetch: ' + field)\n    }\n\n    var i = this.intView[this.offset / 4]\n\n    // console.log('<<<', i.toString(16), i, field)\n\n    this.offset += 4\n\n    return i\n  }\n\n  fetchObject(type, field) {\n    // console.log('fetchObject', type, field);\n\n    // if (!field){\n      // console.trace('no field')\n    //\n    // }\n\n\n    switch (type) {\n      case '#':\n      case 'int':\n        return this.fetchInt(field)\n      case 'long':\n        return this.fetchLong(field)\n      case 'int128':\n        return this.fetchIntBytes(128, false, field)\n      case 'int256':\n        return this.fetchIntBytes(256, false, field)\n      case 'int512':\n        return this.fetchIntBytes(512, false, field)\n      case 'string':\n        return this.fetchString(field)\n      case 'bytes':\n        return this.fetchBytes(field)\n      case 'double':\n        return this.fetchDouble(field)\n      case 'Bool':\n        return this.fetchBool(field)\n      case 'true':\n        return true\n    }\n\n    field = field || type || 'Object'\n\n    if (type.substr(0, 6) == 'Vector' || type.substr(0, 6) == 'vector') {\n      if (type.charAt(0) == 'V') {\n        var constructor = this.readInt(field + '[id]')\n        var constructorCmp = _utils_numbers__WEBPACK_IMPORTED_MODULE_0__[\"uintToInt\"](constructor)\n\n        if (constructorCmp == 0x3072cfa1) { // Gzip packed\n          var compressed = this.fetchBytes(field + '[packed_string]')\n          var uncompressed = gzipUncompress(compressed)\n          var buffer = _utils_numbers__WEBPACK_IMPORTED_MODULE_0__[\"bytesToArrayBuffer\"](uncompressed)\n          var newDeserializer = new TLDeserializer(buffer)\n          newDeserializer.schema = APISchema;\n\n            return newDeserializer.fetchObject(type, field)\n        }\n        if (constructorCmp != 0x1cb5c415) {\n          throw new Error('Invalid vector constructor ' + constructor)\n        }\n      }\n      var len = this.readInt(field + '[count]')\n      var result = []\n      if (len > 0) {\n        var itemType = type.substr(7, type.length - 8); // for \"Vector<itemType>\"\n        for (var i = 0; i < len; i++) {\n            result.push(this.fetchObject(itemType, field + '[' + i + ']'))\n        }\n      }\n\n      return result\n    }\n\n    var predicate = false\n    var constructorData = false\n\n    if (type.charAt(0) == '%') {\n      var checkType = type.substr(1)\n      for (var i = 0; i < this.schema.constructors.length; i++) {\n        if (this.schema.constructors[i].type == checkType) {\n          constructorData = this.schema.constructors[i]\n          break\n        }\n      }\n      if (!constructorData) {\n        throw new Error('Constructor not found for type: ' + type)\n      }\n    }\n    else if (type.charAt(0) >= 97 && type.charAt(0) <= 122) {\n      for (var i = 0; i < this.schema.constructors.length; i++) {\n        if (this.schema.constructors[i].predicate == type) {\n          constructorData = this.schema.constructors[i]\n          break\n        }\n      }\n      if (!constructorData) {\n        throw new Error('Constructor not found for predicate: ' + type)\n      }\n    }else {\n      var constructor = this.readInt(field + '[id]')\n      var constructorCmp = _utils_numbers__WEBPACK_IMPORTED_MODULE_0__[\"uintToInt\"](constructor)\n\n      if (constructorCmp == 0x3072cfa1) { // Gzip packed\n        // console.warn('deserialization of package is not tested');\n        var compressed = this.fetchBytes(field + '[packed_string]')\n        var uncompressed = gzipUncompress(compressed)\n        var buffer = _utils_numbers__WEBPACK_IMPORTED_MODULE_0__[\"bytesToArrayBuffer\"](uncompressed)\n        var newDeserializer = new TLDeserializer(buffer)\n        newDeserializer.schema = APISchema;\n\n        return newDeserializer.fetchObject(type, field)\n      }\n\n      var index = this.schema.constructorsIndex\n      if (!index) {\n        this.schema.constructorsIndex = index = {}\n        for (var i = 0; i < this.schema.constructors.length; i++) {\n          index[this.schema.constructors[i].id] = i\n        }\n      }\n      var i = index[constructorCmp]\n      if (typeof i === 'number') {\n        constructorData = this.schema.constructors[i]\n      }\n\n      var fallback = false\n\n      // function tryOtherScheme(constructorId, isMtproto, layer){\n      //   var schemaFallback = isMtproto ? APISchema : MTPSchema;\n      //\n      //   if (layer){\n      //     schemaFallback = LAYER_74;\n      //     console.warn('🧐 Switched to layer 74 schema. Looking for', constructorId , schemaFallback.constructors)\n      //   }\n      //\n      //   for (i = 0; i < schemaFallback.constructors.length; i++) {\n      //     if (schemaFallback.constructors[i].id == constructorId) {\n      //       constructorData = schemaFallback.constructors[i]\n      //       console.log('Found 😊', constructorData);\n      //\n      //       return constructorData;\n      //     }\n      //   }\n      // }\n\n      function findInOtherScheme(constructorId, schema){\n        return schema.constructors.find(c => c.id == constructorId);\n      }\n\n\n      if (!constructorData) {\n        [APISchema, _schema_mtp__WEBPACK_IMPORTED_MODULE_2__[\"default\"], LAYER_74].forEach(schema => {\n          if (constructorData){\n            return;\n          }\n\n          constructorData = findInOtherScheme(constructorCmp, schema)\n\n          // if (constructorData){\n            // console.log('Found 😊 in fallback schema', constructorData);\n          // }\n        })\n\n        // constructorData = tryOtherScheme(constructorCmp, this.mtproto);\n      }\n\n      // if (!constructorData) {\n      //   constructorData = tryOtherScheme(constructorCmp, this.mtproto, 74);\n      // }\n\n\n      if (!constructorData) {\n        throw new Error(`Constructor not found: ${constructor} | type ${type} | field ${field} | ` + this.fetchInt() + ' ' + this.fetchInt())\n      }\n    }\n\n    predicate = constructorData.predicate\n\n    var result = {'_': predicate}\n    var overrideKey = (this.mtproto ? 'mt_' : '') + predicate\n    var self = this\n\n    if (this.override[overrideKey]) {\n      this.override[overrideKey].apply(this, [result, field + '[' + predicate + ']'])\n    } else {\n      var i, param\n      var type, isCond\n      var condType, fieldBit\n      var value\n      var len = constructorData.params.length\n      for (i = 0; i < len; i++) {\n        param = constructorData.params[i]\n        type = param.type\n        if (type == '#' && result.pFlags === undefined) {\n          result.pFlags = {}\n        }\n        if (isCond = (type.indexOf('?') !== -1)) {\n          condType = type.split('?')\n          fieldBit = condType[0].split('.')\n          if (!(result[fieldBit[0]] & (1 << fieldBit[1]))) {\n            continue\n          }\n          type = condType[1]\n        }\n\n        value = self.fetchObject(type, field + '[' + predicate + '][' + param.name + ']')\n\n        if (isCond && type === 'true') {\n          result.pFlags[param.name] = value\n        } else {\n          result[param.name] = value\n        }\n      }\n    }\n\n    if (fallback) {\n      // this.mtproto = true\n    }\n\n    return result\n  }\n\n  fetchIntBytes(bits, typed, field) {\n    if (bits % 32) {\n      throw new Error('Invalid bits: ' + bits)\n    }\n\n    var len = bits / 8\n    if (typed) {\n      var result = this.byteView.subarray(this.offset, this.offset + len)\n      this.offset += len\n      return result\n    }\n\n    var bytes = []\n    for (var i = 0; i < len; i++) {\n      bytes.push(this.byteView[this.offset++])\n    }\n\n    // console.log('<<<', numbers.bytesToHex(bytes), (field || '') + ':int' + bits)\n\n    return bytes\n  }\n\n  fetchBytes(field) {\n    var len = this.byteView[this.offset++]\n\n    if (len == 254) {\n      len = this.byteView[this.offset++] |\n        (this.byteView[this.offset++] << 8) |\n        (this.byteView[this.offset++] << 16)\n    }\n\n    var bytes = this.byteView.subarray(this.offset, this.offset + len)\n    this.offset += len\n\n    // Padding\n    while (this.offset % 4) {\n      this.offset++\n    }\n\n    // console.log('<<<', numbers.bytesToHex(bytes), (field || '') + ':bytes')\n\n    return bytes\n  }\n\n  fetchDouble(field) {\n    var buffer = new ArrayBuffer(8)\n    var intView = new Int32Array(buffer)\n    var doubleView = new Float64Array(buffer)\n\n    intView[0] = this.readInt((field || '') + ':double[low]'),\n      intView[1] = this.readInt((field || '') + ':double[high]')\n\n    return doubleView[0]\n  }\n\n  fetchBool(field) {\n    var i = this.readInt((field || '') + ':bool')\n    if (i == 0x997275b5) {\n      return true\n    } else if (i == 0xbc799737) {\n      return false\n    }\n\n    this.offset -= 4\n    return this.fetchObject('Object', field)\n  }\n\n  fetchRawBytes(len, typed, field) {\n    if (len === false) {\n      len = this.readInt((field || '') + '_length')\n      if (len > this.byteView.byteLength) {\n        throw new Error('Invalid raw bytes length: ' + len + ', buffer len: ' + this.byteView.byteLength)\n      }\n    }\n\n    if (typed) {\n      var bytes = new Uint8Array(len)\n      bytes.set(this.byteView.subarray(this.offset, this.offset + len))\n      this.offset += len\n      return bytes\n    }\n\n    var bytes = []\n    for (var i = 0; i < len; i++) {\n      bytes.push(this.byteView[this.offset++])\n    }\n\n    // console.log('<<<', numbers.bytesToHex(bytes), (field || ''))\n\n    return bytes\n  }\n\n  fetchString (field) {\n    var len = this.byteView[this.offset++]\n\n    if (len == 254) {\n      var len = this.byteView[this.offset++] |\n        (this.byteView[this.offset++] << 8) |\n        (this.byteView[this.offset++] << 16)\n    }\n\n    var sUTF8 = ''\n    for (var i = 0; i < len; i++) {\n      sUTF8 += String.fromCharCode(this.byteView[this.offset++])\n    }\n\n    // Padding\n    while (this.offset % 4) {\n      this.offset++\n    }\n\n    try {\n      var s = decodeURIComponent(escape(sUTF8))\n    } catch (e) {\n      var s = sUTF8\n    }\n\n    // console.log('<<<', s, (field || '') + ':string')\n\n    return s\n  }\n\n\n\n}\n\n\n\nfunction gzipUncompress (bytes) {\n  // console.log('Gzip uncompress start')\n  var result = pako__WEBPACK_IMPORTED_MODULE_3___default.a.inflate(bytes)\n  // var result = (new Zlib.Gunzip(bytes)).decompress()\n  // console.log('Gzip uncompress finish')\n  return result\n}\n\n/**\n * Zlib to Unzip packages\n */\n//\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/api/tl-deserializer.js\n");

/***/ }),

/***/ "./src/api/tl-serializer-api.js":
/*!**************************************!*\
  !*** ./src/api/tl-serializer-api.js ***!
  \**************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return TlApiSerializer; });\n/* harmony import */ var _tl_serializer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tl-serializer */ \"./src/api/tl-serializer.js\");\n/* harmony import */ var _schema_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./schema-api */ \"./src/api/schema-api.js\");\n\n\n\nclass TlApiSerializer extends _tl_serializer__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n  constructor(max, layer) {\n    super(max, layer);\n    this.schema = _schema_api__WEBPACK_IMPORTED_MODULE_1__[\"default\"];\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvYXBpL3RsLXNlcmlhbGl6ZXItYXBpLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vVGVsZWdyYW1qcy8uL3NyYy9hcGkvdGwtc2VyaWFsaXplci1hcGkuanM/MzhkZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgVExTZXJpYWxpemVyIGZyb20gXCIuL3RsLXNlcmlhbGl6ZXJcIjtcbmltcG9ydCBBUElTY2hlbWEgZnJvbSAnLi9zY2hlbWEtYXBpJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGxBcGlTZXJpYWxpemVyIGV4dGVuZHMgVExTZXJpYWxpemVyIHtcbiAgY29uc3RydWN0b3IobWF4LCBsYXllcikge1xuICAgIHN1cGVyKG1heCwgbGF5ZXIpO1xuICAgIHRoaXMuc2NoZW1hID0gQVBJU2NoZW1hO1xuICB9XG59XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/api/tl-serializer-api.js\n");

/***/ }),

/***/ "./src/api/tl-serializer-mtp.js":
/*!**************************************!*\
  !*** ./src/api/tl-serializer-mtp.js ***!
  \**************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return TLMtpSerializer; });\n/* harmony import */ var _tl_serializer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tl-serializer */ \"./src/api/tl-serializer.js\");\n/* harmony import */ var _schema_mtp__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./schema-mtp */ \"./src/api/schema-mtp.js\");\n\n\n\nclass TLMtpSerializer extends _tl_serializer__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n  constructor(props) {\n    super(props);\n    this.mtproto = true;\n    this.schema = _schema_mtp__WEBPACK_IMPORTED_MODULE_1__[\"default\"];\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvYXBpL3RsLXNlcmlhbGl6ZXItbXRwLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vVGVsZWdyYW1qcy8uL3NyYy9hcGkvdGwtc2VyaWFsaXplci1tdHAuanM/MDM5OSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgVExTZXJpYWxpemVyIGZyb20gXCIuL3RsLXNlcmlhbGl6ZXJcIjtcbmltcG9ydCBNVFBTY2hlbWEgZnJvbSAnLi9zY2hlbWEtbXRwJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVExNdHBTZXJpYWxpemVyIGV4dGVuZHMgVExTZXJpYWxpemVyIHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5tdHByb3RvID0gdHJ1ZTtcbiAgICB0aGlzLnNjaGVtYSA9IE1UUFNjaGVtYTtcbiAgfVxufVxuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/api/tl-serializer-mtp.js\n");

/***/ }),

/***/ "./src/api/tl-serializer.js":
/*!**********************************!*\
  !*** ./src/api/tl-serializer.js ***!
  \**********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return TLSerializer; });\n/* harmony import */ var _utils_numbers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../utils/numbers */ \"./src/utils/numbers.js\");\n/* harmony import */ var _utils_objects__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./../utils/objects */ \"./src/utils/objects.js\");\n/* harmony import */ var _schema_api__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./schema-api */ \"./src/api/schema-api.js\");\n/* harmony import */ var _schema_mtp__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./schema-mtp */ \"./src/api/schema-mtp.js\");\n\n\n\n\n\nconst APISchema = _schema_api__WEBPACK_IMPORTED_MODULE_2__[\"default\"]\nconst LAYER_74 = _schema_api__WEBPACK_IMPORTED_MODULE_2__[\"layer74\"]\n\n/**\n * @abstract\n */\nclass TLSerializer {\n  constructor(maxLength, layer) {\n    this.schema = undefined;\n\n    this.maxLength = maxLength || 2048;\n    this.buffer = new ArrayBuffer(this.maxLength);\n    this.intView = new Int32Array(this.buffer);\n    this.byteView = new Uint8Array(this.buffer);\n    this.layer = layer || 'default';\n\n    this.offset = 0; // in bytes\n  }\n\n  getBuffer(){\n    throw Error('TLSerializer getBuffer is deprecated, use .bufferValue getter')\n  }\n\n  getArray(){\n    throw Error('TLSerializer getArray is deprecated, use .array getter')\n  }\n\n  get bufferValue() {\n    return this.array.buffer;\n  }\n\n  get array () {\n    const resultBuffer = new ArrayBuffer(this.offset);\n    const resultArray = new Int32Array(resultBuffer);\n\n    resultArray.set(this.intView.subarray(0, this.offset / 4))\n\n    return resultArray\n  }\n\n  getBytes(typed) {\n    if (typed) {\n      var resultBuffer = new ArrayBuffer(this.offset)\n      var resultArray = new Uint8Array(resultBuffer)\n\n      resultArray.set(this.byteView.subarray(0, this.offset))\n\n      return resultArray\n    }\n\n    var bytes = []\n    for (var i = 0; i < this.offset; i++) {\n      bytes.push(this.byteView[i])\n    }\n    return bytes\n  }\n\n  packMethod(methodName, paramsFilled){\n    // .find() is up to 30% faster than for...break;\n    let method = this.schema.methods.find(item => item.method === methodName);\n\n    if (this.layer === 74){\n      let methodOverride = LAYER_74.methods.find(item => item.method === methodName);\n      console.log('methodOverride', methodOverride, LAYER_74, methodName);\n\n      if (methodOverride){\n        method = methodOverride;\n      }\n    }\n\n    function tryOtherScheme(name, isMtproto, layer){\n      var schemaFallback = isMtproto ? APISchema : _schema_mtp__WEBPACK_IMPORTED_MODULE_3__[\"default\"];\n\n      if (layer === 74){\n        console.log('Switch to 74 😏');\n        schemaFallback = LAYER_74;\n      }\n\n      console.warn('🧐 Switched to fallback schema. Looking for', name , schemaFallback.methods)\n\n      let methodFallback = schemaFallback.methods.find(item => item.method === name);\n\n      if (methodFallback) {\n        console.log('Found 😊', methodFallback);\n\n        return methodFallback;\n      }\n    }\n\n    if (!method){\n      method = tryOtherScheme(methodName, this.mtproto);\n    }\n\n    if (!method && this.layer !== 'default' ){\n      method = tryOtherScheme(methodName, this.mtproto, this.layer);\n    }\n\n    if (!method){\n      console.log('before error', this.schema.methods);\n      throw new Error(`[TLSerializer@packMethod] method «${methodName}» was not found at scheme.`);\n    }\n\n    const methodId = method.id;\n    const methodIdUint = _utils_numbers__WEBPACK_IMPORTED_MODULE_0__[\"int2uint\"](methodId);\n    const paramsAvailable = method.params;\n    const paramsAvailableLength = method.params.length;\n    const methodType = method.type;\n\n    // const typeConstructor = this.schema.constructors.find(item => item.type === methodType);\n    // const typeId = parseInt(typeConstructor.id, 10);\n\n    // \"60469778\" – \"5162463\"\n    // console.log('params', params, type, typeConstructor, typeId);\n    // console.log('', methodId.toString(16));\n\n    // console.log('Store method id', methodIdUint, `${methodName}[id]`);\n\n    this.storeInt(methodIdUint, `${methodName}[id]`);\n\n    for (let i = 0; i < paramsAvailableLength; i++) {\n      let param = paramsAvailable[i];\n      let paramType = param.type;\n\n      /**\n       * Handle complicated values:\n       * {\"name\": \"no_webpage\", \"type\": \"flags.1?true\"}\n       */\n\n      if (paramType.indexOf('?') !== -1) {\n        // \"flags.1?true\" -> \"flags.1\" , \"true\"\n        let [subTypeName, subtypeValue] = paramType.split('?');\n\n        // \"flags.1\" -> \"flags\" , \"1\"\n        let [subtypeNameField, bit] = subTypeName.split('.');\n\n        if (!(paramsFilled[subtypeNameField] & (1 << bit))) {\n          continue\n        }\n\n        paramType = subtypeValue;\n      }\n\n      // console.log('param.name', param.name, paramsFilled[param.name]);\n\n      this.storeSomething(paramsFilled[param.name], paramType, methodName + '[' + param.name + ']')\n    }\n\n    return methodType;\n  }\n\n  storeInt(i, field) {\n    this.writeInt(i, (field || '') + ':int')\n  }\n\n  writeInt(i, field) {\n    this.checkLength(4);\n    this.intView[this.offset / 4] = i;\n    this.offset += 4;\n  }\n\n  checkLength(needBytes) {\n    if (this.offset + needBytes < this.maxLength) {\n      return\n    }\n\n    this.maxLength = Math.ceil(Math.max(this.maxLength * 2, this.offset + needBytes + 16) / 4) * 4\n\n    this.increaseBuffer();\n  }\n\n  increaseBuffer(){\n    let previousBuffer = this.buffer;\n    let previousArray = new Int32Array(previousBuffer);\n\n    this.buffer = new ArrayBuffer(this.maxLength || 2048);\n    this.intView = new Int32Array(this.buffer);\n    this.byteView = new Uint8Array(this.buffer);\n\n    new Int32Array(this.buffer).set(previousArray);\n  }\n\n  storeSomething(value, type, field){\n    switch (type) {\n      case '#':\n      case 'int':\n        return this.storeInt(value, field)\n      case 'long':\n        return this.storeLong(value, field)\n      case 'int128':\n        return this.storeIntBytes(value, 128, field)\n      case 'int256':\n        return this.storeIntBytes(value, 256, field)\n      case 'int512':\n        return this.storeIntBytes(value, 512, field)\n      case 'string':\n        return this.storeString(value, field)\n      case 'bytes':\n        return this.storeBytes(value, field)\n      case 'double':\n        return this.storeDouble(value, field)\n      case 'Bool':\n        return this.storeBool(value, field)\n      case 'true':\n        return\n    }\n\n    var obj = value;\n\n    if (Array.isArray(obj)) {\n      if (type.substr(0, 6) == 'Vector') {\n        this.writeInt(0x1cb5c415, field + '[id]')\n      }\n      else if (type.substr(0, 6) != 'vector') {\n        throw new Error('Invalid vector type ' + type)\n      }\n      var itemType = type.substr(7, type.length - 8); // for \"Vector<itemType>\"\n      this.writeInt(obj.length, field + '[count]')\n      for (var i = 0; i < obj.length; i++) {\n        this.storeSomething(obj[i], itemType, field + '[' + i + ']')\n      }\n      return true\n    }\n    else if (type.substr(0, 6).toLowerCase() == 'vector') {\n      throw new Error('Invalid vector object')\n    }\n\n    if (typeof obj != 'object' || obj == null || Array.isArray(obj)) {\n      console.log('obj', obj, type, field, value);\n      console.trace()\n      console.log(this.schema.constructors)\n      throw new Error('Invalid object for type ' + type)\n    }\n\n    // var schema = this.mtproto ? Config.Schema.MTProto : Config.Schema.API\n\n    var predicate = obj['_']\n    var isBare = false\n    var constructorData = false,\n      i\n\n    if (isBare = (type.charAt(0) == '%')) {\n      type = type.substr(1)\n    }\n\n    for (i = 0; i < this.schema.constructors.length; i++) {\n      if (this.schema.constructors[i].predicate == predicate) {\n        constructorData = this.schema.constructors[i]\n        break\n      }\n    }\n\n\n    if (!constructorData) {\n      console.warn('Sericalizer error with value %o | type %o | field %o', value, type, field);\n      console.warn('Can not found predicate in schema. Trying to find %o between %o',\n        predicate, this.schema.constructors.map( c => c.predicate) )\n      console.warn('Probably you have missed _ in ', obj);\n      throw new Error('No predicate ' + predicate + ' found')\n    } else {\n      // console.warn(`%o found: $o`, predicate, constructorData)\n    }\n\n    if (predicate == type) {\n      isBare = true\n    }\n\n    if (!isBare) {\n      this.writeInt(_utils_numbers__WEBPACK_IMPORTED_MODULE_0__[\"int2uint\"](constructorData.id), field + '[' + predicate + '][id]')\n    }\n\n    var param, type\n    var i, condType\n    var fieldBit\n    var len = constructorData.params.length\n    for (i = 0; i < len; i++) {\n      param = constructorData.params[i]\n      type = param.type\n      if (type.indexOf('?') !== -1) {\n        condType = type.split('?')\n        fieldBit = condType[0].split('.')\n        if (!(obj[fieldBit[0]] & (1 << fieldBit[1]))) {\n          continue\n        }\n        type = condType[1]\n      }\n\n      if (obj[param.name] === undefined){\n        // console.warn('FAIL ->' ,  param.name, obj);\n      }\n\n      this.storeSomething(obj[param.name], type, field + '[' + predicate + '][' + param.name + ']')\n    }\n\n    return constructorData.type\n\n  }\n\n  storeIntBytes(bytes, bits, field) {\n    if (bytes instanceof ArrayBuffer) {\n      bytes = new Uint8Array(bytes)\n    }\n\n    const len = bytes.length;\n\n    if ((bits % 32) || (len * 8) != bits) {\n      throw new Error('Invalid bits: ' + bits + ', ' + bytes.length)\n    }\n\n    this.checkLength(len)\n\n    this.byteView.set(bytes, this.offset)\n    this.offset += len\n  }\n\n  storeLongP(iHigh, iLow, field) {\n    this.writeInt(iLow, (field || '') + ':long[low]')\n    this.writeInt(iHigh, (field || '') + ':long[high]')\n  }\n\n  storeLong(sLong, field) {\n    if (sLong instanceof ArrayBuffer) {\n      return this.storeIntBytes(sLong, 64, field);\n    }\n\n    if (Array.isArray(sLong)) {\n      if (sLong.length === 2) {\n        return this.storeLongP(sLong[0], sLong[1], field)\n      } else {\n        return this.storeIntBytes(sLong, 64, field)\n      }\n    }\n\n    if (typeof sLong != 'string') {\n      sLong = sLong ? sLong.toString() : '0'\n    }\n\n    const {quotient, remainder} = _utils_numbers__WEBPACK_IMPORTED_MODULE_0__[\"bigIntFromString\"](sLong).divmod(_utils_numbers__WEBPACK_IMPORTED_MODULE_0__[\"bigint\"](0x100000000));\n\n    this.writeInt(_utils_numbers__WEBPACK_IMPORTED_MODULE_0__[\"int2uint\"](remainder.value), (field || '') + ':long[low]')\n    this.writeInt(_utils_numbers__WEBPACK_IMPORTED_MODULE_0__[\"int2uint\"](quotient.value), (field || '') + ':long[high]')\n  }\n\n  storeBytes(bytes, field) {\n    if (bytes instanceof ArrayBuffer) {\n      bytes = new Uint8Array(bytes)\n    }\n    else if (bytes === undefined) {\n      bytes = []\n    }\n    // console.log('>>>', numbers.bytesToHex(bytes), (field || '') + ':bytes')\n\n    var len = bytes.byteLength || bytes.length\n    this.checkLength(len + 8)\n    if (len <= 253) {\n      this.byteView[this.offset++] = len\n    } else {\n      this.byteView[this.offset++] = 254\n      this.byteView[this.offset++] = len & 0xFF\n      this.byteView[this.offset++] = (len & 0xFF00) >> 8\n      this.byteView[this.offset++] = (len & 0xFF0000) >> 16\n    }\n\n    this.byteView.set(bytes, this.offset)\n    this.offset += len\n\n    // Padding\n    while (this.offset % 4) {\n      this.byteView[this.offset++] = 0\n    }\n  }\n\n  storeDouble(f, field) {\n    var buffer = new ArrayBuffer(8)\n    var intView = new Int32Array(buffer)\n    var doubleView = new Float64Array(buffer)\n\n    doubleView[0] = f\n\n    this.writeInt(intView[0], (field || '') + ':double[low]')\n    this.writeInt(intView[1], (field || '') + ':double[high]')\n  }\n\n\n  storeString(s, field) {\n    // console.log('>>>', s, (field || '') + ':string')\n\n    if (s === undefined) {\n      s = ''\n    }\n    var sUTF8 = unescape(encodeURIComponent(s))\n\n    this.checkLength(sUTF8.length + 8)\n\n    var len = sUTF8.length\n    if (len <= 253) {\n      this.byteView[this.offset++] = len\n    } else {\n      this.byteView[this.offset++] = 254\n      this.byteView[this.offset++] = len & 0xFF\n      this.byteView[this.offset++] = (len & 0xFF00) >> 8\n      this.byteView[this.offset++] = (len & 0xFF0000) >> 16\n    }\n    for (var i = 0; i < len; i++) {\n      this.byteView[this.offset++] = sUTF8.charCodeAt(i)\n    }\n\n    // Padding\n    while (this.offset % 4) {\n      this.byteView[this.offset++] = 0\n    }\n  }\n\n  storeBool(i, field) {\n    if (i) {\n      this.writeInt(0x997275b5, (field || '') + ':bool')\n    } else {\n      this.writeInt(0xbc799737, (field || '') + ':bool')\n    }\n  }\n\n  storeRawBytes(bytes, field) {\n    if (bytes instanceof ArrayBuffer) {\n      bytes = new Uint8Array(bytes)\n    }\n    var len = bytes.length\n\n    // console.log('>>>', numbers.bytesToHex(bytes), (field || ''))\n    this.checkLength(len)\n\n    this.byteView.set(bytes, this.offset)\n    this.offset += len\n  }\n\n}\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/api/tl-serializer.js\n");

/***/ }),

/***/ "./src/assets/svg/1check_svg.svg":
/*!***************************************!*\
  !*** ./src/assets/svg/1check_svg.svg ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"19\\\" height=\\\"14\\\" viewBox=\\\"0 0 19 14\\\"><g fill=\\\"none\\\" fill-rule=\\\"evenodd\\\"><polygon points=\\\"0 0 19 0 19 14 0 14\\\"></polygon><path fill=\\\"#000\\\" fill-rule=\\\"nonzero\\\" d=\\\"M7.96833846,10.0490996 L14.5108251,2.571972 C14.7472185,2.30180819 15.1578642,2.27443181 15.428028,2.51082515 C15.6711754,2.72357915 15.717665,3.07747757 15.5522007,3.34307913 L15.4891749,3.428028 L8.48917485,11.428028 C8.2663359,11.6827011 7.89144111,11.7199091 7.62486888,11.5309823 L7.54038059,11.4596194 L4.54038059,8.45961941 C4.2865398,8.20577862 4.2865398,7.79422138 4.54038059,7.54038059 C4.7688373,7.31192388 5.12504434,7.28907821 5.37905111,7.47184358 L5.45961941,7.54038059 L7.96833846,10.0490996 L14.5108251,2.571972 L7.96833846,10.0490996 Z\\\"></path></g></svg>\"//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvYXNzZXRzL3N2Zy8xY2hlY2tfc3ZnLnN2Zy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL1RlbGVncmFtanMvLi9zcmMvYXNzZXRzL3N2Zy8xY2hlY2tfc3ZnLnN2Zz8xYjY5Il0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gXCI8c3ZnIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCIgd2lkdGg9XFxcIjE5XFxcIiBoZWlnaHQ9XFxcIjE0XFxcIiB2aWV3Qm94PVxcXCIwIDAgMTkgMTRcXFwiPjxnIGZpbGw9XFxcIm5vbmVcXFwiIGZpbGwtcnVsZT1cXFwiZXZlbm9kZFxcXCI+PHBvbHlnb24gcG9pbnRzPVxcXCIwIDAgMTkgMCAxOSAxNCAwIDE0XFxcIj48L3BvbHlnb24+PHBhdGggZmlsbD1cXFwiIzAwMFxcXCIgZmlsbC1ydWxlPVxcXCJub256ZXJvXFxcIiBkPVxcXCJNNy45NjgzMzg0NiwxMC4wNDkwOTk2IEwxNC41MTA4MjUxLDIuNTcxOTcyIEMxNC43NDcyMTg1LDIuMzAxODA4MTkgMTUuMTU3ODY0MiwyLjI3NDQzMTgxIDE1LjQyODAyOCwyLjUxMDgyNTE1IEMxNS42NzExNzU0LDIuNzIzNTc5MTUgMTUuNzE3NjY1LDMuMDc3NDc3NTcgMTUuNTUyMjAwNywzLjM0MzA3OTEzIEwxNS40ODkxNzQ5LDMuNDI4MDI4IEw4LjQ4OTE3NDg1LDExLjQyODAyOCBDOC4yNjYzMzU5LDExLjY4MjcwMTEgNy44OTE0NDExMSwxMS43MTk5MDkxIDcuNjI0ODY4ODgsMTEuNTMwOTgyMyBMNy41NDAzODA1OSwxMS40NTk2MTk0IEw0LjU0MDM4MDU5LDguNDU5NjE5NDEgQzQuMjg2NTM5OCw4LjIwNTc3ODYyIDQuMjg2NTM5OCw3Ljc5NDIyMTM4IDQuNTQwMzgwNTksNy41NDAzODA1OSBDNC43Njg4MzczLDcuMzExOTIzODggNS4xMjUwNDQzNCw3LjI4OTA3ODIxIDUuMzc5MDUxMTEsNy40NzE4NDM1OCBMNS40NTk2MTk0MSw3LjU0MDM4MDU5IEw3Ljk2ODMzODQ2LDEwLjA0OTA5OTYgTDE0LjUxMDgyNTEsMi41NzE5NzIgTDcuOTY4MzM4NDYsMTAuMDQ5MDk5NiBaXFxcIj48L3BhdGg+PC9nPjwvc3ZnPlwiIl0sIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/assets/svg/1check_svg.svg\n");

/***/ }),

/***/ "./src/assets/svg/2checks_svg.svg":
/*!****************************************!*\
  !*** ./src/assets/svg/2checks_svg.svg ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"19\\\" height=\\\"14\\\" viewBox=\\\"0 0 19 14\\\"><g fill=\\\"none\\\" fill-rule=\\\"evenodd\\\"><polygon points=\\\"0 0 19 0 19 14 0 14\\\"></polygon><path fill=\\\"#000\\\" fill-rule=\\\"nonzero\\\" d=\\\"M4.96833846,10.0490996 L11.5108251,2.571972 C11.7472185,2.30180819 12.1578642,2.27443181 12.428028,2.51082515 C12.6711754,2.72357915 12.717665,3.07747757 12.5522007,3.34307913 L12.4891749,3.428028 L5.48917485,11.428028 C5.2663359,11.6827011 4.89144111,11.7199091 4.62486888,11.5309823 L4.54038059,11.4596194 L1.54038059,8.45961941 C1.2865398,8.20577862 1.2865398,7.79422138 1.54038059,7.54038059 C1.7688373,7.31192388 2.12504434,7.28907821 2.37905111,7.47184358 L2.45961941,7.54038059 L4.96833846,10.0490996 L11.5108251,2.571972 L4.96833846,10.0490996 Z M9.96833846,10.0490996 L16.5108251,2.571972 C16.7472185,2.30180819 17.1578642,2.27443181 17.428028,2.51082515 C17.6711754,2.72357915 17.717665,3.07747757 17.5522007,3.34307913 L17.4891749,3.428028 L10.4891749,11.428028 C10.2663359,11.6827011 9.89144111,11.7199091 9.62486888,11.5309823 L9.54038059,11.4596194 L8.54038059,10.4596194 C8.2865398,10.2057786 8.2865398,9.79422138 8.54038059,9.54038059 C8.7688373,9.31192388 9.12504434,9.28907821 9.37905111,9.47184358 L9.45961941,9.54038059 L9.96833846,10.0490996 L16.5108251,2.571972 L9.96833846,10.0490996 Z\\\"></path></g></svg>\"//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvYXNzZXRzL3N2Zy8yY2hlY2tzX3N2Zy5zdmcuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9UZWxlZ3JhbWpzLy4vc3JjL2Fzc2V0cy9zdmcvMmNoZWNrc19zdmcuc3ZnPzUwZjEiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBcIjxzdmcgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIiB3aWR0aD1cXFwiMTlcXFwiIGhlaWdodD1cXFwiMTRcXFwiIHZpZXdCb3g9XFxcIjAgMCAxOSAxNFxcXCI+PGcgZmlsbD1cXFwibm9uZVxcXCIgZmlsbC1ydWxlPVxcXCJldmVub2RkXFxcIj48cG9seWdvbiBwb2ludHM9XFxcIjAgMCAxOSAwIDE5IDE0IDAgMTRcXFwiPjwvcG9seWdvbj48cGF0aCBmaWxsPVxcXCIjMDAwXFxcIiBmaWxsLXJ1bGU9XFxcIm5vbnplcm9cXFwiIGQ9XFxcIk00Ljk2ODMzODQ2LDEwLjA0OTA5OTYgTDExLjUxMDgyNTEsMi41NzE5NzIgQzExLjc0NzIxODUsMi4zMDE4MDgxOSAxMi4xNTc4NjQyLDIuMjc0NDMxODEgMTIuNDI4MDI4LDIuNTEwODI1MTUgQzEyLjY3MTE3NTQsMi43MjM1NzkxNSAxMi43MTc2NjUsMy4wNzc0Nzc1NyAxMi41NTIyMDA3LDMuMzQzMDc5MTMgTDEyLjQ4OTE3NDksMy40MjgwMjggTDUuNDg5MTc0ODUsMTEuNDI4MDI4IEM1LjI2NjMzNTksMTEuNjgyNzAxMSA0Ljg5MTQ0MTExLDExLjcxOTkwOTEgNC42MjQ4Njg4OCwxMS41MzA5ODIzIEw0LjU0MDM4MDU5LDExLjQ1OTYxOTQgTDEuNTQwMzgwNTksOC40NTk2MTk0MSBDMS4yODY1Mzk4LDguMjA1Nzc4NjIgMS4yODY1Mzk4LDcuNzk0MjIxMzggMS41NDAzODA1OSw3LjU0MDM4MDU5IEMxLjc2ODgzNzMsNy4zMTE5MjM4OCAyLjEyNTA0NDM0LDcuMjg5MDc4MjEgMi4zNzkwNTExMSw3LjQ3MTg0MzU4IEwyLjQ1OTYxOTQxLDcuNTQwMzgwNTkgTDQuOTY4MzM4NDYsMTAuMDQ5MDk5NiBMMTEuNTEwODI1MSwyLjU3MTk3MiBMNC45NjgzMzg0NiwxMC4wNDkwOTk2IFogTTkuOTY4MzM4NDYsMTAuMDQ5MDk5NiBMMTYuNTEwODI1MSwyLjU3MTk3MiBDMTYuNzQ3MjE4NSwyLjMwMTgwODE5IDE3LjE1Nzg2NDIsMi4yNzQ0MzE4MSAxNy40MjgwMjgsMi41MTA4MjUxNSBDMTcuNjcxMTc1NCwyLjcyMzU3OTE1IDE3LjcxNzY2NSwzLjA3NzQ3NzU3IDE3LjU1MjIwMDcsMy4zNDMwNzkxMyBMMTcuNDg5MTc0OSwzLjQyODAyOCBMMTAuNDg5MTc0OSwxMS40MjgwMjggQzEwLjI2NjMzNTksMTEuNjgyNzAxMSA5Ljg5MTQ0MTExLDExLjcxOTkwOTEgOS42MjQ4Njg4OCwxMS41MzA5ODIzIEw5LjU0MDM4MDU5LDExLjQ1OTYxOTQgTDguNTQwMzgwNTksMTAuNDU5NjE5NCBDOC4yODY1Mzk4LDEwLjIwNTc3ODYgOC4yODY1Mzk4LDkuNzk0MjIxMzggOC41NDAzODA1OSw5LjU0MDM4MDU5IEM4Ljc2ODgzNzMsOS4zMTE5MjM4OCA5LjEyNTA0NDM0LDkuMjg5MDc4MjEgOS4zNzkwNTExMSw5LjQ3MTg0MzU4IEw5LjQ1OTYxOTQxLDkuNTQwMzgwNTkgTDkuOTY4MzM4NDYsMTAuMDQ5MDk5NiBMMTYuNTEwODI1MSwyLjU3MTk3MiBMOS45NjgzMzg0NiwxMC4wNDkwOTk2IFpcXFwiPjwvcGF0aD48L2c+PC9zdmc+XCIiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/assets/svg/2checks_svg.svg\n");

/***/ }),

/***/ "./src/assets/svg/attach_svg.svg":
/*!***************************************!*\
  !*** ./src/assets/svg/attach_svg.svg ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"24\\\" height=\\\"24\\\" viewBox=\\\"0 0 24 24\\\"><g fill=\\\"none\\\" fill-rule=\\\"evenodd\\\"><polygon points=\\\"0 0 24 0 24 24 0 24\\\"></polygon><path fill=\\\"#000\\\" fill-rule=\\\"nonzero\\\" d=\\\"M11.657825,8.68730116 L7.89384699,12.5266719 C6.53977525,13.9078658 6.53979565,16.118605 7.89389288,17.4997739 C9.18119565,18.812813 11.2598788,18.8798255 12.6276396,17.6859428 L12.8071445,17.5177786 L19.3928802,10.8005213 C21.4766204,8.67512215 21.4766204,5.27313659 19.3928802,3.14773741 C17.4051081,1.12022499 14.1862843,1.0310006 12.0906645,2.90336495 L11.834659,3.14773741 L5.26671543,9.84699003 C2.45333216,12.7166196 2.45333216,17.3098454 5.26671543,20.179475 C7.96150749,22.9281424 12.3352577,23.0332941 15.1578204,20.4629606 L15.452067,20.1794113 L19.2160679,16.340063 C19.6027032,15.945688 19.596429,15.3125541 19.202054,14.9259188 C18.8076791,14.5392835 18.1745452,14.5455577 17.7879099,14.9399327 L13.9520378,18.8511531 C11.9281881,20.8353343 8.67903707,20.8031766 6.6948559,18.7793268 C4.64395201,16.6874204 4.64395201,13.3390446 6.6948559,11.2471382 L13.3088798,4.50180526 C14.6072848,3.22884976 16.6917843,3.24948061 17.9647398,4.54788555 C19.2860006,5.89556155 19.2860006,8.05269718 17.9647398,9.40037319 L11.3764629,16.119959 C10.803533,16.6816592 9.88373353,16.6725557 9.32203335,16.0996258 C8.73040544,15.4961698 8.73039653,14.5302606 9.3220133,13.9267937 L13.0859914,10.0874229 C13.4726243,9.6930457 13.4663463,9.05991185 13.0719691,8.67327889 C12.6775919,8.28664594 12.044458,8.29292392 11.657825,8.68730116 Z\\\"></path></g></svg>\"//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvYXNzZXRzL3N2Zy9hdHRhY2hfc3ZnLnN2Zy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL1RlbGVncmFtanMvLi9zcmMvYXNzZXRzL3N2Zy9hdHRhY2hfc3ZnLnN2Zz8yNjJjIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gXCI8c3ZnIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCIgd2lkdGg9XFxcIjI0XFxcIiBoZWlnaHQ9XFxcIjI0XFxcIiB2aWV3Qm94PVxcXCIwIDAgMjQgMjRcXFwiPjxnIGZpbGw9XFxcIm5vbmVcXFwiIGZpbGwtcnVsZT1cXFwiZXZlbm9kZFxcXCI+PHBvbHlnb24gcG9pbnRzPVxcXCIwIDAgMjQgMCAyNCAyNCAwIDI0XFxcIj48L3BvbHlnb24+PHBhdGggZmlsbD1cXFwiIzAwMFxcXCIgZmlsbC1ydWxlPVxcXCJub256ZXJvXFxcIiBkPVxcXCJNMTEuNjU3ODI1LDguNjg3MzAxMTYgTDcuODkzODQ2OTksMTIuNTI2NjcxOSBDNi41Mzk3NzUyNSwxMy45MDc4NjU4IDYuNTM5Nzk1NjUsMTYuMTE4NjA1IDcuODkzODkyODgsMTcuNDk5NzczOSBDOS4xODExOTU2NSwxOC44MTI4MTMgMTEuMjU5ODc4OCwxOC44Nzk4MjU1IDEyLjYyNzYzOTYsMTcuNjg1OTQyOCBMMTIuODA3MTQ0NSwxNy41MTc3Nzg2IEwxOS4zOTI4ODAyLDEwLjgwMDUyMTMgQzIxLjQ3NjYyMDQsOC42NzUxMjIxNSAyMS40NzY2MjA0LDUuMjczMTM2NTkgMTkuMzkyODgwMiwzLjE0NzczNzQxIEMxNy40MDUxMDgxLDEuMTIwMjI0OTkgMTQuMTg2Mjg0MywxLjAzMTAwMDYgMTIuMDkwNjY0NSwyLjkwMzM2NDk1IEwxMS44MzQ2NTksMy4xNDc3Mzc0MSBMNS4yNjY3MTU0Myw5Ljg0Njk5MDAzIEMyLjQ1MzMzMjE2LDEyLjcxNjYxOTYgMi40NTMzMzIxNiwxNy4zMDk4NDU0IDUuMjY2NzE1NDMsMjAuMTc5NDc1IEM3Ljk2MTUwNzQ5LDIyLjkyODE0MjQgMTIuMzM1MjU3NywyMy4wMzMyOTQxIDE1LjE1NzgyMDQsMjAuNDYyOTYwNiBMMTUuNDUyMDY3LDIwLjE3OTQxMTMgTDE5LjIxNjA2NzksMTYuMzQwMDYzIEMxOS42MDI3MDMyLDE1Ljk0NTY4OCAxOS41OTY0MjksMTUuMzEyNTU0MSAxOS4yMDIwNTQsMTQuOTI1OTE4OCBDMTguODA3Njc5MSwxNC41MzkyODM1IDE4LjE3NDU0NTIsMTQuNTQ1NTU3NyAxNy43ODc5MDk5LDE0LjkzOTkzMjcgTDEzLjk1MjAzNzgsMTguODUxMTUzMSBDMTEuOTI4MTg4MSwyMC44MzUzMzQzIDguNjc5MDM3MDcsMjAuODAzMTc2NiA2LjY5NDg1NTksMTguNzc5MzI2OCBDNC42NDM5NTIwMSwxNi42ODc0MjA0IDQuNjQzOTUyMDEsMTMuMzM5MDQ0NiA2LjY5NDg1NTksMTEuMjQ3MTM4MiBMMTMuMzA4ODc5OCw0LjUwMTgwNTI2IEMxNC42MDcyODQ4LDMuMjI4ODQ5NzYgMTYuNjkxNzg0MywzLjI0OTQ4MDYxIDE3Ljk2NDczOTgsNC41NDc4ODU1NSBDMTkuMjg2MDAwNiw1Ljg5NTU2MTU1IDE5LjI4NjAwMDYsOC4wNTI2OTcxOCAxNy45NjQ3Mzk4LDkuNDAwMzczMTkgTDExLjM3NjQ2MjksMTYuMTE5OTU5IEMxMC44MDM1MzMsMTYuNjgxNjU5MiA5Ljg4MzczMzUzLDE2LjY3MjU1NTcgOS4zMjIwMzMzNSwxNi4wOTk2MjU4IEM4LjczMDQwNTQ0LDE1LjQ5NjE2OTggOC43MzAzOTY1MywxNC41MzAyNjA2IDkuMzIyMDEzMywxMy45MjY3OTM3IEwxMy4wODU5OTE0LDEwLjA4NzQyMjkgQzEzLjQ3MjYyNDMsOS42OTMwNDU3IDEzLjQ2NjM0NjMsOS4wNTk5MTE4NSAxMy4wNzE5NjkxLDguNjczMjc4ODkgQzEyLjY3NzU5MTksOC4yODY2NDU5NCAxMi4wNDQ0NTgsOC4yOTI5MjM5MiAxMS42NTc4MjUsOC42ODczMDExNiBaXFxcIj48L3BhdGg+PC9nPjwvc3ZnPlwiIl0sIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/assets/svg/attach_svg.svg\n");

/***/ }),

/***/ "./src/assets/svg/cameraadd_svg.svg":
/*!******************************************!*\
  !*** ./src/assets/svg/cameraadd_svg.svg ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"24\\\" height=\\\"24\\\" viewBox=\\\"0 0 24 24\\\"><g fill=\\\"none\\\" fill-rule=\\\"evenodd\\\"><polygon points=\\\"0 0 24 0 24 24 0 24\\\"></polygon><path fill=\\\"#000\\\" fill-rule=\\\"nonzero\\\" d=\\\"M19.8833789,16.0067277 L20,16 C20.5128358,16 20.9355072,16.3860402 20.9932723,16.8833789 L21,17 L21,19 L23,19 C23.5128358,19 23.9355072,19.3860402 23.9932723,19.8833789 L24,20 C24,20.5128358 23.6139598,20.9355072 23.1166211,20.9932723 L23,21 L21,21 L21,23 C21,23.5128358 20.6139598,23.9355072 20.1166211,23.9932723 L20,24 C19.4871642,24 19.0644928,23.6139598 19.0067277,23.1166211 L19,23 L19,21 L17,21 C16.4871642,21 16.0644928,20.6139598 16.0067277,20.1166211 L16,20 C16,19.4871642 16.3860402,19.0644928 16.8833789,19.0067277 L17,19 L19,19 L19,17 C19,16.4871642 19.3860402,16.0644928 19.8833789,16.0067277 L20,16 L19.8833789,16.0067277 Z M8.41421356,2 L13.5857864,2 C14.0572824,2 14.5116128,2.16648982 14.8701798,2.46691315 L15,2.58578644 L16.4142136,4 L18,4 C19.5976809,4 20.9036609,5.24891996 20.9949073,6.82372721 L21,7 L21,12 C21,12.5522847 20.5522847,13 20,13 C19.4871642,13 19.0644928,12.6139598 19.0067277,12.1166211 L19,12 L19,7 C19,6.48716416 18.6139598,6.06449284 18.1166211,6.00672773 L18,6 L16.4142136,6 C15.9427176,6 15.4883872,5.83351018 15.1298202,5.53308685 L15,5.41421356 L13.5857864,4 L8.41421356,4 L7,5.41421356 C6.66660199,5.74761157 6.22761579,5.95114561 5.76163928,5.99225938 L5.58578644,6 L4,6 C3.48716416,6 3.06449284,6.38604019 3.00672773,6.88337887 L3,7 L3,18 C3,18.5128358 3.38604019,18.9355072 3.88337887,18.9932723 L4,19 L13,19 C13.5522847,19 14,19.4477153 14,20 C14,20.5128358 13.6139598,20.9355072 13.1166211,20.9932723 L13,21 L4,21 C2.40231912,21 1.09633912,19.75108 1.00509269,18.1762728 L1,18 L1,7 C1,5.40231912 2.24891996,4.09633912 3.82372721,4.00509269 L4,4 L5.58578644,4 L7,2.58578644 C7.33339801,2.25238843 7.77238421,2.04885439 8.23836072,2.00774062 L8.41421356,2 L13.5857864,2 L8.41421356,2 Z M11,7 C13.7614237,7 16,9.23857625 16,12 C16,14.7614237 13.7614237,17 11,17 C8.23857625,17 6,14.7614237 6,12 C6,9.23857625 8.23857625,7 11,7 Z M11,9 C9.34314575,9 8,10.3431458 8,12 C8,13.6568542 9.34314575,15 11,15 C12.6568542,15 14,13.6568542 14,12 C14,10.3431458 12.6568542,9 11,9 Z\\\"></path></g></svg>\"//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvYXNzZXRzL3N2Zy9jYW1lcmFhZGRfc3ZnLnN2Zy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL1RlbGVncmFtanMvLi9zcmMvYXNzZXRzL3N2Zy9jYW1lcmFhZGRfc3ZnLnN2Zz80NDIyIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gXCI8c3ZnIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCIgd2lkdGg9XFxcIjI0XFxcIiBoZWlnaHQ9XFxcIjI0XFxcIiB2aWV3Qm94PVxcXCIwIDAgMjQgMjRcXFwiPjxnIGZpbGw9XFxcIm5vbmVcXFwiIGZpbGwtcnVsZT1cXFwiZXZlbm9kZFxcXCI+PHBvbHlnb24gcG9pbnRzPVxcXCIwIDAgMjQgMCAyNCAyNCAwIDI0XFxcIj48L3BvbHlnb24+PHBhdGggZmlsbD1cXFwiIzAwMFxcXCIgZmlsbC1ydWxlPVxcXCJub256ZXJvXFxcIiBkPVxcXCJNMTkuODgzMzc4OSwxNi4wMDY3Mjc3IEwyMCwxNiBDMjAuNTEyODM1OCwxNiAyMC45MzU1MDcyLDE2LjM4NjA0MDIgMjAuOTkzMjcyMywxNi44ODMzNzg5IEwyMSwxNyBMMjEsMTkgTDIzLDE5IEMyMy41MTI4MzU4LDE5IDIzLjkzNTUwNzIsMTkuMzg2MDQwMiAyMy45OTMyNzIzLDE5Ljg4MzM3ODkgTDI0LDIwIEMyNCwyMC41MTI4MzU4IDIzLjYxMzk1OTgsMjAuOTM1NTA3MiAyMy4xMTY2MjExLDIwLjk5MzI3MjMgTDIzLDIxIEwyMSwyMSBMMjEsMjMgQzIxLDIzLjUxMjgzNTggMjAuNjEzOTU5OCwyMy45MzU1MDcyIDIwLjExNjYyMTEsMjMuOTkzMjcyMyBMMjAsMjQgQzE5LjQ4NzE2NDIsMjQgMTkuMDY0NDkyOCwyMy42MTM5NTk4IDE5LjAwNjcyNzcsMjMuMTE2NjIxMSBMMTksMjMgTDE5LDIxIEwxNywyMSBDMTYuNDg3MTY0MiwyMSAxNi4wNjQ0OTI4LDIwLjYxMzk1OTggMTYuMDA2NzI3NywyMC4xMTY2MjExIEwxNiwyMCBDMTYsMTkuNDg3MTY0MiAxNi4zODYwNDAyLDE5LjA2NDQ5MjggMTYuODgzMzc4OSwxOS4wMDY3Mjc3IEwxNywxOSBMMTksMTkgTDE5LDE3IEMxOSwxNi40ODcxNjQyIDE5LjM4NjA0MDIsMTYuMDY0NDkyOCAxOS44ODMzNzg5LDE2LjAwNjcyNzcgTDIwLDE2IEwxOS44ODMzNzg5LDE2LjAwNjcyNzcgWiBNOC40MTQyMTM1NiwyIEwxMy41ODU3ODY0LDIgQzE0LjA1NzI4MjQsMiAxNC41MTE2MTI4LDIuMTY2NDg5ODIgMTQuODcwMTc5OCwyLjQ2NjkxMzE1IEwxNSwyLjU4NTc4NjQ0IEwxNi40MTQyMTM2LDQgTDE4LDQgQzE5LjU5NzY4MDksNCAyMC45MDM2NjA5LDUuMjQ4OTE5OTYgMjAuOTk0OTA3Myw2LjgyMzcyNzIxIEwyMSw3IEwyMSwxMiBDMjEsMTIuNTUyMjg0NyAyMC41NTIyODQ3LDEzIDIwLDEzIEMxOS40ODcxNjQyLDEzIDE5LjA2NDQ5MjgsMTIuNjEzOTU5OCAxOS4wMDY3Mjc3LDEyLjExNjYyMTEgTDE5LDEyIEwxOSw3IEMxOSw2LjQ4NzE2NDE2IDE4LjYxMzk1OTgsNi4wNjQ0OTI4NCAxOC4xMTY2MjExLDYuMDA2NzI3NzMgTDE4LDYgTDE2LjQxNDIxMzYsNiBDMTUuOTQyNzE3Niw2IDE1LjQ4ODM4NzIsNS44MzM1MTAxOCAxNS4xMjk4MjAyLDUuNTMzMDg2ODUgTDE1LDUuNDE0MjEzNTYgTDEzLjU4NTc4NjQsNCBMOC40MTQyMTM1Niw0IEw3LDUuNDE0MjEzNTYgQzYuNjY2NjAxOTksNS43NDc2MTE1NyA2LjIyNzYxNTc5LDUuOTUxMTQ1NjEgNS43NjE2MzkyOCw1Ljk5MjI1OTM4IEw1LjU4NTc4NjQ0LDYgTDQsNiBDMy40ODcxNjQxNiw2IDMuMDY0NDkyODQsNi4zODYwNDAxOSAzLjAwNjcyNzczLDYuODgzMzc4ODcgTDMsNyBMMywxOCBDMywxOC41MTI4MzU4IDMuMzg2MDQwMTksMTguOTM1NTA3MiAzLjg4MzM3ODg3LDE4Ljk5MzI3MjMgTDQsMTkgTDEzLDE5IEMxMy41NTIyODQ3LDE5IDE0LDE5LjQ0NzcxNTMgMTQsMjAgQzE0LDIwLjUxMjgzNTggMTMuNjEzOTU5OCwyMC45MzU1MDcyIDEzLjExNjYyMTEsMjAuOTkzMjcyMyBMMTMsMjEgTDQsMjEgQzIuNDAyMzE5MTIsMjEgMS4wOTYzMzkxMiwxOS43NTEwOCAxLjAwNTA5MjY5LDE4LjE3NjI3MjggTDEsMTggTDEsNyBDMSw1LjQwMjMxOTEyIDIuMjQ4OTE5OTYsNC4wOTYzMzkxMiAzLjgyMzcyNzIxLDQuMDA1MDkyNjkgTDQsNCBMNS41ODU3ODY0NCw0IEw3LDIuNTg1Nzg2NDQgQzcuMzMzMzk4MDEsMi4yNTIzODg0MyA3Ljc3MjM4NDIxLDIuMDQ4ODU0MzkgOC4yMzgzNjA3MiwyLjAwNzc0MDYyIEw4LjQxNDIxMzU2LDIgTDEzLjU4NTc4NjQsMiBMOC40MTQyMTM1NiwyIFogTTExLDcgQzEzLjc2MTQyMzcsNyAxNiw5LjIzODU3NjI1IDE2LDEyIEMxNiwxNC43NjE0MjM3IDEzLjc2MTQyMzcsMTcgMTEsMTcgQzguMjM4NTc2MjUsMTcgNiwxNC43NjE0MjM3IDYsMTIgQzYsOS4yMzg1NzYyNSA4LjIzODU3NjI1LDcgMTEsNyBaIE0xMSw5IEM5LjM0MzE0NTc1LDkgOCwxMC4zNDMxNDU4IDgsMTIgQzgsMTMuNjU2ODU0MiA5LjM0MzE0NTc1LDE1IDExLDE1IEMxMi42NTY4NTQyLDE1IDE0LDEzLjY1Njg1NDIgMTQsMTIgQzE0LDEwLjM0MzE0NTggMTIuNjU2ODU0Miw5IDExLDkgWlxcXCI+PC9wYXRoPjwvZz48L3N2Zz5cIiJdLCJtYXBwaW5ncyI6IkFBQUEiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/assets/svg/cameraadd_svg.svg\n");

/***/ }),

/***/ "./src/assets/svg/channel_svg.svg":
/*!****************************************!*\
  !*** ./src/assets/svg/channel_svg.svg ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"24\\\" height=\\\"24\\\" viewBox=\\\"0 0 24 24\\\"><g fill=\\\"none\\\" fill-rule=\\\"evenodd\\\"><polygon points=\\\"0 0 24 0 24 24 0 24\\\"></polygon><path fill=\\\"#000\\\" fill-rule=\\\"nonzero\\\" d=\\\"M18.5,1.6784749 C19.8807119,1.6784749 21,2.79776303 21,4.1784749 L21,19.8215251 C21,20.4013736 20.7984395,20.9631907 20.4298256,21.4107932 C19.552097,22.4766065 17.9765451,22.6290792 16.9107319,21.7513507 L12,17.7064749 L12,19.5 C12,21.0976809 10.75108,22.4036609 9.17627279,22.4949073 L9,22.5 C7.40231912,22.5 6.09633912,21.25108 6.00509269,19.6762728 L6,19.5 L5.99981203,16.8999437 C3.71766536,16.4366008 2,14.4188915 2,12 C2,9.23857625 4.23857625,7 7,7 L11.1412346,7 L16.9107319,2.24864931 C17.3583344,1.88003543 17.9201515,1.6784749 18.5,1.6784749 Z M8,16.9994749 L8,19.5 C8,20.0522847 8.44771525,20.5 9,20.5 C9.51283584,20.5 9.93550716,20.1139598 9.99327227,19.6166211 L10,19.5 L10,16.9994749 L8,16.9994749 L8,19.5 L8,16.9994749 Z M18.5,3.6784749 C18.3840303,3.6784749 18.2716669,3.71878701 18.1821464,3.79250978 L12.4126491,8.54386047 C12.054567,8.83875158 11.6051134,9 11.1412346,9 L7,9 C5.34314575,9 4,10.3431458 4,12 C4,13.6568542 5.34314575,15 7,15 L11.1412346,15 C11.6051134,15 12.054567,15.1612484 12.4126491,15.4561395 L18.1821464,20.2074902 C18.395309,20.3830359 18.7104194,20.3525414 18.8859651,20.1393787 C18.9596879,20.0498582 19,19.9374948 19,19.8215251 L19,4.1784749 C19,3.90233253 18.7761424,3.6784749 18.5,3.6784749 Z\\\"></path></g></svg>\"//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvYXNzZXRzL3N2Zy9jaGFubmVsX3N2Zy5zdmcuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9UZWxlZ3JhbWpzLy4vc3JjL2Fzc2V0cy9zdmcvY2hhbm5lbF9zdmcuc3ZnPzJjMjEiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBcIjxzdmcgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIiB3aWR0aD1cXFwiMjRcXFwiIGhlaWdodD1cXFwiMjRcXFwiIHZpZXdCb3g9XFxcIjAgMCAyNCAyNFxcXCI+PGcgZmlsbD1cXFwibm9uZVxcXCIgZmlsbC1ydWxlPVxcXCJldmVub2RkXFxcIj48cG9seWdvbiBwb2ludHM9XFxcIjAgMCAyNCAwIDI0IDI0IDAgMjRcXFwiPjwvcG9seWdvbj48cGF0aCBmaWxsPVxcXCIjMDAwXFxcIiBmaWxsLXJ1bGU9XFxcIm5vbnplcm9cXFwiIGQ9XFxcIk0xOC41LDEuNjc4NDc0OSBDMTkuODgwNzExOSwxLjY3ODQ3NDkgMjEsMi43OTc3NjMwMyAyMSw0LjE3ODQ3NDkgTDIxLDE5LjgyMTUyNTEgQzIxLDIwLjQwMTM3MzYgMjAuNzk4NDM5NSwyMC45NjMxOTA3IDIwLjQyOTgyNTYsMjEuNDEwNzkzMiBDMTkuNTUyMDk3LDIyLjQ3NjYwNjUgMTcuOTc2NTQ1MSwyMi42MjkwNzkyIDE2LjkxMDczMTksMjEuNzUxMzUwNyBMMTIsMTcuNzA2NDc0OSBMMTIsMTkuNSBDMTIsMjEuMDk3NjgwOSAxMC43NTEwOCwyMi40MDM2NjA5IDkuMTc2MjcyNzksMjIuNDk0OTA3MyBMOSwyMi41IEM3LjQwMjMxOTEyLDIyLjUgNi4wOTYzMzkxMiwyMS4yNTEwOCA2LjAwNTA5MjY5LDE5LjY3NjI3MjggTDYsMTkuNSBMNS45OTk4MTIwMywxNi44OTk5NDM3IEMzLjcxNzY2NTM2LDE2LjQzNjYwMDggMiwxNC40MTg4OTE1IDIsMTIgQzIsOS4yMzg1NzYyNSA0LjIzODU3NjI1LDcgNyw3IEwxMS4xNDEyMzQ2LDcgTDE2LjkxMDczMTksMi4yNDg2NDkzMSBDMTcuMzU4MzM0NCwxLjg4MDAzNTQzIDE3LjkyMDE1MTUsMS42Nzg0NzQ5IDE4LjUsMS42Nzg0NzQ5IFogTTgsMTYuOTk5NDc0OSBMOCwxOS41IEM4LDIwLjA1MjI4NDcgOC40NDc3MTUyNSwyMC41IDksMjAuNSBDOS41MTI4MzU4NCwyMC41IDkuOTM1NTA3MTYsMjAuMTEzOTU5OCA5Ljk5MzI3MjI3LDE5LjYxNjYyMTEgTDEwLDE5LjUgTDEwLDE2Ljk5OTQ3NDkgTDgsMTYuOTk5NDc0OSBMOCwxOS41IEw4LDE2Ljk5OTQ3NDkgWiBNMTguNSwzLjY3ODQ3NDkgQzE4LjM4NDAzMDMsMy42Nzg0NzQ5IDE4LjI3MTY2NjksMy43MTg3ODcwMSAxOC4xODIxNDY0LDMuNzkyNTA5NzggTDEyLjQxMjY0OTEsOC41NDM4NjA0NyBDMTIuMDU0NTY3LDguODM4NzUxNTggMTEuNjA1MTEzNCw5IDExLjE0MTIzNDYsOSBMNyw5IEM1LjM0MzE0NTc1LDkgNCwxMC4zNDMxNDU4IDQsMTIgQzQsMTMuNjU2ODU0MiA1LjM0MzE0NTc1LDE1IDcsMTUgTDExLjE0MTIzNDYsMTUgQzExLjYwNTExMzQsMTUgMTIuMDU0NTY3LDE1LjE2MTI0ODQgMTIuNDEyNjQ5MSwxNS40NTYxMzk1IEwxOC4xODIxNDY0LDIwLjIwNzQ5MDIgQzE4LjM5NTMwOSwyMC4zODMwMzU5IDE4LjcxMDQxOTQsMjAuMzUyNTQxNCAxOC44ODU5NjUxLDIwLjEzOTM3ODcgQzE4Ljk1OTY4NzksMjAuMDQ5ODU4MiAxOSwxOS45Mzc0OTQ4IDE5LDE5LjgyMTUyNTEgTDE5LDQuMTc4NDc0OSBDMTksMy45MDIzMzI1MyAxOC43NzYxNDI0LDMuNjc4NDc0OSAxOC41LDMuNjc4NDc0OSBaXFxcIj48L3BhdGg+PC9nPjwvc3ZnPlwiIl0sIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/assets/svg/channel_svg.svg\n");

/***/ }),

/***/ "./src/assets/svg/chatsplaceholder_svg.svg":
/*!*************************************************!*\
  !*** ./src/assets/svg/chatsplaceholder_svg.svg ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"144\\\" height=\\\"144\\\" viewBox=\\\"0 0 144 144\\\"><g fill=\\\"none\\\" fill-rule=\\\"evenodd\\\"><rect width=\\\"144\\\" height=\\\"144\\\"></rect><path fill=\\\"#000\\\" fill-rule=\\\"nonzero\\\" d=\\\"M132,42 C135.077015,42 137.613043,44.3162411 137.959634,47.3002732 L138,48 L138,136.551472 C138,140.196551 135.045079,143.151472 131.4,143.151472 C129.899632,143.151472 128.451937,142.640599 127.289478,141.715183 L126.733095,141.218377 L105.514719,120 L48.0000938,120 C44.6863853,120 42.0000938,117.313708 42.0000938,114 C42.0000938,110.922985 44.3163349,108.386957 47.300367,108.040366 L48.0000938,108 L96.0002605,108 C112.132789,108 125.291169,95.2661597 125.972543,79.3013377 L126.000261,78 L126.000261,48 L126.040366,47.3002732 C126.386957,44.3162411 128.922985,42 132,42 Z M96,6 C105.941125,6 114,14.0588745 114,24 L114,78 C114,87.9411255 105.941125,96 96,96 L38.4852814,96 L17.2669048,117.218377 C14.6894444,119.795837 10.5105556,119.795837 7.93309524,117.218377 C6.69535515,115.980637 6,114.301901 6,112.551472 L6,24 C6,14.0588745 14.0588745,6 24,6 L96,6 Z\\\"></path></g></svg>\"//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvYXNzZXRzL3N2Zy9jaGF0c3BsYWNlaG9sZGVyX3N2Zy5zdmcuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9UZWxlZ3JhbWpzLy4vc3JjL2Fzc2V0cy9zdmcvY2hhdHNwbGFjZWhvbGRlcl9zdmcuc3ZnP2M4MDgiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBcIjxzdmcgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIiB3aWR0aD1cXFwiMTQ0XFxcIiBoZWlnaHQ9XFxcIjE0NFxcXCIgdmlld0JveD1cXFwiMCAwIDE0NCAxNDRcXFwiPjxnIGZpbGw9XFxcIm5vbmVcXFwiIGZpbGwtcnVsZT1cXFwiZXZlbm9kZFxcXCI+PHJlY3Qgd2lkdGg9XFxcIjE0NFxcXCIgaGVpZ2h0PVxcXCIxNDRcXFwiPjwvcmVjdD48cGF0aCBmaWxsPVxcXCIjMDAwXFxcIiBmaWxsLXJ1bGU9XFxcIm5vbnplcm9cXFwiIGQ9XFxcIk0xMzIsNDIgQzEzNS4wNzcwMTUsNDIgMTM3LjYxMzA0Myw0NC4zMTYyNDExIDEzNy45NTk2MzQsNDcuMzAwMjczMiBMMTM4LDQ4IEwxMzgsMTM2LjU1MTQ3MiBDMTM4LDE0MC4xOTY1NTEgMTM1LjA0NTA3OSwxNDMuMTUxNDcyIDEzMS40LDE0My4xNTE0NzIgQzEyOS44OTk2MzIsMTQzLjE1MTQ3MiAxMjguNDUxOTM3LDE0Mi42NDA1OTkgMTI3LjI4OTQ3OCwxNDEuNzE1MTgzIEwxMjYuNzMzMDk1LDE0MS4yMTgzNzcgTDEwNS41MTQ3MTksMTIwIEw0OC4wMDAwOTM4LDEyMCBDNDQuNjg2Mzg1MywxMjAgNDIuMDAwMDkzOCwxMTcuMzEzNzA4IDQyLjAwMDA5MzgsMTE0IEM0Mi4wMDAwOTM4LDExMC45MjI5ODUgNDQuMzE2MzM0OSwxMDguMzg2OTU3IDQ3LjMwMDM2NywxMDguMDQwMzY2IEw0OC4wMDAwOTM4LDEwOCBMOTYuMDAwMjYwNSwxMDggQzExMi4xMzI3ODksMTA4IDEyNS4yOTExNjksOTUuMjY2MTU5NyAxMjUuOTcyNTQzLDc5LjMwMTMzNzcgTDEyNi4wMDAyNjEsNzggTDEyNi4wMDAyNjEsNDggTDEyNi4wNDAzNjYsNDcuMzAwMjczMiBDMTI2LjM4Njk1Nyw0NC4zMTYyNDExIDEyOC45MjI5ODUsNDIgMTMyLDQyIFogTTk2LDYgQzEwNS45NDExMjUsNiAxMTQsMTQuMDU4ODc0NSAxMTQsMjQgTDExNCw3OCBDMTE0LDg3Ljk0MTEyNTUgMTA1Ljk0MTEyNSw5NiA5Niw5NiBMMzguNDg1MjgxNCw5NiBMMTcuMjY2OTA0OCwxMTcuMjE4Mzc3IEMxNC42ODk0NDQ0LDExOS43OTU4MzcgMTAuNTEwNTU1NiwxMTkuNzk1ODM3IDcuOTMzMDk1MjQsMTE3LjIxODM3NyBDNi42OTUzNTUxNSwxMTUuOTgwNjM3IDYsMTE0LjMwMTkwMSA2LDExMi41NTE0NzIgTDYsMjQgQzYsMTQuMDU4ODc0NSAxNC4wNTg4NzQ1LDYgMjQsNiBMOTYsNiBaXFxcIj48L3BhdGg+PC9nPjwvc3ZnPlwiIl0sIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/assets/svg/chatsplaceholder_svg.svg\n");

/***/ }),

/***/ "./src/assets/svg/checkboxempty_svg.svg":
/*!**********************************************!*\
  !*** ./src/assets/svg/checkboxempty_svg.svg ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"24\\\" height=\\\"24\\\" viewBox=\\\"0 0 24 24\\\"><g fill=\\\"none\\\" fill-rule=\\\"evenodd\\\"><polygon points=\\\"0 0 24 0 24 24 0 24\\\"></polygon><path fill=\\\"#000\\\" fill-rule=\\\"nonzero\\\" d=\\\"M6,3 L18,3 C19.6568542,3 21,4.34314575 21,6 L21,18 C21,19.6568542 19.6568542,21 18,21 L6,21 C4.34314575,21 3,19.6568542 3,18 L3,6 C3,4.34314575 4.34314575,3 6,3 Z M6,5 C5.44771525,5 5,5.44771525 5,6 L5,18 C5,18.5522847 5.44771525,19 6,19 L18,19 C18.5522847,19 19,18.5522847 19,18 L19,6 C19,5.44771525 18.5522847,5 18,5 L6,5 Z\\\"></path></g></svg>\"//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvYXNzZXRzL3N2Zy9jaGVja2JveGVtcHR5X3N2Zy5zdmcuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9UZWxlZ3JhbWpzLy4vc3JjL2Fzc2V0cy9zdmcvY2hlY2tib3hlbXB0eV9zdmcuc3ZnPzZmOGIiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBcIjxzdmcgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIiB3aWR0aD1cXFwiMjRcXFwiIGhlaWdodD1cXFwiMjRcXFwiIHZpZXdCb3g9XFxcIjAgMCAyNCAyNFxcXCI+PGcgZmlsbD1cXFwibm9uZVxcXCIgZmlsbC1ydWxlPVxcXCJldmVub2RkXFxcIj48cG9seWdvbiBwb2ludHM9XFxcIjAgMCAyNCAwIDI0IDI0IDAgMjRcXFwiPjwvcG9seWdvbj48cGF0aCBmaWxsPVxcXCIjMDAwXFxcIiBmaWxsLXJ1bGU9XFxcIm5vbnplcm9cXFwiIGQ9XFxcIk02LDMgTDE4LDMgQzE5LjY1Njg1NDIsMyAyMSw0LjM0MzE0NTc1IDIxLDYgTDIxLDE4IEMyMSwxOS42NTY4NTQyIDE5LjY1Njg1NDIsMjEgMTgsMjEgTDYsMjEgQzQuMzQzMTQ1NzUsMjEgMywxOS42NTY4NTQyIDMsMTggTDMsNiBDMyw0LjM0MzE0NTc1IDQuMzQzMTQ1NzUsMyA2LDMgWiBNNiw1IEM1LjQ0NzcxNTI1LDUgNSw1LjQ0NzcxNTI1IDUsNiBMNSwxOCBDNSwxOC41NTIyODQ3IDUuNDQ3NzE1MjUsMTkgNiwxOSBMMTgsMTkgQzE4LjU1MjI4NDcsMTkgMTksMTguNTUyMjg0NyAxOSwxOCBMMTksNiBDMTksNS40NDc3MTUyNSAxOC41NTIyODQ3LDUgMTgsNSBMNiw1IFpcXFwiPjwvcGF0aD48L2c+PC9zdmc+XCIiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/assets/svg/checkboxempty_svg.svg\n");

/***/ }),

/***/ "./src/assets/svg/close_svg.svg":
/*!**************************************!*\
  !*** ./src/assets/svg/close_svg.svg ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"24\\\" height=\\\"24\\\" viewBox=\\\"0 0 24 24\\\"><g fill=\\\"none\\\" fill-rule=\\\"evenodd\\\"><polygon points=\\\"0 0 24 0 24 24 0 24\\\"></polygon><path fill=\\\"#000\\\" fill-rule=\\\"nonzero\\\" d=\\\"M5.20970461,5.38710056 L5.29289322,5.29289322 C5.65337718,4.93240926 6.22060824,4.90467972 6.61289944,5.20970461 L6.70710678,5.29289322 L12,10.585 L17.2928932,5.29289322 C17.6834175,4.90236893 18.3165825,4.90236893 18.7071068,5.29289322 C19.0976311,5.68341751 19.0976311,6.31658249 18.7071068,6.70710678 L13.415,12 L18.7071068,17.2928932 C19.0675907,17.6533772 19.0953203,18.2206082 18.7902954,18.6128994 L18.7071068,18.7071068 C18.3466228,19.0675907 17.7793918,19.0953203 17.3871006,18.7902954 L17.2928932,18.7071068 L12,13.415 L6.70710678,18.7071068 C6.31658249,19.0976311 5.68341751,19.0976311 5.29289322,18.7071068 C4.90236893,18.3165825 4.90236893,17.6834175 5.29289322,17.2928932 L10.585,12 L5.29289322,6.70710678 C4.93240926,6.34662282 4.90467972,5.77939176 5.20970461,5.38710056 L5.29289322,5.29289322 L5.20970461,5.38710056 Z\\\"></path></g></svg>\"//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvYXNzZXRzL3N2Zy9jbG9zZV9zdmcuc3ZnLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vVGVsZWdyYW1qcy8uL3NyYy9hc3NldHMvc3ZnL2Nsb3NlX3N2Zy5zdmc/YmNlOCJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IFwiPHN2ZyB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiIHdpZHRoPVxcXCIyNFxcXCIgaGVpZ2h0PVxcXCIyNFxcXCIgdmlld0JveD1cXFwiMCAwIDI0IDI0XFxcIj48ZyBmaWxsPVxcXCJub25lXFxcIiBmaWxsLXJ1bGU9XFxcImV2ZW5vZGRcXFwiPjxwb2x5Z29uIHBvaW50cz1cXFwiMCAwIDI0IDAgMjQgMjQgMCAyNFxcXCI+PC9wb2x5Z29uPjxwYXRoIGZpbGw9XFxcIiMwMDBcXFwiIGZpbGwtcnVsZT1cXFwibm9uemVyb1xcXCIgZD1cXFwiTTUuMjA5NzA0NjEsNS4zODcxMDA1NiBMNS4yOTI4OTMyMiw1LjI5Mjg5MzIyIEM1LjY1MzM3NzE4LDQuOTMyNDA5MjYgNi4yMjA2MDgyNCw0LjkwNDY3OTcyIDYuNjEyODk5NDQsNS4yMDk3MDQ2MSBMNi43MDcxMDY3OCw1LjI5Mjg5MzIyIEwxMiwxMC41ODUgTDE3LjI5Mjg5MzIsNS4yOTI4OTMyMiBDMTcuNjgzNDE3NSw0LjkwMjM2ODkzIDE4LjMxNjU4MjUsNC45MDIzNjg5MyAxOC43MDcxMDY4LDUuMjkyODkzMjIgQzE5LjA5NzYzMTEsNS42ODM0MTc1MSAxOS4wOTc2MzExLDYuMzE2NTgyNDkgMTguNzA3MTA2OCw2LjcwNzEwNjc4IEwxMy40MTUsMTIgTDE4LjcwNzEwNjgsMTcuMjkyODkzMiBDMTkuMDY3NTkwNywxNy42NTMzNzcyIDE5LjA5NTMyMDMsMTguMjIwNjA4MiAxOC43OTAyOTU0LDE4LjYxMjg5OTQgTDE4LjcwNzEwNjgsMTguNzA3MTA2OCBDMTguMzQ2NjIyOCwxOS4wNjc1OTA3IDE3Ljc3OTM5MTgsMTkuMDk1MzIwMyAxNy4zODcxMDA2LDE4Ljc5MDI5NTQgTDE3LjI5Mjg5MzIsMTguNzA3MTA2OCBMMTIsMTMuNDE1IEw2LjcwNzEwNjc4LDE4LjcwNzEwNjggQzYuMzE2NTgyNDksMTkuMDk3NjMxMSA1LjY4MzQxNzUxLDE5LjA5NzYzMTEgNS4yOTI4OTMyMiwxOC43MDcxMDY4IEM0LjkwMjM2ODkzLDE4LjMxNjU4MjUgNC45MDIzNjg5MywxNy42ODM0MTc1IDUuMjkyODkzMjIsMTcuMjkyODkzMiBMMTAuNTg1LDEyIEw1LjI5Mjg5MzIyLDYuNzA3MTA2NzggQzQuOTMyNDA5MjYsNi4zNDY2MjI4MiA0LjkwNDY3OTcyLDUuNzc5MzkxNzYgNS4yMDk3MDQ2MSw1LjM4NzEwMDU2IEw1LjI5Mjg5MzIyLDUuMjkyODkzMjIgTDUuMjA5NzA0NjEsNS4zODcxMDA1NiBaXFxcIj48L3BhdGg+PC9nPjwvc3ZnPlwiIl0sIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/assets/svg/close_svg.svg\n");

/***/ }),

/***/ "./src/assets/svg/edit_svg.svg":
/*!*************************************!*\
  !*** ./src/assets/svg/edit_svg.svg ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"24\\\" height=\\\"24\\\" viewBox=\\\"0 0 24 24\\\"><g fill=\\\"none\\\" fill-rule=\\\"evenodd\\\"><polygon points=\\\"0 0 24 0 24 24 0 24\\\"></polygon><path fill=\\\"#000\\\" fill-rule=\\\"nonzero\\\" d=\\\"M7.70710678,20.7071068 C7.5195704,20.8946432 7.26521649,21 7,21 L4,21 C3.44771525,21 3,20.5522847 3,20 L3,17 C3,16.7347835 3.10535684,16.4804296 3.29289322,16.2928932 L16.5857864,3 C17.3257272,2.26005924 18.5012114,2.22111499 19.2869988,2.88316725 L19.4142136,3 L21,4.58578644 C21.7399408,5.3257272 21.778885,6.50121136 21.1168328,7.28699879 L21,7.41421356 L7.70710678,20.7071068 Z M5,17.4142136 L5,19 L6.58578644,19 L16.5857864,9 L15,7.41421356 L5,17.4142136 Z M18,4.41421356 L16.414,5.99921356 L18,7.58521356 L19.5857864,6 L18,4.41421356 Z\\\"></path></g></svg>\"//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvYXNzZXRzL3N2Zy9lZGl0X3N2Zy5zdmcuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9UZWxlZ3JhbWpzLy4vc3JjL2Fzc2V0cy9zdmcvZWRpdF9zdmcuc3ZnPzU4NDEiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBcIjxzdmcgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIiB3aWR0aD1cXFwiMjRcXFwiIGhlaWdodD1cXFwiMjRcXFwiIHZpZXdCb3g9XFxcIjAgMCAyNCAyNFxcXCI+PGcgZmlsbD1cXFwibm9uZVxcXCIgZmlsbC1ydWxlPVxcXCJldmVub2RkXFxcIj48cG9seWdvbiBwb2ludHM9XFxcIjAgMCAyNCAwIDI0IDI0IDAgMjRcXFwiPjwvcG9seWdvbj48cGF0aCBmaWxsPVxcXCIjMDAwXFxcIiBmaWxsLXJ1bGU9XFxcIm5vbnplcm9cXFwiIGQ9XFxcIk03LjcwNzEwNjc4LDIwLjcwNzEwNjggQzcuNTE5NTcwNCwyMC44OTQ2NDMyIDcuMjY1MjE2NDksMjEgNywyMSBMNCwyMSBDMy40NDc3MTUyNSwyMSAzLDIwLjU1MjI4NDcgMywyMCBMMywxNyBDMywxNi43MzQ3ODM1IDMuMTA1MzU2ODQsMTYuNDgwNDI5NiAzLjI5Mjg5MzIyLDE2LjI5Mjg5MzIgTDE2LjU4NTc4NjQsMyBDMTcuMzI1NzI3MiwyLjI2MDA1OTI0IDE4LjUwMTIxMTQsMi4yMjExMTQ5OSAxOS4yODY5OTg4LDIuODgzMTY3MjUgTDE5LjQxNDIxMzYsMyBMMjEsNC41ODU3ODY0NCBDMjEuNzM5OTQwOCw1LjMyNTcyNzIgMjEuNzc4ODg1LDYuNTAxMjExMzYgMjEuMTE2ODMyOCw3LjI4Njk5ODc5IEwyMSw3LjQxNDIxMzU2IEw3LjcwNzEwNjc4LDIwLjcwNzEwNjggWiBNNSwxNy40MTQyMTM2IEw1LDE5IEw2LjU4NTc4NjQ0LDE5IEwxNi41ODU3ODY0LDkgTDE1LDcuNDE0MjEzNTYgTDUsMTcuNDE0MjEzNiBaIE0xOCw0LjQxNDIxMzU2IEwxNi40MTQsNS45OTkyMTM1NiBMMTgsNy41ODUyMTM1NiBMMTkuNTg1Nzg2NCw2IEwxOCw0LjQxNDIxMzU2IFpcXFwiPjwvcGF0aD48L2c+PC9zdmc+XCIiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/assets/svg/edit_svg.svg\n");

/***/ }),

/***/ "./src/assets/svg/group_svg.svg":
/*!**************************************!*\
  !*** ./src/assets/svg/group_svg.svg ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"24\\\" height=\\\"24\\\" viewBox=\\\"0 0 24 24\\\"><g fill=\\\"none\\\" fill-rule=\\\"evenodd\\\"><polygon points=\\\"0 0 24 0 24 24 0 24\\\"></polygon><path fill=\\\"#000\\\" fill-rule=\\\"nonzero\\\" d=\\\"M8,13 C11.3229116,13 13.7530244,13.8337117 15.2223821,15.5699359 C15.724477,16.1632234 16,16.915291 16,17.6925226 L16,18.5 C16,19.8807119 14.8807119,21 13.5,21 L2.5,21 C1.11928813,21 0,19.8807119 0,18.5 L0,17.6925204 C0,16.9152876 0.275524605,16.1632192 0.777621166,15.569932 C2.24697824,13.8337108 4.67709024,13 8,13 Z M17.9515112,14.0335753 L18.0683205,14.0347288 C20.2213596,14.1802785 21.8813904,14.7876525 23.0130897,15.8958397 C23.5916808,16.4623828 23.9388003,17.2206225 23.9926356,18.0235027 L24,18.2434663 L24,18.75 C24,19.940864 23.0748384,20.9156449 21.9040488,20.9948092 L21.75,21 L19,21 C18.4477153,21 18,20.5522847 18,20 C18,19.4871642 18.3860402,19.0644928 18.8833789,19.0067277 L19,19 L21.75,19 C21.8683467,19 21.9674868,18.9177666 21.9933973,18.8073227 L22,18.75 L22,18.2434663 C22,17.8977921 21.8608093,17.5666871 21.6138154,17.3248364 C20.8641159,16.5907126 19.6490875,16.1461566 17.9334244,16.0301743 C17.3823973,15.9929238 16.9658991,15.5160306 17.0031496,14.9650035 C17.0377394,14.4533355 17.4514089,14.0576643 17.9515112,14.0335753 L17.9515112,14.0335753 Z M8,15 C5.21130036,15 3.33538166,15.6435809 2.30428673,16.861943 C2.10781409,17.0940989 2,17.3883868 2,17.6925212 L2,18.5 C2,18.7761424 2.22385763,19 2.5,19 L13.5,19 C13.7761424,19 14,18.7761424 14,18.5 L14,17.6925226 C14,17.3883883 13.8921864,17.0941004 13.6957148,16.8619448 C12.6646202,15.6435815 10.788701,15 8,15 Z M17,5 C18.9329966,5 20.5,6.56700338 20.5,8.5 C20.5,10.4329966 18.9329966,12 17,12 C15.0670034,12 13.5,10.4329966 13.5,8.5 C13.5,6.56700338 15.0670034,5 17,5 Z M8,3 C10.209139,3 12,4.790861 12,7 C12,9.209139 10.209139,11 8,11 C5.790861,11 4,9.209139 4,7 C4,4.790861 5.790861,3 8,3 Z M17,7 C16.1715729,7 15.5,7.67157288 15.5,8.5 C15.5,9.32842712 16.1715729,10 17,10 C17.8284271,10 18.5,9.32842712 18.5,8.5 C18.5,7.67157288 17.8284271,7 17,7 Z M8,5 C6.8954305,5 6,5.8954305 6,7 C6,8.1045695 6.8954305,9 8,9 C9.1045695,9 10,8.1045695 10,7 C10,5.8954305 9.1045695,5 8,5 Z\\\"></path></g></svg>\"//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvYXNzZXRzL3N2Zy9ncm91cF9zdmcuc3ZnLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vVGVsZWdyYW1qcy8uL3NyYy9hc3NldHMvc3ZnL2dyb3VwX3N2Zy5zdmc/ODFmNCJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IFwiPHN2ZyB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiIHdpZHRoPVxcXCIyNFxcXCIgaGVpZ2h0PVxcXCIyNFxcXCIgdmlld0JveD1cXFwiMCAwIDI0IDI0XFxcIj48ZyBmaWxsPVxcXCJub25lXFxcIiBmaWxsLXJ1bGU9XFxcImV2ZW5vZGRcXFwiPjxwb2x5Z29uIHBvaW50cz1cXFwiMCAwIDI0IDAgMjQgMjQgMCAyNFxcXCI+PC9wb2x5Z29uPjxwYXRoIGZpbGw9XFxcIiMwMDBcXFwiIGZpbGwtcnVsZT1cXFwibm9uemVyb1xcXCIgZD1cXFwiTTgsMTMgQzExLjMyMjkxMTYsMTMgMTMuNzUzMDI0NCwxMy44MzM3MTE3IDE1LjIyMjM4MjEsMTUuNTY5OTM1OSBDMTUuNzI0NDc3LDE2LjE2MzIyMzQgMTYsMTYuOTE1MjkxIDE2LDE3LjY5MjUyMjYgTDE2LDE4LjUgQzE2LDE5Ljg4MDcxMTkgMTQuODgwNzExOSwyMSAxMy41LDIxIEwyLjUsMjEgQzEuMTE5Mjg4MTMsMjEgMCwxOS44ODA3MTE5IDAsMTguNSBMMCwxNy42OTI1MjA0IEMwLDE2LjkxNTI4NzYgMC4yNzU1MjQ2MDUsMTYuMTYzMjE5MiAwLjc3NzYyMTE2NiwxNS41Njk5MzIgQzIuMjQ2OTc4MjQsMTMuODMzNzEwOCA0LjY3NzA5MDI0LDEzIDgsMTMgWiBNMTcuOTUxNTExMiwxNC4wMzM1NzUzIEwxOC4wNjgzMjA1LDE0LjAzNDcyODggQzIwLjIyMTM1OTYsMTQuMTgwMjc4NSAyMS44ODEzOTA0LDE0Ljc4NzY1MjUgMjMuMDEzMDg5NywxNS44OTU4Mzk3IEMyMy41OTE2ODA4LDE2LjQ2MjM4MjggMjMuOTM4ODAwMywxNy4yMjA2MjI1IDIzLjk5MjYzNTYsMTguMDIzNTAyNyBMMjQsMTguMjQzNDY2MyBMMjQsMTguNzUgQzI0LDE5Ljk0MDg2NCAyMy4wNzQ4Mzg0LDIwLjkxNTY0NDkgMjEuOTA0MDQ4OCwyMC45OTQ4MDkyIEwyMS43NSwyMSBMMTksMjEgQzE4LjQ0NzcxNTMsMjEgMTgsMjAuNTUyMjg0NyAxOCwyMCBDMTgsMTkuNDg3MTY0MiAxOC4zODYwNDAyLDE5LjA2NDQ5MjggMTguODgzMzc4OSwxOS4wMDY3Mjc3IEwxOSwxOSBMMjEuNzUsMTkgQzIxLjg2ODM0NjcsMTkgMjEuOTY3NDg2OCwxOC45MTc3NjY2IDIxLjk5MzM5NzMsMTguODA3MzIyNyBMMjIsMTguNzUgTDIyLDE4LjI0MzQ2NjMgQzIyLDE3Ljg5Nzc5MjEgMjEuODYwODA5MywxNy41NjY2ODcxIDIxLjYxMzgxNTQsMTcuMzI0ODM2NCBDMjAuODY0MTE1OSwxNi41OTA3MTI2IDE5LjY0OTA4NzUsMTYuMTQ2MTU2NiAxNy45MzM0MjQ0LDE2LjAzMDE3NDMgQzE3LjM4MjM5NzMsMTUuOTkyOTIzOCAxNi45NjU4OTkxLDE1LjUxNjAzMDYgMTcuMDAzMTQ5NiwxNC45NjUwMDM1IEMxNy4wMzc3Mzk0LDE0LjQ1MzMzNTUgMTcuNDUxNDA4OSwxNC4wNTc2NjQzIDE3Ljk1MTUxMTIsMTQuMDMzNTc1MyBMMTcuOTUxNTExMiwxNC4wMzM1NzUzIFogTTgsMTUgQzUuMjExMzAwMzYsMTUgMy4zMzUzODE2NiwxNS42NDM1ODA5IDIuMzA0Mjg2NzMsMTYuODYxOTQzIEMyLjEwNzgxNDA5LDE3LjA5NDA5ODkgMiwxNy4zODgzODY4IDIsMTcuNjkyNTIxMiBMMiwxOC41IEMyLDE4Ljc3NjE0MjQgMi4yMjM4NTc2MywxOSAyLjUsMTkgTDEzLjUsMTkgQzEzLjc3NjE0MjQsMTkgMTQsMTguNzc2MTQyNCAxNCwxOC41IEwxNCwxNy42OTI1MjI2IEMxNCwxNy4zODgzODgzIDEzLjg5MjE4NjQsMTcuMDk0MTAwNCAxMy42OTU3MTQ4LDE2Ljg2MTk0NDggQzEyLjY2NDYyMDIsMTUuNjQzNTgxNSAxMC43ODg3MDEsMTUgOCwxNSBaIE0xNyw1IEMxOC45MzI5OTY2LDUgMjAuNSw2LjU2NzAwMzM4IDIwLjUsOC41IEMyMC41LDEwLjQzMjk5NjYgMTguOTMyOTk2NiwxMiAxNywxMiBDMTUuMDY3MDAzNCwxMiAxMy41LDEwLjQzMjk5NjYgMTMuNSw4LjUgQzEzLjUsNi41NjcwMDMzOCAxNS4wNjcwMDM0LDUgMTcsNSBaIE04LDMgQzEwLjIwOTEzOSwzIDEyLDQuNzkwODYxIDEyLDcgQzEyLDkuMjA5MTM5IDEwLjIwOTEzOSwxMSA4LDExIEM1Ljc5MDg2MSwxMSA0LDkuMjA5MTM5IDQsNyBDNCw0Ljc5MDg2MSA1Ljc5MDg2MSwzIDgsMyBaIE0xNyw3IEMxNi4xNzE1NzI5LDcgMTUuNSw3LjY3MTU3Mjg4IDE1LjUsOC41IEMxNS41LDkuMzI4NDI3MTIgMTYuMTcxNTcyOSwxMCAxNywxMCBDMTcuODI4NDI3MSwxMCAxOC41LDkuMzI4NDI3MTIgMTguNSw4LjUgQzE4LjUsNy42NzE1NzI4OCAxNy44Mjg0MjcxLDcgMTcsNyBaIE04LDUgQzYuODk1NDMwNSw1IDYsNS44OTU0MzA1IDYsNyBDNiw4LjEwNDU2OTUgNi44OTU0MzA1LDkgOCw5IEM5LjEwNDU2OTUsOSAxMCw4LjEwNDU2OTUgMTAsNyBDMTAsNS44OTU0MzA1IDkuMTA0NTY5NSw1IDgsNSBaXFxcIj48L3BhdGg+PC9nPjwvc3ZnPlwiIl0sIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/assets/svg/group_svg.svg\n");

/***/ }),

/***/ "./src/assets/svg/info_svg.svg":
/*!*************************************!*\
  !*** ./src/assets/svg/info_svg.svg ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 24 24\\\"><g fill=\\\"none\\\" fill-rule=\\\"evenodd\\\"><path d=\\\"M0 0h24v24H0z\\\" style=\\\"fill: transparent !important\\\"></path><path d=\\\"M12 1a11 11 0 110 22 11 11 0 010-22zm0 2a9 9 0 100 18 9 9 0 000-18zm0 8a1 1 0 011 .88V17a1 1 0 01-2 .12V12a1 1 0 011-1zm0-4.5a1.5 1.5 0 110 3 1.5 1.5 0 010-3z\\\" fill=\\\"currentColor\\\"></path></g></svg>\"//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvYXNzZXRzL3N2Zy9pbmZvX3N2Zy5zdmcuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9UZWxlZ3JhbWpzLy4vc3JjL2Fzc2V0cy9zdmcvaW5mb19zdmcuc3ZnP2ZiYTAiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBcIjxzdmcgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIiB2aWV3Qm94PVxcXCIwIDAgMjQgMjRcXFwiPjxnIGZpbGw9XFxcIm5vbmVcXFwiIGZpbGwtcnVsZT1cXFwiZXZlbm9kZFxcXCI+PHBhdGggZD1cXFwiTTAgMGgyNHYyNEgwelxcXCIgc3R5bGU9XFxcImZpbGw6IHRyYW5zcGFyZW50ICFpbXBvcnRhbnRcXFwiPjwvcGF0aD48cGF0aCBkPVxcXCJNMTIgMWExMSAxMSAwIDExMCAyMiAxMSAxMSAwIDAxMC0yMnptMCAyYTkgOSAwIDEwMCAxOCA5IDkgMCAwMDAtMTh6bTAgOGExIDEgMCAwMTEgLjg4VjE3YTEgMSAwIDAxLTIgLjEyVjEyYTEgMSAwIDAxMS0xem0wLTQuNWExLjUgMS41IDAgMTEwIDMgMS41IDEuNSAwIDAxMC0zelxcXCIgZmlsbD1cXFwiY3VycmVudENvbG9yXFxcIj48L3BhdGg+PC9nPjwvc3ZnPlwiIl0sIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/assets/svg/info_svg.svg\n");

/***/ }),

/***/ "./src/assets/svg/largeplay_svg.svg":
/*!******************************************!*\
  !*** ./src/assets/svg/largeplay_svg.svg ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"36\\\" height=\\\"36\\\" viewBox=\\\"0 0 36 36\\\"><g fill=\\\"none\\\" fill-rule=\\\"evenodd\\\"><polygon points=\\\"0 0 36 0 36 36 0 36\\\"></polygon><path fill=\\\"#000\\\" fill-rule=\\\"nonzero\\\" d=\\\"M11.5449884,6.00424243 L28.7100867,17.1615564 C29.1731464,17.4625451 29.3045308,18.0819287 29.003542,18.5449884 C28.9273209,18.6622516 28.82735,18.7622225 28.7100867,18.8384436 L11.5449884,29.9957576 C11.0819287,30.2967463 10.4625451,30.1653619 10.1615564,29.7023023 C10.0561197,29.540092 10,29.3507799 10,29.157314 L10,6.84268604 C10,6.29040129 10.4477153,5.84268604 11,5.84268604 C11.1934659,5.84268604 11.3827781,5.89880576 11.5449884,6.00424243 Z\\\"></path></g></svg>\"//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvYXNzZXRzL3N2Zy9sYXJnZXBsYXlfc3ZnLnN2Zy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL1RlbGVncmFtanMvLi9zcmMvYXNzZXRzL3N2Zy9sYXJnZXBsYXlfc3ZnLnN2Zz9jYTk1Il0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gXCI8c3ZnIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCIgd2lkdGg9XFxcIjM2XFxcIiBoZWlnaHQ9XFxcIjM2XFxcIiB2aWV3Qm94PVxcXCIwIDAgMzYgMzZcXFwiPjxnIGZpbGw9XFxcIm5vbmVcXFwiIGZpbGwtcnVsZT1cXFwiZXZlbm9kZFxcXCI+PHBvbHlnb24gcG9pbnRzPVxcXCIwIDAgMzYgMCAzNiAzNiAwIDM2XFxcIj48L3BvbHlnb24+PHBhdGggZmlsbD1cXFwiIzAwMFxcXCIgZmlsbC1ydWxlPVxcXCJub256ZXJvXFxcIiBkPVxcXCJNMTEuNTQ0OTg4NCw2LjAwNDI0MjQzIEwyOC43MTAwODY3LDE3LjE2MTU1NjQgQzI5LjE3MzE0NjQsMTcuNDYyNTQ1MSAyOS4zMDQ1MzA4LDE4LjA4MTkyODcgMjkuMDAzNTQyLDE4LjU0NDk4ODQgQzI4LjkyNzMyMDksMTguNjYyMjUxNiAyOC44MjczNSwxOC43NjIyMjI1IDI4LjcxMDA4NjcsMTguODM4NDQzNiBMMTEuNTQ0OTg4NCwyOS45OTU3NTc2IEMxMS4wODE5Mjg3LDMwLjI5Njc0NjMgMTAuNDYyNTQ1MSwzMC4xNjUzNjE5IDEwLjE2MTU1NjQsMjkuNzAyMzAyMyBDMTAuMDU2MTE5NywyOS41NDAwOTIgMTAsMjkuMzUwNzc5OSAxMCwyOS4xNTczMTQgTDEwLDYuODQyNjg2MDQgQzEwLDYuMjkwNDAxMjkgMTAuNDQ3NzE1Myw1Ljg0MjY4NjA0IDExLDUuODQyNjg2MDQgQzExLjE5MzQ2NTksNS44NDI2ODYwNCAxMS4zODI3NzgxLDUuODk4ODA1NzYgMTEuNTQ0OTg4NCw2LjAwNDI0MjQzIFpcXFwiPjwvcGF0aD48L2c+PC9zdmc+XCIiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/assets/svg/largeplay_svg.svg\n");

/***/ }),

/***/ "./src/assets/svg/menu_svg.svg":
/*!*************************************!*\
  !*** ./src/assets/svg/menu_svg.svg ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"24\\\" height=\\\"24\\\" viewBox=\\\"0 0 24 24\\\"><g fill=\\\"none\\\" fill-rule=\\\"evenodd\\\"><polygon points=\\\"0 0 24 0 24 24 0 24\\\"></polygon><path fill=\\\"#000\\\" fill-rule=\\\"nonzero\\\" d=\\\"M4,16 L20,16 C20.5522847,16 21,16.4477153 21,17 C21,17.5128358 20.6139598,17.9355072 20.1166211,17.9932723 L20,18 L4,18 C3.44771525,18 3,17.5522847 3,17 C3,16.4871642 3.38604019,16.0644928 3.88337887,16.0067277 L4,16 L20,16 L4,16 Z M4,11 L20,11 C20.5522847,11 21,11.4477153 21,12 C21,12.5128358 20.6139598,12.9355072 20.1166211,12.9932723 L20,13 L4,13 C3.44771525,13 3,12.5522847 3,12 C3,11.4871642 3.38604019,11.0644928 3.88337887,11.0067277 L4,11 Z M4,6 L20,6 C20.5522847,6 21,6.44771525 21,7 C21,7.51283584 20.6139598,7.93550716 20.1166211,7.99327227 L20,8 L4,8 C3.44771525,8 3,7.55228475 3,7 C3,6.48716416 3.38604019,6.06449284 3.88337887,6.00672773 L4,6 Z\\\"></path></g></svg>\"//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvYXNzZXRzL3N2Zy9tZW51X3N2Zy5zdmcuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9UZWxlZ3JhbWpzLy4vc3JjL2Fzc2V0cy9zdmcvbWVudV9zdmcuc3ZnP2YxYWIiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBcIjxzdmcgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIiB3aWR0aD1cXFwiMjRcXFwiIGhlaWdodD1cXFwiMjRcXFwiIHZpZXdCb3g9XFxcIjAgMCAyNCAyNFxcXCI+PGcgZmlsbD1cXFwibm9uZVxcXCIgZmlsbC1ydWxlPVxcXCJldmVub2RkXFxcIj48cG9seWdvbiBwb2ludHM9XFxcIjAgMCAyNCAwIDI0IDI0IDAgMjRcXFwiPjwvcG9seWdvbj48cGF0aCBmaWxsPVxcXCIjMDAwXFxcIiBmaWxsLXJ1bGU9XFxcIm5vbnplcm9cXFwiIGQ9XFxcIk00LDE2IEwyMCwxNiBDMjAuNTUyMjg0NywxNiAyMSwxNi40NDc3MTUzIDIxLDE3IEMyMSwxNy41MTI4MzU4IDIwLjYxMzk1OTgsMTcuOTM1NTA3MiAyMC4xMTY2MjExLDE3Ljk5MzI3MjMgTDIwLDE4IEw0LDE4IEMzLjQ0NzcxNTI1LDE4IDMsMTcuNTUyMjg0NyAzLDE3IEMzLDE2LjQ4NzE2NDIgMy4zODYwNDAxOSwxNi4wNjQ0OTI4IDMuODgzMzc4ODcsMTYuMDA2NzI3NyBMNCwxNiBMMjAsMTYgTDQsMTYgWiBNNCwxMSBMMjAsMTEgQzIwLjU1MjI4NDcsMTEgMjEsMTEuNDQ3NzE1MyAyMSwxMiBDMjEsMTIuNTEyODM1OCAyMC42MTM5NTk4LDEyLjkzNTUwNzIgMjAuMTE2NjIxMSwxMi45OTMyNzIzIEwyMCwxMyBMNCwxMyBDMy40NDc3MTUyNSwxMyAzLDEyLjU1MjI4NDcgMywxMiBDMywxMS40ODcxNjQyIDMuMzg2MDQwMTksMTEuMDY0NDkyOCAzLjg4MzM3ODg3LDExLjAwNjcyNzcgTDQsMTEgWiBNNCw2IEwyMCw2IEMyMC41NTIyODQ3LDYgMjEsNi40NDc3MTUyNSAyMSw3IEMyMSw3LjUxMjgzNTg0IDIwLjYxMzk1OTgsNy45MzU1MDcxNiAyMC4xMTY2MjExLDcuOTkzMjcyMjcgTDIwLDggTDQsOCBDMy40NDc3MTUyNSw4IDMsNy41NTIyODQ3NSAzLDcgQzMsNi40ODcxNjQxNiAzLjM4NjA0MDE5LDYuMDY0NDkyODQgMy44ODMzNzg4Nyw2LjAwNjcyNzczIEw0LDYgWlxcXCI+PC9wYXRoPjwvZz48L3N2Zz5cIiJdLCJtYXBwaW5ncyI6IkFBQUEiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/assets/svg/menu_svg.svg\n");

/***/ }),

/***/ "./src/assets/svg/microphone_svg.svg":
/*!*******************************************!*\
  !*** ./src/assets/svg/microphone_svg.svg ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"24\\\" height=\\\"24\\\" viewBox=\\\"0 0 24 24\\\"><g fill=\\\"none\\\" fill-rule=\\\"evenodd\\\"><polygon points=\\\"0 0 24 0 24 24 0 24\\\"></polygon><path fill=\\\"currentColor\\\" fill-rule=\\\"nonzero\\\" d=\\\"M19,10 C19.5522847,10 20,10.4477153 20,11 C20,15.0792885 16.9468043,18.445465 13.0009551,18.9379871 L13,22 C13,22.5522847 12.5522847,23 12,23 C11.4871642,23 11.0644928,22.6139598 11.0067277,22.1166211 L11,22 L11.0000487,18.9381123 C7.05371356,18.4460359 4,15.0796344 4,11 C4,10.4477153 4.44771525,10 5,10 C5.55228475,10 6,10.4477153 6,11 C6,14.3137085 8.6862915,17 12,17 C15.3137085,17 18,14.3137085 18,11 C18,10.4477153 18.4477153,10 19,10 Z M12,2 C14.209139,2 16,3.790861 16,6 L16,11 C16,13.209139 14.209139,15 12,15 C9.790861,15 8,13.209139 8,11 L8,6 C8,3.790861 9.790861,2 12,2 Z\\\"></path></g></svg>\"//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvYXNzZXRzL3N2Zy9taWNyb3Bob25lX3N2Zy5zdmcuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9UZWxlZ3JhbWpzLy4vc3JjL2Fzc2V0cy9zdmcvbWljcm9waG9uZV9zdmcuc3ZnPzI5ZGYiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBcIjxzdmcgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIiB3aWR0aD1cXFwiMjRcXFwiIGhlaWdodD1cXFwiMjRcXFwiIHZpZXdCb3g9XFxcIjAgMCAyNCAyNFxcXCI+PGcgZmlsbD1cXFwibm9uZVxcXCIgZmlsbC1ydWxlPVxcXCJldmVub2RkXFxcIj48cG9seWdvbiBwb2ludHM9XFxcIjAgMCAyNCAwIDI0IDI0IDAgMjRcXFwiPjwvcG9seWdvbj48cGF0aCBmaWxsPVxcXCJjdXJyZW50Q29sb3JcXFwiIGZpbGwtcnVsZT1cXFwibm9uemVyb1xcXCIgZD1cXFwiTTE5LDEwIEMxOS41NTIyODQ3LDEwIDIwLDEwLjQ0NzcxNTMgMjAsMTEgQzIwLDE1LjA3OTI4ODUgMTYuOTQ2ODA0MywxOC40NDU0NjUgMTMuMDAwOTU1MSwxOC45Mzc5ODcxIEwxMywyMiBDMTMsMjIuNTUyMjg0NyAxMi41NTIyODQ3LDIzIDEyLDIzIEMxMS40ODcxNjQyLDIzIDExLjA2NDQ5MjgsMjIuNjEzOTU5OCAxMS4wMDY3Mjc3LDIyLjExNjYyMTEgTDExLDIyIEwxMS4wMDAwNDg3LDE4LjkzODExMjMgQzcuMDUzNzEzNTYsMTguNDQ2MDM1OSA0LDE1LjA3OTYzNDQgNCwxMSBDNCwxMC40NDc3MTUzIDQuNDQ3NzE1MjUsMTAgNSwxMCBDNS41NTIyODQ3NSwxMCA2LDEwLjQ0NzcxNTMgNiwxMSBDNiwxNC4zMTM3MDg1IDguNjg2MjkxNSwxNyAxMiwxNyBDMTUuMzEzNzA4NSwxNyAxOCwxNC4zMTM3MDg1IDE4LDExIEMxOCwxMC40NDc3MTUzIDE4LjQ0NzcxNTMsMTAgMTksMTAgWiBNMTIsMiBDMTQuMjA5MTM5LDIgMTYsMy43OTA4NjEgMTYsNiBMMTYsMTEgQzE2LDEzLjIwOTEzOSAxNC4yMDkxMzksMTUgMTIsMTUgQzkuNzkwODYxLDE1IDgsMTMuMjA5MTM5IDgsMTEgTDgsNiBDOCwzLjc5MDg2MSA5Ljc5MDg2MSwyIDEyLDIgWlxcXCI+PC9wYXRoPjwvZz48L3N2Zz5cIiJdLCJtYXBwaW5ncyI6IkFBQUEiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/assets/svg/microphone_svg.svg\n");

/***/ }),

/***/ "./src/assets/svg/more_svg.svg":
/*!*************************************!*\
  !*** ./src/assets/svg/more_svg.svg ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"24\\\" height=\\\"24\\\" viewBox=\\\"0 0 24 24\\\"><g fill=\\\"none\\\" fill-rule=\\\"evenodd\\\"><polygon points=\\\"0 0 24 0 24 24 0 24\\\"></polygon><path fill=\\\"#000\\\" fill-rule=\\\"nonzero\\\" d=\\\"M12,16 C13.1045695,16 14,16.8954305 14,18 C14,19.1045695 13.1045695,20 12,20 C10.8954305,20 10,19.1045695 10,18 C10,16.8954305 10.8954305,16 12,16 Z M12,10 C13.1045695,10 14,10.8954305 14,12 C14,13.1045695 13.1045695,14 12,14 C10.8954305,14 10,13.1045695 10,12 C10,10.8954305 10.8954305,10 12,10 Z M12,4 C13.1045695,4 14,4.8954305 14,6 C14,7.1045695 13.1045695,8 12,8 C10.8954305,8 10,7.1045695 10,6 C10,4.8954305 10.8954305,4 12,4 Z\\\"></path></g></svg>\"//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvYXNzZXRzL3N2Zy9tb3JlX3N2Zy5zdmcuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9UZWxlZ3JhbWpzLy4vc3JjL2Fzc2V0cy9zdmcvbW9yZV9zdmcuc3ZnPzFlZGQiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBcIjxzdmcgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIiB3aWR0aD1cXFwiMjRcXFwiIGhlaWdodD1cXFwiMjRcXFwiIHZpZXdCb3g9XFxcIjAgMCAyNCAyNFxcXCI+PGcgZmlsbD1cXFwibm9uZVxcXCIgZmlsbC1ydWxlPVxcXCJldmVub2RkXFxcIj48cG9seWdvbiBwb2ludHM9XFxcIjAgMCAyNCAwIDI0IDI0IDAgMjRcXFwiPjwvcG9seWdvbj48cGF0aCBmaWxsPVxcXCIjMDAwXFxcIiBmaWxsLXJ1bGU9XFxcIm5vbnplcm9cXFwiIGQ9XFxcIk0xMiwxNiBDMTMuMTA0NTY5NSwxNiAxNCwxNi44OTU0MzA1IDE0LDE4IEMxNCwxOS4xMDQ1Njk1IDEzLjEwNDU2OTUsMjAgMTIsMjAgQzEwLjg5NTQzMDUsMjAgMTAsMTkuMTA0NTY5NSAxMCwxOCBDMTAsMTYuODk1NDMwNSAxMC44OTU0MzA1LDE2IDEyLDE2IFogTTEyLDEwIEMxMy4xMDQ1Njk1LDEwIDE0LDEwLjg5NTQzMDUgMTQsMTIgQzE0LDEzLjEwNDU2OTUgMTMuMTA0NTY5NSwxNCAxMiwxNCBDMTAuODk1NDMwNSwxNCAxMCwxMy4xMDQ1Njk1IDEwLDEyIEMxMCwxMC44OTU0MzA1IDEwLjg5NTQzMDUsMTAgMTIsMTAgWiBNMTIsNCBDMTMuMTA0NTY5NSw0IDE0LDQuODk1NDMwNSAxNCw2IEMxNCw3LjEwNDU2OTUgMTMuMTA0NTY5NSw4IDEyLDggQzEwLjg5NTQzMDUsOCAxMCw3LjEwNDU2OTUgMTAsNiBDMTAsNC44OTU0MzA1IDEwLjg5NTQzMDUsNCAxMiw0IFpcXFwiPjwvcGF0aD48L2c+PC9zdmc+XCIiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/assets/svg/more_svg.svg\n");

/***/ }),

/***/ "./src/assets/svg/phone_svg.svg":
/*!**************************************!*\
  !*** ./src/assets/svg/phone_svg.svg ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"24\\\" height=\\\"24\\\" viewBox=\\\"0 0 24 24\\\"><g fill=\\\"none\\\" fill-rule=\\\"evenodd\\\"><polygon points=\\\"0 0 24 0 24 24 0 24\\\"></polygon><path fill=\\\"#000\\\" fill-rule=\\\"nonzero\\\" d=\\\"M7.23584729,12.5662193 L9.59157842,9.95106331 C10.1552393,9.38932119 10.4467339,8.55220389 10.3497484,7.70703944 L10.091414,5.46219074 C9.9242391,4.0550699 8.7398983,3 7.3255142,3 L5.78463506,3 C4.20042472,3 2.90721409,4.32400855 3.00518508,5.90554894 C3.50830004,14.0123888 9.98998589,20.491257 18.0941879,20.9948033 C19.6759108,21.0927867 21.0001332,19.7995671 21.0001332,18.2153552 L21.0001332,16.6744677 C21.013787,15.2731573 19.9556245,14.0848636 18.5502962,13.917893 L16.2834192,13.6590644 C15.4388246,13.562143 14.601708,13.8536405 14.0021558,14.453196 L11.4339669,16.7640867 C9.87568608,15.7549411 8.52871768,14.4473269 7.47401517,12.9220367 L7.23584729,12.5662193 Z M13.2949234,17.779617 L15.3784355,15.9034093 C15.5842713,15.6995067 15.8165698,15.6186166 16.0559758,15.6460896 L18.3188767,15.9044538 C18.7112475,15.951083 19.003823,16.2796389 19.0000842,16.6646639 L19,18.2153552 C19,18.6635336 18.6307181,19.0242061 18.218031,18.9986413 C16.4722141,18.8901667 14.8122275,18.4649122 13.2949234,17.779617 Z M6.220439,10.7056813 C5.53504105,9.18831553 5.10972952,7.52810348 5.00135169,5.7817795 C4.97579551,5.36922745 5.33643432,5 5.78463506,5 L7.3255142,5 C7.72533936,5 8.0576092,5.29600256 8.10495475,5.6944964 L8.36282472,7.93536896 C8.39026139,8.17446174 8.30937042,8.40676528 8.14147101,8.5746656 L6.220439,10.7056813 Z\\\"></path></g></svg>\"//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvYXNzZXRzL3N2Zy9waG9uZV9zdmcuc3ZnLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vVGVsZWdyYW1qcy8uL3NyYy9hc3NldHMvc3ZnL3Bob25lX3N2Zy5zdmc/ZDYzMSJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IFwiPHN2ZyB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiIHdpZHRoPVxcXCIyNFxcXCIgaGVpZ2h0PVxcXCIyNFxcXCIgdmlld0JveD1cXFwiMCAwIDI0IDI0XFxcIj48ZyBmaWxsPVxcXCJub25lXFxcIiBmaWxsLXJ1bGU9XFxcImV2ZW5vZGRcXFwiPjxwb2x5Z29uIHBvaW50cz1cXFwiMCAwIDI0IDAgMjQgMjQgMCAyNFxcXCI+PC9wb2x5Z29uPjxwYXRoIGZpbGw9XFxcIiMwMDBcXFwiIGZpbGwtcnVsZT1cXFwibm9uemVyb1xcXCIgZD1cXFwiTTcuMjM1ODQ3MjksMTIuNTY2MjE5MyBMOS41OTE1Nzg0Miw5Ljk1MTA2MzMxIEMxMC4xNTUyMzkzLDkuMzg5MzIxMTkgMTAuNDQ2NzMzOSw4LjU1MjIwMzg5IDEwLjM0OTc0ODQsNy43MDcwMzk0NCBMMTAuMDkxNDE0LDUuNDYyMTkwNzQgQzkuOTI0MjM5MSw0LjA1NTA2OTkgOC43Mzk4OTgzLDMgNy4zMjU1MTQyLDMgTDUuNzg0NjM1MDYsMyBDNC4yMDA0MjQ3MiwzIDIuOTA3MjE0MDksNC4zMjQwMDg1NSAzLjAwNTE4NTA4LDUuOTA1NTQ4OTQgQzMuNTA4MzAwMDQsMTQuMDEyMzg4OCA5Ljk4OTk4NTg5LDIwLjQ5MTI1NyAxOC4wOTQxODc5LDIwLjk5NDgwMzMgQzE5LjY3NTkxMDgsMjEuMDkyNzg2NyAyMS4wMDAxMzMyLDE5Ljc5OTU2NzEgMjEuMDAwMTMzMiwxOC4yMTUzNTUyIEwyMS4wMDAxMzMyLDE2LjY3NDQ2NzcgQzIxLjAxMzc4NywxNS4yNzMxNTczIDE5Ljk1NTYyNDUsMTQuMDg0ODYzNiAxOC41NTAyOTYyLDEzLjkxNzg5MyBMMTYuMjgzNDE5MiwxMy42NTkwNjQ0IEMxNS40Mzg4MjQ2LDEzLjU2MjE0MyAxNC42MDE3MDgsMTMuODUzNjQwNSAxNC4wMDIxNTU4LDE0LjQ1MzE5NiBMMTEuNDMzOTY2OSwxNi43NjQwODY3IEM5Ljg3NTY4NjA4LDE1Ljc1NDk0MTEgOC41Mjg3MTc2OCwxNC40NDczMjY5IDcuNDc0MDE1MTcsMTIuOTIyMDM2NyBMNy4yMzU4NDcyOSwxMi41NjYyMTkzIFogTTEzLjI5NDkyMzQsMTcuNzc5NjE3IEwxNS4zNzg0MzU1LDE1LjkwMzQwOTMgQzE1LjU4NDI3MTMsMTUuNjk5NTA2NyAxNS44MTY1Njk4LDE1LjYxODYxNjYgMTYuMDU1OTc1OCwxNS42NDYwODk2IEwxOC4zMTg4NzY3LDE1LjkwNDQ1MzggQzE4LjcxMTI0NzUsMTUuOTUxMDgzIDE5LjAwMzgyMywxNi4yNzk2Mzg5IDE5LjAwMDA4NDIsMTYuNjY0NjYzOSBMMTksMTguMjE1MzU1MiBDMTksMTguNjYzNTMzNiAxOC42MzA3MTgxLDE5LjAyNDIwNjEgMTguMjE4MDMxLDE4Ljk5ODY0MTMgQzE2LjQ3MjIxNDEsMTguODkwMTY2NyAxNC44MTIyMjc1LDE4LjQ2NDkxMjIgMTMuMjk0OTIzNCwxNy43Nzk2MTcgWiBNNi4yMjA0MzksMTAuNzA1NjgxMyBDNS41MzUwNDEwNSw5LjE4ODMxNTUzIDUuMTA5NzI5NTIsNy41MjgxMDM0OCA1LjAwMTM1MTY5LDUuNzgxNzc5NSBDNC45NzU3OTU1MSw1LjM2OTIyNzQ1IDUuMzM2NDM0MzIsNSA1Ljc4NDYzNTA2LDUgTDcuMzI1NTE0Miw1IEM3LjcyNTMzOTM2LDUgOC4wNTc2MDkyLDUuMjk2MDAyNTYgOC4xMDQ5NTQ3NSw1LjY5NDQ5NjQgTDguMzYyODI0NzIsNy45MzUzNjg5NiBDOC4zOTAyNjEzOSw4LjE3NDQ2MTc0IDguMzA5MzcwNDIsOC40MDY3NjUyOCA4LjE0MTQ3MTAxLDguNTc0NjY1NiBMNi4yMjA0MzksMTAuNzA1NjgxMyBaXFxcIj48L3BhdGg+PC9nPjwvc3ZnPlwiIl0sIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/assets/svg/phone_svg.svg\n");

/***/ }),

/***/ "./src/assets/svg/search_svg.svg":
/*!***************************************!*\
  !*** ./src/assets/svg/search_svg.svg ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"24\\\" height=\\\"24\\\" viewBox=\\\"0 0 24 24\\\"><g fill=\\\"none\\\" fill-rule=\\\"evenodd\\\"><polygon points=\\\"0 0 24 0 24 24 0 24\\\"></polygon><path fill=\\\"#000\\\" fill-rule=\\\"nonzero\\\" d=\\\"M9.5,3 C13.0898509,3 16,5.91014913 16,9.5 C16,10.9337106 15.5358211,12.2590065 14.7495478,13.3338028 L19.7071068,18.2928932 C20.0976311,18.6834175 20.0976311,19.3165825 19.7071068,19.7071068 C19.3466228,20.0675907 18.7793918,20.0953203 18.3871006,19.7902954 L18.2928932,19.7071068 L13.3338028,14.7495478 C12.2590065,15.5358211 10.9337106,16 9.5,16 C5.91014913,16 3,13.0898509 3,9.5 C3,5.91014913 5.91014913,3 9.5,3 Z M9.5,5 C7.01471863,5 5,7.01471863 5,9.5 C5,11.9852814 7.01471863,14 9.5,14 C11.9852814,14 14,11.9852814 14,9.5 C14,7.01471863 11.9852814,5 9.5,5 Z\\\"></path></g></svg>\"//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvYXNzZXRzL3N2Zy9zZWFyY2hfc3ZnLnN2Zy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL1RlbGVncmFtanMvLi9zcmMvYXNzZXRzL3N2Zy9zZWFyY2hfc3ZnLnN2Zz8xYjFiIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gXCI8c3ZnIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCIgd2lkdGg9XFxcIjI0XFxcIiBoZWlnaHQ9XFxcIjI0XFxcIiB2aWV3Qm94PVxcXCIwIDAgMjQgMjRcXFwiPjxnIGZpbGw9XFxcIm5vbmVcXFwiIGZpbGwtcnVsZT1cXFwiZXZlbm9kZFxcXCI+PHBvbHlnb24gcG9pbnRzPVxcXCIwIDAgMjQgMCAyNCAyNCAwIDI0XFxcIj48L3BvbHlnb24+PHBhdGggZmlsbD1cXFwiIzAwMFxcXCIgZmlsbC1ydWxlPVxcXCJub256ZXJvXFxcIiBkPVxcXCJNOS41LDMgQzEzLjA4OTg1MDksMyAxNiw1LjkxMDE0OTEzIDE2LDkuNSBDMTYsMTAuOTMzNzEwNiAxNS41MzU4MjExLDEyLjI1OTAwNjUgMTQuNzQ5NTQ3OCwxMy4zMzM4MDI4IEwxOS43MDcxMDY4LDE4LjI5Mjg5MzIgQzIwLjA5NzYzMTEsMTguNjgzNDE3NSAyMC4wOTc2MzExLDE5LjMxNjU4MjUgMTkuNzA3MTA2OCwxOS43MDcxMDY4IEMxOS4zNDY2MjI4LDIwLjA2NzU5MDcgMTguNzc5MzkxOCwyMC4wOTUzMjAzIDE4LjM4NzEwMDYsMTkuNzkwMjk1NCBMMTguMjkyODkzMiwxOS43MDcxMDY4IEwxMy4zMzM4MDI4LDE0Ljc0OTU0NzggQzEyLjI1OTAwNjUsMTUuNTM1ODIxMSAxMC45MzM3MTA2LDE2IDkuNSwxNiBDNS45MTAxNDkxMywxNiAzLDEzLjA4OTg1MDkgMyw5LjUgQzMsNS45MTAxNDkxMyA1LjkxMDE0OTEzLDMgOS41LDMgWiBNOS41LDUgQzcuMDE0NzE4NjMsNSA1LDcuMDE0NzE4NjMgNSw5LjUgQzUsMTEuOTg1MjgxNCA3LjAxNDcxODYzLDE0IDkuNSwxNCBDMTEuOTg1MjgxNCwxNCAxNCwxMS45ODUyODE0IDE0LDkuNSBDMTQsNy4wMTQ3MTg2MyAxMS45ODUyODE0LDUgOS41LDUgWlxcXCI+PC9wYXRoPjwvZz48L3N2Zz5cIiJdLCJtYXBwaW5ncyI6IkFBQUEiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/assets/svg/search_svg.svg\n");

/***/ }),

/***/ "./src/assets/svg/smile_svg.svg":
/*!**************************************!*\
  !*** ./src/assets/svg/smile_svg.svg ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"24\\\" height=\\\"24\\\" viewBox=\\\"0 0 24 24\\\"><g fill=\\\"none\\\" fill-rule=\\\"evenodd\\\"><polygon points=\\\"0 0 24 0 24 24 0 24\\\"></polygon><path fill=\\\"#000\\\" fill-rule=\\\"nonzero\\\" d=\\\"M12,1 C18.0751322,1 23,5.92486775 23,12 C23,18.0751322 18.0751322,23 12,23 C5.92486775,23 1,18.0751322 1,12 C1,5.92486775 5.92486775,1 12,1 Z M12,3 C7.02943725,3 3,7.02943725 3,12 C3,16.9705627 7.02943725,21 12,21 C16.9705627,21 21,16.9705627 21,12 C21,7.02943725 16.9705627,3 12,3 Z M6.66607426,13.6501686 C7.13342047,13.4117012 7.7055954,13.5972442 7.94406273,14.0645904 C8.71613228,15.5776856 10.2710663,16.5499921 12,16.5499921 C13.7262991,16.5499921 15.2792455,15.5806677 16.0525854,14.0711462 C16.2918118,13.6041881 16.8642875,13.419575 17.3312456,13.6588014 C17.7982037,13.8980278 17.9828168,14.4705034 17.7435904,14.9374615 C16.6482438,17.0755242 14.4462205,18.4499921 12,18.4499921 C9.55003677,18.4499921 7.34521255,17.0713067 6.2516524,14.928157 C6.01318507,14.4608108 6.19872805,13.8886359 6.66607426,13.6501686 Z M8.75,8 C9.44035594,8 10,8.67157288 10,9.5 C10,10.3284271 9.44035594,11 8.75,11 C8.05964406,11 7.5,10.3284271 7.5,9.5 C7.5,8.67157288 8.05964406,8 8.75,8 Z M15.25,8 C15.9403559,8 16.5,8.67157288 16.5,9.5 C16.5,10.3284271 15.9403559,11 15.25,11 C14.5596441,11 14,10.3284271 14,9.5 C14,8.67157288 14.5596441,8 15.25,8 Z\\\"></path></g></svg>\"//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvYXNzZXRzL3N2Zy9zbWlsZV9zdmcuc3ZnLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vVGVsZWdyYW1qcy8uL3NyYy9hc3NldHMvc3ZnL3NtaWxlX3N2Zy5zdmc/OTZmYyJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IFwiPHN2ZyB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiIHdpZHRoPVxcXCIyNFxcXCIgaGVpZ2h0PVxcXCIyNFxcXCIgdmlld0JveD1cXFwiMCAwIDI0IDI0XFxcIj48ZyBmaWxsPVxcXCJub25lXFxcIiBmaWxsLXJ1bGU9XFxcImV2ZW5vZGRcXFwiPjxwb2x5Z29uIHBvaW50cz1cXFwiMCAwIDI0IDAgMjQgMjQgMCAyNFxcXCI+PC9wb2x5Z29uPjxwYXRoIGZpbGw9XFxcIiMwMDBcXFwiIGZpbGwtcnVsZT1cXFwibm9uemVyb1xcXCIgZD1cXFwiTTEyLDEgQzE4LjA3NTEzMjIsMSAyMyw1LjkyNDg2Nzc1IDIzLDEyIEMyMywxOC4wNzUxMzIyIDE4LjA3NTEzMjIsMjMgMTIsMjMgQzUuOTI0ODY3NzUsMjMgMSwxOC4wNzUxMzIyIDEsMTIgQzEsNS45MjQ4Njc3NSA1LjkyNDg2Nzc1LDEgMTIsMSBaIE0xMiwzIEM3LjAyOTQzNzI1LDMgMyw3LjAyOTQzNzI1IDMsMTIgQzMsMTYuOTcwNTYyNyA3LjAyOTQzNzI1LDIxIDEyLDIxIEMxNi45NzA1NjI3LDIxIDIxLDE2Ljk3MDU2MjcgMjEsMTIgQzIxLDcuMDI5NDM3MjUgMTYuOTcwNTYyNywzIDEyLDMgWiBNNi42NjYwNzQyNiwxMy42NTAxNjg2IEM3LjEzMzQyMDQ3LDEzLjQxMTcwMTIgNy43MDU1OTU0LDEzLjU5NzI0NDIgNy45NDQwNjI3MywxNC4wNjQ1OTA0IEM4LjcxNjEzMjI4LDE1LjU3NzY4NTYgMTAuMjcxMDY2MywxNi41NDk5OTIxIDEyLDE2LjU0OTk5MjEgQzEzLjcyNjI5OTEsMTYuNTQ5OTkyMSAxNS4yNzkyNDU1LDE1LjU4MDY2NzcgMTYuMDUyNTg1NCwxNC4wNzExNDYyIEMxNi4yOTE4MTE4LDEzLjYwNDE4ODEgMTYuODY0Mjg3NSwxMy40MTk1NzUgMTcuMzMxMjQ1NiwxMy42NTg4MDE0IEMxNy43OTgyMDM3LDEzLjg5ODAyNzggMTcuOTgyODE2OCwxNC40NzA1MDM0IDE3Ljc0MzU5MDQsMTQuOTM3NDYxNSBDMTYuNjQ4MjQzOCwxNy4wNzU1MjQyIDE0LjQ0NjIyMDUsMTguNDQ5OTkyMSAxMiwxOC40NDk5OTIxIEM5LjU1MDAzNjc3LDE4LjQ0OTk5MjEgNy4zNDUyMTI1NSwxNy4wNzEzMDY3IDYuMjUxNjUyNCwxNC45MjgxNTcgQzYuMDEzMTg1MDcsMTQuNDYwODEwOCA2LjE5ODcyODA1LDEzLjg4ODYzNTkgNi42NjYwNzQyNiwxMy42NTAxNjg2IFogTTguNzUsOCBDOS40NDAzNTU5NCw4IDEwLDguNjcxNTcyODggMTAsOS41IEMxMCwxMC4zMjg0MjcxIDkuNDQwMzU1OTQsMTEgOC43NSwxMSBDOC4wNTk2NDQwNiwxMSA3LjUsMTAuMzI4NDI3MSA3LjUsOS41IEM3LjUsOC42NzE1NzI4OCA4LjA1OTY0NDA2LDggOC43NSw4IFogTTE1LjI1LDggQzE1Ljk0MDM1NTksOCAxNi41LDguNjcxNTcyODggMTYuNSw5LjUgQzE2LjUsMTAuMzI4NDI3MSAxNS45NDAzNTU5LDExIDE1LjI1LDExIEMxNC41NTk2NDQxLDExIDE0LDEwLjMyODQyNzEgMTQsOS41IEMxNCw4LjY3MTU3Mjg4IDE0LjU1OTY0NDEsOCAxNS4yNSw4IFpcXFwiPjwvcGF0aD48L2c+PC9zdmc+XCIiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/assets/svg/smile_svg.svg\n");

/***/ }),

/***/ "./src/assets/svg/tg-logo.svg":
/*!************************************!*\
  !*** ./src/assets/svg/tg-logo.svg ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 240 240\\\"><circle fill=\\\"#4DA4F5\\\" r=\\\"120\\\" cy=\\\"120\\\" cx=\\\"120\\\"></circle><path fill=\\\"#fff\\\" d=\\\"M44.7 125.87c14.02-7.73 29.68-14.18 44.3-20.66 25.18-10.61 50.45-21.05 75.98-30.76 4.96-1.66 13.89-3.27 14.76 4.09-.48 10.41-2.45 20.77-3.8 31.13-3.43 22.77-7.4 45.47-11.27 68.17-1.33 7.56-10.8 11.48-16.86 6.64-14.57-9.84-29.25-19.58-43.63-29.65-4.7-4.79-.34-11.66 3.87-15.08 12-11.82 24.72-21.87 36.09-34.3 3.07-7.4-6-1.16-8.98.75-16.43 11.32-32.45 23.33-49.77 33.27-8.84 4.87-19.15.71-28-2-7.92-3.29-19.53-6.6-12.7-11.6z\\\"></path></svg>\"//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvYXNzZXRzL3N2Zy90Zy1sb2dvLnN2Zy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL1RlbGVncmFtanMvLi9zcmMvYXNzZXRzL3N2Zy90Zy1sb2dvLnN2Zz9mODc3Il0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gXCI8c3ZnIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCIgdmlld0JveD1cXFwiMCAwIDI0MCAyNDBcXFwiPjxjaXJjbGUgZmlsbD1cXFwiIzREQTRGNVxcXCIgcj1cXFwiMTIwXFxcIiBjeT1cXFwiMTIwXFxcIiBjeD1cXFwiMTIwXFxcIj48L2NpcmNsZT48cGF0aCBmaWxsPVxcXCIjZmZmXFxcIiBkPVxcXCJNNDQuNyAxMjUuODdjMTQuMDItNy43MyAyOS42OC0xNC4xOCA0NC4zLTIwLjY2IDI1LjE4LTEwLjYxIDUwLjQ1LTIxLjA1IDc1Ljk4LTMwLjc2IDQuOTYtMS42NiAxMy44OS0zLjI3IDE0Ljc2IDQuMDktLjQ4IDEwLjQxLTIuNDUgMjAuNzctMy44IDMxLjEzLTMuNDMgMjIuNzctNy40IDQ1LjQ3LTExLjI3IDY4LjE3LTEuMzMgNy41Ni0xMC44IDExLjQ4LTE2Ljg2IDYuNjQtMTQuNTctOS44NC0yOS4yNS0xOS41OC00My42My0yOS42NS00LjctNC43OS0uMzQtMTEuNjYgMy44Ny0xNS4wOCAxMi0xMS44MiAyNC43Mi0yMS44NyAzNi4wOS0zNC4zIDMuMDctNy40LTYtMS4xNi04Ljk4Ljc1LTE2LjQzIDExLjMyLTMyLjQ1IDIzLjMzLTQ5Ljc3IDMzLjI3LTguODQgNC44Ny0xOS4xNS43MS0yOC0yLTcuOTItMy4yOS0xOS41My02LjYtMTIuNy0xMS42elxcXCI+PC9wYXRoPjwvc3ZnPlwiIl0sIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/assets/svg/tg-logo.svg\n");

/***/ }),

/***/ "./src/assets/svg/user_svg.svg":
/*!*************************************!*\
  !*** ./src/assets/svg/user_svg.svg ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"24\\\" height=\\\"24\\\" viewBox=\\\"0 0 24 24\\\"><g fill=\\\"none\\\" fill-rule=\\\"evenodd\\\"><polygon points=\\\"0 0 24 0 24 24 0 24\\\"></polygon><path fill=\\\"#000\\\" fill-rule=\\\"nonzero\\\" d=\\\"M12,12 C15.9072418,12 18.715318,13.0364023 20.3351717,15.1788288 C20.7665758,15.7493929 21,16.4451545 21,17.1604559 L21,18.2857143 C21,19.7847729 19.7847729,21 18.2857143,21 L5.71428571,21 C4.21522711,21 3,19.7847729 3,18.2857143 L3,17.160494 C3,16.445199 3.23340019,15.7494497 3.66478123,15.178891 C5.28463457,13.0364199 8.09272555,12 12,12 Z M12,14 C8.66170181,14 6.44476079,14.8182362 5.26012276,16.3850773 C5.09133017,16.6083279 5,16.8805766 5,17.160494 L5,18.2857143 C5,18.6802034 5.31979661,19 5.71428571,19 L18.2857143,19 C18.6802034,19 19,18.6802034 19,18.2857143 L19,17.1604559 C19,16.8805572 18.9086617,16.6083073 18.7398491,16.38504 C17.5552048,14.8182236 15.3382718,14 12,14 Z M12,2 C14.209139,2 16,3.790861 16,6 C16,8.209139 14.209139,10 12,10 C9.790861,10 8,8.209139 8,6 C8,3.790861 9.790861,2 12,2 Z M12,4 C10.8954305,4 10,4.8954305 10,6 C10,7.1045695 10.8954305,8 12,8 C13.1045695,8 14,7.1045695 14,6 C14,4.8954305 13.1045695,4 12,4 Z\\\"></path></g></svg>\"//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvYXNzZXRzL3N2Zy91c2VyX3N2Zy5zdmcuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9UZWxlZ3JhbWpzLy4vc3JjL2Fzc2V0cy9zdmcvdXNlcl9zdmcuc3ZnPzkyZGIiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBcIjxzdmcgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIiB3aWR0aD1cXFwiMjRcXFwiIGhlaWdodD1cXFwiMjRcXFwiIHZpZXdCb3g9XFxcIjAgMCAyNCAyNFxcXCI+PGcgZmlsbD1cXFwibm9uZVxcXCIgZmlsbC1ydWxlPVxcXCJldmVub2RkXFxcIj48cG9seWdvbiBwb2ludHM9XFxcIjAgMCAyNCAwIDI0IDI0IDAgMjRcXFwiPjwvcG9seWdvbj48cGF0aCBmaWxsPVxcXCIjMDAwXFxcIiBmaWxsLXJ1bGU9XFxcIm5vbnplcm9cXFwiIGQ9XFxcIk0xMiwxMiBDMTUuOTA3MjQxOCwxMiAxOC43MTUzMTgsMTMuMDM2NDAyMyAyMC4zMzUxNzE3LDE1LjE3ODgyODggQzIwLjc2NjU3NTgsMTUuNzQ5MzkyOSAyMSwxNi40NDUxNTQ1IDIxLDE3LjE2MDQ1NTkgTDIxLDE4LjI4NTcxNDMgQzIxLDE5Ljc4NDc3MjkgMTkuNzg0NzcyOSwyMSAxOC4yODU3MTQzLDIxIEw1LjcxNDI4NTcxLDIxIEM0LjIxNTIyNzExLDIxIDMsMTkuNzg0NzcyOSAzLDE4LjI4NTcxNDMgTDMsMTcuMTYwNDk0IEMzLDE2LjQ0NTE5OSAzLjIzMzQwMDE5LDE1Ljc0OTQ0OTcgMy42NjQ3ODEyMywxNS4xNzg4OTEgQzUuMjg0NjM0NTcsMTMuMDM2NDE5OSA4LjA5MjcyNTU1LDEyIDEyLDEyIFogTTEyLDE0IEM4LjY2MTcwMTgxLDE0IDYuNDQ0NzYwNzksMTQuODE4MjM2MiA1LjI2MDEyMjc2LDE2LjM4NTA3NzMgQzUuMDkxMzMwMTcsMTYuNjA4MzI3OSA1LDE2Ljg4MDU3NjYgNSwxNy4xNjA0OTQgTDUsMTguMjg1NzE0MyBDNSwxOC42ODAyMDM0IDUuMzE5Nzk2NjEsMTkgNS43MTQyODU3MSwxOSBMMTguMjg1NzE0MywxOSBDMTguNjgwMjAzNCwxOSAxOSwxOC42ODAyMDM0IDE5LDE4LjI4NTcxNDMgTDE5LDE3LjE2MDQ1NTkgQzE5LDE2Ljg4MDU1NzIgMTguOTA4NjYxNywxNi42MDgzMDczIDE4LjczOTg0OTEsMTYuMzg1MDQgQzE3LjU1NTIwNDgsMTQuODE4MjIzNiAxNS4zMzgyNzE4LDE0IDEyLDE0IFogTTEyLDIgQzE0LjIwOTEzOSwyIDE2LDMuNzkwODYxIDE2LDYgQzE2LDguMjA5MTM5IDE0LjIwOTEzOSwxMCAxMiwxMCBDOS43OTA4NjEsMTAgOCw4LjIwOTEzOSA4LDYgQzgsMy43OTA4NjEgOS43OTA4NjEsMiAxMiwyIFogTTEyLDQgQzEwLjg5NTQzMDUsNCAxMCw0Ljg5NTQzMDUgMTAsNiBDMTAsNy4xMDQ1Njk1IDEwLjg5NTQzMDUsOCAxMiw4IEMxMy4xMDQ1Njk1LDggMTQsNy4xMDQ1Njk1IDE0LDYgQzE0LDQuODk1NDMwNSAxMy4xMDQ1Njk1LDQgMTIsNCBaXFxcIj48L3BhdGg+PC9nPjwvc3ZnPlwiIl0sIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/assets/svg/user_svg.svg\n");

/***/ }),

/***/ "./src/assets/svg/username_svg.svg":
/*!*****************************************!*\
  !*** ./src/assets/svg/username_svg.svg ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"24\\\" height=\\\"24\\\" viewBox=\\\"0 0 24 24\\\"><g fill=\\\"none\\\" fill-rule=\\\"evenodd\\\"><polygon points=\\\"0 0 24 0 24 24 0 24\\\"></polygon><path fill=\\\"#000\\\" fill-rule=\\\"nonzero\\\" d=\\\"M12,1 C18.0751322,1 23,5.92486775 23,12 C23,15.2534621 21.3575416,17.4078375 19.0415827,17.5042247 C17.5448049,17.5665187 16.2418767,16.729824 15.5433162,15.3661459 C14.6550197,16.3039294 13.3958222,16.8888889 12,16.8888889 C9.29994122,16.8888889 7.11111111,14.7000588 7.11111111,12 C7.11111111,9.29994122 9.29994122,7.11111111 12,7.11111111 C13.1311057,7.11111111 14.1724943,7.49523561 15.000833,8.14015176 L15,8 C15,7.44771525 15.4477153,7 16,7 C16.5128358,7 16.9355072,7.38604019 16.9932723,7.88337887 L17,8 L17,13 C17,14.5880914 17.9057778,15.5497641 18.9584173,15.5059546 C20.0913022,15.4588053 21,14.2668872 21,12 C21,7.02943725 16.9705627,3 12,3 C7.02943725,3 3,7.02943725 3,12 C3,16.9705627 7.02943725,21 12,21 C12.7993259,21 13.583948,20.8960375 14.3403366,20.6929627 C14.8737319,20.549757 15.4222254,20.8660682 15.5654311,21.3994635 C15.7086368,21.9328588 15.3923256,22.4813523 14.8589303,22.624558 C13.9337959,22.8729377 12.9748353,23 12,23 C5.92486775,23 1,18.0751322 1,12 C1,5.92486775 5.92486775,1 12,1 Z M12,9.11111111 C10.4045107,9.11111111 9.11111111,10.4045107 9.11111111,12 C9.11111111,13.5954893 10.4045107,14.8888889 12,14.8888889 C13.5954893,14.8888889 14.8888889,13.5954893 14.8888889,12 C14.8888889,10.4045107 13.5954893,9.11111111 12,9.11111111 Z\\\"></path></g></svg>\"//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvYXNzZXRzL3N2Zy91c2VybmFtZV9zdmcuc3ZnLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vVGVsZWdyYW1qcy8uL3NyYy9hc3NldHMvc3ZnL3VzZXJuYW1lX3N2Zy5zdmc/OWIxNyJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IFwiPHN2ZyB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiIHdpZHRoPVxcXCIyNFxcXCIgaGVpZ2h0PVxcXCIyNFxcXCIgdmlld0JveD1cXFwiMCAwIDI0IDI0XFxcIj48ZyBmaWxsPVxcXCJub25lXFxcIiBmaWxsLXJ1bGU9XFxcImV2ZW5vZGRcXFwiPjxwb2x5Z29uIHBvaW50cz1cXFwiMCAwIDI0IDAgMjQgMjQgMCAyNFxcXCI+PC9wb2x5Z29uPjxwYXRoIGZpbGw9XFxcIiMwMDBcXFwiIGZpbGwtcnVsZT1cXFwibm9uemVyb1xcXCIgZD1cXFwiTTEyLDEgQzE4LjA3NTEzMjIsMSAyMyw1LjkyNDg2Nzc1IDIzLDEyIEMyMywxNS4yNTM0NjIxIDIxLjM1NzU0MTYsMTcuNDA3ODM3NSAxOS4wNDE1ODI3LDE3LjUwNDIyNDcgQzE3LjU0NDgwNDksMTcuNTY2NTE4NyAxNi4yNDE4NzY3LDE2LjcyOTgyNCAxNS41NDMzMTYyLDE1LjM2NjE0NTkgQzE0LjY1NTAxOTcsMTYuMzAzOTI5NCAxMy4zOTU4MjIyLDE2Ljg4ODg4ODkgMTIsMTYuODg4ODg4OSBDOS4yOTk5NDEyMiwxNi44ODg4ODg5IDcuMTExMTExMTEsMTQuNzAwMDU4OCA3LjExMTExMTExLDEyIEM3LjExMTExMTExLDkuMjk5OTQxMjIgOS4yOTk5NDEyMiw3LjExMTExMTExIDEyLDcuMTExMTExMTEgQzEzLjEzMTEwNTcsNy4xMTExMTExMSAxNC4xNzI0OTQzLDcuNDk1MjM1NjEgMTUuMDAwODMzLDguMTQwMTUxNzYgTDE1LDggQzE1LDcuNDQ3NzE1MjUgMTUuNDQ3NzE1Myw3IDE2LDcgQzE2LjUxMjgzNTgsNyAxNi45MzU1MDcyLDcuMzg2MDQwMTkgMTYuOTkzMjcyMyw3Ljg4MzM3ODg3IEwxNyw4IEwxNywxMyBDMTcsMTQuNTg4MDkxNCAxNy45MDU3Nzc4LDE1LjU0OTc2NDEgMTguOTU4NDE3MywxNS41MDU5NTQ2IEMyMC4wOTEzMDIyLDE1LjQ1ODgwNTMgMjEsMTQuMjY2ODg3MiAyMSwxMiBDMjEsNy4wMjk0MzcyNSAxNi45NzA1NjI3LDMgMTIsMyBDNy4wMjk0MzcyNSwzIDMsNy4wMjk0MzcyNSAzLDEyIEMzLDE2Ljk3MDU2MjcgNy4wMjk0MzcyNSwyMSAxMiwyMSBDMTIuNzk5MzI1OSwyMSAxMy41ODM5NDgsMjAuODk2MDM3NSAxNC4zNDAzMzY2LDIwLjY5Mjk2MjcgQzE0Ljg3MzczMTksMjAuNTQ5NzU3IDE1LjQyMjIyNTQsMjAuODY2MDY4MiAxNS41NjU0MzExLDIxLjM5OTQ2MzUgQzE1LjcwODYzNjgsMjEuOTMyODU4OCAxNS4zOTIzMjU2LDIyLjQ4MTM1MjMgMTQuODU4OTMwMywyMi42MjQ1NTggQzEzLjkzMzc5NTksMjIuODcyOTM3NyAxMi45NzQ4MzUzLDIzIDEyLDIzIEM1LjkyNDg2Nzc1LDIzIDEsMTguMDc1MTMyMiAxLDEyIEMxLDUuOTI0ODY3NzUgNS45MjQ4Njc3NSwxIDEyLDEgWiBNMTIsOS4xMTExMTExMSBDMTAuNDA0NTEwNyw5LjExMTExMTExIDkuMTExMTExMTEsMTAuNDA0NTEwNyA5LjExMTExMTExLDEyIEM5LjExMTExMTExLDEzLjU5NTQ4OTMgMTAuNDA0NTEwNywxNC44ODg4ODg5IDEyLDE0Ljg4ODg4ODkgQzEzLjU5NTQ4OTMsMTQuODg4ODg4OSAxNC44ODg4ODg5LDEzLjU5NTQ4OTMgMTQuODg4ODg4OSwxMiBDMTQuODg4ODg4OSwxMC40MDQ1MTA3IDEzLjU5NTQ4OTMsOS4xMTExMTExMSAxMiw5LjExMTExMTExIFpcXFwiPjwvcGF0aD48L2c+PC9zdmc+XCIiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/assets/svg/username_svg.svg\n");

/***/ }),

/***/ "./src/components/Screen.js":
/*!**********************************!*\
  !*** ./src/components/Screen.js ***!
  \**********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Screen; });\n/* harmony import */ var _utils_dom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/dom */ \"./src/utils/dom.js\");\n\n\nclass Screen {\n  constructor(name) {\n    this.name = name;\n    this.wrapper = _utils_dom__WEBPACK_IMPORTED_MODULE_0__[\"make\"]('div', ['t-page', `t-page--${this.name}`]);\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29tcG9uZW50cy9TY3JlZW4uanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9UZWxlZ3JhbWpzLy4vc3JjL2NvbXBvbmVudHMvU2NyZWVuLmpzPzYyOGYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgZG9tIGZyb20gJy4uL3V0aWxzL2RvbSc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNjcmVlbiB7XG4gIGNvbnN0cnVjdG9yKG5hbWUpIHtcbiAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgIHRoaXMud3JhcHBlciA9IGRvbS5tYWtlKCdkaXYnLCBbJ3QtcGFnZScsIGB0LXBhZ2UtLSR7dGhpcy5uYW1lfWBdKTtcbiAgfVxufVxuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/components/Screen.js\n");

/***/ }),

/***/ "./src/components/aside.js":
/*!*********************************!*\
  !*** ./src/components/aside.js ***!
  \*********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Aside; });\n/* harmony import */ var _utils_dom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/dom */ \"./src/utils/dom.js\");\n/* harmony import */ var _utils_string__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/string */ \"./src/utils/string.js\");\n/* harmony import */ var _assets_svg_menu_svg_svg__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./../assets/svg/menu_svg.svg */ \"./src/assets/svg/menu_svg.svg\");\n/* harmony import */ var _assets_svg_menu_svg_svg__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_assets_svg_menu_svg_svg__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _assets_svg_search_svg_svg__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./../assets/svg/search_svg.svg */ \"./src/assets/svg/search_svg.svg\");\n/* harmony import */ var _assets_svg_search_svg_svg__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_assets_svg_search_svg_svg__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _assets_svg_1check_svg_svg__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./../assets/svg/1check_svg.svg */ \"./src/assets/svg/1check_svg.svg\");\n/* harmony import */ var _assets_svg_1check_svg_svg__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_assets_svg_1check_svg_svg__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _assets_svg_2checks_svg_svg__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./../assets/svg/2checks_svg.svg */ \"./src/assets/svg/2checks_svg.svg\");\n/* harmony import */ var _assets_svg_2checks_svg_svg__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_assets_svg_2checks_svg_svg__WEBPACK_IMPORTED_MODULE_5__);\n\n\n\n\n\n\n\nclass Aside {\n  constructor(app){\n    this.app = app;\n    this.api = app.api;\n\n    this.nodes = {\n      wrapper: null,\n      list: null,\n    }\n  }\n\n  static get CSS(){\n    return {\n      wrapper: 'im-aside',\n      wrapperLoading: 'im-aside--loading',\n      list: 'dl',\n      searchFocused: 'im-aside__header-search--focused'\n    }\n  }\n\n  create(){\n    this.nodes.wrapper = _utils_dom__WEBPACK_IMPORTED_MODULE_0__[\"make\"]('aside', [Aside.CSS.wrapper]);\n    this.nodes.list = _utils_dom__WEBPACK_IMPORTED_MODULE_0__[\"make\"]('div', [Aside.CSS.list]);\n\n    this.nodes.wrapper.innerHTML = `\n    <div class=\"im-aside__header\">\n      <div class=\"im-aside__header-menu\">\n        <i>\n          ${_assets_svg_menu_svg_svg__WEBPACK_IMPORTED_MODULE_2___default.a}\n        </i>\n      </div>\n      <div class=\"im-aside__header-search\" id=\"aside-search\">\n        ${_assets_svg_search_svg_svg__WEBPACK_IMPORTED_MODULE_3___default.a}\n        <input type=\"text\" placeholder=\"Search\">\n      </div>\n    </div>\n    `;\n\n    this.nodes.wrapper.appendChild(this.nodes.list);\n\n    return this.nodes.wrapper\n  }\n\n  bindEvents(){\n    let searchWrap = document.getElementById('aside-search');\n    let searchInput = searchWrap.querySelector('input');\n\n    searchInput.addEventListener('focus', () => {\n      searchWrap.classList.add(Aside.CSS.searchFocused);\n    })\n\n    searchInput.addEventListener('blur', () => {\n      if (!searchInput.value.trim().length){\n        searchWrap.classList.remove(Aside.CSS.searchFocused);\n      }\n    })\n\n    this.nodes.wrapper.addEventListener('click', (e) => {\n      const el = e.target.nodeType === Node.ELEMENT_NODE ? e.target : e.target.parentNode;\n      const item = el.closest('.dl__item');\n\n      if (item){\n        this.itemClicked(item);\n      }\n    })\n  }\n\n  loadChats(){\n    this.nodes.wrapper.classList.add(Aside.CSS.wrapperLoading);\n\n    this.api.getChats().then( dialogs => {\n      this.nodes.wrapper.classList.remove(Aside.CSS.wrapperLoading);\n      this.fillChats(dialogs);\n    })\n  }\n\n  fillChats(chats){\n    console.log('Fill chats', chats);\n    if (!chats){\n      return;\n    }\n    this.nodes.list.innerHTML = `\n      ${ chats.map(chat => this.getListItem(chat)).join('') }\n    `\n  }\n\n  getListItem(chat){\n    return `\n    <div class=\"dl__item\" data-ripple data-id=\"${chat.id}\">\n        <div class=\"dl__item-photo\" data-file-id=\"${chat.peerInfo ? chat.peerInfo.id : ''}\">${_utils_dom__WEBPACK_IMPORTED_MODULE_0__[\"photoPlaceholder\"](chat.peerInfo)}</div>\n        ${\n          chat.peerInfo.isOnline\n          ? '<div class=\"dl__item-online\"></div>'\n          : ''\n        }\n        <div class=\"dl__item-line1\">\n          <span class=\"dl__item-name\">\n            ${_utils_string__WEBPACK_IMPORTED_MODULE_1__[\"title\"](chat.peerInfo)}\n            ${\n              chat.peerInfo.isVerified\n                ? '<span class=\"dl__item-verified\"><img src=\"verified.png\"></span>'\n                : ''\n            }\n          </span>\n          ${\n            chat.topMessage.isOutgoing\n            ? '<span class=\"dl__item-status dl__item-status--read\">' + _assets_svg_2checks_svg_svg__WEBPACK_IMPORTED_MODULE_5___default.a + '</span>'\n            : ''\n          }\n          <time>\n            ${_utils_string__WEBPACK_IMPORTED_MODULE_1__[\"time\"](chat.topMessage.date)}\n          </time>\n        </div>\n        <div class=\"dl__item-line2\">\n          <span class=\"dl__item-line2-content\">\n            ${\n              chat.topMessage.isOutgoing || !chat.topMessage.user\n                ? ''\n                : '<span class=\"dl__item-sender\">' + _utils_string__WEBPACK_IMPORTED_MODULE_1__[\"name\"](chat.topMessage.user) + ':</span>'\n            }\n            ${\n              chat.topMessage.message \n                ? \n                _utils_string__WEBPACK_IMPORTED_MODULE_1__[\"trim\"](chat.topMessage.message) \n                : \n                '—'\n            }\n          </span>\n          ${\n            chat.unread_count\n              ? ' <span class=\"dl__item-counter\">' + chat.unread_count + '</span>'\n              : ''\n          }\n        </div>\n      </div>`\n  }\n\n  itemClicked(item){\n    const chatId = item.dataset.id;\n\n    this.app.layout.chat.open(chatId);\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29tcG9uZW50cy9hc2lkZS5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL1RlbGVncmFtanMvLi9zcmMvY29tcG9uZW50cy9hc2lkZS5qcz8xOTI3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGRvbSBmcm9tIFwiLi4vdXRpbHMvZG9tXCI7XG5pbXBvcnQgKiBhcyBzIGZyb20gXCIuLi91dGlscy9zdHJpbmdcIjtcbmltcG9ydCBpY29uTWVudSBmcm9tICcuLy4uL2Fzc2V0cy9zdmcvbWVudV9zdmcuc3ZnJ1xuaW1wb3J0IGljb25TZWFyY2ggZnJvbSAnLi8uLi9hc3NldHMvc3ZnL3NlYXJjaF9zdmcuc3ZnJ1xuaW1wb3J0IGljb25DaGVjazEgZnJvbSAnLi8uLi9hc3NldHMvc3ZnLzFjaGVja19zdmcuc3ZnJ1xuaW1wb3J0IGljb25DaGVjazIgZnJvbSAnLi8uLi9hc3NldHMvc3ZnLzJjaGVja3Nfc3ZnLnN2ZydcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQXNpZGUge1xuICBjb25zdHJ1Y3RvcihhcHApe1xuICAgIHRoaXMuYXBwID0gYXBwO1xuICAgIHRoaXMuYXBpID0gYXBwLmFwaTtcblxuICAgIHRoaXMubm9kZXMgPSB7XG4gICAgICB3cmFwcGVyOiBudWxsLFxuICAgICAgbGlzdDogbnVsbCxcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgZ2V0IENTUygpe1xuICAgIHJldHVybiB7XG4gICAgICB3cmFwcGVyOiAnaW0tYXNpZGUnLFxuICAgICAgd3JhcHBlckxvYWRpbmc6ICdpbS1hc2lkZS0tbG9hZGluZycsXG4gICAgICBsaXN0OiAnZGwnLFxuICAgICAgc2VhcmNoRm9jdXNlZDogJ2ltLWFzaWRlX19oZWFkZXItc2VhcmNoLS1mb2N1c2VkJ1xuICAgIH1cbiAgfVxuXG4gIGNyZWF0ZSgpe1xuICAgIHRoaXMubm9kZXMud3JhcHBlciA9IGRvbS5tYWtlKCdhc2lkZScsIFtBc2lkZS5DU1Mud3JhcHBlcl0pO1xuICAgIHRoaXMubm9kZXMubGlzdCA9IGRvbS5tYWtlKCdkaXYnLCBbQXNpZGUuQ1NTLmxpc3RdKTtcblxuICAgIHRoaXMubm9kZXMud3JhcHBlci5pbm5lckhUTUwgPSBgXG4gICAgPGRpdiBjbGFzcz1cImltLWFzaWRlX19oZWFkZXJcIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJpbS1hc2lkZV9faGVhZGVyLW1lbnVcIj5cbiAgICAgICAgPGk+XG4gICAgICAgICAgJHtpY29uTWVudX1cbiAgICAgICAgPC9pPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwiaW0tYXNpZGVfX2hlYWRlci1zZWFyY2hcIiBpZD1cImFzaWRlLXNlYXJjaFwiPlxuICAgICAgICAke2ljb25TZWFyY2h9XG4gICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIHBsYWNlaG9sZGVyPVwiU2VhcmNoXCI+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgICBgO1xuXG4gICAgdGhpcy5ub2Rlcy53cmFwcGVyLmFwcGVuZENoaWxkKHRoaXMubm9kZXMubGlzdCk7XG5cbiAgICByZXR1cm4gdGhpcy5ub2Rlcy53cmFwcGVyXG4gIH1cblxuICBiaW5kRXZlbnRzKCl7XG4gICAgbGV0IHNlYXJjaFdyYXAgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYXNpZGUtc2VhcmNoJyk7XG4gICAgbGV0IHNlYXJjaElucHV0ID0gc2VhcmNoV3JhcC5xdWVyeVNlbGVjdG9yKCdpbnB1dCcpO1xuXG4gICAgc2VhcmNoSW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignZm9jdXMnLCAoKSA9PiB7XG4gICAgICBzZWFyY2hXcmFwLmNsYXNzTGlzdC5hZGQoQXNpZGUuQ1NTLnNlYXJjaEZvY3VzZWQpO1xuICAgIH0pXG5cbiAgICBzZWFyY2hJbnB1dC5hZGRFdmVudExpc3RlbmVyKCdibHVyJywgKCkgPT4ge1xuICAgICAgaWYgKCFzZWFyY2hJbnB1dC52YWx1ZS50cmltKCkubGVuZ3RoKXtcbiAgICAgICAgc2VhcmNoV3JhcC5jbGFzc0xpc3QucmVtb3ZlKEFzaWRlLkNTUy5zZWFyY2hGb2N1c2VkKTtcbiAgICAgIH1cbiAgICB9KVxuXG4gICAgdGhpcy5ub2Rlcy53cmFwcGVyLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcbiAgICAgIGNvbnN0IGVsID0gZS50YXJnZXQubm9kZVR5cGUgPT09IE5vZGUuRUxFTUVOVF9OT0RFID8gZS50YXJnZXQgOiBlLnRhcmdldC5wYXJlbnROb2RlO1xuICAgICAgY29uc3QgaXRlbSA9IGVsLmNsb3Nlc3QoJy5kbF9faXRlbScpO1xuXG4gICAgICBpZiAoaXRlbSl7XG4gICAgICAgIHRoaXMuaXRlbUNsaWNrZWQoaXRlbSk7XG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIGxvYWRDaGF0cygpe1xuICAgIHRoaXMubm9kZXMud3JhcHBlci5jbGFzc0xpc3QuYWRkKEFzaWRlLkNTUy53cmFwcGVyTG9hZGluZyk7XG5cbiAgICB0aGlzLmFwaS5nZXRDaGF0cygpLnRoZW4oIGRpYWxvZ3MgPT4ge1xuICAgICAgdGhpcy5ub2Rlcy53cmFwcGVyLmNsYXNzTGlzdC5yZW1vdmUoQXNpZGUuQ1NTLndyYXBwZXJMb2FkaW5nKTtcbiAgICAgIHRoaXMuZmlsbENoYXRzKGRpYWxvZ3MpO1xuICAgIH0pXG4gIH1cblxuICBmaWxsQ2hhdHMoY2hhdHMpe1xuICAgIGNvbnNvbGUubG9nKCdGaWxsIGNoYXRzJywgY2hhdHMpO1xuICAgIGlmICghY2hhdHMpe1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLm5vZGVzLmxpc3QuaW5uZXJIVE1MID0gYFxuICAgICAgJHsgY2hhdHMubWFwKGNoYXQgPT4gdGhpcy5nZXRMaXN0SXRlbShjaGF0KSkuam9pbignJykgfVxuICAgIGBcbiAgfVxuXG4gIGdldExpc3RJdGVtKGNoYXQpe1xuICAgIHJldHVybiBgXG4gICAgPGRpdiBjbGFzcz1cImRsX19pdGVtXCIgZGF0YS1yaXBwbGUgZGF0YS1pZD1cIiR7Y2hhdC5pZH1cIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImRsX19pdGVtLXBob3RvXCIgZGF0YS1maWxlLWlkPVwiJHtjaGF0LnBlZXJJbmZvID8gY2hhdC5wZWVySW5mby5pZCA6ICcnfVwiPiR7ZG9tLnBob3RvUGxhY2Vob2xkZXIoY2hhdC5wZWVySW5mbyl9PC9kaXY+XG4gICAgICAgICR7XG4gICAgICAgICAgY2hhdC5wZWVySW5mby5pc09ubGluZVxuICAgICAgICAgID8gJzxkaXYgY2xhc3M9XCJkbF9faXRlbS1vbmxpbmVcIj48L2Rpdj4nXG4gICAgICAgICAgOiAnJ1xuICAgICAgICB9XG4gICAgICAgIDxkaXYgY2xhc3M9XCJkbF9faXRlbS1saW5lMVwiPlxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZGxfX2l0ZW0tbmFtZVwiPlxuICAgICAgICAgICAgJHtzLnRpdGxlKGNoYXQucGVlckluZm8pfVxuICAgICAgICAgICAgJHtcbiAgICAgICAgICAgICAgY2hhdC5wZWVySW5mby5pc1ZlcmlmaWVkXG4gICAgICAgICAgICAgICAgPyAnPHNwYW4gY2xhc3M9XCJkbF9faXRlbS12ZXJpZmllZFwiPjxpbWcgc3JjPVwidmVyaWZpZWQucG5nXCI+PC9zcGFuPidcbiAgICAgICAgICAgICAgICA6ICcnXG4gICAgICAgICAgICB9XG4gICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICR7XG4gICAgICAgICAgICBjaGF0LnRvcE1lc3NhZ2UuaXNPdXRnb2luZ1xuICAgICAgICAgICAgPyAnPHNwYW4gY2xhc3M9XCJkbF9faXRlbS1zdGF0dXMgZGxfX2l0ZW0tc3RhdHVzLS1yZWFkXCI+JyArIGljb25DaGVjazIgKyAnPC9zcGFuPidcbiAgICAgICAgICAgIDogJydcbiAgICAgICAgICB9XG4gICAgICAgICAgPHRpbWU+XG4gICAgICAgICAgICAke3MudGltZShjaGF0LnRvcE1lc3NhZ2UuZGF0ZSl9XG4gICAgICAgICAgPC90aW1lPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImRsX19pdGVtLWxpbmUyXCI+XG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCJkbF9faXRlbS1saW5lMi1jb250ZW50XCI+XG4gICAgICAgICAgICAke1xuICAgICAgICAgICAgICBjaGF0LnRvcE1lc3NhZ2UuaXNPdXRnb2luZyB8fCAhY2hhdC50b3BNZXNzYWdlLnVzZXJcbiAgICAgICAgICAgICAgICA/ICcnXG4gICAgICAgICAgICAgICAgOiAnPHNwYW4gY2xhc3M9XCJkbF9faXRlbS1zZW5kZXJcIj4nICsgcy5uYW1lKGNoYXQudG9wTWVzc2FnZS51c2VyKSArICc6PC9zcGFuPidcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICR7XG4gICAgICAgICAgICAgIGNoYXQudG9wTWVzc2FnZS5tZXNzYWdlIFxuICAgICAgICAgICAgICAgID8gXG4gICAgICAgICAgICAgICAgcy50cmltKGNoYXQudG9wTWVzc2FnZS5tZXNzYWdlKSBcbiAgICAgICAgICAgICAgICA6IFxuICAgICAgICAgICAgICAgICfigJQnXG4gICAgICAgICAgICB9XG4gICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICR7XG4gICAgICAgICAgICBjaGF0LnVucmVhZF9jb3VudFxuICAgICAgICAgICAgICA/ICcgPHNwYW4gY2xhc3M9XCJkbF9faXRlbS1jb3VudGVyXCI+JyArIGNoYXQudW5yZWFkX2NvdW50ICsgJzwvc3Bhbj4nXG4gICAgICAgICAgICAgIDogJydcbiAgICAgICAgICB9XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+YFxuICB9XG5cbiAgaXRlbUNsaWNrZWQoaXRlbSl7XG4gICAgY29uc3QgY2hhdElkID0gaXRlbS5kYXRhc2V0LmlkO1xuXG4gICAgdGhpcy5hcHAubGF5b3V0LmNoYXQub3BlbihjaGF0SWQpO1xuICB9XG59XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/components/aside.js\n");

/***/ }),

/***/ "./src/components/auth.js":
/*!********************************!*\
  !*** ./src/components/auth.js ***!
  \********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return AuthScreen; });\n/* harmony import */ var _utils_dom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../utils/dom */ \"./src/utils/dom.js\");\n/* harmony import */ var _utils_dom_elements__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./../utils/dom_elements */ \"./src/utils/dom_elements.js\");\n/* harmony import */ var _assets_svg_tg_logo_svg__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./../assets/svg/tg-logo.svg */ \"./src/assets/svg/tg-logo.svg\");\n/* harmony import */ var _assets_svg_tg_logo_svg__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_assets_svg_tg_logo_svg__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _utils_phone__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./../utils/phone */ \"./src/utils/phone.js\");\n/* harmony import */ var _Screen__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Screen */ \"./src/components/Screen.js\");\n/* harmony import */ var _api_2fa__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./../api/2fa */ \"./src/api/2fa.js\");\n\n\n\n\n\n\n\nconst CSS = {\n  centerZone: 't-auth-center',\n  logo: 't-logo',\n  logoWrapper: 't-logo-wrapper',\n};\n\nconst locale = {\n  auth_step_phone_title: 'Sign in to Telegram',\n  auth_step_phone_description: 'Please confirm your country and <br> enter your phone number.',\n  auth_step_phone_county_placeholder: 'Country',\n  auth_step_phone_phone_placeholder: 'Phone Number',\n  auth_step_phone_phone_placeholder_invalid: 'Invalid Phone Number',\n\n  auth_button_text: 'NEXT',\n  auth_button_text_loading: 'PLEASE WAIT...',\n\n  auth_step_code_description: 'We have sent you an SMS with the code.',\n  auth_step_code_placeholder: 'Code',\n  auth_step_code_placeholder_invalid: 'Invalid Code',\n\n  auth_step_password_title: 'Enter a password',\n  auth_step_password_description: 'Your account is protected with<br> an additional password',\n  auth_step_password_placeholder: 'Password',\n  auth_step_password_placeholder_invalid: 'Invalid Password',\n\n  auth_step_signup_title: 'Your name',\n  auth_step_signup_description: 'Enter your name and add <br> a profile picture',\n  auth_step_signup_name_label: 'Name',\n  auth_step_signup_lastname_label: 'Last Name (optional)',\n  auth_step_signup_button_text: 'START MESSAGING',\n};\n\nclass AuthScreen extends _Screen__WEBPACK_IMPORTED_MODULE_4__[\"default\"] {\n  constructor(app) {\n    super('auth');\n    this.app = app;\n    this.state = app.state;\n    this.api = app.api;\n    this.mtp = app.mtp;\n\n    this.nodes = {\n      common: {\n        centerZone: null,\n        logo: null,\n        logoWrapper: null,\n        title: null,\n        description: null,\n      },\n      stepPhoneWrapper: null,\n      stepCodeWrapper: null,\n      stepPasswordWrapper: null,\n      stepSignupWrapper: null,\n    };\n\n    this.phone = null;\n    this.phoneHash = null;\n\n    this.steps = {\n      PHONE: 0,\n      CODE: 1,\n      PASSWORD: 2,\n      SIGNUP: 3,\n    };\n\n    this.prepare();\n\n    this.changeStep(this.steps.PHONE);\n  }\n\n  prepare(){\n    this.nodes.common.centerZone = _utils_dom__WEBPACK_IMPORTED_MODULE_0__[\"make\"]('div', [CSS.centerZone]);\n    this.nodes.common.logoWrapper = _utils_dom__WEBPACK_IMPORTED_MODULE_0__[\"make\"]('div', CSS.logoWrapper);\n    this.nodes.common.logo = _utils_dom__WEBPACK_IMPORTED_MODULE_0__[\"make\"]('div', CSS.logo, {\n      innerHTML: _assets_svg_tg_logo_svg__WEBPACK_IMPORTED_MODULE_2___default.a\n    });\n    this.nodes.common.title = _utils_dom__WEBPACK_IMPORTED_MODULE_0__[\"make\"]('h1', null, {\n      textContent: locale.auth_step_phone_title\n    });\n    this.nodes.common.description = _utils_dom__WEBPACK_IMPORTED_MODULE_0__[\"make\"]('p', null, {\n      innerHTML: locale.auth_step_phone_description\n    });\n\n\n    this.nodes.common.logoWrapper.appendChild(this.nodes.common.logo);\n    this.nodes.common.centerZone.appendChild(this.nodes.common.logoWrapper);\n    this.nodes.common.centerZone.appendChild(this.nodes.common.title);\n    this.nodes.common.centerZone.appendChild(this.nodes.common.description);\n\n    this.wrapper.appendChild(this.nodes.common.centerZone);\n\n    document.body.appendChild(this.wrapper);\n\n    this.prepareAnimations();\n\n  }\n\n  loadLottie(){\n    return new Promise((resolve, reject) => {\n      const script = document.createElement('script');\n      document.body.appendChild(script);\n      script.onload = resolve;\n      script.onerror = reject;\n      script.async = true;\n      script.src = 'https://cdnjs.cloudflare.com/ajax/libs/bodymovin/5.5.9/lottie_svg.js';\n    });\n  }\n\n  prepareAnimations(){\n    this.animationPrepare = Promise.all([\n      this.loadLottie(),\n      __webpack_require__.e(/*! import() | monkey */ \"monkey\").then(__webpack_require__.t.bind(null, /*! ./../assets/monkey/monkey.json */ \"./src/assets/monkey/monkey.json\", 3))\n      // fetch('https://recsys.cloud.nostr.ru/monkey.json', {mode: 'cors', redirect: 'follow'}).then(r => r.json()),\n    ]).then(([_, monkey]) => {\n      Object.entries(monkey.default).forEach(([name, data]) => {\n        let div = _utils_dom__WEBPACK_IMPORTED_MODULE_0__[\"make\"]('div', ['lottie', 'lottie--' + name])\n\n        this.nodes.common.logoWrapper.appendChild(div);\n\n        window.bodymovin.loadAnimation({\n          container: div,\n          renderer: 'svg',\n          name,\n          autoplay: false,\n          animationData: data\n        })\n      })\n    }).catch(e => {\n      console.log('Error loading animation', e);\n    });\n  }\n\n\n  changeStep(step){\n    if (this.step === step){\n      return;\n    }\n\n    this.step = step;\n\n    /**\n     * Remove prev steps wrappers\n     */\n    ['stepPhoneWrapper', 'stepCodeWrapper', 'stepPasswordWrapper', 'stepSignupWrapper'].forEach((wrapperName) => {\n      if (this.nodes[wrapperName]){\n        this.nodes[wrapperName].remove();\n      }\n    });\n\n    // this.makeStepCode();\n    // return;\n\n    switch (step) {\n      case this.steps.PHONE:\n        this.makeStepPhone();\n        break;\n      case this.steps.CODE:\n        this.makeStepCode();\n        break;\n      case this.steps.PASSWORD:\n        this.makeStepPassword();\n        break;\n      case this.steps.SIGNUP:\n        this.makeStepSignup();\n        break;\n    }\n\n    if (step !== this.steps.PHONE){\n      setTimeout(() => {\n        let input = this.nodes.common.centerZone.querySelector('input');\n\n        input.focus();\n      },100)\n    }\n  }\n\n  /**\n   * Creates first auth screen with Country and Phone Number fields\n   */\n  makeStepPhone() {\n    this.nodes.stepPhoneWrapper = _utils_dom__WEBPACK_IMPORTED_MODULE_0__[\"make\"]('div');\n\n    let button, inputPhone;\n\n    function errorCallback() {\n      _utils_dom_elements__WEBPACK_IMPORTED_MODULE_1__[\"setInputInvalidState\"](inputPhone, true, locale.auth_step_phone_phone_placeholder_invalid);\n      _utils_dom_elements__WEBPACK_IMPORTED_MODULE_1__[\"setButtonLoadingState\"](button, false);\n    }\n\n    let countryWrapper = _utils_dom__WEBPACK_IMPORTED_MODULE_0__[\"make\"]('div', 'dropdown-wrapper');\n    let countriesList = null;\n    let countriesParsed = null;\n\n    _utils_dom_elements__WEBPACK_IMPORTED_MODULE_1__[\"input\"]({\n      placeholder: locale.auth_step_phone_county_placeholder,\n      appendTo: countryWrapper,\n      onFocus(){\n        countryWrapper.classList.add('dropdown-wrapper--focused')\n      },\n      onBlur(){\n        setTimeout(() => {\n          countryWrapper.classList.remove('dropdown-wrapper--focused')\n        }, 50) // allow click firing\n      },\n      onChange(val){\n        setTimeout(() => {\n          if (!val.trim().length){\n            _utils_dom_elements__WEBPACK_IMPORTED_MODULE_1__[\"updateDropdownItems\"](countriesList, countriesParsed);\n            return\n          }\n\n          let found = countriesParsed.filter( ([code, abbr, name, pattern]) => {\n            const titleLower = name.toLowerCase();\n            const searchLower = val.toLowerCase();\n\n            return titleLower.includes(searchLower);\n          });\n\n          countriesList.innerHTML = '';\n          _utils_dom_elements__WEBPACK_IMPORTED_MODULE_1__[\"updateDropdownItems\"](countriesList, found, val);\n        })\n      }\n    });\n\n    this.nodes.stepPhoneWrapper.appendChild(countryWrapper);\n\n\n\n    this.loadCountries().then(list => {\n      countriesParsed = list;\n\n      countriesList = _utils_dom_elements__WEBPACK_IMPORTED_MODULE_1__[\"dropdown\"]({\n        appendTo: countryWrapper,\n        items: countriesParsed,\n        onSelect(item){\n          let phoneInput = inputPhone.querySelector('input');\n          let countryInput = countryWrapper.querySelector('input');\n\n          inputPhone.dataset.mask = '+' + item.dataset.mask;\n          inputPhone.classList.remove('t-input--empty')\n\n          countryInput.value = item.querySelector('.name').textContent;\n\n          phoneInput.value = '+' + item.dataset.id;\n\n          setTimeout(() => {\n            phoneInput.focus();\n          })\n        }\n      })\n    })\n\n    inputPhone = _utils_dom_elements__WEBPACK_IMPORTED_MODULE_1__[\"input\"]({\n      placeholder: locale.auth_step_phone_phone_placeholder,\n      appendTo: this.nodes.stepPhoneWrapper,\n      type: 'tel',\n      mask: 'phone',\n      onEnter: (value) => {\n        if (!Object(_utils_phone__WEBPACK_IMPORTED_MODULE_3__[\"isValidNumber\"])(value)){\n          return;\n        }\n\n        this.phone = value;\n        this.submitPhoneNumber(errorCallback);\n        _utils_dom_elements__WEBPACK_IMPORTED_MODULE_1__[\"setButtonLoadingState\"](button, true, locale.auth_button_text_loading);\n      },\n      onChange: (value) => {\n        setTimeout(() => {\n\n          // console.log('value', value);\n          button.hidden = !Object(_utils_phone__WEBPACK_IMPORTED_MODULE_3__[\"isValidNumber\"])(value);\n          this.phone = value;\n        }, 30);\n      }\n    });\n\n    button = _utils_dom_elements__WEBPACK_IMPORTED_MODULE_1__[\"button\"]({\n      text: locale.auth_button_text,\n      appendTo: this.nodes.stepPhoneWrapper,\n      hidden: true,\n      onSubmit: () => {\n        this.submitPhoneNumber(errorCallback);\n        _utils_dom_elements__WEBPACK_IMPORTED_MODULE_1__[\"setButtonLoadingState\"](button, true, locale.auth_button_text_loading);\n      }\n    });\n\n    this.nodes.common.centerZone.appendChild(this.nodes.stepPhoneWrapper);\n  }\n\n  loadCountries(){\n    return new Promise((resolve, reject) => {\n      __webpack_require__.e(/*! import() | countries */ \"countries\").then(__webpack_require__.bind(null, /*! ./../assets/countries.js */ \"./src/assets/countries.js\")).then(({default: countries}) => {\n        const items = countries.split('\\n');\n        const list = []\n\n        items.forEach(item => {\n          let [code, abbr, name, pattern] = item.split(';');\n          list.push([code, abbr, name, pattern]);\n        })\n\n        resolve(list);\n      })\n    })\n  }\n\n  /**\n   * Submit phone number and start waiting for Code\n   */\n  submitPhoneNumber(errorCallback){\n    let resendingTimeout = 10;\n\n    this.mtp.call('auth.sendCode', {\n      flags: 0,\n      phone_number: this.phone,\n      api_id: this.app.appId,\n      api_hash: this.app.appHash,\n      lang_code: navigator.language || 'en',\n      timeout: resendingTimeout\n    }).then((r) => {\n      this.phoneHash = r.phone_code_hash;\n      this.resendType = r.next_type ? r.next_type._ : null;\n\n      this.smsResend = setTimeout(() => {\n        this.mtp.call('auth.resendCode', {\n          phone_number: this.phone,\n          phone_code_hash: this.phoneHash\n        });\n      }, resendingTimeout);\n\n\n      // if (!this.monkey){\n      //   this.animationPrepare.then(() => {\n      //     this.changeStep(this.steps.CODE);\n      //   })\n      // } else {\n        this.changeStep(this.steps.CODE);\n      // }\n\n    }).catch(e => {\n      if (!e || !e._){\n        return;\n      }\n\n      let m = e.error_message;\n\n      if (m.includes('PHONE_MIGRATE')){\n        var newDC = parseInt(m.split('_').pop());\n\n        this.state.set('dc', newDC);\n\n        console.log('🏃‍♀️ DC migrated to ', newDC);\n\n        this.mtp.reconnect().then(() => {\n          console.log('🏃‍♀️  reconnected to new dc' );\n          console.log('🏃‍♀️  now will submit phone number again');\n          this.submitPhoneNumber();\n        })\n\n        return;\n      }\n\n      if (m === 'PHONE_NUMBER_INVALID'){\n        errorCallback();\n\n        return;\n      }\n\n      if (m === 'AUTH_RESTART'){\n        this.submitPhoneNumber(errorCallback);\n        return;\n      }\n\n      if (m.includes('FLOOD_WAIT')){\n        var sec = parseInt(m.split('_').pop())\n        var min = ~~(sec / 60);\n\n        sec = sec % 60;\n        if (sec < 10) sec = '0'+sec;\n        if (min < 10) min = '0'+min;\n\n        console.log('😡 FLOOD_WAIT: ', min + 'm:' + sec + 's.')\n      }\n    })\n  }\n\n  updateMonkey(state){\n    if (this.monkeyState === state){\n      return;\n    }\n    this.nodes.common.logoWrapper.classList.remove('idle', 'tracking', 'peek', 'close', 'closeAndPeekToldle', 'closeAndPeek');\n\n    if(state === false){\n      return;\n    }\n\n    this.monkeyState = state;\n    this.nodes.common.logoWrapper.classList.add(state);\n\n\n    window.bodymovin.play(state);\n    //\n    // this.nodes.common.logo.innerHTML = `\n    // <tgs-player\n    //     autoplay\n    //     loop\n    //     mode=\"normal\"\n    //     src=\"src/assets/monkey/TwoFactorSetupMonkeyClose.tgs\"\n    // >\n    // </tgs-player>\n    // `\n\n  }\n\n  /**\n   * Step 2. Entering a confirmation code.\n   */\n  makeStepCode() {\n    this.nodes.stepCodeWrapper = _utils_dom__WEBPACK_IMPORTED_MODULE_0__[\"make\"]('div');\n\n    this.updateMonkey('idle')\n\n    this.nodes.common.title.textContent = this.phone;\n    this.nodes.common.description.textContent = locale.auth_step_code_description;\n\n    let input,\n      code,\n      button;\n\n    function errorCallback() {\n      _utils_dom_elements__WEBPACK_IMPORTED_MODULE_1__[\"setInputInvalidState\"](input, true, locale.auth_step_code_placeholder_invalid);\n      _utils_dom_elements__WEBPACK_IMPORTED_MODULE_1__[\"setButtonLoadingState\"](button, false);\n    }\n\n    this.typingDebounce;\n\n    input = _utils_dom_elements__WEBPACK_IMPORTED_MODULE_1__[\"input\"]({\n      type: 'password',\n      placeholder: locale.auth_step_code_placeholder,\n      onChange: (value) =>{\n        // els.setInputInvalidState(input, false);\n\n        /**\n         * @todo add autosubmit when typed or pasted 5 symbols\n         */\n        setTimeout(() => {\n          button.hidden = !Object(_utils_phone__WEBPACK_IMPORTED_MODULE_3__[\"isValidVerificationCode\"])(value);\n          code = value;\n        }, 30);\n\n        this.updateMonkey('tracking')\n\n        if (this.typingDebounce){\n          clearTimeout(this.typingDebounce);\n        }\n\n        this.typingDebounce = setTimeout(() => {\n          this.updateMonkey('idle');\n        }, 1000);\n      },\n      onEnter: (value) =>{\n        code = value;\n\n        _utils_dom_elements__WEBPACK_IMPORTED_MODULE_1__[\"setButtonLoadingState\"](button, true);\n        this.submitCode(code, errorCallback);\n      },\n      appendTo: this.nodes.stepCodeWrapper,\n    });\n\n    button = _utils_dom_elements__WEBPACK_IMPORTED_MODULE_1__[\"button\"]({\n      text: locale.auth_button_text,\n      appendTo: this.nodes.stepCodeWrapper,\n      onSubmit: () => {\n        _utils_dom_elements__WEBPACK_IMPORTED_MODULE_1__[\"setButtonLoadingState\"](button, true);\n        this.submitCode(code, errorCallback)\n      },\n      hidden: true,\n    });\n\n    this.nodes.common.centerZone.appendChild(this.nodes.stepCodeWrapper);\n  }\n\n  /**\n   * Submit phone number and start waiting for Code\n   * @param {string} code - verification code\n   * @param {function} errorCallback - fired when user write incorrect code\n   */\n  submitCode(code, errorCallback){\n    if (this.smsResend){\n      clearTimeout(this.smsResend);\n    }\n\n    if (this.typingDebounce){\n      clearTimeout(this.typingDebounce);\n    }\n\n\n    this.mtp.call('auth.signIn', {\n      phone_number: this.phone,\n      phone_code: code,\n      phone_code_hash: this.phoneHash\n    })\n      .then(\n        /**\n         * @param {{_, access_hash: ArrayBuffer, first_name, flags, id, pFlags, phone, status}} a\n         */\n        (a) => {\n          if (a._ === 'auth.authorizationSignUpRequired'){\n            this.changeStep(this.steps.SIGNUP);\n            return;\n          }\n          console.log('🤽‍♂User authorized', a);\n          this.state.update('auth', {\n            user: a.user,\n          });\n\n          this.app.showImLayout();\n        }\n      )\n      .catch(e => {\n        console.error('auth.signIn e', e)\n        if (!e || !e._){\n          return;\n        }\n\n        let m = e.error_message;\n\n        switch (m){\n          case 'SESSION_PASSWORD_NEEDED':\n            this.mtp.callOtherLayer(74, 'account.getPassword').then(r => {\n              this.passwordData = r;\n\n              this.changeStep(this.steps.PASSWORD);\n            })\n            // this.mtp.call('account.getPassword').then(r => {\n            //   console.log('getPassword respo', r);\n            //\n            //   this.passwordData = r;\n            //\n            //   this.changeStep(this.steps.PASSWORD);\n            // })\n            break;\n          case 'PHONE_NUMBER_UNOCCUPIED':\n            this.changeStep(this.steps.SIGNUP);\n            break;\n          case 'PHONE_CODE_INVALID':\n            errorCallback();\n            break;\n        }\n\n\n    })\n  }\n\n  /**\n   * Step 3. Entering a password for 2FA\n   */\n  makeStepPassword() {\n    this.updateMonkey('closeAndPeek')\n\n    this.nodes.stepPasswordWrapper = _utils_dom__WEBPACK_IMPORTED_MODULE_0__[\"make\"]('div');\n\n    this.nodes.common.title.textContent = this.phone;\n    this.nodes.common.description.innerHTML = locale.auth_step_password_description;\n\n    let password, button, input;\n\n    function errorCallback() {\n      _utils_dom_elements__WEBPACK_IMPORTED_MODULE_1__[\"setInputInvalidState\"](input, true, locale.auth_step_password_placeholder_invalid);\n      _utils_dom_elements__WEBPACK_IMPORTED_MODULE_1__[\"setButtonLoadingState\"](button, false);\n    }\n\n    input = _utils_dom_elements__WEBPACK_IMPORTED_MODULE_1__[\"input\"]({\n      type: 'password',\n      placeholder: locale.auth_step_password_placeholder,\n      onChange: (value) =>{\n        setTimeout(() => {\n          password = value;\n        }, 30);\n      },\n      onEnter: (value) =>{\n        password = value;\n\n        _utils_dom_elements__WEBPACK_IMPORTED_MODULE_1__[\"setButtonLoadingState\"](button, true);\n        this.submitPassword(password, errorCallback);\n      },\n      appendTo: this.nodes.stepPasswordWrapper,\n    });\n\n    button = _utils_dom_elements__WEBPACK_IMPORTED_MODULE_1__[\"button\"]({\n      text: locale.auth_button_text,\n      appendTo: this.nodes.stepPasswordWrapper,\n      onSubmit: () => {\n        _utils_dom_elements__WEBPACK_IMPORTED_MODULE_1__[\"setButtonLoadingState\"](button, true);\n        this.submitPassword(password, errorCallback)\n      },\n    });\n\n    this.nodes.common.centerZone.appendChild(this.nodes.stepPasswordWrapper);\n  }\n\n  /**\n   * @todo add cache to all promises\n   * @param password\n   * @param errorCallback\n   */\n  submitPassword(password, errorCallback){\n    this.updateMonkey('closeAndPeekToldle');\n\n    Object(_api_2fa__WEBPACK_IMPORTED_MODULE_5__[\"makePasswordHash\"])(this.passwordData.current_salt, password).then(hash => {\n      this.mtp.callOtherLayer(74, 'auth.checkPassword', {\n        password_hash: hash\n      }).then( r => {\n        console.log('🏵 2FA successfull', r);\n\n        if (r._ === 'auth.authorization') {\n          this.state.update('auth', {\n            user: r.user,\n          });\n\n          this.app.showImLayout();\n        }\n      })\n        .catch( e => {\n          errorCallback()\n          console.error('check pwd old err', e);\n          //\n          // if (e.error_message === 'PASSWORD_HASH_INVALID'){\n          //\n          // }\n        })\n    })\n\n\n    return;\n\n\n    //\n    // computeCheck(this.passwordData, password).then(pwd => {\n    //   console.log('here is it ->', pwd);\n    //\n    //   this.mtp.call('auth.checkPassword', {\n    //     password: {\n    //       _: 'inputCheckPasswordSRP',\n    //       srp_id: pwd.srp_id,\n    //       A: pwd.A,\n    //       M1: pwd.M1\n    //     }\n    //   })\n    //     .then(r => {\n    //       console.log('checkPassword', r);\n    //     })\n    //     .catch(e => {\n    //       console.error('checkPassword', e);\n    //       if (e.error_message === 'PASSWORD_HASH_INVALID'){\n    //         errorCallback()\n    //       }\n    //     })\n    //\n    //\n    // }).catch(e => {\n    //   console.error('key error', e);\n    // })\n  }\n\n  /**\n   * Step 4. User with this phone not found, show signup\n   */\n  makeStepSignup() {\n    this.updateMonkey(false);\n\n    this.nodes.stepSignupWrapper = _utils_dom__WEBPACK_IMPORTED_MODULE_0__[\"make\"]('div');\n\n    const uploader = _utils_dom_elements__WEBPACK_IMPORTED_MODULE_1__[\"authUploader\"]({\n      onChange(file){\n        // console.log('file', file);\n      }\n    });\n    this.nodes.common.logo.innerHTML = '';\n    this.nodes.common.logo.appendChild(uploader);\n\n    this.nodes.common.title.textContent = locale.auth_step_signup_title;\n    this.nodes.common.description.innerHTML = locale.auth_step_signup_description;\n\n    let inputLastName, button;\n    let name, lastname;\n\n    function errorCallback() {\n      _utils_dom_elements__WEBPACK_IMPORTED_MODULE_1__[\"setButtonLoadingState\"](button, false);\n    }\n\n    _utils_dom_elements__WEBPACK_IMPORTED_MODULE_1__[\"input\"]({\n      placeholder: locale.auth_step_signup_name_label,\n      onChange: (value) =>{\n        setTimeout(() => {\n          name = value;\n        }, 30);\n      },\n      onEnter: (value) =>{\n        name = value;\n\n        inputLastName.click();\n      },\n      appendTo: this.nodes.stepSignupWrapper,\n    });\n\n    inputLastName = _utils_dom_elements__WEBPACK_IMPORTED_MODULE_1__[\"input\"]({\n      placeholder: locale.auth_step_signup_lastname_label,\n      onChange: (value) =>{\n        setTimeout(() => {\n          lastname = value;\n        }, 30);\n      },\n      onEnter: (value) =>{\n        lastname = value;\n\n        _utils_dom_elements__WEBPACK_IMPORTED_MODULE_1__[\"setButtonLoadingState\"](button, true);\n        this.submitSignup(name, lastname, errorCallback);\n      },\n      appendTo: this.nodes.stepSignupWrapper,\n    });\n\n    button = _utils_dom_elements__WEBPACK_IMPORTED_MODULE_1__[\"button\"]({\n      text: locale.auth_step_signup_button_text,\n      appendTo: this.nodes.stepSignupWrapper,\n      onSubmit: () => {\n        _utils_dom_elements__WEBPACK_IMPORTED_MODULE_1__[\"setButtonLoadingState\"](button, true);\n        this.submitSignup(name, lastname, errorCallback)\n      },\n    });\n\n    this.nodes.common.centerZone.appendChild(this.nodes.stepSignupWrapper);\n  }\n\n  submitSignup(name, lastname, errorCallback){\n    console.warn('Submit signup!', {\n      phone_number: this.phone,\n      phone_code_hash: this.phoneHash,\n      first_name: name,\n      last_name: lastname\n    });\n\n    this.mtp.call('auth.signUp', {\n      phone_number: this.phone,\n      phone_code_hash: this.phoneHash,\n      first_name: name,\n      last_name: lastname\n    })\n      .then( r => {\n        console.log('Signup success:', r)\n\n        if (r._ === 'auth.authorization') {\n          this.state.update('auth', {\n            user: r.user,\n          });\n\n          this.app.showImLayout();\n        }\n      })\n      .catch( e => {\n        console.error('Signup error:', e)\n\n        if (e.error_message && e.error_message === 'PHONE_CODE_EMPTY'){\n\n        }\n\n        errorCallback();\n      })\n  }\n\n  destroy(){\n    this.wrapper.remove();\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/components/auth.js\n");

/***/ }),

/***/ "./src/components/chat.js":
/*!********************************!*\
  !*** ./src/components/chat.js ***!
  \********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Chat; });\n/* harmony import */ var _utils_dom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/dom */ \"./src/utils/dom.js\");\n/* harmony import */ var _utils_string__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/string */ \"./src/utils/string.js\");\n/* harmony import */ var _assets_svg_more_svg_svg__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./../assets/svg/more_svg.svg */ \"./src/assets/svg/more_svg.svg\");\n/* harmony import */ var _assets_svg_more_svg_svg__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_assets_svg_more_svg_svg__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _assets_svg_search_svg_svg__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./../assets/svg/search_svg.svg */ \"./src/assets/svg/search_svg.svg\");\n/* harmony import */ var _assets_svg_search_svg_svg__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_assets_svg_search_svg_svg__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _assets_svg_microphone_svg_svg__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./../assets/svg/microphone_svg.svg */ \"./src/assets/svg/microphone_svg.svg\");\n/* harmony import */ var _assets_svg_microphone_svg_svg__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_assets_svg_microphone_svg_svg__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _assets_svg_smile_svg_svg__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./../assets/svg/smile_svg.svg */ \"./src/assets/svg/smile_svg.svg\");\n/* harmony import */ var _assets_svg_smile_svg_svg__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_assets_svg_smile_svg_svg__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _assets_svg_attach_svg_svg__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./../assets/svg/attach_svg.svg */ \"./src/assets/svg/attach_svg.svg\");\n/* harmony import */ var _assets_svg_attach_svg_svg__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_assets_svg_attach_svg_svg__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var _assets_svg_chatsplaceholder_svg_svg__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./../assets/svg/chatsplaceholder_svg.svg */ \"./src/assets/svg/chatsplaceholder_svg.svg\");\n/* harmony import */ var _assets_svg_chatsplaceholder_svg_svg__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_assets_svg_chatsplaceholder_svg_svg__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var _assets_svg_user_svg_svg__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./../assets/svg/user_svg.svg */ \"./src/assets/svg/user_svg.svg\");\n/* harmony import */ var _assets_svg_user_svg_svg__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(_assets_svg_user_svg_svg__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var _assets_svg_group_svg_svg__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./../assets/svg/group_svg.svg */ \"./src/assets/svg/group_svg.svg\");\n/* harmony import */ var _assets_svg_group_svg_svg__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(_assets_svg_group_svg_svg__WEBPACK_IMPORTED_MODULE_9__);\n/* harmony import */ var _assets_svg_channel_svg_svg__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./../assets/svg/channel_svg.svg */ \"./src/assets/svg/channel_svg.svg\");\n/* harmony import */ var _assets_svg_channel_svg_svg__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(_assets_svg_channel_svg_svg__WEBPACK_IMPORTED_MODULE_10__);\n/* harmony import */ var _assets_svg_largeplay_svg_svg__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./../assets/svg/largeplay_svg.svg */ \"./src/assets/svg/largeplay_svg.svg\");\n/* harmony import */ var _assets_svg_largeplay_svg_svg__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(_assets_svg_largeplay_svg_svg__WEBPACK_IMPORTED_MODULE_11__);\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst locale = {\n  chat_idle_title: 'Open Chat <br> or create a new one',\n  chat_idle_private: 'Private',\n  chat_idle_group: 'Group',\n  chat_idle_channel: 'Channel',\n}\n\nclass Chat {\n  constructor(app){\n    this.app = app;\n    this.api = app.api;\n    this.nodes = {\n      wrapper: null,\n      header: null,\n      messages: null,\n      messagesInner: null,\n      form: null,\n      idle: null,\n    }\n\n    this.currentId = null;\n  }\n\n  static get CSS(){\n    return {\n      wrapper: 'chat',\n      wrapperIdle: 'chat--idle',\n      header: 'chat__header',\n      messages: 'chat__messages',\n      messagesPadded: 'chat__messages--padded',\n      messagesInner: 'chat__messages-inner',\n      messagesLoading: 'chat__messages--loading',\n      form: 'chat__form',\n      idle: 'chat__idle',\n    }\n  }\n\n  create(){\n    this.nodes.wrapper = _utils_dom__WEBPACK_IMPORTED_MODULE_0__[\"make\"]('div', [Chat.CSS.wrapper]);\n    this.nodes.header = _utils_dom__WEBPACK_IMPORTED_MODULE_0__[\"make\"]('div', [Chat.CSS.header]);\n    this.nodes.messages = _utils_dom__WEBPACK_IMPORTED_MODULE_0__[\"make\"]('div', [Chat.CSS.messages]);\n    this.nodes.messagesInner = _utils_dom__WEBPACK_IMPORTED_MODULE_0__[\"make\"]('div', [Chat.CSS.messagesInner]);\n    this.nodes.form = _utils_dom__WEBPACK_IMPORTED_MODULE_0__[\"make\"]('div', [Chat.CSS.form, 'msg-form']);\n    this.nodes.idle = _utils_dom__WEBPACK_IMPORTED_MODULE_0__[\"make\"]('div', [Chat.CSS.idle]);\n\n    this.nodes.header.innerHTML = `\n      <div class=\"chat__header-photo\"></div>\n      <div class=\"chat__header-info\">\n        <div class=\"chat__header-info-title\"></div>\n        <span class=\"online-state\"></span>\n      </div>\n      <div class=\"chat__header-search\">\n        <i>${_assets_svg_search_svg_svg__WEBPACK_IMPORTED_MODULE_3___default.a}</i>\n      </div>\n      <div class=\"chat__header-menu\">\n        <i>${_assets_svg_more_svg_svg__WEBPACK_IMPORTED_MODULE_2___default.a}</i>\n      </div>\n    `;\n\n    /*\n\n    this.nodes.wrapper.innerHTML = `\n      <div class=\"chat__header\">\n      </div>\n      <div class=\"chat__messages\">\n        <div class=\"chat__messages-inner\">\n          <div class=\"m m--file\">\n            <div class=\"m__bubble\">\n              <div class=\"m__attach\">\n                <div class=\"m__attach-icon\">\n                </div>\n                <div class=\"m__attach-title\">\n                  DisneylandVisa.pdf\n                  <div class=\"m__attach-size\">\n                    1 MB\n                  </div>\n                </div>\n              </div>\n              <time class=\"m__time\">\n                16:38\n              </time>\n            </div>\n          </div>\n\n          <div class=\"m m--my\">\n            <div class=\"m__bubble\">\n              <div class=\"m__text\">\n                Wow\n              </div>\n              <div class=\"m__forwarded\">\n                <div class=\"m__forwarded-label\">\n                  Forwarded message\n                </div>\n                <div class=\"m__forwarded-name\">\n                  Interesting facts\n                </div>\n                <div class=\"m__forwarded-text\">\n                  London Is The Smallest City In England. <br> Yes, you heard that right. What you think of London is actually just a small urban area part of the Greater London region. The city of London covers only 1.2 square miles and has a population of around 7,500 residents. As such, the city of London is actually the smallest city in England.\n                </div>\n              </div>\n              <time class=\"m__time\">\n                16:38\n              </time>\n              <span class=\"m__status\"></span>\n            </div>\n          </div>\n\n          <div class=\"chat__messages-day\">\n            <time>\n              Today\n            </time>\n          </div>\n\n          <div class=\"m m--sticker\">\n            <div class=\"sticker-wrap\">\n              <i class=\"sticker\"></i>\n              <time class=\"m__time\">\n                16:38\n              </time>\n            </div>\n          </div>\n\n          <div class=\"m m--my m--grouped\">\n            <div class=\"m__bubble\">\n              <div class=\"m__text\">\n                Tell me the difference between a traveler and a tourist?\n                <span class=\"m__text-time-spacer\"></span>\n              </div>\n              <time class=\"m__time\">\n                16:38\n              </time>\n              <span class=\"m__status\"></span>\n            </div>\n          </div>\n\n          <div class=\"m\">\n            <div class=\"m__bubble\">\n              <div class=\"m__audio\">\n                <div class=\"m__audio-play\">\n                  <i></i>\n                </div>\n                <div class=\"m__audio-track\"></div>\n                <div class=\"m__audio-time\">\n                  3:24\n                </div>\n              </div>\n              <time class=\"m__time\">\n                16:38\n              </time>\n              <span class=\"m__status\"></span>\n            </div>\n          </div>\n\n          <div class=\"m m--my\">\n            <div class=\"m__bubble\">\n              <div class=\"m__audio\">\n                <div class=\"m__audio-play\">\n                  <i></i>\n                </div>\n                <div class=\"m__audio-track\"></div>\n                <div class=\"m__audio-time\">\n                  3:24\n                </div>\n              </div>\n              <time class=\"m__time\">\n                16:38\n              </time>\n              <span class=\"m__status\"></span>\n            </div>\n          </div>\n\n          <div class=\"m m--my m--grouped\">\n            <div class=\"m__bubble\">\n              <div class=\"m__reply\">\n                <div class=\"m__reply-image\"></div>\n                <div class=\"m__reply-name\">\n                  Jessica Wood\n                </div>\n                <div class=\"m__reply-text\">\n                  Hold on, here it is.\n                </div>\n\n              </div>\n              <div class=\"m__text\">\n                Wow, almost 2,500 members!\n                <span class=\"m__text-time-spacer\"></span>\n              </div>\n              <time class=\"m__time\">\n                16:38\n              </time>\n              <span class=\"m__status\"></span>\n            </div>\n          </div>\n\n          <div class=\"m\">\n            <div class=\"m__photo\"></div>\n            <div class=\"m__bubble\">\n              <div class=\"m__name\">\n                Denny\n              </div>\n              <div class=\"m__text\">\n                Wow, almost 2,500 members!\n                <span class=\"m__text-time-spacer\"></span>\n              </div>\n              <time class=\"m__time\">\n                16:38\n              </time>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div class=\"chat__form msg-form\">\n        <div class=\"msg-form__bubble\">\n          <div class=\"msg-form__smile\">\n            <i>${iconSmile}</i>\n          </div>\n          <div class=\"msg-form__area\" data-placeholder=\"Message\" contenteditable></div>\n          <div class=\"msg-form__attach\">\n            <i>${iconAttach}</i>\n          </div>\n        </div>\n        <div class=\"msg-form__submit\">\n          <i>${iconMicrophone}</i>\n        </div>\n      </div>\n    `;\n\n     */\n\n    this.nodes.form.innerHTML = `\n      <div class=\"msg-form__bubble\">\n        <div class=\"msg-form__smile\">\n          <i>${_assets_svg_smile_svg_svg__WEBPACK_IMPORTED_MODULE_5___default.a}</i>\n        </div>\n        <div class=\"msg-form__area\" data-placeholder=\"Message\" contenteditable></div>\n        <div class=\"msg-form__attach\">\n          <i>${_assets_svg_attach_svg_svg__WEBPACK_IMPORTED_MODULE_6___default.a}</i>\n        </div>\n      </div>\n      <div class=\"msg-form__submit\" data-ripple>\n        <i>${_assets_svg_microphone_svg_svg__WEBPACK_IMPORTED_MODULE_4___default.a}</i>\n      </div>\n    `;\n\n    this.nodes.messages.appendChild(this.nodes.messagesInner);\n\n    ['header', 'messages', 'form', 'idle']\n      .forEach(t => this.nodes.wrapper.appendChild(this.nodes[t]))\n\n    this.delegateEvents();\n\n    return this.nodes.wrapper\n  }\n\n  delegateEvents(){\n    this.nodes.wrapper.addEventListener('click', (e) => {\n      const el = e.target.nodeType === Node.ELEMENT_NODE ? e.target : e.target.parentNode;\n\n      /**\n       * Reply clicked\n       */\n      const reply = el.closest('.m__reply');\n      if (reply){\n        this.replyClicked(reply);\n      }\n\n\n    })\n  }\n\n\n  showIdle(){\n    if (!this.nodes.idle.innerHTML){\n      this.nodes.idle.innerHTML = `\n        <div class=\"chat__idle-icon\">${_assets_svg_chatsplaceholder_svg_svg__WEBPACK_IMPORTED_MODULE_7___default.a}</div>\n          <div class=\"chat__idle-title\">${locale.chat_idle_title}</div>\n          <div class=\"chat__idle-buttons\">\n            <div class=\"chat__idle-buttons-item\"><i>${_assets_svg_user_svg_svg__WEBPACK_IMPORTED_MODULE_8___default.a}</i>${locale.chat_idle_private}</div>\n            <div class=\"chat__idle-buttons-item\"><i>${_assets_svg_group_svg_svg__WEBPACK_IMPORTED_MODULE_9___default.a}</i>${locale.chat_idle_group}</div>\n            <div class=\"chat__idle-buttons-item\"><i>${_assets_svg_channel_svg_svg__WEBPACK_IMPORTED_MODULE_10___default.a}</i>${locale.chat_idle_channel}</div>\n          </div>\n        </div>\n      `;\n    }\n\n    this.nodes.wrapper.classList.add(Chat.CSS.wrapperIdle);\n  }\n\n  hideIdle(){\n    this.nodes.wrapper.classList.remove(Chat.CSS.wrapperIdle);\n  }\n\n  open(chatId){\n    if (this.currentId === chatId){\n      return;\n    }\n\n    this.hideIdle()\n    this.currentId = chatId;\n\n    const chat = this.api.getChat(chatId)\n\n    this.fillHeader(chat);\n\n    this.loadMessages(chat);\n\n    this.app.layout.rightCol.show(chat);\n  }\n\n  fillHeader(chat){\n    const title = this.nodes.header.querySelector('.chat__header-info-title');\n    const online = this.nodes.header.querySelector('.online-state');\n    const photo = this.nodes.header.querySelector('.chat__header-photo');\n\n    title.innerHTML = '';\n    online.innerHTML = '';\n    photo.innerHTML = '';\n    photo.classList.remove('online-state--offline');\n\n    title.textContent = _utils_string__WEBPACK_IMPORTED_MODULE_1__[\"title\"](chat.peerInfo);\n\n    if (chat.peerInfo.isOnline){\n      online.innerHTML = 'online'\n\n    } else if (chat.peerInfo.status && chat.peerInfo.status._ === 'userStatusOffline'){\n      online.classList.add('online-state--offline');\n      online.innerHTML = 'Last seen at ' + _utils_string__WEBPACK_IMPORTED_MODULE_1__[\"time\"](chat.peerInfo.status.was_online);\n    } else {\n      online.classList.add('online-state--offline');\n      online.innerHTML = 'Last seen recently';\n    }\n\n    const avatar = this.api.getFileLoaded(chat.peerInfo.id);\n\n    photo.setAttribute('data-file-id', chat.peerInfo.id)\n\n    if (avatar){\n      const img = _utils_dom__WEBPACK_IMPORTED_MODULE_0__[\"make\"]('img', null, {\n        src: URL.createObjectURL(avatar)\n      });\n\n      photo.appendChild(img);\n    } else {\n      photo.innerHTML = _utils_dom__WEBPACK_IMPORTED_MODULE_0__[\"photoPlaceholder\"](chat.peerInfo)\n    }\n\n  }\n\n  loadMessages(chat){\n    this.nodes.messages.classList.add(Chat.CSS.messagesLoading)\n\n    this.nodes.messagesInner.innerHTML = '';\n\n    this.api.loadMessages(chat)\n      .then(messages => {\n        this.nodes.messages.classList.remove(Chat.CSS.messagesLoading);\n        this.nodes.messages.classList.toggle(Chat.CSS.messagesPadded, messages.length < 17)\n\n        this.nodes.messagesInner.innerHTML = messages.reduce((html, m, i) => {\n          const prev = messages[i - 1];\n          const next = messages[i + 1];\n\n          let isGrouped = prev && prev.author.id === m.author.id;\n          let modifiers = [];\n\n          if (m.isMy){\n            modifiers.push('m--my');\n          }\n\n          if (!m.isMy){\n            modifiers.push('m--has-photo');\n          }\n\n          if (!isGrouped && next && next.author.id === m.author.id){\n            modifiers.push('m--upper');\n          }\n\n          if (isGrouped && (!next || next.author.id !== m.author.id)){\n            modifiers.push('m--lower');\n          }\n\n          if (isGrouped){\n            modifiers.push('m--grouped');\n          }\n\n          if (m.media && m.media.photo && !m.message){\n            modifiers.push('m--only-photo');\n          }\n\n          html += `\n            <div class=\"m ${modifiers.join(' ')}\" data-mid=\"${this.api.composeMessageId(chat, m)}\">\n              ${\n                m.isMy \n                  ? '' \n                  : '<div class=\"m__photo\"></div>'\n              }\n              <div class=\"m__bubble\">\n                ${\n                  m.media && m.media.photo\n                    ? '<div class=\"m__media-photo\" data-file-id=\"' + this.api.composeMessageId(chat, m) +'\" style=\"' + this.getMediaStyle(m.media.photo) + '\"></div>'\n                    : ''\n                }\n                ${\n                  m.isMy\n                    ? ''\n                    : '<div class=\"m__name\">' + _utils_string__WEBPACK_IMPORTED_MODULE_1__[\"name\"](m.author) + '</div>'\n                }\n                ${\n                  m.file\n                  ?  '<div class=\"m__attach\">' +\n                      ' <div class=\"m__attach-icon\"></div>' +\n                      ' <div class=\"m__attach-title\">' +\n                          m.file.file_name +\n                      '   <div class=\"m__attach-size\">' +\n                            + m.media.document.size / 1000 + 'KB' +\n                      '   </div>' +\n                      ' </div>' +\n                    ' </div>'\n                  : ''\n                }\n                ${\n                  m.audio\n                    ? '<div class=\"m__audio\">' +\n                      ' <div class=\"m__audio-play\"><i>' + _assets_svg_largeplay_svg_svg__WEBPACK_IMPORTED_MODULE_11___default.a + '</i></div>' +\n                      ' <div class=\"m__audio-track\">' + _utils_dom__WEBPACK_IMPORTED_MODULE_0__[\"wave\"](m.audio.waveform, 23) + '</div>' +\n                      ' <div class=\"m__audio-time\">' +\n                          _utils_string__WEBPACK_IMPORTED_MODULE_1__[\"duration\"](m.audio.duration) +\n                      ' </div>' +\n                    ' </div>'\n                    : ''\n                }\n                ${\n                  m.reply\n                    ? '<div class=\"m__reply\" data-origin=\"' + this.api.composeMessageId(chat, m.reply) + '\">' +\n                        '<div class=\"m__reply-image\"></div>' +\n                        '<div class=\"m__reply-name\">' + _utils_string__WEBPACK_IMPORTED_MODULE_1__[\"title\"](m.reply.author) + '</div>' +\n                        '<div class=\"m__reply-text\">' + _utils_string__WEBPACK_IMPORTED_MODULE_1__[\"escape\"](m.reply.message) + '</div>' +\n                      '</div>'\n                    : ''\n                }\n                ${\n                  m.message \n                    ? '<div class=\"m__text\">' + _utils_string__WEBPACK_IMPORTED_MODULE_1__[\"nl2br\"](_utils_string__WEBPACK_IMPORTED_MODULE_1__[\"escape\"](m.message)) + '<span class=\"m__text-time-spacer\"></span>' + '</div>'\n                    : ''\n                }\n                <time class=\"m__time\">\n                  ${_utils_string__WEBPACK_IMPORTED_MODULE_1__[\"shortTime\"](m.date)}\n                </time>\n              </div>\n            </div>\n          `\n\n          return html;\n        }, '')\n\n        this.scrollToBottom();\n      })\n  }\n\n  scrollToBottom(){\n    let list = this.nodes.messages;\n\n    list.scrollTop = list.scrollHeight;\n  }\n\n  /**\n   * Return style (max height or max width)  for media item\n   */\n  getMediaStyle(photo){\n    if (!photo || !photo.sizes){\n      return 'max-width: 100%';\n    }\n\n    const size = photo.sizes.find(s => s.type === 'x');\n\n    if (!size || !size.h || !size.w){\n      return 'max-width: 100%';\n    }\n\n    const isVertical = size.h > size.w;\n    const isMobile = window.innerWidth < 840;\n    const maxWidth = !isMobile ? 400 : 300;\n    const maxHeight = !isMobile ? 200 : 150;\n    const widthExceeded = size.w > maxWidth;\n    const heightExceeded = size.h > maxHeight;\n\n    let width, height, ratio;\n\n    if (isVertical){\n      height = heightExceeded ? maxHeight : size.h;\n      ratio = size.h / height;\n      width = size.w / ratio;\n    } else {\n      width = widthExceeded ? maxWidth : size.w;\n      ratio = size.w / width;\n      height = size.h / ratio;\n    }\n\n    return `width: ${width}px; height: ${height}px`;\n  }\n\n  replyClicked(el){\n    const origin = el.dataset.origin;\n    const message = document.querySelector(`[data-mid=\"${origin}\"]`)\n\n    if (message){\n      _utils_dom__WEBPACK_IMPORTED_MODULE_0__[\"scrollTo\"](this.nodes.messages, message, 200, 30, () => {\n        message.classList.add('m--highlighted');\n\n\n        setTimeout(() => {\n          message.classList.remove('m--highlighted');\n        }, 300)\n      })\n\n    }\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/components/chat.js\n");

/***/ }),

/***/ "./src/components/im-layout.js":
/*!*************************************!*\
  !*** ./src/components/im-layout.js ***!
  \*************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return ImLayout; });\n/* harmony import */ var _utils_dom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../utils/dom */ \"./src/utils/dom.js\");\n/* harmony import */ var _utils_dom_elements__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./../utils/dom_elements */ \"./src/utils/dom_elements.js\");\n/* harmony import */ var _assets_svg_tg_logo_svg__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./../assets/svg/tg-logo.svg */ \"./src/assets/svg/tg-logo.svg\");\n/* harmony import */ var _assets_svg_tg_logo_svg__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_assets_svg_tg_logo_svg__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _utils_phone__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./../utils/phone */ \"./src/utils/phone.js\");\n/* harmony import */ var _Screen__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Screen */ \"./src/components/Screen.js\");\n/* harmony import */ var _aside__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./aside */ \"./src/components/aside.js\");\n/* harmony import */ var _right_col__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./right-col */ \"./src/components/right-col.js\");\n/* harmony import */ var _chat__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./chat */ \"./src/components/chat.js\");\n\n\n\n\n\n\n\n\n\nclass ImLayout {\n  constructor(app) {\n    this.app = app;\n    this.api = app.api;\n\n    this.nodes = {\n      wrapper: null,\n      aside: null,\n      chat: null,\n      rightCol: null\n    };\n\n    this.aside = new _aside__WEBPACK_IMPORTED_MODULE_5__[\"default\"](app);\n    this.rightCol = new _right_col__WEBPACK_IMPORTED_MODULE_6__[\"default\"](app);\n    this.chat = new _chat__WEBPACK_IMPORTED_MODULE_7__[\"default\"](app);\n\n    this.prepare();\n  }\n\n  static get CSS(){\n    return {\n      wrapper: 'im',\n      aside: 'im__aside',\n      chat: 'im__main',\n      rightCol: 'im__right',\n    }\n  }\n\n  prepare(){\n    this.nodes.wrapper = _utils_dom__WEBPACK_IMPORTED_MODULE_0__[\"make\"]('div', [ImLayout.CSS.wrapper]);\n    this.nodes.aside = this.aside.create();\n    this.nodes.chat = this.chat.create();\n    this.nodes.rightCol = this.rightCol.create();\n\n    this.nodes.aside.classList.add(ImLayout.CSS.aside);\n    this.nodes.chat.classList.add(ImLayout.CSS.chat);\n    this.nodes.rightCol.classList.add(ImLayout.CSS.rightCol);\n\n\n    this.nodes.wrapper.appendChild(this.nodes.aside);\n    this.nodes.wrapper.appendChild(this.nodes.chat);\n    this.nodes.wrapper.appendChild(this.nodes.rightCol);\n\n    document.body.appendChild(this.nodes.wrapper);\n\n    this.chat.showIdle();\n    this.aside.loadChats();\n\n    setTimeout(() => {\n      this.aside.bindEvents();\n      this.rightCol.bindEvents();\n      this.enableRipple();\n    })\n  }\n\n  showAvatar(id, blob){\n    let waiters = document.querySelectorAll(`[data-file-id=\"${id}\"]`)\n\n    Array.from(waiters).forEach(el => {\n      el.removeAttribute('data-file-id');\n\n      let img = _utils_dom__WEBPACK_IMPORTED_MODULE_0__[\"make\"]('img');\n\n      img.src = URL.createObjectURL(blob)\n\n      el.innerHTML = '';\n      el.appendChild(img);\n\n    })\n\n  }\n\n  enableRipple(){\n    this.nodes.wrapper.addEventListener('mousedown', (e) => {\n      const el = e.target.nodeType === Node.ELEMENT_NODE ? e.target : e.target.parentNode;\n      const rEl = el.closest('[data-ripple]');\n\n      if (!rEl){\n        return;\n      }\n\n      if (window.getComputedStyle(rEl).position === 'static'){\n        rEl.style.position = 'relative';\n      }\n\n      const wrap = _utils_dom__WEBPACK_IMPORTED_MODULE_0__[\"make\"]('div', 'ripple');\n      const rip = _utils_dom__WEBPACK_IMPORTED_MODULE_0__[\"make\"]('div', 'ripple-wave');\n      const offset = rEl.getBoundingClientRect();\n      rip.style.left = e.pageX - offset.left + 'px';\n      rip.style.top = e.pageY - offset.top + 'px';\n\n      rEl.appendChild(wrap);\n      wrap.appendChild(rip);\n\n      setTimeout(() => {\n        wrap.remove();\n      }, 550)\n\n    })\n  }\n\n  destroy(){\n\n  }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29tcG9uZW50cy9pbS1sYXlvdXQuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9UZWxlZ3JhbWpzLy4vc3JjL2NvbXBvbmVudHMvaW0tbGF5b3V0LmpzPzhlMGUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgZG9tIGZyb20gJy4vLi4vdXRpbHMvZG9tJztcbmltcG9ydCAqIGFzIGVscyBmcm9tICcuLy4uL3V0aWxzL2RvbV9lbGVtZW50cyc7XG5pbXBvcnQgbG9nbyBmcm9tICcuLy4uL2Fzc2V0cy9zdmcvdGctbG9nby5zdmcnO1xuaW1wb3J0IHsgaXNWYWxpZE51bWJlciwgaXNWYWxpZFZlcmlmaWNhdGlvbkNvZGUgfSBmcm9tICcuLy4uL3V0aWxzL3Bob25lJztcbmltcG9ydCBTY3JlZW4gZnJvbSAnLi9TY3JlZW4nO1xuaW1wb3J0IEFzaWRlIGZyb20gXCIuL2FzaWRlXCI7XG5pbXBvcnQgUmlnaHRDb2wgZnJvbSBcIi4vcmlnaHQtY29sXCI7XG5pbXBvcnQgQ2hhdCBmcm9tIFwiLi9jaGF0XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEltTGF5b3V0IHtcbiAgY29uc3RydWN0b3IoYXBwKSB7XG4gICAgdGhpcy5hcHAgPSBhcHA7XG4gICAgdGhpcy5hcGkgPSBhcHAuYXBpO1xuXG4gICAgdGhpcy5ub2RlcyA9IHtcbiAgICAgIHdyYXBwZXI6IG51bGwsXG4gICAgICBhc2lkZTogbnVsbCxcbiAgICAgIGNoYXQ6IG51bGwsXG4gICAgICByaWdodENvbDogbnVsbFxuICAgIH07XG5cbiAgICB0aGlzLmFzaWRlID0gbmV3IEFzaWRlKGFwcCk7XG4gICAgdGhpcy5yaWdodENvbCA9IG5ldyBSaWdodENvbChhcHApO1xuICAgIHRoaXMuY2hhdCA9IG5ldyBDaGF0KGFwcCk7XG5cbiAgICB0aGlzLnByZXBhcmUoKTtcbiAgfVxuXG4gIHN0YXRpYyBnZXQgQ1NTKCl7XG4gICAgcmV0dXJuIHtcbiAgICAgIHdyYXBwZXI6ICdpbScsXG4gICAgICBhc2lkZTogJ2ltX19hc2lkZScsXG4gICAgICBjaGF0OiAnaW1fX21haW4nLFxuICAgICAgcmlnaHRDb2w6ICdpbV9fcmlnaHQnLFxuICAgIH1cbiAgfVxuXG4gIHByZXBhcmUoKXtcbiAgICB0aGlzLm5vZGVzLndyYXBwZXIgPSBkb20ubWFrZSgnZGl2JywgW0ltTGF5b3V0LkNTUy53cmFwcGVyXSk7XG4gICAgdGhpcy5ub2Rlcy5hc2lkZSA9IHRoaXMuYXNpZGUuY3JlYXRlKCk7XG4gICAgdGhpcy5ub2Rlcy5jaGF0ID0gdGhpcy5jaGF0LmNyZWF0ZSgpO1xuICAgIHRoaXMubm9kZXMucmlnaHRDb2wgPSB0aGlzLnJpZ2h0Q29sLmNyZWF0ZSgpO1xuXG4gICAgdGhpcy5ub2Rlcy5hc2lkZS5jbGFzc0xpc3QuYWRkKEltTGF5b3V0LkNTUy5hc2lkZSk7XG4gICAgdGhpcy5ub2Rlcy5jaGF0LmNsYXNzTGlzdC5hZGQoSW1MYXlvdXQuQ1NTLmNoYXQpO1xuICAgIHRoaXMubm9kZXMucmlnaHRDb2wuY2xhc3NMaXN0LmFkZChJbUxheW91dC5DU1MucmlnaHRDb2wpO1xuXG5cbiAgICB0aGlzLm5vZGVzLndyYXBwZXIuYXBwZW5kQ2hpbGQodGhpcy5ub2Rlcy5hc2lkZSk7XG4gICAgdGhpcy5ub2Rlcy53cmFwcGVyLmFwcGVuZENoaWxkKHRoaXMubm9kZXMuY2hhdCk7XG4gICAgdGhpcy5ub2Rlcy53cmFwcGVyLmFwcGVuZENoaWxkKHRoaXMubm9kZXMucmlnaHRDb2wpO1xuXG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh0aGlzLm5vZGVzLndyYXBwZXIpO1xuXG4gICAgdGhpcy5jaGF0LnNob3dJZGxlKCk7XG4gICAgdGhpcy5hc2lkZS5sb2FkQ2hhdHMoKTtcblxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgdGhpcy5hc2lkZS5iaW5kRXZlbnRzKCk7XG4gICAgICB0aGlzLnJpZ2h0Q29sLmJpbmRFdmVudHMoKTtcbiAgICAgIHRoaXMuZW5hYmxlUmlwcGxlKCk7XG4gICAgfSlcbiAgfVxuXG4gIHNob3dBdmF0YXIoaWQsIGJsb2Ipe1xuICAgIGxldCB3YWl0ZXJzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChgW2RhdGEtZmlsZS1pZD1cIiR7aWR9XCJdYClcblxuICAgIEFycmF5LmZyb20od2FpdGVycykuZm9yRWFjaChlbCA9PiB7XG4gICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoJ2RhdGEtZmlsZS1pZCcpO1xuXG4gICAgICBsZXQgaW1nID0gZG9tLm1ha2UoJ2ltZycpO1xuXG4gICAgICBpbWcuc3JjID0gVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKVxuXG4gICAgICBlbC5pbm5lckhUTUwgPSAnJztcbiAgICAgIGVsLmFwcGVuZENoaWxkKGltZyk7XG5cbiAgICB9KVxuXG4gIH1cblxuICBlbmFibGVSaXBwbGUoKXtcbiAgICB0aGlzLm5vZGVzLndyYXBwZXIuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgKGUpID0+IHtcbiAgICAgIGNvbnN0IGVsID0gZS50YXJnZXQubm9kZVR5cGUgPT09IE5vZGUuRUxFTUVOVF9OT0RFID8gZS50YXJnZXQgOiBlLnRhcmdldC5wYXJlbnROb2RlO1xuICAgICAgY29uc3QgckVsID0gZWwuY2xvc2VzdCgnW2RhdGEtcmlwcGxlXScpO1xuXG4gICAgICBpZiAoIXJFbCl7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHJFbCkucG9zaXRpb24gPT09ICdzdGF0aWMnKXtcbiAgICAgICAgckVsLnN0eWxlLnBvc2l0aW9uID0gJ3JlbGF0aXZlJztcbiAgICAgIH1cblxuICAgICAgY29uc3Qgd3JhcCA9IGRvbS5tYWtlKCdkaXYnLCAncmlwcGxlJyk7XG4gICAgICBjb25zdCByaXAgPSBkb20ubWFrZSgnZGl2JywgJ3JpcHBsZS13YXZlJyk7XG4gICAgICBjb25zdCBvZmZzZXQgPSByRWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICByaXAuc3R5bGUubGVmdCA9IGUucGFnZVggLSBvZmZzZXQubGVmdCArICdweCc7XG4gICAgICByaXAuc3R5bGUudG9wID0gZS5wYWdlWSAtIG9mZnNldC50b3AgKyAncHgnO1xuXG4gICAgICByRWwuYXBwZW5kQ2hpbGQod3JhcCk7XG4gICAgICB3cmFwLmFwcGVuZENoaWxkKHJpcCk7XG5cbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICB3cmFwLnJlbW92ZSgpO1xuICAgICAgfSwgNTUwKVxuXG4gICAgfSlcbiAgfVxuXG4gIGRlc3Ryb3koKXtcblxuICB9XG59XG5cbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/components/im-layout.js\n");

/***/ }),

/***/ "./src/components/right-col.js":
/*!*************************************!*\
  !*** ./src/components/right-col.js ***!
  \*************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return RightCol; });\n/* harmony import */ var _utils_dom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/dom */ \"./src/utils/dom.js\");\n/* harmony import */ var _utils_string__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/string */ \"./src/utils/string.js\");\n/* harmony import */ var _assets_svg_edit_svg_svg__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./../assets/svg/edit_svg.svg */ \"./src/assets/svg/edit_svg.svg\");\n/* harmony import */ var _assets_svg_edit_svg_svg__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_assets_svg_edit_svg_svg__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _assets_svg_close_svg_svg__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./../assets/svg/close_svg.svg */ \"./src/assets/svg/close_svg.svg\");\n/* harmony import */ var _assets_svg_close_svg_svg__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_assets_svg_close_svg_svg__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _assets_svg_more_svg_svg__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./../assets/svg/more_svg.svg */ \"./src/assets/svg/more_svg.svg\");\n/* harmony import */ var _assets_svg_more_svg_svg__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_assets_svg_more_svg_svg__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _assets_svg_info_svg_svg__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./../assets/svg/info_svg.svg */ \"./src/assets/svg/info_svg.svg\");\n/* harmony import */ var _assets_svg_info_svg_svg__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_assets_svg_info_svg_svg__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _assets_svg_checkboxempty_svg_svg__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./../assets/svg/checkboxempty_svg.svg */ \"./src/assets/svg/checkboxempty_svg.svg\");\n/* harmony import */ var _assets_svg_checkboxempty_svg_svg__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_assets_svg_checkboxempty_svg_svg__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var _assets_svg_username_svg_svg__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./../assets/svg/username_svg.svg */ \"./src/assets/svg/username_svg.svg\");\n/* harmony import */ var _assets_svg_username_svg_svg__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_assets_svg_username_svg_svg__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var _assets_svg_phone_svg_svg__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./../assets/svg/phone_svg.svg */ \"./src/assets/svg/phone_svg.svg\");\n/* harmony import */ var _assets_svg_phone_svg_svg__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(_assets_svg_phone_svg_svg__WEBPACK_IMPORTED_MODULE_8__);\n\n\n\n\n\n\n\n\n\n\n\n\nclass RightCol {\n  constructor(app){\n    this.app = app;\n    this.nodes = {\n      wrapper: null,\n    }\n  }\n\n  static get CSS(){\n    return {\n      wrapper: 'im-right',\n      wrapperOpened: 'im-right--opened',\n    }\n  }\n\n  create(){\n    this.nodes.wrapper = _utils_dom__WEBPACK_IMPORTED_MODULE_0__[\"make\"]('aside', [RightCol.CSS.wrapper]);\n\n    this.nodes.wrapper.innerHTML = `\n    <div class=\"im-right__head\">\n      <span class=\"im-right__head-close\">\n        <i>${_assets_svg_close_svg_svg__WEBPACK_IMPORTED_MODULE_3___default.a}</i>\n      </span>\n      <span class=\"im-right__head-title\">\n        Info\n      </span>\n      <span class=\"im-right__head-menu\">\n        <i>${_assets_svg_more_svg_svg__WEBPACK_IMPORTED_MODULE_4___default.a}</i>\n      </span>\n    </div>\n    <div class=\"t-card\">\n      <div class=\"t-card__picture\"></div>\n      <div class=\"t-card__name\">\n        Karen Stanford\n      </div>\n      <div class=\"t-card__online online-state\">\n        online\n      </div>\n      <div class=\"t-card__menu\">\n        <div class=\"t-card__menu-item\">\n          <div class=\"t-card__menu-icon\">${_assets_svg_info_svg_svg__WEBPACK_IMPORTED_MODULE_5___default.a}</div>\n          <div class=\"t-card__menu-title\">\n            25 y.o. traveler\n          </div>\n          <div class=\"t-card__menu-caption\">\n            Bio\n          </div>\n        </div>\n        <div class=\"t-card__menu-item\">\n          <div class=\"t-card__menu-icon\">${_assets_svg_username_svg_svg__WEBPACK_IMPORTED_MODULE_7___default.a}</div>\n          <div class=\"t-card__menu-title\">\n            kare\n          </div>\n          <div class=\"t-card__menu-caption\">\n            Username\n          </div>\n        </div>\n        <div class=\"t-card__menu-item\">\n          <div class=\"t-card__menu-icon\">${_assets_svg_phone_svg_svg__WEBPACK_IMPORTED_MODULE_8___default.a}</div>\n          <div class=\"t-card__menu-title\">\n            +1 38594 38853\n          </div>\n          <div class=\"t-card__menu-caption\">\n            Phone\n          </div>\n        </div>\n        <div class=\"t-card__menu-item\">\n          <div class=\"t-card__menu-icon\">${_assets_svg_checkboxempty_svg_svg__WEBPACK_IMPORTED_MODULE_6___default.a}</div>\n          <div class=\"t-card__menu-title\">\n            Notifications\n          </div>\n          <div class=\"t-card__menu-caption\">\n            Enabled\n          </div>\n        </div>\n      </div>\n\n      <div class=\"t-tabs\">\n        <div class=\"t-tabs__list\">\n          <div class=\"t-tabs__list-item t-tabs__list-item--current\">\n            Members\n          </div>\n          <div class=\"t-tabs__list-item\">\n            Media\n          </div>\n          <div class=\"t-tabs__list-item\">\n            Docs\n          </div>\n          <div class=\"t-tabs__list-item\">\n            Links\n          </div>\n        </div>\n        <div class=\"t-tabs__container\">\n          <div class=\"t-user\">\n            <div class=\"t-user__photo\"></div>\n            <div class=\"t-user__name\">\n              Raaid El Syed\n            </div>\n            <div class=\"t-user__caption online-state\">\n              online\n            </div>\n          </div>\n          <div class=\"t-user\">\n            <div class=\"t-user__photo\"></div>\n            <div class=\"t-user__name\">\n              Phet Putrie\n            </div>\n            <div class=\"t-user__caption online-state\">\n              online\n            </div>\n          </div>\n          <div class=\"t-user\">\n            <div class=\"t-user__photo\"></div>\n            <div class=\"t-user__name\">\n              Lara Madrigal\n            </div>\n            <div class=\"t-user__caption\">\n              last seen 4 minutes ago\n            </div>\n          </div>\n          <div class=\"t-user\">\n            <div class=\"t-user__photo\"></div>\n            <div class=\"t-user__name\">\n              Maria José Bontïn\n            </div>\n            <div class=\"t-user__caption\">\n              last seen 7 minutes ago\n            </div>\n          </div>\n          <div class=\"t-user\">\n            <div class=\"t-user__photo\"></div>\n            <div class=\"t-user__name\">\n              Chinaza Akachi\n            </div>\n            <div class=\"t-user__caption\">\n              last seen 19.11.03\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n    `;\n\n    return this.nodes.wrapper\n  }\n\n\n  bindEvents(){\n    let closer = document.querySelector('.im-right__head-close');\n\n    closer.addEventListener('click', () => {\n      this.hide();\n    })\n  }\n\n\n  show(chat){\n    this.nodes.wrapper.classList.add(RightCol.CSS.wrapperOpened)\n\n    let title = document.querySelector('.t-card__name')\n    let photo = document.querySelector('.t-card__picture')\n\n    chat.title = _utils_string__WEBPACK_IMPORTED_MODULE_1__[\"title\"](chat.peerInfo);\n\n    title.textContent = chat.title;\n\n    let file = this.app.api.getFileLoaded(chat.id.slice(1))\n\n    photo.innerHTML = '';\n\n    if (file){\n      let img = _utils_dom__WEBPACK_IMPORTED_MODULE_0__[\"make\"]('img');\n\n      img.src = URL.createObjectURL(file)\n\n      photo.appendChild(img);\n    } else {\n\n      photo.innerHTML = _utils_dom__WEBPACK_IMPORTED_MODULE_0__[\"photoPlaceholder\"](chat);\n    }\n\n  }\n\n  hide(){\n    this.nodes.wrapper.classList.remove(RightCol.CSS.wrapperOpened)\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/components/right-col.js\n");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Telegramjs; });\n/* harmony import */ var _api_time_manager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api/time-manager */ \"./src/api/time-manager.js\");\n/* harmony import */ var _api_mtp_auth__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./api/mtp-auth */ \"./src/api/mtp-auth.js\");\n/* harmony import */ var _state__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./state */ \"./src/state/index.js\");\n/* harmony import */ var _components_auth__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./components/auth */ \"./src/components/auth.js\");\n/* harmony import */ var _components_im_layout__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./components/im-layout */ \"./src/components/im-layout.js\");\n/* harmony import */ var _styles_index_pcss__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./styles/index.pcss */ \"./src/styles/index.pcss\");\n/* harmony import */ var _styles_index_pcss__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_styles_index_pcss__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _api_mtp_requests__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./api/mtp-requests */ \"./src/api/mtp-requests.js\");\n/* harmony import */ var _api_index__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./api/index */ \"./src/api/index.js\");\n\n\n\n\n\n\n\n\n\n\nclass Telegramjs {\n  constructor() {\n    this.appId = 1050471;\n    this.appHash = 'ae685a63d27ba6cd6c20bc853f9b24e7'\n    this.version = '0.0.1';\n\n\n    this.state = new _state__WEBPACK_IMPORTED_MODULE_2__[\"default\"](this);\n    this.timeManager = new _api_time_manager__WEBPACK_IMPORTED_MODULE_0__[\"default\"](this);\n    this.mtp = new _api_mtp_requests__WEBPACK_IMPORTED_MODULE_6__[\"default\"](this);\n    this.mtpAuth = new _api_mtp_auth__WEBPACK_IMPORTED_MODULE_1__[\"default\"](this);\n    this.auth = null;\n    this.api = new _api_index__WEBPACK_IMPORTED_MODULE_7__[\"default\"](this);\n    this.layout = null;\n\n\n    this.mtpAuth.init(() => {\n      console.log('🥰 MTP auth success')\n\n      this.api.getMe().then(user => {\n        if (!user){\n          this.showAuth();\n          return;\n        }\n\n        this.showImLayout();\n      })\n    })\n  }\n\n  showAuth(){\n    this.auth = new _components_auth__WEBPACK_IMPORTED_MODULE_3__[\"default\"](this);\n  }\n\n  showImLayout(){\n    if (this.auth){\n      this.auth.destroy();\n    }\n\n    this.layout = new _components_im_layout__WEBPACK_IMPORTED_MODULE_4__[\"default\"](this);\n\n    // this.api.listenUpdates();\n  }\n}\n\n/**\n * @typedef {object} UnencryptedMessage\n * @property {BigInt} auth_key_id - 0\n * @property {BigInt} message_id\n * @property {Number} message_data_length\n * @property {ArrayBuffer} message_data - Message Type 32 bit + Type dep params\n */\n\n/**\n * @typedef {object} EncryptedMessage\n * @property {BigInt} auth_key_id\n * @property {BigInt} msg_key - the middle 128 bits of the SHA-256 hash of the message to be encrypted\n *                                (including the internal header and the padding bytes for MTProto 2.0),\n *                                prepended by a 32-byte fragment of the authorization key\n * @property {ArrayBuffer} encrypted_data - {@see EncryptedMessageData}\n */\n\n/**\n * @typedef {object} EncryptedMessageData\n * @property {BigInt} salt\n * @property {BigInt} session_id\n * @property {BigInt} message_id\n * @property {Number} seq_no\n * @property {Number} message_data_length\n * @property {ArrayBuffer} message_data - Message Type 32 bit + Type dep params\n * @property {ArrayBuffer} padding - 12...1024 random bytes\n */\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5kZXguanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9UZWxlZ3JhbWpzLy4vc3JjL2luZGV4LmpzP2I2MzUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFRpbWVNYW5hZ2VyIGZyb20gXCIuL2FwaS90aW1lLW1hbmFnZXJcIjtcblxuaW1wb3J0IE1UUEF1dGggZnJvbSAnLi9hcGkvbXRwLWF1dGgnO1xuaW1wb3J0IFN0YXRlIGZyb20gJy4vc3RhdGUnO1xuaW1wb3J0IEF1dGggZnJvbSBcIi4vY29tcG9uZW50cy9hdXRoXCI7XG5pbXBvcnQgSW1MYXlvdXQgZnJvbSBcIi4vY29tcG9uZW50cy9pbS1sYXlvdXRcIjtcbmltcG9ydCBTdHlsZSBmcm9tICcuL3N0eWxlcy9pbmRleC5wY3NzJztcbmltcG9ydCBNVFBSZXF1ZXN0cyBmcm9tIFwiLi9hcGkvbXRwLXJlcXVlc3RzXCI7XG5pbXBvcnQgQXBpIGZyb20gXCIuL2FwaS9pbmRleFwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUZWxlZ3JhbWpzIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5hcHBJZCA9IDEwNTA0NzE7XG4gICAgdGhpcy5hcHBIYXNoID0gJ2FlNjg1YTYzZDI3YmE2Y2Q2YzIwYmM4NTNmOWIyNGU3J1xuICAgIHRoaXMudmVyc2lvbiA9ICcwLjAuMSc7XG5cblxuICAgIHRoaXMuc3RhdGUgPSBuZXcgU3RhdGUodGhpcyk7XG4gICAgdGhpcy50aW1lTWFuYWdlciA9IG5ldyBUaW1lTWFuYWdlcih0aGlzKTtcbiAgICB0aGlzLm10cCA9IG5ldyBNVFBSZXF1ZXN0cyh0aGlzKTtcbiAgICB0aGlzLm10cEF1dGggPSBuZXcgTVRQQXV0aCh0aGlzKTtcbiAgICB0aGlzLmF1dGggPSBudWxsO1xuICAgIHRoaXMuYXBpID0gbmV3IEFwaSh0aGlzKTtcbiAgICB0aGlzLmxheW91dCA9IG51bGw7XG5cblxuICAgIHRoaXMubXRwQXV0aC5pbml0KCgpID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKCfwn6WwIE1UUCBhdXRoIHN1Y2Nlc3MnKVxuXG4gICAgICB0aGlzLmFwaS5nZXRNZSgpLnRoZW4odXNlciA9PiB7XG4gICAgICAgIGlmICghdXNlcil7XG4gICAgICAgICAgdGhpcy5zaG93QXV0aCgpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuc2hvd0ltTGF5b3V0KCk7XG4gICAgICB9KVxuICAgIH0pXG4gIH1cblxuICBzaG93QXV0aCgpe1xuICAgIHRoaXMuYXV0aCA9IG5ldyBBdXRoKHRoaXMpO1xuICB9XG5cbiAgc2hvd0ltTGF5b3V0KCl7XG4gICAgaWYgKHRoaXMuYXV0aCl7XG4gICAgICB0aGlzLmF1dGguZGVzdHJveSgpO1xuICAgIH1cblxuICAgIHRoaXMubGF5b3V0ID0gbmV3IEltTGF5b3V0KHRoaXMpO1xuXG4gICAgLy8gdGhpcy5hcGkubGlzdGVuVXBkYXRlcygpO1xuICB9XG59XG5cbi8qKlxuICogQHR5cGVkZWYge29iamVjdH0gVW5lbmNyeXB0ZWRNZXNzYWdlXG4gKiBAcHJvcGVydHkge0JpZ0ludH0gYXV0aF9rZXlfaWQgLSAwXG4gKiBAcHJvcGVydHkge0JpZ0ludH0gbWVzc2FnZV9pZFxuICogQHByb3BlcnR5IHtOdW1iZXJ9IG1lc3NhZ2VfZGF0YV9sZW5ndGhcbiAqIEBwcm9wZXJ0eSB7QXJyYXlCdWZmZXJ9IG1lc3NhZ2VfZGF0YSAtIE1lc3NhZ2UgVHlwZSAzMiBiaXQgKyBUeXBlIGRlcCBwYXJhbXNcbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHtvYmplY3R9IEVuY3J5cHRlZE1lc3NhZ2VcbiAqIEBwcm9wZXJ0eSB7QmlnSW50fSBhdXRoX2tleV9pZFxuICogQHByb3BlcnR5IHtCaWdJbnR9IG1zZ19rZXkgLSB0aGUgbWlkZGxlIDEyOCBiaXRzIG9mIHRoZSBTSEEtMjU2IGhhc2ggb2YgdGhlIG1lc3NhZ2UgdG8gYmUgZW5jcnlwdGVkXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGluY2x1ZGluZyB0aGUgaW50ZXJuYWwgaGVhZGVyIGFuZCB0aGUgcGFkZGluZyBieXRlcyBmb3IgTVRQcm90byAyLjApLFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZXBlbmRlZCBieSBhIDMyLWJ5dGUgZnJhZ21lbnQgb2YgdGhlIGF1dGhvcml6YXRpb24ga2V5XG4gKiBAcHJvcGVydHkge0FycmF5QnVmZmVyfSBlbmNyeXB0ZWRfZGF0YSAtIHtAc2VlIEVuY3J5cHRlZE1lc3NhZ2VEYXRhfVxuICovXG5cbi8qKlxuICogQHR5cGVkZWYge29iamVjdH0gRW5jcnlwdGVkTWVzc2FnZURhdGFcbiAqIEBwcm9wZXJ0eSB7QmlnSW50fSBzYWx0XG4gKiBAcHJvcGVydHkge0JpZ0ludH0gc2Vzc2lvbl9pZFxuICogQHByb3BlcnR5IHtCaWdJbnR9IG1lc3NhZ2VfaWRcbiAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBzZXFfbm9cbiAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBtZXNzYWdlX2RhdGFfbGVuZ3RoXG4gKiBAcHJvcGVydHkge0FycmF5QnVmZmVyfSBtZXNzYWdlX2RhdGEgLSBNZXNzYWdlIFR5cGUgMzIgYml0ICsgVHlwZSBkZXAgcGFyYW1zXG4gKiBAcHJvcGVydHkge0FycmF5QnVmZmVyfSBwYWRkaW5nIC0gMTIuLi4xMDI0IHJhbmRvbSBieXRlc1xuICovXG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/index.js\n");

/***/ }),

/***/ "./src/state/index.js":
/*!****************************!*\
  !*** ./src/state/index.js ***!
  \****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return State; });\nclass State {\n  constructor(){\n    this.isAuthorised = false\n    this.storage = window.localStorage\n    this.prefix = 'tg@'\n\n    this.store = {};\n  }\n\n  composeKey(key){\n    return this.prefix + key\n  }\n\n  set(key, value) {\n    this.storage.setItem(this.composeKey(key), JSON.stringify(value))\n\n    console.log(`📦 storage: «${key}» saved `, value);\n  }\n\n  get(key, defaultValue) {\n    try {\n      let data = this.storage.getItem(this.composeKey(key))\n\n      return data ? JSON.parse(data) : defaultValue;\n    } catch (e) {\n      console.error(e)\n      return null\n    }\n  }\n\n  update(key, newProperties){\n    let old = this.get(key);\n\n    if (old){\n      let newVal = Object.assign({}, old, newProperties);\n\n      this.set(key, newVal);\n    }\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc3RhdGUvaW5kZXguanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9UZWxlZ3JhbWpzLy4vc3JjL3N0YXRlL2luZGV4LmpzPzNiMjkiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgY2xhc3MgU3RhdGUge1xuICBjb25zdHJ1Y3Rvcigpe1xuICAgIHRoaXMuaXNBdXRob3Jpc2VkID0gZmFsc2VcbiAgICB0aGlzLnN0b3JhZ2UgPSB3aW5kb3cubG9jYWxTdG9yYWdlXG4gICAgdGhpcy5wcmVmaXggPSAndGdAJ1xuXG4gICAgdGhpcy5zdG9yZSA9IHt9O1xuICB9XG5cbiAgY29tcG9zZUtleShrZXkpe1xuICAgIHJldHVybiB0aGlzLnByZWZpeCArIGtleVxuICB9XG5cbiAgc2V0KGtleSwgdmFsdWUpIHtcbiAgICB0aGlzLnN0b3JhZ2Uuc2V0SXRlbSh0aGlzLmNvbXBvc2VLZXkoa2V5KSwgSlNPTi5zdHJpbmdpZnkodmFsdWUpKVxuXG4gICAgY29uc29sZS5sb2coYPCfk6Ygc3RvcmFnZTogwqske2tleX3CuyBzYXZlZCBgLCB2YWx1ZSk7XG4gIH1cblxuICBnZXQoa2V5LCBkZWZhdWx0VmFsdWUpIHtcbiAgICB0cnkge1xuICAgICAgbGV0IGRhdGEgPSB0aGlzLnN0b3JhZ2UuZ2V0SXRlbSh0aGlzLmNvbXBvc2VLZXkoa2V5KSlcblxuICAgICAgcmV0dXJuIGRhdGEgPyBKU09OLnBhcnNlKGRhdGEpIDogZGVmYXVsdFZhbHVlO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoZSlcbiAgICAgIHJldHVybiBudWxsXG4gICAgfVxuICB9XG5cbiAgdXBkYXRlKGtleSwgbmV3UHJvcGVydGllcyl7XG4gICAgbGV0IG9sZCA9IHRoaXMuZ2V0KGtleSk7XG5cbiAgICBpZiAob2xkKXtcbiAgICAgIGxldCBuZXdWYWwgPSBPYmplY3QuYXNzaWduKHt9LCBvbGQsIG5ld1Byb3BlcnRpZXMpO1xuXG4gICAgICB0aGlzLnNldChrZXksIG5ld1ZhbCk7XG4gICAgfVxuICB9XG59XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/state/index.js\n");

/***/ }),

/***/ "./src/styles/index.pcss":
/*!*******************************!*\
  !*** ./src/styles/index.pcss ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// extracted by mini-css-extract-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc3R5bGVzL2luZGV4LnBjc3MuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9UZWxlZ3JhbWpzLy4vc3JjL3N0eWxlcy9pbmRleC5wY3NzP2UxMjMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luIl0sIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/styles/index.pcss\n");

/***/ }),

/***/ "./src/utils/bin_utils.js":
/*!********************************!*\
  !*** ./src/utils/bin_utils.js ***!
  \********************************/
/*! exports provided: rsaEncrypt, aesDecryptSync, bytesModPow, aesEncryptSync */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rsaEncrypt\", function() { return rsaEncrypt; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"aesDecryptSync\", function() { return aesDecryptSync; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"bytesModPow\", function() { return bytesModPow; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"aesEncryptSync\", function() { return aesEncryptSync; });\n/* harmony import */ var _crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./crypto */ \"./src/utils/crypto.js\");\n/* harmony import */ var big_integer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! big-integer */ \"./node_modules/big-integer/BigInteger.js\");\n/* harmony import */ var big_integer__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(big_integer__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _secure_random__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./secure-random */ \"./src/utils/secure-random.js\");\n/**\n * @todo Remove this file, because it is not longer needed\n * ========================================================\n */\n\n\n\n/*!\n * Webogram v0.7.0 - messaging web application for MTProto\n * https://github.com/zhukov/webogram\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\n * https://github.com/zhukov/webogram/blob/master/LICENSE\n */\n\n\n\n\n\n/**\n * This object will contain exporting methods\n */\nconst toExport = {};\n\n(function() { // Begin scoping function\n\n////////////////////////////////////////////////////////////////////////////////////////\n// Big Integer Library v. 5.5\n// Created 2000, last modified 2013\n// Leemon Baird\n// www.leemon.com\n//\n// Version history:\n// v 5.5  17 Mar 2013\n//   - two lines of a form like \"if (x<0) x+=n\" had the \"if\" changed to \"while\" to\n//     handle the case when x<-n. (Thanks to James Ansell for finding that bug)\n// v 5.4  3 Oct 2009\n//   - added \"var i\" to greaterShift() so i is not global. (Thanks to PŽter Szab— for finding that bug)\n//\n// v 5.3  21 Sep 2009\n//   - added randProbPrime(k) for probable primes\n//   - unrolled loop in mont_ (slightly faster)\n//   - millerRabin now takes a bigInt parameter rather than an int\n//\n// v 5.2  15 Sep 2009\n//   - fixed capitalization in call to int2bigInt in randBigInt\n//     (thanks to Emili Evripidou, Reinhold Behringer, and Samuel Macaleese for finding that bug)\n//\n// v 5.1  8 Oct 2007\n//   - renamed inverseModInt_ to inverseModInt since it doesn't change its parameters\n//   - added functions GCD and randBigInt, which call GCD_ and randBigInt_\n//   - fixed a bug found by Rob Visser (see comment with his name below)\n//   - improved comments\n//\n// This file is public domain.   You can use it for any purpose without restriction.\n// I do not guarantee that it is correct, so use it at your own risk.  If you use\n// it for something interesting, I'd appreciate hearing about it.  If you find\n// any bugs or make any improvements, I'd appreciate hearing about those too.\n// It would also be nice if my name and URL were left in the comments.  But none\n// of that is required.\n//\n// This code defines a bigInt library for arbitrary-precision integers.\n// A bigInt is an array of integers storing the value in chunks of bpe bits,\n// little endian (buff[0] is the least significant word).\n// Negative bigInts are stored two's complement.  Almost all the functions treat\n// bigInts as nonnegative.  The few that view them as two's complement say so\n// in their comments.  Some functions assume their parameters have at least one\n// leading zero element. Functions with an underscore at the end of the name put\n// their answer into one of the arrays passed in, and have unpredictable behavior\n// in case of overflow, so the caller must make sure the arrays are big enough to\n// hold the answer.  But the average user should never have to call any of the\n// underscored functions.  Each important underscored function has a wrapper function\n// of the same name without the underscore that takes care of the details for you.\n// For each underscored function where a parameter is modified, that same variable\n// must not be used as another argument too.  So, you cannot square x by doing\n// multMod_(x,x,n).  You must use squareMod_(x,n) instead, or do y=dup(x); multMod_(x,y,n).\n// Or simply use the multMod(x,x,n) function without the underscore, where\n// such issues never arise, because non-underscored functions never change\n// their parameters; they always allocate new memory for the answer that is returned.\n//\n// These functions are designed to avoid frequent dynamic memory allocation in the inner loop.\n// For most functions, if it needs a BigInt as a local variable it will actually use\n// a global, and will only allocate to it only when it's not the right size.  This ensures\n// that when a function is called repeatedly with same-sized parameters, it only allocates\n// memory on the first call.\n//\n// Note that for cryptographic purposes, the calls to Math.random() must\n// be replaced with calls to a better pseudorandom number generator.\n//\n// In the following, \"bigInt\" means a bigInt with at least one leading zero element,\n// and \"integer\" means a nonnegative integer less than radix.  In some cases, integer\n// can be negative.  Negative bigInts are 2s complement.\n//\n// The following functions do not modify their inputs.\n// Those returning a bigInt, string, or Array will dynamically allocate memory for that value.\n// Those returning a boolean will return the integer 0 (false) or 1 (true).\n// Those returning boolean or int will not allocate memory except possibly on the first\n// time they're called with a given parameter size.\n//\n// bigInt  add(x,y)               //return (x+y) for bigInts x and y.\n// bigInt  addInt(x,n)            //return (x+n) where x is a bigInt and n is an integer.\n// string  bigInt2str(x,base)     //return a string form of bigInt x in a given base, with 2 <= base <= 95\n// int     bitSize(x)             //return how many bits long the bigInt x is, not counting leading zeros\n// bigInt  dup(x)                 //return a copy of bigInt x\n// boolean equals(x,y)            //is the bigInt x equal to the bigint y?\n// boolean equalsInt(x,y)         //is bigint x equal to integer y?\n// bigInt  expand(x,n)            //return a copy of x with at least n elements, adding leading zeros if needed\n// Array   findPrimes(n)          //return array of all primes less than integer n\n// bigInt  GCD(x,y)               //return greatest common divisor of bigInts x and y (each with same number of elements).\n// boolean greater(x,y)           //is x>y?  (x and y are nonnegative bigInts)\n// boolean greaterShift(x,y,shift)//is (x <<(shift*bpe)) > y?\n// bigInt  int2bigInt(t,n,m)      //return a bigInt equal to integer t, with at least n bits and m array elements\n// bigInt  inverseMod(x,n)        //return (x**(-1) mod n) for bigInts x and n.  If no inverse exists, it returns null\n// int     inverseModInt(x,n)     //return x**(-1) mod n, for integers x and n.  Return 0 if there is no inverse\n// boolean isZero(x)              //is the bigInt x equal to zero?\n// boolean millerRabin(x,b)       //does one round of Miller-Rabin base integer b say that bigInt x is possibly prime? (b is bigInt, 1<b<x)\n// boolean millerRabinInt(x,b)    //does one round of Miller-Rabin base integer b say that bigInt x is possibly prime? (b is int,    1<b<x)\n// bigInt  mod(x,n)               //return a new bigInt equal to (x mod n) for bigInts x and n.\n// int     modInt(x,n)            //return x mod n for bigInt x and integer n.\n// bigInt  mult(x,y)              //return x*y for bigInts x and y. This is faster when y<x.\n// bigInt  multMod(x,y,n)         //return (x*y mod n) for bigInts x,y,n.  For greater speed, let y<x.\n// boolean negative(x)            //is bigInt x negative?\n// bigInt  powMod(x,y,n)          //return (x**y mod n) where x,y,n are bigInts and ** is exponentiation.  0**0=1. Faster for odd n.\n// bigInt  randBigInt(n,s)        //return an n-bit random BigInt (n>=1).  If s=1, then the most significant of those n bits is set to 1.\n// bigInt  randTruePrime(k)       //return a new, random, k-bit, true prime bigInt using Maurer's algorithm.\n// bigInt  randProbPrime(k)       //return a new, random, k-bit, probable prime bigInt (probability it's composite less than 2^-80).\n// bigInt  str2bigInt(s,b,n,m)    //return a bigInt for number represented in string s in base b with at least n bits and m array elements\n// bigInt  sub(x,y)               //return (x-y) for bigInts x and y.  Negative answers will be 2s complement\n// bigInt  trim(x,k)              //return a copy of x with exactly k leading zero elements\n//\n//\n// The following functions each have a non-underscored version, which most users should call instead.\n// These functions each write to a single parameter, and the caller is responsible for ensuring the array\n// passed in is large enough to hold the result.\n//\n// void    addInt_(x,n)          //do x=x+n where x is a bigInt and n is an integer\n// void    add_(x,y)             //do x=x+y for bigInts x and y\n// void    copy_(x,y)            //do x=y on bigInts x and y\n// void    copyInt_(x,n)         //do x=n on bigInt x and integer n\n// void    GCD_(x,y)             //set x to the greatest common divisor of bigInts x and y, (y is destroyed).  (This never overflows its array).\n// boolean inverseMod_(x,n)      //do x=x**(-1) mod n, for bigInts x and n. Returns 1 (0) if inverse does (doesn't) exist\n// void    mod_(x,n)             //do x=x mod n for bigInts x and n. (This never overflows its array).\n// void    mult_(x,y)            //do x=x*y for bigInts x and y.\n// void    multMod_(x,y,n)       //do x=x*y  mod n for bigInts x,y,n.\n// void    powMod_(x,y,n)        //do x=x**y mod n, where x,y,n are bigInts (n is odd) and ** is exponentiation.  0**0=1.\n// void    randBigInt_(b,n,s)    //do b = an n-bit random BigInt. if s=1, then nth bit (most significant bit) is set to 1. n>=1.\n// void    randTruePrime_(ans,k) //do ans = a random k-bit true random prime (not just probable prime) with 1 in the msb.\n// void    sub_(x,y)             //do x=x-y for bigInts x and y. Negative answers will be 2s complement.\n//\n// The following functions do NOT have a non-underscored version.\n// They each write a bigInt result to one or more parameters.  The caller is responsible for\n// ensuring the arrays passed in are large enough to hold the results.\n//\n// void addShift_(x,y,ys)       //do x=x+(y<<(ys*bpe))\n// void carry_(x)               //do carries and borrows so each element of the bigInt x fits in bpe bits.\n// void divide_(x,y,q,r)        //divide x by y giving quotient q and remainder r\n// int  divInt_(x,n)            //do x=floor(x/n) for bigInt x and integer n, and return the remainder. (This never overflows its array).\n// int  eGCD_(x,y,d,a,b)        //sets a,b,d to positive bigInts such that d = GCD_(x,y) = a*x-b*y\n// void halve_(x)               //do x=floor(|x|/2)*sgn(x) for bigInt x in 2's complement.  (This never overflows its array).\n// void leftShift_(x,n)         //left shift bigInt x by n bits.  n<bpe.\n// void linComb_(x,y,a,b)       //do x=a*x+b*y for bigInts x and y and integers a and b\n// void linCombShift_(x,y,b,ys) //do x=x+b*(y<<(ys*bpe)) for bigInts x and y, and integers b and ys\n// void mont_(x,y,n,np)         //Montgomery multiplication (see comments where the function is defined)\n// void multInt_(x,n)           //do x=x*n where x is a bigInt and n is an integer.\n// void rightShift_(x,n)        //right shift bigInt x by n bits.  0 <= n < bpe. (This never overflows its array).\n// void squareMod_(x,n)         //do x=x*x  mod n for bigInts x,n\n// void subShift_(x,y,ys)       //do x=x-(y<<(ys*bpe)). Negative answers will be 2s complement.\n//\n// The following functions are based on algorithms from the _Handbook of Applied Cryptography_\n//    powMod_()           = algorithm 14.94, Montgomery exponentiation\n//    eGCD_,inverseMod_() = algorithm 14.61, Binary extended GCD_\n//    GCD_()              = algorothm 14.57, Lehmer's algorithm\n//    mont_()             = algorithm 14.36, Montgomery multiplication\n//    divide_()           = algorithm 14.20  Multiple-precision division\n//    squareMod_()        = algorithm 14.16  Multiple-precision squaring\n//    randTruePrime_()    = algorithm  4.62, Maurer's algorithm\n//    millerRabin()       = algorithm  4.24, Miller-Rabin algorithm\n//\n// Profiling shows:\n//     randTruePrime_() spends:\n//         10% of its time in calls to powMod_()\n//         85% of its time in calls to millerRabin()\n//     millerRabin() spends:\n//         99% of its time in calls to powMod_()   (always with a base of 2)\n//     powMod_() spends:\n//         94% of its time in calls to mont_()  (almost always with x==y)\n//\n// This suggests there are several ways to speed up this library slightly:\n//     - convert powMod_ to use a Montgomery form of k-ary window (or maybe a Montgomery form of sliding window)\n//         -- this should especially focus on being fast when raising 2 to a power mod n\n//     - convert randTruePrime_() to use a minimum r of 1/3 instead of 1/2 with the appropriate change to the test\n//     - tune the parameters in randTruePrime_(), including c, m, and recLimit\n//     - speed up the single loop in mont_() that takes 95% of the runtime, perhaps by reducing checking\n//       within the loop when all the parameters are the same length.\n//\n// There are several ideas that look like they wouldn't help much at all:\n//     - replacing trial division in randTruePrime_() with a sieve (that speeds up something taking almost no time anyway)\n//     - increase bpe from 15 to 30 (that would help if we had a 32*32->64 multiplier, but not with JavaScript's 32*32->32)\n//     - speeding up mont_(x,y,n,np) when x==y by doing a non-modular, non-Montgomery square\n//       followed by a Montgomery reduction.  The intermediate answer will be twice as long as x, so that\n//       method would be slower.  This is unfortunate because the code currently spends almost all of its time\n//       doing mont_(x,x,...), both for randTruePrime_() and powMod_().  A faster method for Montgomery squaring\n//       would have a large impact on the speed of randTruePrime_() and powMod_().  HAC has a couple of poorly-worded\n//       sentences that seem to imply it's faster to do a non-modular square followed by a single\n//       Montgomery reduction, but that's obviously wrong.\n////////////////////////////////////////////////////////////////////////////////////////\n\n\n\n////////////////////////////////////////////////////////////////////////////////////////\n// Big Integer Library v. 5.5\n// Created 2000, last modified 2013\n// Leemon Baird\n// www.leemon.com\n//\n// Version history:\n// v 5.5  17 Mar 2013\n//   - two lines of a form like \"if (x<0) x+=n\" had the \"if\" changed to \"while\" to\n//     handle the case when x<-n. (Thanks to James Ansell for finding that bug)\n// v 5.4  3 Oct 2009\n//   - added \"var i\" to greaterShift() so i is not global. (Thanks to PŽter Szab— for finding that bug)\n//\n// v 5.3  21 Sep 2009\n//   - added randProbPrime(k) for probable primes\n//   - unrolled loop in mont_ (slightly faster)\n//   - millerRabin now takes a bigInt parameter rather than an int\n//\n// v 5.2  15 Sep 2009\n//   - fixed capitalization in call to int2bigInt in randBigInt\n//     (thanks to Emili Evripidou, Reinhold Behringer, and Samuel Macaleese for finding that bug)\n//\n// v 5.1  8 Oct 2007\n//   - renamed inverseModInt_ to inverseModInt since it doesn't change its parameters\n//   - added functions GCD and randBigInt, which call GCD_ and randBigInt_\n//   - fixed a bug found by Rob Visser (see comment with his name below)\n//   - improved comments\n//\n// This file is public domain.   You can use it for any purpose without restriction.\n// I do not guarantee that it is correct, so use it at your own risk.  If you use\n// it for something interesting, I'd appreciate hearing about it.  If you find\n// any bugs or make any improvements, I'd appreciate hearing about those too.\n// It would also be nice if my name and URL were left in the comments.  But none\n// of that is required.\n//\n// This code defines a bigInt library for arbitrary-precision integers.\n// A bigInt is an array of integers storing the value in chunks of bpe bits,\n// little endian (buff[0] is the least significant word).\n// Negative bigInts are stored two's complement.  Almost all the functions treat\n// bigInts as nonnegative.  The few that view them as two's complement say so\n// in their comments.  Some functions assume their parameters have at least one\n// leading zero element. Functions with an underscore at the end of the name put\n// their answer into one of the arrays passed in, and have unpredictable behavior\n// in case of overflow, so the caller must make sure the arrays are big enough to\n// hold the answer.  But the average user should never have to call any of the\n// underscored functions.  Each important underscored function has a wrapper function\n// of the same name without the underscore that takes care of the details for you.\n// For each underscored function where a parameter is modified, that same variable\n// must not be used as another argument too.  So, you cannot square x by doing\n// multMod_(x,x,n).  You must use squareMod_(x,n) instead, or do y=dup(x); multMod_(x,y,n).\n// Or simply use the multMod(x,x,n) function without the underscore, where\n// such issues never arise, because non-underscored functions never change\n// their parameters; they always allocate new memory for the answer that is returned.\n//\n// These functions are designed to avoid frequent dynamic memory allocation in the inner loop.\n// For most functions, if it needs a BigInt as a local variable it will actually use\n// a global, and will only allocate to it only when it's not the right size.  This ensures\n// that when a function is called repeatedly with same-sized parameters, it only allocates\n// memory on the first call.\n//\n// Note that for cryptographic purposes, the calls to Math.random() must\n// be replaced with calls to a better pseudorandom number generator.\n//\n// In the following, \"bigInt\" means a bigInt with at least one leading zero element,\n// and \"integer\" means a nonnegative integer less than radix.  In some cases, integer\n// can be negative.  Negative bigInts are 2s complement.\n//\n// The following functions do not modify their inputs.\n// Those returning a bigInt, string, or Array will dynamically allocate memory for that value.\n// Those returning a boolean will return the integer 0 (false) or 1 (true).\n// Those returning boolean or int will not allocate memory except possibly on the first\n// time they're called with a given parameter size.\n//\n// bigInt  add(x,y)               //return (x+y) for bigInts x and y.\n// bigInt  addInt(x,n)            //return (x+n) where x is a bigInt and n is an integer.\n// string  bigInt2str(x,base)     //return a string form of bigInt x in a given base, with 2 <= base <= 95\n// int     bitSize(x)             //return how many bits long the bigInt x is, not counting leading zeros\n// bigInt  dup(x)                 //return a copy of bigInt x\n// boolean equals(x,y)            //is the bigInt x equal to the bigint y?\n// boolean equalsInt(x,y)         //is bigint x equal to integer y?\n// bigInt  expand(x,n)            //return a copy of x with at least n elements, adding leading zeros if needed\n// Array   findPrimes(n)          //return array of all primes less than integer n\n// bigInt  GCD(x,y)               //return greatest common divisor of bigInts x and y (each with same number of elements).\n// boolean greater(x,y)           //is x>y?  (x and y are nonnegative bigInts)\n// boolean greaterShift(x,y,shift)//is (x <<(shift*bpe)) > y?\n// bigInt  int2bigInt(t,n,m)      //return a bigInt equal to integer t, with at least n bits and m array elements\n// bigInt  inverseMod(x,n)        //return (x**(-1) mod n) for bigInts x and n.  If no inverse exists, it returns null\n// int     inverseModInt(x,n)     //return x**(-1) mod n, for integers x and n.  Return 0 if there is no inverse\n// boolean isZero(x)              //is the bigInt x equal to zero?\n// boolean millerRabin(x,b)       //does one round of Miller-Rabin base integer b say that bigInt x is possibly prime? (b is bigInt, 1<b<x)\n// boolean millerRabinInt(x,b)    //does one round of Miller-Rabin base integer b say that bigInt x is possibly prime? (b is int,    1<b<x)\n// bigInt  mod(x,n)               //return a new bigInt equal to (x mod n) for bigInts x and n.\n// int     modInt(x,n)            //return x mod n for bigInt x and integer n.\n// bigInt  mult(x,y)              //return x*y for bigInts x and y. This is faster when y<x.\n// bigInt  multMod(x,y,n)         //return (x*y mod n) for bigInts x,y,n.  For greater speed, let y<x.\n// boolean negative(x)            //is bigInt x negative?\n// bigInt  powMod(x,y,n)          //return (x**y mod n) where x,y,n are bigInts and ** is exponentiation.  0**0=1. Faster for odd n.\n// bigInt  randBigInt(n,s)        //return an n-bit random BigInt (n>=1).  If s=1, then the most significant of those n bits is set to 1.\n// bigInt  randTruePrime(k)       //return a new, random, k-bit, true prime bigInt using Maurer's algorithm.\n// bigInt  randProbPrime(k)       //return a new, random, k-bit, probable prime bigInt (probability it's composite less than 2^-80).\n// bigInt  str2bigInt(s,b,n,m)    //return a bigInt for number represented in string s in base b with at least n bits and m array elements\n// bigInt  sub(x,y)               //return (x-y) for bigInts x and y.  Negative answers will be 2s complement\n// bigInt  trim(x,k)              //return a copy of x with exactly k leading zero elements\n//\n//\n// The following functions each have a non-underscored version, which most users should call instead.\n// These functions each write to a single parameter, and the caller is responsible for ensuring the array\n// passed in is large enough to hold the result.\n//\n// void    addInt_(x,n)          //do x=x+n where x is a bigInt and n is an integer\n// void    add_(x,y)             //do x=x+y for bigInts x and y\n// void    copy_(x,y)            //do x=y on bigInts x and y\n// void    copyInt_(x,n)         //do x=n on bigInt x and integer n\n// void    GCD_(x,y)             //set x to the greatest common divisor of bigInts x and y, (y is destroyed).  (This never overflows its array).\n// boolean inverseMod_(x,n)      //do x=x**(-1) mod n, for bigInts x and n. Returns 1 (0) if inverse does (doesn't) exist\n// void    mod_(x,n)             //do x=x mod n for bigInts x and n. (This never overflows its array).\n// void    mult_(x,y)            //do x=x*y for bigInts x and y.\n// void    multMod_(x,y,n)       //do x=x*y  mod n for bigInts x,y,n.\n// void    powMod_(x,y,n)        //do x=x**y mod n, where x,y,n are bigInts (n is odd) and ** is exponentiation.  0**0=1.\n// void    randBigInt_(b,n,s)    //do b = an n-bit random BigInt. if s=1, then nth bit (most significant bit) is set to 1. n>=1.\n// void    randTruePrime_(ans,k) //do ans = a random k-bit true random prime (not just probable prime) with 1 in the msb.\n// void    sub_(x,y)             //do x=x-y for bigInts x and y. Negative answers will be 2s complement.\n//\n// The following functions do NOT have a non-underscored version.\n// They each write a bigInt result to one or more parameters.  The caller is responsible for\n// ensuring the arrays passed in are large enough to hold the results.\n//\n// void addShift_(x,y,ys)       //do x=x+(y<<(ys*bpe))\n// void carry_(x)               //do carries and borrows so each element of the bigInt x fits in bpe bits.\n// void divide_(x,y,q,r)        //divide x by y giving quotient q and remainder r\n// int  divInt_(x,n)            //do x=floor(x/n) for bigInt x and integer n, and return the remainder. (This never overflows its array).\n// int  eGCD_(x,y,d,a,b)        //sets a,b,d to positive bigInts such that d = GCD_(x,y) = a*x-b*y\n// void halve_(x)               //do x=floor(|x|/2)*sgn(x) for bigInt x in 2's complement.  (This never overflows its array).\n// void leftShift_(x,n)         //left shift bigInt x by n bits.  n<bpe.\n// void linComb_(x,y,a,b)       //do x=a*x+b*y for bigInts x and y and integers a and b\n// void linCombShift_(x,y,b,ys) //do x=x+b*(y<<(ys*bpe)) for bigInts x and y, and integers b and ys\n// void mont_(x,y,n,np)         //Montgomery multiplication (see comments where the function is defined)\n// void multInt_(x,n)           //do x=x*n where x is a bigInt and n is an integer.\n// void rightShift_(x,n)        //right shift bigInt x by n bits.  0 <= n < bpe. (This never overflows its array).\n// void squareMod_(x,n)         //do x=x*x  mod n for bigInts x,n\n// void subShift_(x,y,ys)       //do x=x-(y<<(ys*bpe)). Negative answers will be 2s complement.\n//\n// The following functions are based on algorithms from the _Handbook of Applied Cryptography_\n//    powMod_()           = algorithm 14.94, Montgomery exponentiation\n//    eGCD_,inverseMod_() = algorithm 14.61, Binary extended GCD_\n//    GCD_()              = algorothm 14.57, Lehmer's algorithm\n//    mont_()             = algorithm 14.36, Montgomery multiplication\n//    divide_()           = algorithm 14.20  Multiple-precision division\n//    squareMod_()        = algorithm 14.16  Multiple-precision squaring\n//    randTruePrime_()    = algorithm  4.62, Maurer's algorithm\n//    millerRabin()       = algorithm  4.24, Miller-Rabin algorithm\n//\n// Profiling shows:\n//     randTruePrime_() spends:\n//         10% of its time in calls to powMod_()\n//         85% of its time in calls to millerRabin()\n//     millerRabin() spends:\n//         99% of its time in calls to powMod_()   (always with a base of 2)\n//     powMod_() spends:\n//         94% of its time in calls to mont_()  (almost always with x==y)\n//\n// This suggests there are several ways to speed up this library slightly:\n//     - convert powMod_ to use a Montgomery form of k-ary window (or maybe a Montgomery form of sliding window)\n//         -- this should especially focus on being fast when raising 2 to a power mod n\n//     - convert randTruePrime_() to use a minimum r of 1/3 instead of 1/2 with the appropriate change to the test\n//     - tune the parameters in randTruePrime_(), including c, m, and recLimit\n//     - speed up the single loop in mont_() that takes 95% of the runtime, perhaps by reducing checking\n//       within the loop when all the parameters are the same length.\n//\n// There are several ideas that look like they wouldn't help much at all:\n//     - replacing trial division in randTruePrime_() with a sieve (that speeds up something taking almost no time anyway)\n//     - increase bpe from 15 to 30 (that would help if we had a 32*32->64 multiplier, but not with JavaScript's 32*32->32)\n//     - speeding up mont_(x,y,n,np) when x==y by doing a non-modular, non-Montgomery square\n//       followed by a Montgomery reduction.  The intermediate answer will be twice as long as x, so that\n//       method would be slower.  This is unfortunate because the code currently spends almost all of its time\n//       doing mont_(x,x,...), both for randTruePrime_() and powMod_().  A faster method for Montgomery squaring\n//       would have a large impact on the speed of randTruePrime_() and powMod_().  HAC has a couple of poorly-worded\n//       sentences that seem to imply it's faster to do a non-modular square followed by a single\n//       Montgomery reduction, but that's obviously wrong.\n////////////////////////////////////////////////////////////////////////////////////////\n\n//globals\nvar bpe=0;         //bits stored per array element\nvar mask=0;        //AND this with an array element to chop it down to bpe bits\nvar radix=mask+1;  //equals 2^bpe.  A single 1 bit to the left of the last bit of mask.\n\n//the digits for converting to different bases\nvar digitsStr='0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz_=!@#$%^&*()[]{}|;:,.<>/?`~ \\\\\\'\\\"+-';\n\n//initialize the global variables\nfor (bpe=0; (1<<(bpe+1)) > (1<<bpe); bpe++);  //bpe=number of bits in the mantissa on this platform\nbpe>>=1;                   //bpe=number of bits in one element of the array representing the bigInt\nmask=(1<<bpe)-1;           //AND the mask with an integer to get its bpe least significant bits\nradix=mask+1;              //2^bpe.  a single 1 bit to the left of the first bit of mask\nvar one=int2bigInt(1,1,1);     //constant used in powMod_()\n\n//the following global variables are scratchpad memory to\n//reduce dynamic memory allocation in the inner loop\nvar t=new Array(0);\nvar ss=t;       //used in mult_()\nvar s0=t;       //used in multMod_(), squareMod_()\nvar s1=t;       //used in powMod_(), multMod_(), squareMod_()\nvar s2=t;       //used in powMod_(), multMod_()\nvar s3=t;       //used in powMod_()\nvar s4=t, s5=t; //used in mod_()\nvar s6=t;       //used in bigInt2str()\nvar s7=t;       //used in powMod_()\nvar T=t;        //used in GCD_()\nvar sa=t;       //used in mont_()\nvar mr_x1=t; var mr_r=t; var mr_a=t;                                      //used in millerRabin()\nvar eg_v=t; var eg_u=t; var eg_A=t; var eg_B=t; var eg_C=t; var eg_D=t;               //used in eGCD_(), inverseMod_()\nvar md_q1=t; var md_q2=t; var md_q3=t; var md_r=t; var md_r1=t; var md_r2=t; var md_tt=t; //used in mod_()\n\nvar primes=t; var pows=t; var s_i=t; var s_i2=t; var s_R=t; var s_rm=t; var s_q=t; var s_n1=t;\nvar s_a=t; var s_r2=t; var s_n=t; var s_b=t; var s_d=t; var s_x1=t; var s_x2=t; var s_aa=t; //used in randTruePrime_()\n\nvar rpprb=t; //used in randProbPrimeRounds() (which also uses \"primes\")\n\nvar k, buff\n\n////////////////////////////////////////////////////////////////////////////////////////\n\n\n//return array of all primes less than integer n\nfunction findPrimes(n) {\n  var i,s,p,ans;\n  s=new Array(n);\n  for (i=0;i<n;i++)\n    s[i]=0;\n  s[0]=2;\n  p=0;    //first p elements of s are primes, the rest are a sieve\n  for(;s[p]<n;) {                  //s[p] is the pth prime\n    for(i=s[p]*s[p]; i<n; i+=s[p]) //mark multiples of s[p]\n      s[i]=1;\n    p++;\n    s[p]=s[p-1]+1;\n    for(; s[p]<n && s[s[p]]; s[p]++); //find next prime (where s[p]==0)\n  }\n  ans=new Array(p);\n  for(i=0;i<p;i++)\n    ans[i]=s[i];\n  return ans;\n}\n\n\n//does a single round of Miller-Rabin base b consider x to be a possible prime?\n//x is a bigInt, and b is an integer, with b<x\nfunction millerRabinInt(x,b) {\n  if (mr_x1.length!=x.length) {\n    mr_x1=dup(x);\n    mr_r=dup(x);\n    mr_a=dup(x);\n  }\n\n  copyInt_(mr_a,b);\n  return millerRabin(x,mr_a);\n}\n\n//does a single round of Miller-Rabin base b consider x to be a possible prime?\n//x and b are bigInts with b<x\nfunction millerRabin(x,b) {\n  var i,j,k,s;\n\n  if (mr_x1.length!=x.length) {\n    mr_x1=dup(x);\n    mr_r=dup(x);\n    mr_a=dup(x);\n  }\n\n  copy_(mr_a,b);\n  copy_(mr_r,x);\n  copy_(mr_x1,x);\n\n  addInt_(mr_r,-1);\n  addInt_(mr_x1,-1);\n\n  //s=the highest power of two that divides mr_r\n  k=0;\n  for (i=0;i<mr_r.length;i++)\n    for (j=1;j<mask;j<<=1)\n      if (x[i] & j) {\n        s=(k<mr_r.length+bpe ? k : 0);\n        i=mr_r.length;\n        j=mask;\n      } else\n        k++;\n\n  if (s)\n    rightShift_(mr_r,s);\n\n  powMod_(mr_a,mr_r,x);\n\n  if (!equalsInt(mr_a,1) && !equals(mr_a,mr_x1)) {\n    j=1;\n    while (j<=s-1 && !equals(mr_a,mr_x1)) {\n      squareMod_(mr_a,x);\n      if (equalsInt(mr_a,1)) {\n        return 0;\n      }\n      j++;\n    }\n    if (!equals(mr_a,mr_x1)) {\n      return 0;\n    }\n  }\n  return 1;\n}\n\n//returns how many bits long the bigInt is, not counting leading zeros.\nfunction bitSize(x) {\n  var j,z,w;\n  for (j=x.length-1; (x[j]==0) && (j>0); j--);\n  for (z=0,w=x[j]; w; (w>>=1),z++);\n  z+=bpe*j;\n  return z;\n}\n\n//return a copy of x with at least n elements, adding leading zeros if needed\nfunction expand(x,n) {\n  var ans=int2bigInt(0,(x.length>n ? x.length : n)*bpe,0);\n  copy_(ans,x);\n  return ans;\n}\n\n//return a k-bit true random prime using Maurer's algorithm.\nfunction randTruePrime(k) {\n  var ans=int2bigInt(0,k,0);\n  randTruePrime_(ans,k);\n  return trim(ans,1);\n}\n\n//return a k-bit random probable prime with probability of error < 2^-80\nfunction randProbPrime(k) {\n  if (k>=600) return randProbPrimeRounds(k,2); //numbers from HAC table 4.3\n  if (k>=550) return randProbPrimeRounds(k,4);\n  if (k>=500) return randProbPrimeRounds(k,5);\n  if (k>=400) return randProbPrimeRounds(k,6);\n  if (k>=350) return randProbPrimeRounds(k,7);\n  if (k>=300) return randProbPrimeRounds(k,9);\n  if (k>=250) return randProbPrimeRounds(k,12); //numbers from HAC table 4.4\n  if (k>=200) return randProbPrimeRounds(k,15);\n  if (k>=150) return randProbPrimeRounds(k,18);\n  if (k>=100) return randProbPrimeRounds(k,27);\n  return randProbPrimeRounds(k,40); //number from HAC remark 4.26 (only an estimate)\n}\n\n//return a k-bit probable random prime using n rounds of Miller Rabin (after trial division with small primes)\nfunction randProbPrimeRounds(k,n) {\n  var ans, i, divisible, B;\n  B=30000;  //B is largest prime to use in trial division\n  ans=int2bigInt(0,k,0);\n\n  //optimization: try larger and smaller B to find the best limit.\n\n  if (primes.length==0)\n    primes=findPrimes(30000);  //check for divisibility by primes <=30000\n\n  if (rpprb.length!=ans.length)\n    rpprb=dup(ans);\n\n  for (;;) { //keep trying random values for ans until one appears to be prime\n    //optimization: pick a random number times L=2*3*5*...*p, plus a\n    //   random element of the list of all numbers in [0,L) not divisible by any prime up to p.\n    //   This can reduce the amount of random number generation.\n\n    randBigInt_(ans,k,0); //ans = a random odd number to check\n    ans[0] |= 1;\n    divisible=0;\n\n    //check ans for divisibility by small primes up to B\n    for (i=0; (i<primes.length) && (primes[i]<=B); i++)\n      if (modInt(ans,primes[i])==0 && !equalsInt(ans,primes[i])) {\n        divisible=1;\n        break;\n      }\n\n    //optimization: change millerRabin so the base can be bigger than the number being checked, then eliminate the while here.\n\n    //do n rounds of Miller Rabin, with random bases less than ans\n    for (i=0; i<n && !divisible; i++) {\n      randBigInt_(rpprb,k,0);\n      while(!greater(ans,rpprb)) //pick a random rpprb that's < ans\n        randBigInt_(rpprb,k,0);\n      if (!millerRabin(ans,rpprb))\n        divisible=1;\n    }\n\n    if(!divisible)\n      return ans;\n  }\n}\n\n//return a new bigInt equal to (x mod n) for bigInts x and n.\nfunction mod(x,n) {\n  var ans=dup(x);\n  mod_(ans,n);\n  return trim(ans,1);\n}\n\n//return (x+n) where x is a bigInt and n is an integer.\nfunction addInt(x,n) {\n  var ans=expand(x,x.length+1);\n  addInt_(ans,n);\n  return trim(ans,1);\n}\n\n//return x*y for bigInts x and y. This is faster when y<x.\nfunction mult(x,y) {\n  var ans=expand(x,x.length+y.length);\n  mult_(ans,y);\n  return trim(ans,1);\n}\n\n//return (x**y mod n) where x,y,n are bigInts and ** is exponentiation.  0**0=1. Faster for odd n.\nfunction powMod(x,y,n) {\n  var ans=expand(x,n.length);\n  powMod_(ans,trim(y,2),trim(n,2),0);  //this should work without the trim, but doesn't\n  return trim(ans,1);\n}\n\n//return (x-y) for bigInts x and y.  Negative answers will be 2s complement\nfunction sub(x,y) {\n  var ans=expand(x,(x.length>y.length ? x.length+1 : y.length+1));\n  sub_(ans,y);\n  return trim(ans,1);\n}\n\n//return (x+y) for bigInts x and y.\nfunction add(x,y) {\n  var ans=expand(x,(x.length>y.length ? x.length+1 : y.length+1));\n  add_(ans,y);\n  return trim(ans,1);\n}\n\n//return (x**(-1) mod n) for bigInts x and n.  If no inverse exists, it returns null\nfunction inverseMod(x,n) {\n  var ans=expand(x,n.length);\n  var s;\n  s=inverseMod_(ans,n);\n  return s ? trim(ans,1) : null;\n}\n\n//return (x*y mod n) for bigInts x,y,n.  For greater speed, let y<x.\nfunction multMod(x,y,n) {\n  var ans=expand(x,n.length);\n  multMod_(ans,y,n);\n  return trim(ans,1);\n}\n\n//generate a k-bit true random prime using Maurer's algorithm,\n//and put it into ans.  The bigInt ans must be large enough to hold it.\nfunction randTruePrime_(ans,k) {\n  var c,m,pm,dd,j,r,B,divisible,z,zz,recSize;\n\n  if (primes.length==0)\n    primes=findPrimes(30000);  //check for divisibility by primes <=30000\n\n  if (pows.length==0) {\n    pows=new Array(512);\n    for (j=0;j<512;j++) {\n      pows[j]=Math.pow(2,j/511.-1.);\n    }\n  }\n\n  //c and m should be tuned for a particular machine and value of k, to maximize speed\n  c=0.1;  //c=0.1 in HAC\n  m=20;   //generate this k-bit number by first recursively generating a number that has between k/2 and k-m bits\n  recLimit=20; //stop recursion when k <=recLimit.  Must have recLimit >= 2\n\n  if (s_i2.length!=ans.length) {\n    s_i2=dup(ans);\n    s_R =dup(ans);\n    s_n1=dup(ans);\n    s_r2=dup(ans);\n    s_d =dup(ans);\n    s_x1=dup(ans);\n    s_x2=dup(ans);\n    s_b =dup(ans);\n    s_n =dup(ans);\n    s_i =dup(ans);\n    s_rm=dup(ans);\n    s_q =dup(ans);\n    s_a =dup(ans);\n    s_aa=dup(ans);\n  }\n\n  if (k <= recLimit) {  //generate small random primes by trial division up to its square root\n    pm=(1<<((k+2)>>1))-1; //pm is binary number with all ones, just over sqrt(2^k)\n    copyInt_(ans,0);\n    for (dd=1;dd;) {\n      dd=0;\n      ans[0]= 1 | (1<<(k-1)) | Math.floor(Math.random()*(1<<k));  //random, k-bit, odd integer, with msb 1\n      for (j=1;(j<primes.length) && ((primes[j]&pm)==primes[j]);j++) { //trial division by all primes 3...sqrt(2^k)\n        if (0==(ans[0]%primes[j])) {\n          dd=1;\n          break;\n        }\n      }\n    }\n    carry_(ans);\n    return;\n  }\n\n  B=c*k*k;    //try small primes up to B (or all the primes[] array if the largest is less than B).\n  if (k>2*m)  //generate this k-bit number by first recursively generating a number that has between k/2 and k-m bits\n    for (r=1; k-k*r<=m; )\n      r=pows[Math.floor(Math.random()*512)];   //r=Math.pow(2,Math.random()-1);\n  else\n    r=.5;\n\n  //simulation suggests the more complex algorithm using r=.333 is only slightly faster.\n\n  recSize=Math.floor(r*k)+1;\n\n  randTruePrime_(s_q,recSize);\n  copyInt_(s_i2,0);\n  s_i2[Math.floor((k-2)/bpe)] |= (1<<((k-2)%bpe));   //s_i2=2^(k-2)\n  divide_(s_i2,s_q,s_i,s_rm);                        //s_i=floor((2^(k-1))/(2q))\n\n  z=bitSize(s_i);\n\n  for (;;) {\n    for (;;) {  //generate z-bit numbers until one falls in the range [0,s_i-1]\n      randBigInt_(s_R,z,0);\n      if (greater(s_i,s_R))\n        break;\n    }                //now s_R is in the range [0,s_i-1]\n    addInt_(s_R,1);  //now s_R is in the range [1,s_i]\n    add_(s_R,s_i);   //now s_R is in the range [s_i+1,2*s_i]\n\n    copy_(s_n,s_q);\n    mult_(s_n,s_R);\n    multInt_(s_n,2);\n    addInt_(s_n,1);    //s_n=2*s_R*s_q+1\n\n    copy_(s_r2,s_R);\n    multInt_(s_r2,2);  //s_r2=2*s_R\n\n    //check s_n for divisibility by small primes up to B\n    for (divisible=0,j=0; (j<primes.length) && (primes[j]<B); j++)\n      if (modInt(s_n,primes[j])==0 && !equalsInt(s_n,primes[j])) {\n        divisible=1;\n        break;\n      }\n\n    if (!divisible)    //if it passes small primes check, then try a single Miller-Rabin base 2\n      if (!millerRabinInt(s_n,2)) //this line represents 75% of the total runtime for randTruePrime_\n        divisible=1;\n\n    if (!divisible) {  //if it passes that test, continue checking s_n\n      addInt_(s_n,-3);\n      for (j=s_n.length-1;(s_n[j]==0) && (j>0); j--);  //strip leading zeros\n      for (zz=0,w=s_n[j]; w; (w>>=1),zz++);\n      zz+=bpe*j;                             //zz=number of bits in s_n, ignoring leading zeros\n      for (;;) {  //generate z-bit numbers until one falls in the range [0,s_n-1]\n        randBigInt_(s_a,zz,0);\n        if (greater(s_n,s_a))\n          break;\n      }                //now s_a is in the range [0,s_n-1]\n      addInt_(s_n,3);  //now s_a is in the range [0,s_n-4]\n      addInt_(s_a,2);  //now s_a is in the range [2,s_n-2]\n      copy_(s_b,s_a);\n      copy_(s_n1,s_n);\n      addInt_(s_n1,-1);\n      powMod_(s_b,s_n1,s_n);   //s_b=s_a^(s_n-1) modulo s_n\n      addInt_(s_b,-1);\n      if (isZero(s_b)) {\n        copy_(s_b,s_a);\n        powMod_(s_b,s_r2,s_n);\n        addInt_(s_b,-1);\n        copy_(s_aa,s_n);\n        copy_(s_d,s_b);\n        GCD_(s_d,s_n);  //if s_b and s_n are relatively prime, then s_n is a prime\n        if (equalsInt(s_d,1)) {\n          copy_(ans,s_aa);\n          return;     //if we've made it this far, then s_n is absolutely guaranteed to be prime\n        }\n      }\n    }\n  }\n}\n\n//Return an n-bit random BigInt (n>=1).  If s=1, then the most significant of those n bits is set to 1.\nfunction randBigInt(n,s) {\n  var a,b;\n  a=Math.floor((n-1)/bpe)+2; //# array elements to hold the BigInt with a leading 0 element\n  b=int2bigInt(0,0,a);\n  randBigInt_(b,n,s);\n  return b;\n}\n\n//Set b to an n-bit random BigInt.  If s=1, then the most significant of those n bits is set to 1.\n//Array b must be big enough to hold the result. Must have n>=1\nfunction randBigInt_(b,n,s) {\n  var i,a;\n  for (i=0;i<b.length;i++)\n    b[i]=0;\n  a=Math.floor((n-1)/bpe)+1; //# array elements to hold the BigInt\n  for (i=0;i<a;i++) {\n    b[i]=Math.floor(Math.random()*(1<<(bpe-1)));\n  }\n  b[a-1] &= (2<<((n-1)%bpe))-1;\n  if (s==1)\n    b[a-1] |= (1<<((n-1)%bpe));\n}\n\n//Return the greatest common divisor of bigInts x and y (each with same number of elements).\nfunction GCD(x,y) {\n  var xc,yc;\n  xc=dup(x);\n  yc=dup(y);\n  GCD_(xc,yc);\n  return xc;\n}\n\n//set x to the greatest common divisor of bigInts x and y (each with same number of elements).\n//y is destroyed.\nfunction GCD_(x,y) {\n  var i,xp,yp,A,B,C,D,q,sing;\n  if (T.length!=x.length)\n    T=dup(x);\n\n  sing=1;\n  while (sing) { //while y has nonzero elements other than y[0]\n    sing=0;\n    for (i=1;i<y.length;i++) //check if y has nonzero elements other than 0\n      if (y[i]) {\n        sing=1;\n        break;\n      }\n    if (!sing) break; //quit when y all zero elements except possibly y[0]\n\n    for (i=x.length;!x[i] && i>=0;i--);  //find most significant element of x\n    xp=x[i];\n    yp=y[i];\n    A=1; B=0; C=0; D=1;\n    while ((yp+C) && (yp+D)) {\n      q =Math.floor((xp+A)/(yp+C));\n      qp=Math.floor((xp+B)/(yp+D));\n      if (q!=qp)\n        break;\n      t= A-q*C;   A=C;   C=t;    //  do (A,B,xp, C,D,yp) = (C,D,yp, A,B,xp) - q*(0,0,0, C,D,yp)\n      t= B-q*D;   B=D;   D=t;\n      t=xp-q*yp; xp=yp; yp=t;\n    }\n    if (B) {\n      copy_(T,x);\n      linComb_(x,y,A,B); //x=A*x+B*y\n      linComb_(y,T,D,C); //y=D*y+C*T\n    } else {\n      mod_(x,y);\n      copy_(T,x);\n      copy_(x,y);\n      copy_(y,T);\n    }\n  }\n  if (y[0]==0)\n    return;\n  t=modInt(x,y[0]);\n  copyInt_(x,y[0]);\n  y[0]=t;\n  while (y[0]) {\n    x[0]%=y[0];\n    t=x[0]; x[0]=y[0]; y[0]=t;\n  }\n}\n\n//do x=x**(-1) mod n, for bigInts x and n.\n//If no inverse exists, it sets x to zero and returns 0, else it returns 1.\n//The x array must be at least as large as the n array.\nfunction inverseMod_(x,n) {\n  var k=1+2*Math.max(x.length,n.length);\n\n  if(!(x[0]&1)  && !(n[0]&1)) {  //if both inputs are even, then inverse doesn't exist\n    copyInt_(x,0);\n    return 0;\n  }\n\n  if (eg_u.length!=k) {\n    eg_u=new Array(k);\n    eg_v=new Array(k);\n    eg_A=new Array(k);\n    eg_B=new Array(k);\n    eg_C=new Array(k);\n    eg_D=new Array(k);\n  }\n\n  copy_(eg_u,x);\n  copy_(eg_v,n);\n  copyInt_(eg_A,1);\n  copyInt_(eg_B,0);\n  copyInt_(eg_C,0);\n  copyInt_(eg_D,1);\n  for (;;) {\n    while(!(eg_u[0]&1)) {  //while eg_u is even\n      halve_(eg_u);\n      if (!(eg_A[0]&1) && !(eg_B[0]&1)) { //if eg_A==eg_B==0 mod 2\n        halve_(eg_A);\n        halve_(eg_B);\n      } else {\n        add_(eg_A,n);  halve_(eg_A);\n        sub_(eg_B,x);  halve_(eg_B);\n      }\n    }\n\n    while (!(eg_v[0]&1)) {  //while eg_v is even\n      halve_(eg_v);\n      if (!(eg_C[0]&1) && !(eg_D[0]&1)) { //if eg_C==eg_D==0 mod 2\n        halve_(eg_C);\n        halve_(eg_D);\n      } else {\n        add_(eg_C,n);  halve_(eg_C);\n        sub_(eg_D,x);  halve_(eg_D);\n      }\n    }\n\n    if (!greater(eg_v,eg_u)) { //eg_v <= eg_u\n      sub_(eg_u,eg_v);\n      sub_(eg_A,eg_C);\n      sub_(eg_B,eg_D);\n    } else {                   //eg_v > eg_u\n      sub_(eg_v,eg_u);\n      sub_(eg_C,eg_A);\n      sub_(eg_D,eg_B);\n    }\n\n    if (equalsInt(eg_u,0)) {\n      while (negative(eg_C)) //make sure answer is nonnegative\n        add_(eg_C,n);\n      copy_(x,eg_C);\n\n      if (!equalsInt(eg_v,1)) { //if GCD_(x,n)!=1, then there is no inverse\n        copyInt_(x,0);\n        return 0;\n      }\n      return 1;\n    }\n  }\n}\n\n//return x**(-1) mod n, for integers x and n.  Return 0 if there is no inverse\nfunction inverseModInt(x,n) {\n  var a=1,b=0,t;\n  for (;;) {\n    if (x==1) return a;\n    if (x==0) return 0;\n    b-=a*Math.floor(n/x);\n    n%=x;\n\n    if (n==1) return b; //to avoid negatives, change this b to n-b, and each -= to +=\n    if (n==0) return 0;\n    a-=b*Math.floor(x/n);\n    x%=n;\n  }\n}\n\n//this deprecated function is for backward compatibility only.\nfunction inverseModInt_(x,n) {\n  return inverseModInt(x,n);\n}\n\n\n//Given positive bigInts x and y, change the bigints v, a, and b to positive bigInts such that:\n//     v = GCD_(x,y) = a*x-b*y\n//The bigInts v, a, b, must have exactly as many elements as the larger of x and y.\nfunction eGCD_(x,y,v,a,b) {\n  var g=0;\n  var k=Math.max(x.length,y.length);\n  if (eg_u.length!=k) {\n    eg_u=new Array(k);\n    eg_A=new Array(k);\n    eg_B=new Array(k);\n    eg_C=new Array(k);\n    eg_D=new Array(k);\n  }\n  while(!(x[0]&1)  && !(y[0]&1)) {  //while x and y both even\n    halve_(x);\n    halve_(y);\n    g++;\n  }\n  copy_(eg_u,x);\n  copy_(v,y);\n  copyInt_(eg_A,1);\n  copyInt_(eg_B,0);\n  copyInt_(eg_C,0);\n  copyInt_(eg_D,1);\n  for (;;) {\n    while(!(eg_u[0]&1)) {  //while u is even\n      halve_(eg_u);\n      if (!(eg_A[0]&1) && !(eg_B[0]&1)) { //if A==B==0 mod 2\n        halve_(eg_A);\n        halve_(eg_B);\n      } else {\n        add_(eg_A,y);  halve_(eg_A);\n        sub_(eg_B,x);  halve_(eg_B);\n      }\n    }\n\n    while (!(v[0]&1)) {  //while v is even\n      halve_(v);\n      if (!(eg_C[0]&1) && !(eg_D[0]&1)) { //if C==D==0 mod 2\n        halve_(eg_C);\n        halve_(eg_D);\n      } else {\n        add_(eg_C,y);  halve_(eg_C);\n        sub_(eg_D,x);  halve_(eg_D);\n      }\n    }\n\n    if (!greater(v,eg_u)) { //v<=u\n      sub_(eg_u,v);\n      sub_(eg_A,eg_C);\n      sub_(eg_B,eg_D);\n    } else {                //v>u\n      sub_(v,eg_u);\n      sub_(eg_C,eg_A);\n      sub_(eg_D,eg_B);\n    }\n    if (equalsInt(eg_u,0)) {\n      while (negative(eg_C)) {   //make sure a (C) is nonnegative\n        add_(eg_C,y);\n        sub_(eg_D,x);\n      }\n      multInt_(eg_D,-1);  ///make sure b (D) is nonnegative\n      copy_(a,eg_C);\n      copy_(b,eg_D);\n      leftShift_(v,g);\n      return;\n    }\n  }\n}\n\n\n//is bigInt x negative?\nfunction negative(x) {\n  return ((x[x.length-1]>>(bpe-1))&1);\n}\n\n\n//is (x << (shift*bpe)) > y?\n//x and y are nonnegative bigInts\n//shift is a nonnegative integer\nfunction greaterShift(x,y,shift) {\n  var i, kx=x.length, ky=y.length;\n  k=((kx+shift)<ky) ? (kx+shift) : ky;\n  for (i=ky-1-shift; i<kx && i>=0; i++)\n    if (x[i]>0)\n      return 1; //if there are nonzeros in x to the left of the first column of y, then x is bigger\n  for (i=kx-1+shift; i<ky; i++)\n    if (y[i]>0)\n      return 0; //if there are nonzeros in y to the left of the first column of x, then x is not bigger\n  for (i=k-1; i>=shift; i--)\n    if      (x[i-shift]>y[i]) return 1;\n    else if (x[i-shift]<y[i]) return 0;\n  return 0;\n}\n\n//is x > y? (x and y both nonnegative)\nfunction greater(x,y) {\n  var i;\n  var k=(x.length<y.length) ? x.length : y.length;\n\n  for (i=x.length;i<y.length;i++)\n    if (y[i])\n      return 0;  //y has more digits\n\n  for (i=y.length;i<x.length;i++)\n    if (x[i])\n      return 1;  //x has more digits\n\n  for (i=k-1;i>=0;i--)\n    if (x[i]>y[i])\n      return 1;\n    else if (x[i]<y[i])\n      return 0;\n  return 0;\n}\n\n//divide x by y giving quotient q and remainder r.  (q=floor(x/y),  r=x mod y).  All 4 are bigints.\n//x must have at least one leading zero element.\n//y must be nonzero.\n//q and r must be arrays that are exactly the same length as x. (Or q can have more).\n//Must have x.length >= y.length >= 2.\nfunction divide_(x,y,q,r) {\n  var kx, ky;\n  var i,j,y1,y2,c,a,b;\n  copy_(r,x);\n  for (ky=y.length;y[ky-1]==0;ky--); //ky is number of elements in y, not including leading zeros\n\n  //normalize: ensure the most significant element of y has its highest bit set\n  b=y[ky-1];\n  for (a=0; b; a++)\n    b>>=1;\n  a=bpe-a;  //a is how many bits to shift so that the high order bit of y is leftmost in its array element\n  leftShift_(y,a);  //multiply both by 1<<a now, then divide both by that at the end\n  leftShift_(r,a);\n\n  //Rob Visser discovered a bug: the following line was originally just before the normalization.\n  for (kx=r.length;r[kx-1]==0 && kx>ky;kx--); //kx is number of elements in normalized x, not including leading zeros\n\n  copyInt_(q,0);                      // q=0\n  while (!greaterShift(y,r,kx-ky)) {  // while (leftShift_(y,kx-ky) <= r) {\n    subShift_(r,y,kx-ky);             //   r=r-leftShift_(y,kx-ky)\n    q[kx-ky]++;                       //   q[kx-ky]++;\n  }                                   // }\n\n  for (i=kx-1; i>=ky; i--) {\n    if (r[i]==y[ky-1])\n      q[i-ky]=mask;\n    else\n      q[i-ky]=Math.floor((r[i]*radix+r[i-1])/y[ky-1]);\n\n    //The following for(;;) loop is equivalent to the commented while loop,\n    //except that the uncommented version avoids overflow.\n    //The commented loop comes from HAC, which assumes r[-1]==y[-1]==0\n    //  while (q[i-ky]*(y[ky-1]*radix+y[ky-2]) > r[i]*radix*radix+r[i-1]*radix+r[i-2])\n    //    q[i-ky]--;\n    for (;;) {\n      y2=(ky>1 ? y[ky-2] : 0)*q[i-ky];\n      c=y2>>bpe;\n      y2=y2 & mask;\n      y1=c+q[i-ky]*y[ky-1];\n      c=y1>>bpe;\n      y1=y1 & mask;\n\n      if (c==r[i] ? y1==r[i-1] ? y2>(i>1 ? r[i-2] : 0) : y1>r[i-1] : c>r[i])\n        q[i-ky]--;\n      else\n        break;\n    }\n\n    linCombShift_(r,y,-q[i-ky],i-ky);    //r=r-q[i-ky]*leftShift_(y,i-ky)\n    if (negative(r)) {\n      addShift_(r,y,i-ky);         //r=r+leftShift_(y,i-ky)\n      q[i-ky]--;\n    }\n  }\n\n  rightShift_(y,a);  //undo the normalization step\n  rightShift_(r,a);  //undo the normalization step\n}\n\n//do carries and borrows so each element of the bigInt x fits in bpe bits.\nfunction carry_(x) {\n  var i,k,c,b;\n  k=x.length;\n  c=0;\n  for (i=0;i<k;i++) {\n    c+=x[i];\n    b=0;\n    if (c<0) {\n      b=-(c>>bpe);\n      c+=b*radix;\n    }\n    x[i]=c & mask;\n    c=(c>>bpe)-b;\n  }\n}\n\n//return x mod n for bigInt x and integer n.\nfunction modInt(x,n) {\n  var i,c=0;\n  for (i=x.length-1; i>=0; i--)\n    c=(c*radix+x[i])%n;\n  return c;\n}\n\n//convert the integer t into a bigInt with at least the given number of bits.\n//the returned array stores the bigInt in bpe-bit chunks, little endian (buff[0] is least significant word)\n//Pad the array with leading zeros so that it has at least minSize elements.\n//There will always be at least one leading 0 element.\nfunction int2bigInt(t,bits,minSize) {\n  var i,k;\n  k=Math.ceil(bits/bpe)+1;\n  k=minSize>k ? minSize : k;\n  buff=new Array(k);\n  copyInt_(buff,t);\n  return buff;\n}\n\n//return the bigInt given a string representation in a given base.\n//Pad the array with leading zeros so that it has at least minSize elements.\n//If base=-1, then it reads in a space-separated list of array elements in decimal.\n//The array will always have at least one leading zero, unless base=-1.\nfunction str2bigInt(s,base,minSize) {\n  var d, i, j, x, y, kk;\n  var k=s.length;\n  if (base==-1) { //comma-separated list of array elements in decimal\n    x=new Array(0);\n    for (;;) {\n      y=new Array(x.length+1);\n      for (i=0;i<x.length;i++)\n        y[i+1]=x[i];\n      y[0]=parseInt(s,10);\n      x=y;\n      d=s.indexOf(',',0);\n      if (d<1)\n        break;\n      s=s.substring(d+1);\n      if (s.length==0)\n        break;\n    }\n    if (x.length<minSize) {\n      y=new Array(minSize);\n      copy_(y,x);\n      return y;\n    }\n    return x;\n  }\n\n  x=int2bigInt(0,base*k,0);\n  for (i=0;i<k;i++) {\n    d=digitsStr.indexOf(s.substring(i,i+1),0);\n    if (base<=36 && d>=36)  //convert lowercase to uppercase if base<=36\n      d-=26;\n    if (d>=base || d<0) {   //stop at first illegal character\n      break;\n    }\n    multInt_(x,base);\n    addInt_(x,d);\n  }\n\n  for (k=x.length;k>0 && !x[k-1];k--); //strip off leading zeros\n  k=minSize>k+1 ? minSize : k+1;\n  y=new Array(k);\n  kk=k<x.length ? k : x.length;\n  for (i=0;i<kk;i++)\n    y[i]=x[i];\n  for (;i<k;i++)\n    y[i]=0;\n  return y;\n}\n\n//is bigint x equal to integer y?\n//y must have less than bpe bits\nfunction equalsInt(x,y) {\n  var i;\n  if (x[0]!=y)\n    return 0;\n  for (i=1;i<x.length;i++)\n    if (x[i])\n      return 0;\n  return 1;\n}\n\n//are bigints x and y equal?\n//this works even if x and y are different lengths and have arbitrarily many leading zeros\nfunction equals(x,y) {\n  var i;\n  var k=x.length<y.length ? x.length : y.length;\n  for (i=0;i<k;i++)\n    if (x[i]!=y[i])\n      return 0;\n  if (x.length>y.length) {\n    for (;i<x.length;i++)\n      if (x[i])\n        return 0;\n  } else {\n    for (;i<y.length;i++)\n      if (y[i])\n        return 0;\n  }\n  return 1;\n}\n\n//is the bigInt x equal to zero?\nfunction isZero(x) {\n  var i;\n  for (i=0;i<x.length;i++)\n    if (x[i])\n      return 0;\n  return 1;\n}\n\n//convert a bigInt into a string in a given base, from base 2 up to base 95.\n//Base -1 prints the contents of the array representing the number.\nfunction bigInt2str(x,base) {\n  var i,t,s=\"\";\n\n  if (s6.length!=x.length)\n    s6=dup(x);\n  else\n    copy_(s6,x);\n\n  if (base==-1) { //return the list of array contents\n    for (i=x.length-1;i>0;i--)\n      s+=x[i]+',';\n    s+=x[0];\n  }\n  else { //return it in the given base\n    while (!isZero(s6)) {\n      t=divInt_(s6,base);  //t=s6 % base; s6=floor(s6/base);\n      s=digitsStr.substring(t,t+1)+s;\n    }\n  }\n  if (s.length==0)\n    s=\"0\";\n  return s;\n}\n\n//returns a duplicate of bigInt x\nfunction dup(x) {\n  var i;\n  buff=new Array(x.length);\n  copy_(buff,x);\n  return buff;\n}\n\n//do x=y on bigInts x and y.  x must be an array at least as big as y (not counting the leading zeros in y).\nfunction copy_(x,y) {\n  var i;\n  var k=x.length<y.length ? x.length : y.length;\n  for (i=0;i<k;i++)\n    x[i]=y[i];\n  for (i=k;i<x.length;i++)\n    x[i]=0;\n}\n\n//do x=y on bigInt x and integer y.\nfunction copyInt_(x,n) {\n  var i,c;\n  for (c=n,i=0;i<x.length;i++) {\n    x[i]=c & mask;\n    c>>=bpe;\n  }\n}\n\n//do x=x+n where x is a bigInt and n is an integer.\n//x must be large enough to hold the result.\nfunction addInt_(x,n) {\n  var i,k,c,b;\n  x[0]+=n;\n  k=x.length;\n  c=0;\n  for (i=0;i<k;i++) {\n    c+=x[i];\n    b=0;\n    if (c<0) {\n      b=-(c>>bpe);\n      c+=b*radix;\n    }\n    x[i]=c & mask;\n    c=(c>>bpe)-b;\n    if (!c) return; //stop carrying as soon as the carry is zero\n  }\n}\n\n//right shift bigInt x by n bits.  0 <= n < bpe.\nfunction rightShift_(x,n) {\n  var i;\n  var k=Math.floor(n/bpe);\n  if (k) {\n    for (i=0;i<x.length-k;i++) //right shift x by k elements\n      x[i]=x[i+k];\n    for (;i<x.length;i++)\n      x[i]=0;\n    n%=bpe;\n  }\n  for (i=0;i<x.length-1;i++) {\n    x[i]=mask & ((x[i+1]<<(bpe-n)) | (x[i]>>n));\n  }\n  x[i]>>=n;\n}\n\n//do x=floor(|x|/2)*sgn(x) for bigInt x in 2's complement\nfunction halve_(x) {\n  var i;\n  for (i=0;i<x.length-1;i++) {\n    x[i]=mask & ((x[i+1]<<(bpe-1)) | (x[i]>>1));\n  }\n  x[i]=(x[i]>>1) | (x[i] & (radix>>1));  //most significant bit stays the same\n}\n\n//left shift bigInt x by n bits.\nfunction leftShift_(x,n) {\n  var i;\n  var k=Math.floor(n/bpe);\n  if (k) {\n    for (i=x.length; i>=k; i--) //left shift x by k elements\n      x[i]=x[i-k];\n    for (;i>=0;i--)\n      x[i]=0;\n    n%=bpe;\n  }\n  if (!n)\n    return;\n  for (i=x.length-1;i>0;i--) {\n    x[i]=mask & ((x[i]<<n) | (x[i-1]>>(bpe-n)));\n  }\n  x[i]=mask & (x[i]<<n);\n}\n\n//do x=x*n where x is a bigInt and n is an integer.\n//x must be large enough to hold the result.\nfunction multInt_(x,n) {\n  var i,k,c,b;\n  if (!n)\n    return;\n  k=x.length;\n  c=0;\n  for (i=0;i<k;i++) {\n    c+=x[i]*n;\n    b=0;\n    if (c<0) {\n      b=-(c>>bpe);\n      c+=b*radix;\n    }\n    x[i]=c & mask;\n    c=(c>>bpe)-b;\n  }\n}\n\n//do x=floor(x/n) for bigInt x and integer n, and return the remainder\nfunction divInt_(x,n) {\n  var i,r=0,s;\n  for (i=x.length-1;i>=0;i--) {\n    s=r*radix+x[i];\n    x[i]=Math.floor(s/n);\n    r=s%n;\n  }\n  return r;\n}\n\n//do the linear combination x=a*x+b*y for bigInts x and y, and integers a and b.\n//x must be large enough to hold the answer.\nfunction linComb_(x,y,a,b) {\n  var i,c,k,kk;\n  k=x.length<y.length ? x.length : y.length;\n  kk=x.length;\n  for (c=0,i=0;i<k;i++) {\n    c+=a*x[i]+b*y[i];\n    x[i]=c & mask;\n    c>>=bpe;\n  }\n  for (i=k;i<kk;i++) {\n    c+=a*x[i];\n    x[i]=c & mask;\n    c>>=bpe;\n  }\n}\n\n//do the linear combination x=a*x+b*(y<<(ys*bpe)) for bigInts x and y, and integers a, b and ys.\n//x must be large enough to hold the answer.\nfunction linCombShift_(x,y,b,ys) {\n  var i,c,k,kk;\n  k=x.length<ys+y.length ? x.length : ys+y.length;\n  kk=x.length;\n  for (c=0,i=ys;i<k;i++) {\n    c+=x[i]+b*y[i-ys];\n    x[i]=c & mask;\n    c>>=bpe;\n  }\n  for (i=k;c && i<kk;i++) {\n    c+=x[i];\n    x[i]=c & mask;\n    c>>=bpe;\n  }\n}\n\n//do x=x+(y<<(ys*bpe)) for bigInts x and y, and integers a,b and ys.\n//x must be large enough to hold the answer.\nfunction addShift_(x,y,ys) {\n  var i,c,k,kk;\n  k=x.length<ys+y.length ? x.length : ys+y.length;\n  kk=x.length;\n  for (c=0,i=ys;i<k;i++) {\n    c+=x[i]+y[i-ys];\n    x[i]=c & mask;\n    c>>=bpe;\n  }\n  for (i=k;c && i<kk;i++) {\n    c+=x[i];\n    x[i]=c & mask;\n    c>>=bpe;\n  }\n}\n\n//do x=x-(y<<(ys*bpe)) for bigInts x and y, and integers a,b and ys.\n//x must be large enough to hold the answer.\nfunction subShift_(x,y,ys) {\n  var i,c,k,kk;\n  k=x.length<ys+y.length ? x.length : ys+y.length;\n  kk=x.length;\n  for (c=0,i=ys;i<k;i++) {\n    c+=x[i]-y[i-ys];\n    x[i]=c & mask;\n    c>>=bpe;\n  }\n  for (i=k;c && i<kk;i++) {\n    c+=x[i];\n    x[i]=c & mask;\n    c>>=bpe;\n  }\n}\n\n//do x=x-y for bigInts x and y.\n//x must be large enough to hold the answer.\n//negative answers will be 2s complement\nfunction sub_(x,y) {\n  var i,c,k,kk;\n  k=x.length<y.length ? x.length : y.length;\n  for (c=0,i=0;i<k;i++) {\n    c+=x[i]-y[i];\n    x[i]=c & mask;\n    c>>=bpe;\n  }\n  for (i=k;c && i<x.length;i++) {\n    c+=x[i];\n    x[i]=c & mask;\n    c>>=bpe;\n  }\n}\n\n//do x=x+y for bigInts x and y.\n//x must be large enough to hold the answer.\nfunction add_(x,y) {\n  var i,c,k,kk;\n  k=x.length<y.length ? x.length : y.length;\n  for (c=0,i=0;i<k;i++) {\n    c+=x[i]+y[i];\n    x[i]=c & mask;\n    c>>=bpe;\n  }\n  for (i=k;c && i<x.length;i++) {\n    c+=x[i];\n    x[i]=c & mask;\n    c>>=bpe;\n  }\n}\n\n//do x=x*y for bigInts x and y.  This is faster when y<x.\nfunction mult_(x,y) {\n  var i;\n  if (ss.length!=2*x.length)\n    ss=new Array(2*x.length);\n  copyInt_(ss,0);\n  for (i=0;i<y.length;i++)\n    if (y[i])\n      linCombShift_(ss,x,y[i],i);   //ss=1*ss+y[i]*(x<<(i*bpe))\n  copy_(x,ss);\n}\n\n//do x=x mod n for bigInts x and n.\nfunction mod_(x,n) {\n  if (s4.length!=x.length)\n    s4=dup(x);\n  else\n    copy_(s4,x);\n  if (s5.length!=x.length)\n    s5=dup(x);\n  divide_(s4,n,s5,x);  //x = remainder of s4 / n\n}\n\n//do x=x*y mod n for bigInts x,y,n.\n//for greater speed, let y<x.\nfunction multMod_(x,y,n) {\n  var i;\n  if (s0.length!=2*x.length)\n    s0=new Array(2*x.length);\n  copyInt_(s0,0);\n  for (i=0;i<y.length;i++)\n    if (y[i])\n      linCombShift_(s0,x,y[i],i);   //s0=1*s0+y[i]*(x<<(i*bpe))\n  mod_(s0,n);\n  copy_(x,s0);\n}\n\n//do x=x*x mod n for bigInts x,n.\nfunction squareMod_(x,n) {\n  var i,j,d,c,kx,kn,k;\n  for (kx=x.length; kx>0 && !x[kx-1]; kx--);  //ignore leading zeros in x\n  k=kx>n.length ? 2*kx : 2*n.length; //k=# elements in the product, which is twice the elements in the larger of x and n\n  if (s0.length!=k)\n    s0=new Array(k);\n  copyInt_(s0,0);\n  for (i=0;i<kx;i++) {\n    c=s0[2*i]+x[i]*x[i];\n    s0[2*i]=c & mask;\n    c>>=bpe;\n    for (j=i+1;j<kx;j++) {\n      c=s0[i+j]+2*x[i]*x[j]+c;\n      s0[i+j]=(c & mask);\n      c>>=bpe;\n    }\n    s0[i+kx]=c;\n  }\n  mod_(s0,n);\n  copy_(x,s0);\n}\n\n//return x with exactly k leading zero elements\nfunction trim(x,k) {\n  var i,y;\n  for (i=x.length; i>0 && !x[i-1]; i--);\n  y=new Array(i+k);\n  copy_(y,x);\n  return y;\n}\n\n//do x=x**y mod n, where x,y,n are bigInts and ** is exponentiation.  0**0=1.\n//this is faster when n is odd.  x usually needs to have as many elements as n.\nfunction powMod_(x,y,n) {\n  var k1,k2,kn,np;\n  if(s7.length!=n.length)\n    s7=dup(n);\n\n  //for even modulus, use a simple square-and-multiply algorithm,\n  //rather than using the more complex Montgomery algorithm.\n  if ((n[0]&1)==0) {\n    copy_(s7,x);\n    copyInt_(x,1);\n    while(!equalsInt(y,0)) {\n      if (y[0]&1)\n        multMod_(x,s7,n);\n      divInt_(y,2);\n      squareMod_(s7,n);\n    }\n    return;\n  }\n\n  //calculate np from n for the Montgomery multiplications\n  copyInt_(s7,0);\n  for (kn=n.length;kn>0 && !n[kn-1];kn--);\n  np=radix-inverseModInt(modInt(n,radix),radix);\n  s7[kn]=1;\n  multMod_(x ,s7,n);   // x = x * 2**(kn*bp) mod n\n\n  if (s3.length!=x.length)\n    s3=dup(x);\n  else\n    copy_(s3,x);\n\n  for (k1=y.length-1;k1>0 & !y[k1]; k1--);  //k1=first nonzero element of y\n  if (y[k1]==0) {  //anything to the 0th power is 1\n    copyInt_(x,1);\n    return;\n  }\n  for (k2=1<<(bpe-1);k2 && !(y[k1] & k2); k2>>=1);  //k2=position of first 1 bit in y[k1]\n  for (;;) {\n    if (!(k2>>=1)) {  //look at next bit of y\n      k1--;\n      if (k1<0) {\n        mont_(x,one,n,np);\n        return;\n      }\n      k2=1<<(bpe-1);\n    }\n    mont_(x,x,n,np);\n\n    if (k2 & y[k1]) //if next bit is a 1\n      mont_(x,s3,n,np);\n  }\n}\n\n\n//do x=x*y*Ri mod n for bigInts x,y,n,\n//  where Ri = 2**(-kn*bpe) mod n, and kn is the\n//  number of elements in the n array, not\n//  counting leading zeros.\n//x array must have at least as many elemnts as the n array\n//It's OK if x and y are the same variable.\n//must have:\n//  x,y < n\n//  n is odd\n//  np = -(n^(-1)) mod radix\nfunction mont_(x,y,n,np) {\n  var i,j,c,ui,t,ks;\n  var kn=n.length;\n  var ky=y.length;\n\n  if (sa.length!=kn)\n    sa=new Array(kn);\n\n  copyInt_(sa,0);\n\n  for (;kn>0 && n[kn-1]==0;kn--); //ignore leading zeros of n\n  for (;ky>0 && y[ky-1]==0;ky--); //ignore leading zeros of y\n  ks=sa.length-1; //sa will never have more than this many nonzero elements.\n\n  //the following loop consumes 95% of the runtime for randTruePrime_() and powMod_() for large numbers\n  for (i=0; i<kn; i++) {\n    t=sa[0]+x[i]*y[0];\n    ui=((t & mask) * np) & mask;  //the inner \"& mask\" was needed on Safari (but not MSIE) at one time\n    c=(t+ui*n[0]) >> bpe;\n    t=x[i];\n\n    //do sa=(sa+x[i]*y+ui*n)/b   where b=2**bpe.  Loop is unrolled 5-fold for speed\n    j=1;\n    for (;j<ky-4;) { c+=sa[j]+ui*n[j]+t*y[j];   sa[j-1]=c & mask;   c>>=bpe;   j++;\n      c+=sa[j]+ui*n[j]+t*y[j];   sa[j-1]=c & mask;   c>>=bpe;   j++;\n      c+=sa[j]+ui*n[j]+t*y[j];   sa[j-1]=c & mask;   c>>=bpe;   j++;\n      c+=sa[j]+ui*n[j]+t*y[j];   sa[j-1]=c & mask;   c>>=bpe;   j++;\n      c+=sa[j]+ui*n[j]+t*y[j];   sa[j-1]=c & mask;   c>>=bpe;   j++; }\n    for (;j<ky;)   { c+=sa[j]+ui*n[j]+t*y[j];   sa[j-1]=c & mask;   c>>=bpe;   j++; }\n    for (;j<kn-4;) { c+=sa[j]+ui*n[j];          sa[j-1]=c & mask;   c>>=bpe;   j++;\n      c+=sa[j]+ui*n[j];          sa[j-1]=c & mask;   c>>=bpe;   j++;\n      c+=sa[j]+ui*n[j];          sa[j-1]=c & mask;   c>>=bpe;   j++;\n      c+=sa[j]+ui*n[j];          sa[j-1]=c & mask;   c>>=bpe;   j++;\n      c+=sa[j]+ui*n[j];          sa[j-1]=c & mask;   c>>=bpe;   j++; }\n    for (;j<kn;)   { c+=sa[j]+ui*n[j];          sa[j-1]=c & mask;   c>>=bpe;   j++; }\n    for (;j<ks;)   { c+=sa[j];                  sa[j-1]=c & mask;   c>>=bpe;   j++; }\n    sa[j-1]=c & mask;\n  }\n\n  if (!greater(n,sa))\n    sub_(sa,n);\n  copy_(x,sa);\n}\n\n\n////////////////////////\n\n\nfunction bigint (num) {\n  return new BigInteger(num.toString(16), 16)\n}\n\ntoExport.bigStringInt = function bigStringInt (strNum) {\n  return new BigInteger(strNum, 10)\n}\n\nfunction dHexDump (bytes) {\n  var arr = []\n  for (var i = 0; i < bytes.length; i++) {\n    if (i && !(i % 2)) {\n      if (!(i % 16)) {\n        arr.push('\\n')\n      } else if (!(i % 4)) {\n        arr.push('  ')\n      } else {\n        arr.push(' ')\n      }\n    }\n    arr.push((bytes[i] < 16 ? '0' : '') + bytes[i].toString(16))\n  }\n\n  console.log(arr.join(''))\n}\n\nfunction bytesToHex (bytes) {\n  bytes = bytes || []\n  var arr = []\n  for (var i = 0; i < bytes.length; i++) {\n    arr.push((bytes[i] < 16 ? '0' : '') + (bytes[i] || 0).toString(16))\n  }\n  return arr.join('')\n}\n\nfunction bytesFromHex (hexString) {\n  var len = hexString.length,\n    i\n  var start = 0\n  var bytes = []\n\n  if (hexString.length % 2) {\n    bytes.push(parseInt(hexString.charAt(0), 16))\n    start++\n  }\n\n  for (i = start; i < len; i += 2) {\n    bytes.push(parseInt(hexString.substr(i, 2), 16))\n  }\n\n  return bytes\n}\n\nfunction bytesToBase64 (bytes) {\n  var mod3\n  var result = ''\n\n  for (var nLen = bytes.length, nUint24 = 0, nIdx = 0; nIdx < nLen; nIdx++) {\n    mod3 = nIdx % 3\n    nUint24 |= bytes[nIdx] << (16 >>> mod3 & 24)\n    if (mod3 === 2 || nLen - nIdx === 1) {\n      result += String.fromCharCode(\n        uint6ToBase64(nUint24 >>> 18 & 63),\n        uint6ToBase64(nUint24 >>> 12 & 63),\n        uint6ToBase64(nUint24 >>> 6 & 63),\n        uint6ToBase64(nUint24 & 63)\n      )\n      nUint24 = 0\n    }\n  }\n\n  return result.replace(/A(?=A$|$)/g, '=')\n}\n\nfunction uint6ToBase64 (nUint6) {\n  return nUint6 < 26\n    ? nUint6 + 65\n    : nUint6 < 52\n      ? nUint6 + 71\n      : nUint6 < 62\n        ? nUint6 - 4\n        : nUint6 === 62\n          ? 43\n          : nUint6 === 63\n            ? 47\n            : 65\n}\n\nfunction base64ToBlob (base64str, mimeType) {\n  var sliceSize = 1024\n  var byteCharacters = atob(base64str)\n  var bytesLength = byteCharacters.length\n  var slicesCount = Math.ceil(bytesLength / sliceSize)\n  var byteArrays = new Array(slicesCount)\n\n  for (var sliceIndex = 0; sliceIndex < slicesCount; ++sliceIndex) {\n    var begin = sliceIndex * sliceSize\n    var end = Math.min(begin + sliceSize, bytesLength)\n\n    var bytes = new Array(end - begin)\n    for (var offset = begin, i = 0; offset < end; ++i, ++offset) {\n      bytes[i] = byteCharacters[offset].charCodeAt(0)\n    }\n    byteArrays[sliceIndex] = new Uint8Array(bytes)\n  }\n\n  return blobConstruct(byteArrays, mimeType)\n}\n\nfunction dataUrlToBlob (url) {\n  // var name = 'b64blob ' + url.length\n  // console.time(name)\n  var urlParts = url.split(',')\n  var base64str = urlParts[1]\n  var mimeType = urlParts[0].split(':')[1].split(';')[0]\n  var blob = base64ToBlob(base64str, mimeType)\n  // console.timeEnd(name)\n  return blob\n}\n\nfunction blobConstruct (blobParts, mimeType) {\n  var blob\n  var safeMimeType = blobSafeMimeType(mimeType)\n  try {\n    blob = new Blob(blobParts, {type: safeMimeType})\n  } catch (e) {\n    var bb = new BlobBuilder\n    angular.forEach(blobParts, function (blobPart) {\n      bb.append(blobPart)\n    })\n    blob = bb.getBlob(safeMimeType)\n  }\n  return blob\n}\n\nfunction blobSafeMimeType(mimeType) {\n  if ([\n    'image/jpeg',\n    'image/png',\n    'image/gif',\n    'image/webp',\n    'image/bmp',\n    'video/mp4',\n    'video/webm',\n    'video/quicktime',\n    'audio/ogg',\n    'audio/mpeg',\n    'audio/mp4',\n  ].indexOf(mimeType) == -1) {\n    return 'application/octet-stream'\n  }\n  return mimeType\n}\n\nfunction bytesCmp (bytes1, bytes2) {\n  var len = bytes1.length\n  if (len != bytes2.length) {\n    return false\n  }\n\n  for (var i = 0; i < len; i++) {\n    if (bytes1[i] != bytes2[i]) {\n      return false\n    }\n  }\n  return true\n}\n\nfunction bytesXor (bytes1, bytes2) {\n  var len = bytes1.length\n  var bytes = []\n\n  for (var i = 0; i < len; ++i) {\n    bytes[i] = bytes1[i] ^ bytes2[i]\n  }\n\n  return bytes\n}\n\nfunction bytesToWords (bytes) {\n  if (bytes instanceof ArrayBuffer) {\n    bytes = new Uint8Array(bytes)\n  }\n  var len = bytes.length\n  var words = []\n  var i\n  for (i = 0; i < len; i++) {\n    words[i >>> 2] |= bytes[i] << (24 - (i % 4) * 8)\n  }\n\n  return new _crypto__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lib.WordArray.init(words, len)\n}\n\nfunction bytesFromWords (wordArray) {\n  var words = wordArray.words\n  var sigBytes = wordArray.sigBytes\n  var bytes = []\n\n  for (var i = 0; i < sigBytes; i++) {\n    bytes.push((words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff)\n  }\n\n  return bytes\n}\n\nfunction bytesFromBigInt (bigInt, len) {\n  var bytes = bigInt.toByteArray()\n\n  if (len && bytes.length < len) {\n    var padding = []\n    for (var i = 0, needPadding = len - bytes.length; i < needPadding; i++) {\n      padding[i] = 0\n    }\n    if (bytes instanceof ArrayBuffer) {\n      bytes = bufferConcat(padding, bytes)\n    } else {\n      bytes = padding.concat(bytes)\n    }\n  }else {\n    while (!bytes[0] && (!len || bytes.length > len)) {\n      bytes = bytes.slice(1)\n    }\n  }\n\n  return bytes\n}\n\nfunction bytesFromLeemonBigInt (bigInt, len) {\n  var str = bigInt2str(bigInt, 16)\n  return bytesFromHex(str)\n}\n\nfunction bytesToArrayBuffer (b) {\n  return (new Uint8Array(b)).buffer\n}\n\nfunction convertToArrayBuffer (bytes) {\n  // Be careful with converting subarrays!!\n  if (bytes instanceof ArrayBuffer) {\n    return bytes\n  }\n  if (bytes.buffer !== undefined &&\n    bytes.buffer.byteLength == bytes.length * bytes.BYTES_PER_ELEMENT) {\n    return bytes.buffer\n  }\n  return bytesToArrayBuffer(bytes)\n}\n\nfunction convertToUint8Array (bytes) {\n  if (bytes.buffer !== undefined) {\n    return bytes\n  }\n  return new Uint8Array(bytes)\n}\n\nfunction convertToByteArray (bytes) {\n  if (Array.isArray(bytes)) {\n    return bytes\n  }\n  bytes = convertToUint8Array(bytes)\n  var newBytes = []\n  for (var i = 0, len = bytes.length; i < len; i++) {\n    newBytes.push(bytes[i])\n  }\n  return newBytes\n}\n\nfunction bytesFromArrayBuffer (buffer) {\n  var len = buffer.byteLength\n  var byteView = new Uint8Array(buffer)\n  var bytes = []\n\n  for (var i = 0; i < len; ++i) {\n    bytes[i] = byteView[i]\n  }\n\n  return bytes\n}\n\nfunction bufferConcat (buffer1, buffer2) {\n  var l1 = buffer1.byteLength || buffer1.length\n  var l2 = buffer2.byteLength || buffer2.length\n  var tmp = new Uint8Array(l1 + l2)\n  tmp.set(buffer1 instanceof ArrayBuffer ? new Uint8Array(buffer1) : buffer1, 0)\n  tmp.set(buffer2 instanceof ArrayBuffer ? new Uint8Array(buffer2) : buffer2, l1)\n\n  return tmp.buffer\n}\n\nfunction longToInts (sLong) {\n  var divRem = bigStringInt(sLong).divideAndRemainder(bigint(0x100000000))\n\n  return [divRem[0].intValue(), divRem[1].intValue()]\n}\n\nfunction longToBytes (sLong) {\n  return bytesFromWords({words: longToInts(sLong), sigBytes: 8}).reverse()\n}\n\nfunction longFromInts (high, low) {\n  return bigint(high).shiftLeft(32).add(bigint(low)).toString(10)\n}\n\nfunction intToUint (val) {\n  val = parseInt(val)\n  if (val < 0) {\n    val = val + 4294967296\n  }\n  return val\n}\n\nfunction uintToInt (val) {\n  if (val > 2147483647) {\n    val = val - 4294967296\n  }\n  return val\n}\n\nvar rushaInstance;\n\nfunction sha1HashSync (bytes) {\n  rushaInstance = rushaInstance || new Rusha(1024 * 1024)\n\n  // console.log(dT(), 'SHA-1 hash start', bytes.byteLength || bytes.length)\n  var hashBytes = rushaInstance.rawDigest(bytes).buffer\n  // console.log(dT(), 'SHA-1 hash finish')\n\n  return hashBytes\n}\n\ntoExport.sha1BytesSync = function sha1BytesSync (bytes) {\n  return bytesFromArrayBuffer(sha1HashSync(bytes))\n}\n\nfunction sha256HashSync (bytes) {\n  // console.log(dT(), 'SHA-2 hash start', bytes.byteLength || bytes.length)\n  var hashWords = _crypto__WEBPACK_IMPORTED_MODULE_0__[\"default\"].SHA256(bytesToWords(bytes))\n  // console.log(dT(), 'SHA-2 hash finish')\n\n  var hashBytes = bytesFromWords(hashWords)\n\n  return hashBytes\n}\n\ntoExport.rsaEncrypt = function rsaEncrypt (publicKey, bytes) {\n  bytes = addPadding(bytes, 255)\n\n  // console.log('RSA encrypt start')\n  var N = new BigInteger(publicKey.modulus, 16)\n  var E = new BigInteger(publicKey.exponent, 16)\n  var X = new BigInteger(bytes)\n  var encryptedBigInt = X.modPowInt(E, N),\n    encryptedBytes = bytesFromBigInt(encryptedBigInt, 256)\n  // console.log('RSA encrypt finish')\n\n  return encryptedBytes\n}\n\nfunction addPadding (bytes, blockSize, zeroes) {\n  blockSize = blockSize || 16\n  var len = bytes.byteLength || bytes.length\n  var needPadding = blockSize - (len % blockSize)\n  if (needPadding > 0 && needPadding < blockSize) {\n    var padding = new Array(needPadding)\n    if (zeroes) {\n      for (var i = 0; i < needPadding; i++) {\n        padding[i] = 0\n      }\n    } else {\n      Object(_secure_random__WEBPACK_IMPORTED_MODULE_2__[\"fillWithRandomBytes\"])(padding)\n    }\n\n    if (bytes instanceof ArrayBuffer) {\n      bytes = bufferConcat(bytes, padding)\n    } else {\n      bytes = bytes.concat(padding)\n    }\n  }\n\n  return bytes\n}\n\ntoExport.aesEncryptSync = function aesEncryptSync (bytes, keyBytes, ivBytes) {\n  var len = bytes.byteLength || bytes.length\n\n  // console.log(dT(), 'AES encrypt start', len/*, bytesToHex(keyBytes), bytesToHex(ivBytes)*/)\n  bytes = addPadding(bytes)\n\n  var encryptedWords = _crypto__WEBPACK_IMPORTED_MODULE_0__[\"default\"].AES.encrypt(bytesToWords(bytes), bytesToWords(keyBytes), {\n    iv: bytesToWords(ivBytes),\n    padding: _crypto__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pad.NoPadding,\n    mode: _crypto__WEBPACK_IMPORTED_MODULE_0__[\"default\"].mode.IGE\n  }).ciphertext\n\n  var encryptedBytes = bytesFromWords(encryptedWords)\n  // console.log(dT(), 'AES encrypt finish')\n\n  return encryptedBytes\n}\n\ntoExport.aesDecryptSync = function aesDecryptSync (encryptedBytes, keyBytes, ivBytes) {\n\n  // console.log(dT(), 'AES decrypt start', encryptedBytes.length)\n  var decryptedWords = _crypto__WEBPACK_IMPORTED_MODULE_0__[\"default\"].AES.decrypt({ciphertext: bytesToWords(encryptedBytes)}, bytesToWords(keyBytes), {\n    iv: bytesToWords(ivBytes),\n    padding: _crypto__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pad.NoPadding,\n    mode: _crypto__WEBPACK_IMPORTED_MODULE_0__[\"default\"].mode.IGE\n  })\n\n  var bytes = bytesFromWords(decryptedWords)\n  // console.log(dT(), 'AES decrypt finish')\n\n  return bytes\n}\n\nfunction gzipUncompress (bytes) {\n  // console.log('Gzip uncompress start')\n  var result = (new Zlib.Gunzip(bytes)).decompress()\n  // console.log('Gzip uncompress finish')\n  return result\n}\n\nfunction nextRandomInt (maxValue) {\n  return Math.floor(Math.random() * maxValue)\n}\n\n\n\n\n\nfunction gcdLong (a, b) {\n  while (a.notEquals(goog.math.Long.ZERO) && b.notEquals(goog.math.Long.ZERO)) {\n    while (b.and(goog.math.Long.ONE).equals(goog.math.Long.ZERO)) {\n      b = b.shiftRight(1)\n    }\n    while (a.and(goog.math.Long.ONE).equals(goog.math.Long.ZERO)) {\n      a = a.shiftRight(1)\n    }\n    if (a.compare(b) > 0) {\n      a = a.subtract(b)\n    } else {\n      b = b.subtract(a)\n    }\n  }\n  return b.equals(goog.math.Long.ZERO) ? a : b\n}\n\nfunction pqPrimeLong (what) {\n  var it = 0,\n    g\n  for (var i = 0; i < 3; i++) {\n    var q = goog.math.Long.fromInt((nextRandomInt(128) & 15) + 17)\n    var x = goog.math.Long.fromInt(nextRandomInt(1000000000) + 1)\n    var y = x\n    var lim = 1 << (i + 18)\n\n    for (var j = 1; j < lim; j++) {\n      ++it\n      var a = x\n      var b = x\n      var c = q\n\n      while (b.notEquals(goog.math.Long.ZERO)) {\n        if (b.and(goog.math.Long.ONE).notEquals(goog.math.Long.ZERO)) {\n          c = c.add(a)\n          if (c.compare(what) > 0) {\n            c = c.subtract(what)\n          }\n        }\n        a = a.add(a)\n        if (a.compare(what) > 0) {\n          a = a.subtract(what)\n        }\n        b = b.shiftRight(1)\n      }\n\n      x = c\n      var z = x.compare(y) < 0 ? y.subtract(x) : x.subtract(y)\n      g = gcdLong(z, what)\n      if (g.notEquals(goog.math.Long.ONE)) {\n        break\n      }\n      if ((j & (j - 1)) == 0) {\n        y = x\n      }\n    }\n    if (g.compare(goog.math.Long.ONE) > 0) {\n      break\n    }\n  }\n\n  var f = what.div(g), P, Q\n\n  if (g.compare(f) > 0) {\n    P = f\n    Q = g\n  } else {\n    P = g\n    Q = f\n  }\n\n  return [bytesFromHex(P.toString(16)), bytesFromHex(Q.toString(16)), it]\n}\n\nfunction pqPrimeLeemon (what) {\n  var minBits = 64\n  var minLen = Math.ceil(minBits / bpe) + 1\n  var it = 0\n  var i, q\n  var j, lim\n  var g, P\n  var Q\n  var a = new Array(minLen)\n  var b = new Array(minLen)\n  var c = new Array(minLen)\n  var g = new Array(minLen)\n  var z = new Array(minLen)\n  var x = new Array(minLen)\n  var y = new Array(minLen)\n\n  for (i = 0; i < 3; i++) {\n    q = (nextRandomInt(128) & 15) + 17\n    copyInt_(x, nextRandomInt(1000000000) + 1)\n    copy_(y, x)\n    lim = 1 << (i + 18)\n\n    for (j = 1; j < lim; j++) {\n      ++it\n      copy_(a, x)\n      copy_(b, x)\n      copyInt_(c, q)\n\n      while (!isZero(b)) {\n        if (b[0] & 1) {\n          add_(c, a)\n          if (greater(c, what)) {\n            sub_(c, what)\n          }\n        }\n        add_(a, a)\n        if (greater(a, what)) {\n          sub_(a, what)\n        }\n        rightShift_(b, 1)\n      }\n\n      copy_(x, c)\n      if (greater(x, y)) {\n        copy_(z, x)\n        sub_(z, y)\n      } else {\n        copy_(z, y)\n        sub_(z, x)\n      }\n      eGCD_(z, what, g, a, b)\n      if (!equalsInt(g, 1)) {\n        break\n      }\n      if ((j & (j - 1)) == 0) {\n        copy_(y, x)\n      }\n    }\n    if (greater(g, one)) {\n      break\n    }\n  }\n\n  divide_(what, g, x, y)\n\n  if (greater(g, x)) {\n    P = x\n    Q = g\n  } else {\n    P = g\n    Q = x\n  }\n\n  // console.log(dT(), 'done', bigInt2str(what, 10), bigInt2str(P, 10), bigInt2str(Q, 10))\n\n  return [bytesFromLeemonBigInt(P), bytesFromLeemonBigInt(Q), it]\n}\n\ntoExport.bytesModPow = function bytesModPow (x, y, m) {\n  try {\n    var xBigInt = str2bigInt(bytesToHex(x), 16)\n    var yBigInt = str2bigInt(bytesToHex(y), 16)\n    var mBigInt = str2bigInt(bytesToHex(m), 16)\n    var resBigInt = powMod(xBigInt, yBigInt, mBigInt)\n\n    return bytesFromHex(bigInt2str(resBigInt, 16))\n  } catch (e) {\n    console.error('mod pow error', e)\n  }\n\n  return bytesFromBigInt(new BigInteger(x).modPow(new BigInteger(y), new BigInteger(m)), 256)\n}\n\n// Copyright (c) 2005  Tom Wu\n// All Rights Reserved.\n// See \"LICENSE\" for details.\n\n// Basic JavaScript BN library - subset useful for RSA encryption.\n\n// Bits per digit\nvar dbits;\n\n// JavaScript engine analysis\nvar canary = 0xdeadbeefcafe;\nvar j_lm = ((canary&0xffffff)==0xefcafe);\n\n// (public) Constructor\nfunction BigInteger(a,b,c) {\n  if(a != null)\n    if(\"number\" == typeof a) this.fromNumber(a,b,c);\n    else if(b == null && \"string\" != typeof a) this.fromString(a,256);\n    else this.fromString(a,b);\n}\n\n// return new, unset BigInteger\nfunction nbi() { return new BigInteger(null); }\n\n// am: Compute w_j += (x*this_i), propagate carries,\n// c is initial carry, returns final carry.\n// c < 3*dvalue, x < 2*dvalue, this_i < dvalue\n// We need to select the fastest one that works in this environment.\n\n// am1: use a single mult and divide to get the high bits,\n// max digit bits should be 26 because\n// max internal value = 2*dvalue^2-2*dvalue (< 2^53)\nfunction am1(i,x,w,j,c,n) {\n  while(--n >= 0) {\n    var v = x*this[i++]+w[j]+c;\n    c = Math.floor(v/0x4000000);\n    w[j++] = v&0x3ffffff;\n  }\n  return c;\n}\n// am2 avoids a big mult-and-extract completely.\n// Max digit bits should be <= 30 because we do bitwise ops\n// on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)\nfunction am2(i,x,w,j,c,n) {\n  var xl = x&0x7fff, xh = x>>15;\n  while(--n >= 0) {\n    var l = this[i]&0x7fff;\n    var h = this[i++]>>15;\n    var m = xh*l+h*xl;\n    l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);\n    c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);\n    w[j++] = l&0x3fffffff;\n  }\n  return c;\n}\n// Alternately, set max digit bits to 28 since some\n// browsers slow down when dealing with 32-bit numbers.\nfunction am3(i,x,w,j,c,n) {\n  var xl = x&0x3fff, xh = x>>14;\n  while(--n >= 0) {\n    var l = this[i]&0x3fff;\n    var h = this[i++]>>14;\n    var m = xh*l+h*xl;\n    l = xl*l+((m&0x3fff)<<14)+w[j]+c;\n    c = (l>>28)+(m>>14)+xh*h;\n    w[j++] = l&0xfffffff;\n  }\n  return c;\n}\nif(j_lm && (navigator.appName == \"Microsoft Internet Explorer\")) {\n  BigInteger.prototype.am = am2;\n  dbits = 30;\n}\nelse if(j_lm && (navigator.appName != \"Netscape\")) {\n  BigInteger.prototype.am = am1;\n  dbits = 26;\n}\nelse { // Mozilla/Netscape seems to prefer am3\n  BigInteger.prototype.am = am3;\n  dbits = 28;\n}\n\nBigInteger.prototype.DB = dbits;\nBigInteger.prototype.DM = ((1<<dbits)-1);\nBigInteger.prototype.DV = (1<<dbits);\n\nvar BI_FP = 52;\nBigInteger.prototype.FV = Math.pow(2,BI_FP);\nBigInteger.prototype.F1 = BI_FP-dbits;\nBigInteger.prototype.F2 = 2*dbits-BI_FP;\n\n// Digit conversions\nvar BI_RM = \"0123456789abcdefghijklmnopqrstuvwxyz\";\nvar BI_RC = new Array();\nvar rr,vv;\nrr = \"0\".charCodeAt(0);\nfor(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;\nrr = \"a\".charCodeAt(0);\nfor(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;\nrr = \"A\".charCodeAt(0);\nfor(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;\n\nfunction int2char(n) { return BI_RM.charAt(n); }\nfunction intAt(s,i) {\n  var c = BI_RC[s.charCodeAt(i)];\n  return (c==null)?-1:c;\n}\n\n// (protected) copy this to r\nfunction bnpCopyTo(r) {\n  for(var i = this.t-1; i >= 0; --i) r[i] = this[i];\n  r.t = this.t;\n  r.s = this.s;\n}\n\n// (protected) set from integer value x, -DV <= x < DV\nfunction bnpFromInt(x) {\n  this.t = 1;\n  this.s = (x<0)?-1:0;\n  if(x > 0) this[0] = x;\n  else if(x < -1) this[0] = x+this.DV;\n  else this.t = 0;\n}\n\n// return bigint initialized to value\nfunction nbv(i) { var r = nbi(); r.fromInt(i); return r; }\n\n// (protected) set from string and radix\nfunction bnpFromString(s,b,signed) {\n  var k;\n  if(b == 16) k = 4;\n  else if(b == 8) k = 3;\n  else if(b == 256) k = 8; // byte array\n  else if(b == 2) k = 1;\n  else if(b == 32) k = 5;\n  else if(b == 4) k = 2;\n  else { this.fromRadix(s,b); return; }\n  this.t = 0;\n  this.s = 0;\n  var i = s.length, mi = false, sh = 0;\n  while(--i >= 0) {\n    var x = (k==8)?s[i]&0xff:intAt(s,i);\n    if(x < 0) {\n      if(s.charAt(i) == \"-\") mi = true;\n      continue;\n    }\n    mi = false;\n    if(sh == 0)\n      this[this.t++] = x;\n    else if(sh+k > this.DB) {\n      this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;\n      this[this.t++] = (x>>(this.DB-sh));\n    }\n    else\n      this[this.t-1] |= x<<sh;\n    sh += k;\n    if(sh >= this.DB) sh -= this.DB;\n  }\n  // Disabled due to '-' prefix in toString\n  if(k == 8 && (s[0]&0x80) != 0 && signed) {\n    this.s = -1;\n    if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;\n  }\n  this.clamp();\n  if(mi) BigInteger.ZERO.subTo(this,this);\n}\n\n// (protected) clamp off excess high words\nfunction bnpClamp() {\n  var c = this.s&this.DM;\n  while(this.t > 0 && this[this.t-1] == c) --this.t;\n}\n\n// (public) return string representation in given radix\nfunction bnToString(b) {\n  if(this.s < 0) return \"-\"+this.negate().toString(b);\n  var k;\n  if(b == 16) k = 4;\n  else if(b == 8) k = 3;\n  else if(b == 2) k = 1;\n  else if(b == 32) k = 5;\n  else if(b == 4) k = 2;\n  else return this.toRadix(b);\n  var km = (1<<k)-1, d, m = false, r = \"\", i = this.t;\n  var p = this.DB-(i*this.DB)%k;\n  if(i-- > 0) {\n    if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }\n    while(i >= 0) {\n      if(p < k) {\n        d = (this[i]&((1<<p)-1))<<(k-p);\n        d |= this[--i]>>(p+=this.DB-k);\n      }\n      else {\n        d = (this[i]>>(p-=k))&km;\n        if(p <= 0) { p += this.DB; --i; }\n      }\n      if(d > 0) m = true;\n      if(m) r += int2char(d);\n    }\n  }\n  return m?r:\"0\";\n}\n\n// (public) -this\nfunction bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }\n\n// (public) |this|\nfunction bnAbs() { return (this.s<0)?this.negate():this; }\n\n// (public) return + if this > a, - if this < a, 0 if equal\nfunction bnCompareTo(a) {\n  var r = this.s-a.s;\n  if(r != 0) return r;\n  var i = this.t;\n  r = i-a.t;\n  if(r != 0) return (this.s<0)?-r:r;\n  while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;\n  return 0;\n}\n\n// returns bit length of the integer x\nfunction nbits(x) {\n  var r = 1, t;\n  if((t=x>>>16) != 0) { x = t; r += 16; }\n  if((t=x>>8) != 0) { x = t; r += 8; }\n  if((t=x>>4) != 0) { x = t; r += 4; }\n  if((t=x>>2) != 0) { x = t; r += 2; }\n  if((t=x>>1) != 0) { x = t; r += 1; }\n  return r;\n}\n\n// (public) return the number of bits in \"this\"\nfunction bnBitLength() {\n  if(this.t <= 0) return 0;\n  return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));\n}\n\n// (protected) r = this << n*DB\nfunction bnpDLShiftTo(n,r) {\n  var i;\n  for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];\n  for(i = n-1; i >= 0; --i) r[i] = 0;\n  r.t = this.t+n;\n  r.s = this.s;\n}\n\n// (protected) r = this >> n*DB\nfunction bnpDRShiftTo(n,r) {\n  for(var i = n; i < this.t; ++i) r[i-n] = this[i];\n  r.t = Math.max(this.t-n,0);\n  r.s = this.s;\n}\n\n// (protected) r = this << n\nfunction bnpLShiftTo(n,r) {\n  var bs = n%this.DB;\n  var cbs = this.DB-bs;\n  var bm = (1<<cbs)-1;\n  var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;\n  for(i = this.t-1; i >= 0; --i) {\n    r[i+ds+1] = (this[i]>>cbs)|c;\n    c = (this[i]&bm)<<bs;\n  }\n  for(i = ds-1; i >= 0; --i) r[i] = 0;\n  r[ds] = c;\n  r.t = this.t+ds+1;\n  r.s = this.s;\n  r.clamp();\n}\n\n// (protected) r = this >> n\nfunction bnpRShiftTo(n,r) {\n  r.s = this.s;\n  var ds = Math.floor(n/this.DB);\n  if(ds >= this.t) { r.t = 0; return; }\n  var bs = n%this.DB;\n  var cbs = this.DB-bs;\n  var bm = (1<<bs)-1;\n  r[0] = this[ds]>>bs;\n  for(var i = ds+1; i < this.t; ++i) {\n    r[i-ds-1] |= (this[i]&bm)<<cbs;\n    r[i-ds] = this[i]>>bs;\n  }\n  if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;\n  r.t = this.t-ds;\n  r.clamp();\n}\n\n// (protected) r = this - a\nfunction bnpSubTo(a,r) {\n  var i = 0, c = 0, m = Math.min(a.t,this.t);\n  while(i < m) {\n    c += this[i]-a[i];\n    r[i++] = c&this.DM;\n    c >>= this.DB;\n  }\n  if(a.t < this.t) {\n    c -= a.s;\n    while(i < this.t) {\n      c += this[i];\n      r[i++] = c&this.DM;\n      c >>= this.DB;\n    }\n    c += this.s;\n  }\n  else {\n    c += this.s;\n    while(i < a.t) {\n      c -= a[i];\n      r[i++] = c&this.DM;\n      c >>= this.DB;\n    }\n    c -= a.s;\n  }\n  r.s = (c<0)?-1:0;\n  if(c < -1) r[i++] = this.DV+c;\n  else if(c > 0) r[i++] = c;\n  r.t = i;\n  r.clamp();\n}\n\n// (protected) r = this * a, r != this,a (HAC 14.12)\n// \"this\" should be the larger one if appropriate.\nfunction bnpMultiplyTo(a,r) {\n  var x = this.abs(), y = a.abs();\n  var i = x.t;\n  r.t = i+y.t;\n  while(--i >= 0) r[i] = 0;\n  for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);\n  r.s = 0;\n  r.clamp();\n  if(this.s != a.s) BigInteger.ZERO.subTo(r,r);\n}\n\n// (protected) r = this^2, r != this (HAC 14.16)\nfunction bnpSquareTo(r) {\n  var x = this.abs();\n  var i = r.t = 2*x.t;\n  while(--i >= 0) r[i] = 0;\n  for(i = 0; i < x.t-1; ++i) {\n    var c = x.am(i,x[i],r,2*i,0,1);\n    if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {\n      r[i+x.t] -= x.DV;\n      r[i+x.t+1] = 1;\n    }\n  }\n  if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);\n  r.s = 0;\n  r.clamp();\n}\n\n// (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)\n// r != q, this != m.  q or r may be null.\nfunction bnpDivRemTo(m,q,r) {\n  var pm = m.abs();\n  if(pm.t <= 0) return;\n  var pt = this.abs();\n  if(pt.t < pm.t) {\n    if(q != null) q.fromInt(0);\n    if(r != null) this.copyTo(r);\n    return;\n  }\n  if(r == null) r = nbi();\n  var y = nbi(), ts = this.s, ms = m.s;\n  var nsh = this.DB-nbits(pm[pm.t-1]);  // normalize modulus\n  if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }\n  else { pm.copyTo(y); pt.copyTo(r); }\n  var ys = y.t;\n  var y0 = y[ys-1];\n  if(y0 == 0) return;\n  var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);\n  var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;\n  var i = r.t, j = i-ys, t = (q==null)?nbi():q;\n  y.dlShiftTo(j,t);\n  if(r.compareTo(t) >= 0) {\n    r[r.t++] = 1;\n    r.subTo(t,r);\n  }\n  BigInteger.ONE.dlShiftTo(ys,t);\n  t.subTo(y,y); // \"negative\" y so we can replace sub with am later\n  while(y.t < ys) y[y.t++] = 0;\n  while(--j >= 0) {\n    // Estimate quotient digit\n    var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);\n    if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {  // Try it out\n      y.dlShiftTo(j,t);\n      r.subTo(t,r);\n      while(r[i] < --qd) r.subTo(t,r);\n    }\n  }\n  if(q != null) {\n    r.drShiftTo(ys,q);\n    if(ts != ms) BigInteger.ZERO.subTo(q,q);\n  }\n  r.t = ys;\n  r.clamp();\n  if(nsh > 0) r.rShiftTo(nsh,r);  // Denormalize remainder\n  if(ts < 0) BigInteger.ZERO.subTo(r,r);\n}\n\n// (public) this mod a\nfunction bnMod(a) {\n  var r = nbi();\n  this.abs().divRemTo(a,null,r);\n  if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);\n  return r;\n}\n\n// Modular reduction using \"classic\" algorithm\nfunction Classic(m) { this.m = m; }\nfunction cConvert(x) {\n  if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);\n  else return x;\n}\nfunction cRevert(x) { return x; }\nfunction cReduce(x) { x.divRemTo(this.m,null,x); }\nfunction cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }\nfunction cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }\n\nClassic.prototype.convert = cConvert;\nClassic.prototype.revert = cRevert;\nClassic.prototype.reduce = cReduce;\nClassic.prototype.mulTo = cMulTo;\nClassic.prototype.sqrTo = cSqrTo;\n\n// (protected) return \"-1/this % 2^DB\"; useful for Mont. reduction\n// justification:\n//         xy == 1 (mod m)\n//         xy =  1+km\n//   xy(2-xy) = (1+km)(1-km)\n// x[y(2-xy)] = 1-k^2m^2\n// x[y(2-xy)] == 1 (mod m^2)\n// if y is 1/x mod m, then y(2-xy) is 1/x mod m^2\n// should reduce x and y(2-xy) by m^2 at each step to keep size bounded.\n// JS multiply \"overflows\" differently from C/C++, so care is needed here.\nfunction bnpInvDigit() {\n  if(this.t < 1) return 0;\n  var x = this[0];\n  if((x&1) == 0) return 0;\n  var y = x&3;    // y == 1/x mod 2^2\n  y = (y*(2-(x&0xf)*y))&0xf;  // y == 1/x mod 2^4\n  y = (y*(2-(x&0xff)*y))&0xff;  // y == 1/x mod 2^8\n  y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff; // y == 1/x mod 2^16\n  // last step - calculate inverse mod DV directly;\n  // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints\n  y = (y*(2-x*y%this.DV))%this.DV;    // y == 1/x mod 2^dbits\n  // we really want the negative inverse, and -DV < y < DV\n  return (y>0)?this.DV-y:-y;\n}\n\n// Montgomery reduction\nfunction Montgomery(m) {\n  this.m = m;\n  this.mp = m.invDigit();\n  this.mpl = this.mp&0x7fff;\n  this.mph = this.mp>>15;\n  this.um = (1<<(m.DB-15))-1;\n  this.mt2 = 2*m.t;\n}\n\n// xR mod m\nfunction montConvert(x) {\n  var r = nbi();\n  x.abs().dlShiftTo(this.m.t,r);\n  r.divRemTo(this.m,null,r);\n  if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);\n  return r;\n}\n\n// x/R mod m\nfunction montRevert(x) {\n  var r = nbi();\n  x.copyTo(r);\n  this.reduce(r);\n  return r;\n}\n\n// x = x/R mod m (HAC 14.32)\nfunction montReduce(x) {\n  while(x.t <= this.mt2)  // pad x so am has enough room later\n    x[x.t++] = 0;\n  for(var i = 0; i < this.m.t; ++i) {\n    // faster way of calculating u0 = x[i]*mp mod DV\n    var j = x[i]&0x7fff;\n    var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;\n    // use am to combine the multiply-shift-add into one call\n    j = i+this.m.t;\n    x[j] += this.m.am(0,u0,x,i,0,this.m.t);\n    // propagate carry\n    while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }\n  }\n  x.clamp();\n  x.drShiftTo(this.m.t,x);\n  if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);\n}\n\n// r = \"x^2/R mod m\"; x != r\nfunction montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }\n\n// r = \"xy/R mod m\"; x,y != r\nfunction montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }\n\nMontgomery.prototype.convert = montConvert;\nMontgomery.prototype.revert = montRevert;\nMontgomery.prototype.reduce = montReduce;\nMontgomery.prototype.mulTo = montMulTo;\nMontgomery.prototype.sqrTo = montSqrTo;\n\n// (protected) true iff this is even\nfunction bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }\n\n// (protected) this^e, e < 2^32, doing sqr and mul with \"r\" (HAC 14.79)\nfunction bnpExp(e,z) {\n  if(e > 0xffffffff || e < 1) return BigInteger.ONE;\n  var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;\n  g.copyTo(r);\n  while(--i >= 0) {\n    z.sqrTo(r,r2);\n    if((e&(1<<i)) > 0) z.mulTo(r2,g,r);\n    else { var t = r; r = r2; r2 = t; }\n  }\n  return z.revert(r);\n}\n\n// (public) this^e % m, 0 <= e < 2^32\nfunction bnModPowInt(e,m) {\n  var z;\n  if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);\n  return this.exp(e,z);\n}\n\n// protected\nBigInteger.prototype.copyTo = bnpCopyTo;\nBigInteger.prototype.fromInt = bnpFromInt;\nBigInteger.prototype.fromString = bnpFromString;\nBigInteger.prototype.clamp = bnpClamp;\nBigInteger.prototype.dlShiftTo = bnpDLShiftTo;\nBigInteger.prototype.drShiftTo = bnpDRShiftTo;\nBigInteger.prototype.lShiftTo = bnpLShiftTo;\nBigInteger.prototype.rShiftTo = bnpRShiftTo;\nBigInteger.prototype.subTo = bnpSubTo;\nBigInteger.prototype.multiplyTo = bnpMultiplyTo;\nBigInteger.prototype.squareTo = bnpSquareTo;\nBigInteger.prototype.divRemTo = bnpDivRemTo;\nBigInteger.prototype.invDigit = bnpInvDigit;\nBigInteger.prototype.isEven = bnpIsEven;\nBigInteger.prototype.exp = bnpExp;\n\n// public\nBigInteger.prototype.toString = bnToString;\nBigInteger.prototype.negate = bnNegate;\nBigInteger.prototype.abs = bnAbs;\nBigInteger.prototype.compareTo = bnCompareTo;\nBigInteger.prototype.bitLength = bnBitLength;\nBigInteger.prototype.mod = bnMod;\nBigInteger.prototype.modPowInt = bnModPowInt;\n\n// \"constants\"\nBigInteger.ZERO = nbv(0);\nBigInteger.ONE = nbv(1);\n\n\n\n// Copyright (c) 2005-2009  Tom Wu\n// All Rights Reserved.\n// See \"LICENSE\" for details.\n\n// Extended JavaScript BN functions, required for RSA private ops.\n\n// Version 1.1: new BigInteger(\"0\", 10) returns \"proper\" zero\n// Version 1.2: square() API, isProbablePrime fix\n\n// (public)\nfunction bnClone() { var r = nbi(); this.copyTo(r); return r; }\n\n// (public) return value as integer\nfunction bnIntValue() {\n  if(this.s < 0) {\n    if(this.t == 1) return this[0]-this.DV;\n    else if(this.t == 0) return -1;\n  }\n  else if(this.t == 1) return this[0];\n  else if(this.t == 0) return 0;\n  // assumes 16 < DB < 32\n  return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];\n}\n\n// (public) return value as byte\nfunction bnByteValue() { return (this.t==0)?this.s:(this[0]<<24)>>24; }\n\n// (public) return value as short (assumes DB>=16)\nfunction bnShortValue() { return (this.t==0)?this.s:(this[0]<<16)>>16; }\n\n// (protected) return x s.t. r^x < DV\nfunction bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }\n\n// (public) 0 if this == 0, 1 if this > 0\nfunction bnSigNum() {\n  if(this.s < 0) return -1;\n  else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;\n  else return 1;\n}\n\n// (protected) convert to radix string\nfunction bnpToRadix(b) {\n  if(b == null) b = 10;\n  if(this.signum() == 0 || b < 2 || b > 36) return \"0\";\n  var cs = this.chunkSize(b);\n  var a = Math.pow(b,cs);\n  var d = nbv(a), y = nbi(), z = nbi(), r = \"\";\n  this.divRemTo(d,y,z);\n  while(y.signum() > 0) {\n    r = (a+z.intValue()).toString(b).substr(1) + r;\n    y.divRemTo(d,y,z);\n  }\n  return z.intValue().toString(b) + r;\n}\n\n// (protected) convert from radix string\nfunction bnpFromRadix(s,b) {\n  this.fromInt(0);\n  if(b == null) b = 10;\n  var cs = this.chunkSize(b);\n  var d = Math.pow(b,cs), mi = false, j = 0, w = 0;\n  for(var i = 0; i < s.length; ++i) {\n    var x = intAt(s,i);\n    if(x < 0) {\n      if(s.charAt(i) == \"-\" && this.signum() == 0) mi = true;\n      continue;\n    }\n    w = b*w+x;\n    if(++j >= cs) {\n      this.dMultiply(d);\n      this.dAddOffset(w,0);\n      j = 0;\n      w = 0;\n    }\n  }\n  if(j > 0) {\n    this.dMultiply(Math.pow(b,j));\n    this.dAddOffset(w,0);\n  }\n  if(mi) BigInteger.ZERO.subTo(this,this);\n}\n\n// (protected) alternate constructor\nfunction bnpFromNumber(a,b,c) {\n  if(\"number\" == typeof b) {\n    // new BigInteger(int,int,RNG)\n    if(a < 2) this.fromInt(1);\n    else {\n      this.fromNumber(a,c);\n      if(!this.testBit(a-1))  // force MSB set\n        this.bitwiseTo(BigInteger.ONE.shiftLeft(a-1),op_or,this);\n      if(this.isEven()) this.dAddOffset(1,0); // force odd\n      while(!this.isProbablePrime(b)) {\n        this.dAddOffset(2,0);\n        if(this.bitLength() > a) this.subTo(BigInteger.ONE.shiftLeft(a-1),this);\n      }\n    }\n  }\n  else {\n    // new BigInteger(int,RNG)\n    var x = new Array(), t = a&7;\n    x.length = (a>>3)+1;\n    b.nextBytes(x);\n    if(t > 0) x[0] &= ((1<<t)-1); else x[0] = 0;\n    this.fromString(x,256);\n  }\n}\n\n// (public) convert to bigendian byte array\nfunction bnToByteArray(signed) {\n  var i = this.t, r = new Array();\n  r[0] = this.s;\n  var p = this.DB-(i*this.DB)%8, d, k = 0;\n  if(i-- > 0) {\n    if(p < this.DB && (d = this[i]>>p) != (this.s&this.DM)>>p)\n      r[k++] = d|(this.s<<(this.DB-p));\n    while(i >= 0) {\n      if(p < 8) {\n        d = (this[i]&((1<<p)-1))<<(8-p);\n        d |= this[--i]>>(p+=this.DB-8);\n      }\n      else {\n        d = (this[i]>>(p-=8))&0xff;\n        if(p <= 0) { p += this.DB; --i; }\n      }\n      if(signed && (d&0x80) != 0) d |= -256;\n      if(k == 0 && (this.s&0x80) != (d&0x80)) ++k;\n      if(k > 0 || d != this.s) r[k++] = d;\n    }\n  }\n  return r;\n}\n\nfunction bnEquals(a) { return(this.compareTo(a)==0); }\nfunction bnMin(a) { return(this.compareTo(a)<0)?this:a; }\nfunction bnMax(a) { return(this.compareTo(a)>0)?this:a; }\n\n// (protected) r = this op a (bitwise)\nfunction bnpBitwiseTo(a,op,r) {\n  var i, f, m = Math.min(a.t,this.t);\n  for(i = 0; i < m; ++i) r[i] = op(this[i],a[i]);\n  if(a.t < this.t) {\n    f = a.s&this.DM;\n    for(i = m; i < this.t; ++i) r[i] = op(this[i],f);\n    r.t = this.t;\n  }\n  else {\n    f = this.s&this.DM;\n    for(i = m; i < a.t; ++i) r[i] = op(f,a[i]);\n    r.t = a.t;\n  }\n  r.s = op(this.s,a.s);\n  r.clamp();\n}\n\n// (public) this & a\nfunction op_and(x,y) { return x&y; }\nfunction bnAnd(a) { var r = nbi(); this.bitwiseTo(a,op_and,r); return r; }\n\n// (public) this | a\nfunction op_or(x,y) { return x|y; }\nfunction bnOr(a) { var r = nbi(); this.bitwiseTo(a,op_or,r); return r; }\n\n// (public) this ^ a\nfunction op_xor(x,y) { return x^y; }\nfunction bnXor(a) { var r = nbi(); this.bitwiseTo(a,op_xor,r); return r; }\n\n// (public) this & ~a\nfunction op_andnot(x,y) { return x&~y; }\nfunction bnAndNot(a) { var r = nbi(); this.bitwiseTo(a,op_andnot,r); return r; }\n\n// (public) ~this\nfunction bnNot() {\n  var r = nbi();\n  for(var i = 0; i < this.t; ++i) r[i] = this.DM&~this[i];\n  r.t = this.t;\n  r.s = ~this.s;\n  return r;\n}\n\n// (public) this << n\nfunction bnShiftLeft(n) {\n  var r = nbi();\n  if(n < 0) this.rShiftTo(-n,r); else this.lShiftTo(n,r);\n  return r;\n}\n\n// (public) this >> n\nfunction bnShiftRight(n) {\n  var r = nbi();\n  if(n < 0) this.lShiftTo(-n,r); else this.rShiftTo(n,r);\n  return r;\n}\n\n// return index of lowest 1-bit in x, x < 2^31\nfunction lbit(x) {\n  if(x == 0) return -1;\n  var r = 0;\n  if((x&0xffff) == 0) { x >>= 16; r += 16; }\n  if((x&0xff) == 0) { x >>= 8; r += 8; }\n  if((x&0xf) == 0) { x >>= 4; r += 4; }\n  if((x&3) == 0) { x >>= 2; r += 2; }\n  if((x&1) == 0) ++r;\n  return r;\n}\n\n// (public) returns index of lowest 1-bit (or -1 if none)\nfunction bnGetLowestSetBit() {\n  for(var i = 0; i < this.t; ++i)\n    if(this[i] != 0) return i*this.DB+lbit(this[i]);\n  if(this.s < 0) return this.t*this.DB;\n  return -1;\n}\n\n// return number of 1 bits in x\nfunction cbit(x) {\n  var r = 0;\n  while(x != 0) { x &= x-1; ++r; }\n  return r;\n}\n\n// (public) return number of set bits\nfunction bnBitCount() {\n  var r = 0, x = this.s&this.DM;\n  for(var i = 0; i < this.t; ++i) r += cbit(this[i]^x);\n  return r;\n}\n\n// (public) true iff nth bit is set\nfunction bnTestBit(n) {\n  var j = Math.floor(n/this.DB);\n  if(j >= this.t) return(this.s!=0);\n  return((this[j]&(1<<(n%this.DB)))!=0);\n}\n\n// (protected) this op (1<<n)\nfunction bnpChangeBit(n,op) {\n  var r = BigInteger.ONE.shiftLeft(n);\n  this.bitwiseTo(r,op,r);\n  return r;\n}\n\n// (public) this | (1<<n)\nfunction bnSetBit(n) { return this.changeBit(n,op_or); }\n\n// (public) this & ~(1<<n)\nfunction bnClearBit(n) { return this.changeBit(n,op_andnot); }\n\n// (public) this ^ (1<<n)\nfunction bnFlipBit(n) { return this.changeBit(n,op_xor); }\n\n// (protected) r = this + a\nfunction bnpAddTo(a,r) {\n  var i = 0, c = 0, m = Math.min(a.t,this.t);\n  while(i < m) {\n    c += this[i]+a[i];\n    r[i++] = c&this.DM;\n    c >>= this.DB;\n  }\n  if(a.t < this.t) {\n    c += a.s;\n    while(i < this.t) {\n      c += this[i];\n      r[i++] = c&this.DM;\n      c >>= this.DB;\n    }\n    c += this.s;\n  }\n  else {\n    c += this.s;\n    while(i < a.t) {\n      c += a[i];\n      r[i++] = c&this.DM;\n      c >>= this.DB;\n    }\n    c += a.s;\n  }\n  r.s = (c<0)?-1:0;\n  if(c > 0) r[i++] = c;\n  else if(c < -1) r[i++] = this.DV+c;\n  r.t = i;\n  r.clamp();\n}\n\n// (public) this + a\nfunction bnAdd(a) { var r = nbi(); this.addTo(a,r); return r; }\n\n// (public) this - a\nfunction bnSubtract(a) { var r = nbi(); this.subTo(a,r); return r; }\n\n// (public) this * a\nfunction bnMultiply(a) { var r = nbi(); this.multiplyTo(a,r); return r; }\n\n// (public) this^2\nfunction bnSquare() { var r = nbi(); this.squareTo(r); return r; }\n\n// (public) this / a\nfunction bnDivide(a) { var r = nbi(); this.divRemTo(a,r,null); return r; }\n\n// (public) this % a\nfunction bnRemainder(a) { var r = nbi(); this.divRemTo(a,null,r); return r; }\n\n// (public) [this/a,this%a]\nfunction bnDivideAndRemainder(a) {\n  var q = nbi(), r = nbi();\n  this.divRemTo(a,q,r);\n  return new Array(q,r);\n}\n\n// (protected) this *= n, this >= 0, 1 < n < DV\nfunction bnpDMultiply(n) {\n  this[this.t] = this.am(0,n-1,this,0,0,this.t);\n  ++this.t;\n  this.clamp();\n}\n\n// (protected) this += n << w words, this >= 0\nfunction bnpDAddOffset(n,w) {\n  if(n == 0) return;\n  while(this.t <= w) this[this.t++] = 0;\n  this[w] += n;\n  while(this[w] >= this.DV) {\n    this[w] -= this.DV;\n    if(++w >= this.t) this[this.t++] = 0;\n    ++this[w];\n  }\n}\n\n// A \"null\" reducer\nfunction NullExp() {}\nfunction nNop(x) { return x; }\nfunction nMulTo(x,y,r) { x.multiplyTo(y,r); }\nfunction nSqrTo(x,r) { x.squareTo(r); }\n\nNullExp.prototype.convert = nNop;\nNullExp.prototype.revert = nNop;\nNullExp.prototype.mulTo = nMulTo;\nNullExp.prototype.sqrTo = nSqrTo;\n\n// (public) this^e\nfunction bnPow(e) { return this.exp(e,new NullExp()); }\n\n// (protected) r = lower n words of \"this * a\", a.t <= n\n// \"this\" should be the larger one if appropriate.\nfunction bnpMultiplyLowerTo(a,n,r) {\n  var i = Math.min(this.t+a.t,n);\n  r.s = 0; // assumes a,this >= 0\n  r.t = i;\n  while(i > 0) r[--i] = 0;\n  var j;\n  for(j = r.t-this.t; i < j; ++i) r[i+this.t] = this.am(0,a[i],r,i,0,this.t);\n  for(j = Math.min(a.t,n); i < j; ++i) this.am(0,a[i],r,i,0,n-i);\n  r.clamp();\n}\n\n// (protected) r = \"this * a\" without lower n words, n > 0\n// \"this\" should be the larger one if appropriate.\nfunction bnpMultiplyUpperTo(a,n,r) {\n  --n;\n  var i = r.t = this.t+a.t-n;\n  r.s = 0; // assumes a,this >= 0\n  while(--i >= 0) r[i] = 0;\n  for(i = Math.max(n-this.t,0); i < a.t; ++i)\n    r[this.t+i-n] = this.am(n-i,a[i],r,0,0,this.t+i-n);\n  r.clamp();\n  r.drShiftTo(1,r);\n}\n\n// Barrett modular reduction\nfunction Barrett(m) {\n  // setup Barrett\n  this.r2 = nbi();\n  this.q3 = nbi();\n  BigInteger.ONE.dlShiftTo(2*m.t,this.r2);\n  this.mu = this.r2.divide(m);\n  this.m = m;\n}\n\nfunction barrettConvert(x) {\n  if(x.s < 0 || x.t > 2*this.m.t) return x.mod(this.m);\n  else if(x.compareTo(this.m) < 0) return x;\n  else { var r = nbi(); x.copyTo(r); this.reduce(r); return r; }\n}\n\nfunction barrettRevert(x) { return x; }\n\n// x = x mod m (HAC 14.42)\nfunction barrettReduce(x) {\n  x.drShiftTo(this.m.t-1,this.r2);\n  if(x.t > this.m.t+1) { x.t = this.m.t+1; x.clamp(); }\n  this.mu.multiplyUpperTo(this.r2,this.m.t+1,this.q3);\n  this.m.multiplyLowerTo(this.q3,this.m.t+1,this.r2);\n  while(x.compareTo(this.r2) < 0) x.dAddOffset(1,this.m.t+1);\n  x.subTo(this.r2,x);\n  while(x.compareTo(this.m) >= 0) x.subTo(this.m,x);\n}\n\n// r = x^2 mod m; x != r\nfunction barrettSqrTo(x,r) { x.squareTo(r); this.reduce(r); }\n\n// r = x*y mod m; x,y != r\nfunction barrettMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }\n\nBarrett.prototype.convert = barrettConvert;\nBarrett.prototype.revert = barrettRevert;\nBarrett.prototype.reduce = barrettReduce;\nBarrett.prototype.mulTo = barrettMulTo;\nBarrett.prototype.sqrTo = barrettSqrTo;\n\n// (public) this^e % m (HAC 14.85)\nfunction bnModPow(e,m) {\n  var i = e.bitLength(), k, r = nbv(1), z;\n  if(i <= 0) return r;\n  else if(i < 18) k = 1;\n  else if(i < 48) k = 3;\n  else if(i < 144) k = 4;\n  else if(i < 768) k = 5;\n  else k = 6;\n  if(i < 8)\n    z = new Classic(m);\n  else if(m.isEven())\n    z = new Barrett(m);\n  else\n    z = new Montgomery(m);\n\n  // precomputation\n  var g = new Array(), n = 3, k1 = k-1, km = (1<<k)-1;\n  g[1] = z.convert(this);\n  if(k > 1) {\n    var g2 = nbi();\n    z.sqrTo(g[1],g2);\n    while(n <= km) {\n      g[n] = nbi();\n      z.mulTo(g2,g[n-2],g[n]);\n      n += 2;\n    }\n  }\n\n  var j = e.t-1, w, is1 = true, r2 = nbi(), t;\n  i = nbits(e[j])-1;\n  while(j >= 0) {\n    if(i >= k1) w = (e[j]>>(i-k1))&km;\n    else {\n      w = (e[j]&((1<<(i+1))-1))<<(k1-i);\n      if(j > 0) w |= e[j-1]>>(this.DB+i-k1);\n    }\n\n    n = k;\n    while((w&1) == 0) { w >>= 1; --n; }\n    if((i -= n) < 0) { i += this.DB; --j; }\n    if(is1) { // ret == 1, don't bother squaring or multiplying it\n      g[w].copyTo(r);\n      is1 = false;\n    }\n    else {\n      while(n > 1) { z.sqrTo(r,r2); z.sqrTo(r2,r); n -= 2; }\n      if(n > 0) z.sqrTo(r,r2); else { t = r; r = r2; r2 = t; }\n      z.mulTo(r2,g[w],r);\n    }\n\n    while(j >= 0 && (e[j]&(1<<i)) == 0) {\n      z.sqrTo(r,r2); t = r; r = r2; r2 = t;\n      if(--i < 0) { i = this.DB-1; --j; }\n    }\n  }\n  return z.revert(r);\n}\n\n// (public) gcd(this,a) (HAC 14.54)\nfunction bnGCD(a) {\n  var x = (this.s<0)?this.negate():this.clone();\n  var y = (a.s<0)?a.negate():a.clone();\n  if(x.compareTo(y) < 0) { var t = x; x = y; y = t; }\n  var i = x.getLowestSetBit(), g = y.getLowestSetBit();\n  if(g < 0) return x;\n  if(i < g) g = i;\n  if(g > 0) {\n    x.rShiftTo(g,x);\n    y.rShiftTo(g,y);\n  }\n  while(x.signum() > 0) {\n    if((i = x.getLowestSetBit()) > 0) x.rShiftTo(i,x);\n    if((i = y.getLowestSetBit()) > 0) y.rShiftTo(i,y);\n    if(x.compareTo(y) >= 0) {\n      x.subTo(y,x);\n      x.rShiftTo(1,x);\n    }\n    else {\n      y.subTo(x,y);\n      y.rShiftTo(1,y);\n    }\n  }\n  if(g > 0) y.lShiftTo(g,y);\n  return y;\n}\n\n// (protected) this % n, n < 2^26\nfunction bnpModInt(n) {\n  if(n <= 0) return 0;\n  var d = this.DV%n, r = (this.s<0)?n-1:0;\n  if(this.t > 0)\n    if(d == 0) r = this[0]%n;\n    else for(var i = this.t-1; i >= 0; --i) r = (d*r+this[i])%n;\n  return r;\n}\n\n// (public) 1/this % m (HAC 14.61)\nfunction bnModInverse(m) {\n  var ac = m.isEven();\n  if((this.isEven() && ac) || m.signum() == 0) return BigInteger.ZERO;\n  var u = m.clone(), v = this.clone();\n  var a = nbv(1), b = nbv(0), c = nbv(0), d = nbv(1);\n  while(u.signum() != 0) {\n    while(u.isEven()) {\n      u.rShiftTo(1,u);\n      if(ac) {\n        if(!a.isEven() || !b.isEven()) { a.addTo(this,a); b.subTo(m,b); }\n        a.rShiftTo(1,a);\n      }\n      else if(!b.isEven()) b.subTo(m,b);\n      b.rShiftTo(1,b);\n    }\n    while(v.isEven()) {\n      v.rShiftTo(1,v);\n      if(ac) {\n        if(!c.isEven() || !d.isEven()) { c.addTo(this,c); d.subTo(m,d); }\n        c.rShiftTo(1,c);\n      }\n      else if(!d.isEven()) d.subTo(m,d);\n      d.rShiftTo(1,d);\n    }\n    if(u.compareTo(v) >= 0) {\n      u.subTo(v,u);\n      if(ac) a.subTo(c,a);\n      b.subTo(d,b);\n    }\n    else {\n      v.subTo(u,v);\n      if(ac) c.subTo(a,c);\n      d.subTo(b,d);\n    }\n  }\n  if(v.compareTo(BigInteger.ONE) != 0) return BigInteger.ZERO;\n  if(d.compareTo(m) >= 0) return d.subtract(m);\n  if(d.signum() < 0) d.addTo(m,d); else return d;\n  if(d.signum() < 0) return d.add(m); else return d;\n}\n\nvar lowprimes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997];\nvar lplim = (1<<26)/lowprimes[lowprimes.length-1];\n\n// (public) test primality with certainty >= 1-.5^t\nfunction bnIsProbablePrime(t) {\n  var i, x = this.abs();\n  if(x.t == 1 && x[0] <= lowprimes[lowprimes.length-1]) {\n    for(i = 0; i < lowprimes.length; ++i)\n      if(x[0] == lowprimes[i]) return true;\n    return false;\n  }\n  if(x.isEven()) return false;\n  i = 1;\n  while(i < lowprimes.length) {\n    var m = lowprimes[i], j = i+1;\n    while(j < lowprimes.length && m < lplim) m *= lowprimes[j++];\n    m = x.modInt(m);\n    while(i < j) if(m%lowprimes[i++] == 0) return false;\n  }\n  return x.millerRabin(t);\n}\n\n// (protected) true if probably prime (HAC 4.24, Miller-Rabin)\nfunction bnpMillerRabin(t) {\n  var n1 = this.subtract(BigInteger.ONE);\n  var k = n1.getLowestSetBit();\n  if(k <= 0) return false;\n  var r = n1.shiftRight(k);\n  t = (t+1)>>1;\n  if(t > lowprimes.length) t = lowprimes.length;\n  var a = nbi();\n  for(var i = 0; i < t; ++i) {\n    //Pick bases at random, instead of starting at 2\n    a.fromInt(lowprimes[Math.floor(Math.random()*lowprimes.length)]);\n    var y = a.modPow(r,this);\n    if(y.compareTo(BigInteger.ONE) != 0 && y.compareTo(n1) != 0) {\n      var j = 1;\n      while(j++ < k && y.compareTo(n1) != 0) {\n        y = y.modPowInt(2,this);\n        if(y.compareTo(BigInteger.ONE) == 0) return false;\n      }\n      if(y.compareTo(n1) != 0) return false;\n    }\n  }\n  return true;\n}\n\n// protected\nBigInteger.prototype.chunkSize = bnpChunkSize;\nBigInteger.prototype.toRadix = bnpToRadix;\nBigInteger.prototype.fromRadix = bnpFromRadix;\nBigInteger.prototype.fromNumber = bnpFromNumber;\nBigInteger.prototype.bitwiseTo = bnpBitwiseTo;\nBigInteger.prototype.changeBit = bnpChangeBit;\nBigInteger.prototype.addTo = bnpAddTo;\nBigInteger.prototype.dMultiply = bnpDMultiply;\nBigInteger.prototype.dAddOffset = bnpDAddOffset;\nBigInteger.prototype.multiplyLowerTo = bnpMultiplyLowerTo;\nBigInteger.prototype.multiplyUpperTo = bnpMultiplyUpperTo;\nBigInteger.prototype.modInt = bnpModInt;\nBigInteger.prototype.millerRabin = bnpMillerRabin;\n\n// public\nBigInteger.prototype.clone = bnClone;\nBigInteger.prototype.intValue = bnIntValue;\nBigInteger.prototype.byteValue = bnByteValue;\nBigInteger.prototype.shortValue = bnShortValue;\nBigInteger.prototype.signum = bnSigNum;\nBigInteger.prototype.toByteArray = bnToByteArray;\nBigInteger.prototype.equals = bnEquals;\nBigInteger.prototype.min = bnMin;\nBigInteger.prototype.max = bnMax;\nBigInteger.prototype.and = bnAnd;\nBigInteger.prototype.or = bnOr;\nBigInteger.prototype.xor = bnXor;\nBigInteger.prototype.andNot = bnAndNot;\nBigInteger.prototype.not = bnNot;\nBigInteger.prototype.shiftLeft = bnShiftLeft;\nBigInteger.prototype.shiftRight = bnShiftRight;\nBigInteger.prototype.getLowestSetBit = bnGetLowestSetBit;\nBigInteger.prototype.bitCount = bnBitCount;\nBigInteger.prototype.testBit = bnTestBit;\nBigInteger.prototype.setBit = bnSetBit;\nBigInteger.prototype.clearBit = bnClearBit;\nBigInteger.prototype.flipBit = bnFlipBit;\nBigInteger.prototype.add = bnAdd;\nBigInteger.prototype.subtract = bnSubtract;\nBigInteger.prototype.multiply = bnMultiply;\nBigInteger.prototype.divide = bnDivide;\nBigInteger.prototype.remainder = bnRemainder;\nBigInteger.prototype.divideAndRemainder = bnDivideAndRemainder;\nBigInteger.prototype.modPow = bnModPow;\nBigInteger.prototype.modInverse = bnModInverse;\nBigInteger.prototype.pow = bnPow;\nBigInteger.prototype.gcd = bnGCD;\nBigInteger.prototype.isProbablePrime = bnIsProbablePrime;\n\n// JSBN-specific extension\nBigInteger.prototype.square = bnSquare;\n\n// BigInteger interfaces not implemented in jsbn:\n\n// BigInteger(int signum, byte[] magnitude)\n// double doubleValue()\n// float floatValue()\n// int hashCode()\n// long longValue()\n// static BigInteger valueOf(long val)\n\n\n\n\n\n// Copyright 2009 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Defines a Long class for representing a 64-bit two's-complement\n * integer value, which faithfully simulates the behavior of a Java \"long\". This\n * implementation is derived from LongLib in GWT.\n *\n */\n\n/**\n * This file also contains some modifications by Igor Zhukov in order to add custom scrollbars to EmojiMenu\n * See keyword `MODIFICATION` in source code.\n */\n\n/*! MODIFICATION\nThe following line was added by Igor Zhukov in order to make library compatibile with other app parts\n*/\nlet goog = {provide: function () {}, math: {}};\n\n\ngoog.provide('goog.math.Long');\n\n\n\n/**\n * Constructs a 64-bit two's-complement integer, given its low and high 32-bit\n * values as *signed* integers.  See the from* functions below for more\n * convenient ways of constructing Longs.\n *\n * The internal representation of a long is the two given signed, 32-bit values.\n * We use 32-bit pieces because these are the size of integers on which\n * Javascript performs bit-operations.  For operations like addition and\n * multiplication, we split each number into 16-bit pieces, which can easily be\n * multiplied within Javascript's floating-point representation without overflow\n * or change in sign.\n *\n * In the algorithms below, we frequently reduce the negative case to the\n * positive case by negating the input(s) and then post-processing the result.\n * Note that we must ALWAYS check specially whether those values are MIN_VALUE\n * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\n * a positive number, it overflows back into a negative).  Not handling this\n * case would often result in infinite recursion.\n *\n * @param {number} low  The low (signed) 32 bits of the long.\n * @param {number} high  The high (signed) 32 bits of the long.\n * @constructor\n */\ngoog.math.Long = function(low, high) {\n  /**\n   * @type {number}\n   * @private\n   */\n  this.low_ = low | 0;  // force into 32 signed bits.\n\n  /**\n   * @type {number}\n   * @private\n   */\n  this.high_ = high | 0;  // force into 32 signed bits.\n};\n\n\n// NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the\n// from* methods on which they depend.\n\n\n/**\n * A cache of the Long representations of small integer values.\n * @type {!Object}\n * @private\n */\ngoog.math.Long.IntCache_ = {};\n\n\n/**\n * Returns a Long representing the given (32-bit) integer value.\n * @param {number} value The 32-bit integer in question.\n * @return {!goog.math.Long} The corresponding Long value.\n */\ngoog.math.Long.fromInt = function(value) {\n  if (-128 <= value && value < 128) {\n    var cachedObj = goog.math.Long.IntCache_[value];\n    if (cachedObj) {\n      return cachedObj;\n    }\n  }\n\n  var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);\n  if (-128 <= value && value < 128) {\n    goog.math.Long.IntCache_[value] = obj;\n  }\n  return obj;\n};\n\n\n/**\n * Returns a Long representing the given value, provided that it is a finite\n * number.  Otherwise, zero is returned.\n * @param {number} value The number in question.\n * @return {!goog.math.Long} The corresponding Long value.\n */\ngoog.math.Long.fromNumber = function(value) {\n  if (isNaN(value) || !isFinite(value)) {\n    return goog.math.Long.ZERO;\n  } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {\n    return goog.math.Long.MIN_VALUE;\n  } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {\n    return goog.math.Long.MAX_VALUE;\n  } else if (value < 0) {\n    return goog.math.Long.fromNumber(-value).negate();\n  } else {\n    return new goog.math.Long(\n      (value % goog.math.Long.TWO_PWR_32_DBL_) | 0,\n      (value / goog.math.Long.TWO_PWR_32_DBL_) | 0);\n  }\n};\n\n\n/**\n * Returns a Long representing the 64-bit integer that comes by concatenating\n * the given high and low bits.  Each is assumed to use 32 bits.\n * @param {number} lowBits The low 32-bits.\n * @param {number} highBits The high 32-bits.\n * @return {!goog.math.Long} The corresponding Long value.\n */\ngoog.math.Long.fromBits = function(lowBits, highBits) {\n  return new goog.math.Long(lowBits, highBits);\n};\n\n\n/**\n * Returns a Long representation of the given string, written using the given\n * radix.\n * @param {string} str The textual representation of the Long.\n * @param {number=} opt_radix The radix in which the text is written.\n * @return {!goog.math.Long} The corresponding Long value.\n */\ngoog.math.Long.fromString = function(str, opt_radix) {\n  if (str.length == 0) {\n    throw Error('number format error: empty string');\n  }\n\n  var radix = opt_radix || 10;\n  if (radix < 2 || 36 < radix) {\n    throw Error('radix out of range: ' + radix);\n  }\n\n  if (str.charAt(0) == '-') {\n    return goog.math.Long.fromString(str.substring(1), radix).negate();\n  } else if (str.indexOf('-') >= 0) {\n    throw Error('number format error: interior \"-\" character: ' + str);\n  }\n\n  // Do several (8) digits each time through the loop, so as to\n  // minimize the calls to the very expensive emulated div.\n  var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));\n\n  var result = goog.math.Long.ZERO;\n  for (var i = 0; i < str.length; i += 8) {\n    var size = Math.min(8, str.length - i);\n    var value = parseInt(str.substring(i, i + size), radix);\n    if (size < 8) {\n      var power = goog.math.Long.fromNumber(Math.pow(radix, size));\n      result = result.multiply(power).add(goog.math.Long.fromNumber(value));\n    } else {\n      result = result.multiply(radixToPower);\n      result = result.add(goog.math.Long.fromNumber(value));\n    }\n  }\n  return result;\n};\n\n\n// NOTE: the compiler should inline these constant values below and then remove\n// these variables, so there should be no runtime penalty for these.\n\n\n/**\n * Number used repeated below in calculations.  This must appear before the\n * first call to any from* function below.\n * @type {number}\n * @private\n */\ngoog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;\n\n\n/**\n * @type {number}\n * @private\n */\ngoog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;\n\n\n/**\n * @type {number}\n * @private\n */\ngoog.math.Long.TWO_PWR_32_DBL_ =\n  goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;\n\n\n/**\n * @type {number}\n * @private\n */\ngoog.math.Long.TWO_PWR_31_DBL_ =\n  goog.math.Long.TWO_PWR_32_DBL_ / 2;\n\n\n/**\n * @type {number}\n * @private\n */\ngoog.math.Long.TWO_PWR_48_DBL_ =\n  goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;\n\n\n/**\n * @type {number}\n * @private\n */\ngoog.math.Long.TWO_PWR_64_DBL_ =\n  goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;\n\n\n/**\n * @type {number}\n * @private\n */\ngoog.math.Long.TWO_PWR_63_DBL_ =\n  goog.math.Long.TWO_PWR_64_DBL_ / 2;\n\n\n/** @type {!goog.math.Long} */\ngoog.math.Long.ZERO = goog.math.Long.fromInt(0);\n\n\n/** @type {!goog.math.Long} */\ngoog.math.Long.ONE = goog.math.Long.fromInt(1);\n\n\n/** @type {!goog.math.Long} */\ngoog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);\n\n\n/** @type {!goog.math.Long} */\ngoog.math.Long.MAX_VALUE =\n  goog.math.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);\n\n\n/** @type {!goog.math.Long} */\ngoog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 0x80000000 | 0);\n\n\n/**\n * @type {!goog.math.Long}\n * @private\n */\ngoog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);\n\n\n/** @return {number} The value, assuming it is a 32-bit integer. */\ngoog.math.Long.prototype.toInt = function() {\n  return this.low_;\n};\n\n\n/** @return {number} The closest floating-point representation to this value. */\ngoog.math.Long.prototype.toNumber = function() {\n  return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ +\n    this.getLowBitsUnsigned();\n};\n\n\n/**\n * @param {number=} opt_radix The radix in which the text should be written.\n * @return {string} The textual representation of this value.\n * @override\n */\ngoog.math.Long.prototype.toString = function(opt_radix) {\n  var radix = opt_radix || 10;\n  if (radix < 2 || 36 < radix) {\n    throw Error('radix out of range: ' + radix);\n  }\n\n  if (this.isZero()) {\n    return '0';\n  }\n\n  if (this.isNegative()) {\n    if (this.equals(goog.math.Long.MIN_VALUE)) {\n      // We need to change the Long value before it can be negated, so we remove\n      // the bottom-most digit in this base and then recurse to do the rest.\n      var radixLong = goog.math.Long.fromNumber(radix);\n      var div = this.div(radixLong);\n      var rem = div.multiply(radixLong).subtract(this);\n      return div.toString(radix) + rem.toInt().toString(radix);\n    } else {\n      return '-' + this.negate().toString(radix);\n    }\n  }\n\n  // Do several (6) digits each time through the loop, so as to\n  // minimize the calls to the very expensive emulated div.\n  var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));\n\n  var rem = this;\n  var result = '';\n  while (true) {\n    var remDiv = rem.div(radixToPower);\n    var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();\n    var digits = intval.toString(radix);\n\n    rem = remDiv;\n    if (rem.isZero()) {\n      return digits + result;\n    } else {\n      while (digits.length < 6) {\n        digits = '0' + digits;\n      }\n      result = '' + digits + result;\n    }\n  }\n};\n\n\n/** @return {number} The high 32-bits as a signed value. */\ngoog.math.Long.prototype.getHighBits = function() {\n  return this.high_;\n};\n\n\n/** @return {number} The low 32-bits as a signed value. */\ngoog.math.Long.prototype.getLowBits = function() {\n  return this.low_;\n};\n\n\n/** @return {number} The low 32-bits as an unsigned value. */\ngoog.math.Long.prototype.getLowBitsUnsigned = function() {\n  return (this.low_ >= 0) ?\n    this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;\n};\n\n\n/**\n * @return {number} Returns the number of bits needed to represent the absolute\n *     value of this Long.\n */\ngoog.math.Long.prototype.getNumBitsAbs = function() {\n  if (this.isNegative()) {\n    if (this.equals(goog.math.Long.MIN_VALUE)) {\n      return 64;\n    } else {\n      return this.negate().getNumBitsAbs();\n    }\n  } else {\n    var val = this.high_ != 0 ? this.high_ : this.low_;\n    for (var bit = 31; bit > 0; bit--) {\n      if ((val & (1 << bit)) != 0) {\n        break;\n      }\n    }\n    return this.high_ != 0 ? bit + 33 : bit + 1;\n  }\n};\n\n\n/** @return {boolean} Whether this value is zero. */\ngoog.math.Long.prototype.isZero = function() {\n  return this.high_ == 0 && this.low_ == 0;\n};\n\n\n/** @return {boolean} Whether this value is negative. */\ngoog.math.Long.prototype.isNegative = function() {\n  return this.high_ < 0;\n};\n\n\n/** @return {boolean} Whether this value is odd. */\ngoog.math.Long.prototype.isOdd = function() {\n  return (this.low_ & 1) == 1;\n};\n\n\n/**\n * @param {goog.math.Long} other Long to compare against.\n * @return {boolean} Whether this Long equals the other.\n */\ngoog.math.Long.prototype.equals = function(other) {\n  return (this.high_ == other.high_) && (this.low_ == other.low_);\n};\n\n\n/**\n * @param {goog.math.Long} other Long to compare against.\n * @return {boolean} Whether this Long does not equal the other.\n */\ngoog.math.Long.prototype.notEquals = function(other) {\n  return (this.high_ != other.high_) || (this.low_ != other.low_);\n};\n\n\n/**\n * @param {goog.math.Long} other Long to compare against.\n * @return {boolean} Whether this Long is less than the other.\n */\ngoog.math.Long.prototype.lessThan = function(other) {\n  return this.compare(other) < 0;\n};\n\n\n/**\n * @param {goog.math.Long} other Long to compare against.\n * @return {boolean} Whether this Long is less than or equal to the other.\n */\ngoog.math.Long.prototype.lessThanOrEqual = function(other) {\n  return this.compare(other) <= 0;\n};\n\n\n/**\n * @param {goog.math.Long} other Long to compare against.\n * @return {boolean} Whether this Long is greater than the other.\n */\ngoog.math.Long.prototype.greaterThan = function(other) {\n  return this.compare(other) > 0;\n};\n\n\n/**\n * @param {goog.math.Long} other Long to compare against.\n * @return {boolean} Whether this Long is greater than or equal to the other.\n */\ngoog.math.Long.prototype.greaterThanOrEqual = function(other) {\n  return this.compare(other) >= 0;\n};\n\n\n/**\n * Compares this Long with the given one.\n * @param {goog.math.Long} other Long to compare against.\n * @return {number} 0 if they are the same, 1 if the this is greater, and -1\n *     if the given one is greater.\n */\ngoog.math.Long.prototype.compare = function(other) {\n  if (this.equals(other)) {\n    return 0;\n  }\n\n  var thisNeg = this.isNegative();\n  var otherNeg = other.isNegative();\n  if (thisNeg && !otherNeg) {\n    return -1;\n  }\n  if (!thisNeg && otherNeg) {\n    return 1;\n  }\n\n  // at this point, the signs are the same, so subtraction will not overflow\n  if (this.subtract(other).isNegative()) {\n    return -1;\n  } else {\n    return 1;\n  }\n};\n\n\n/** @return {!goog.math.Long} The negation of this value. */\ngoog.math.Long.prototype.negate = function() {\n  if (this.equals(goog.math.Long.MIN_VALUE)) {\n    return goog.math.Long.MIN_VALUE;\n  } else {\n    return this.not().add(goog.math.Long.ONE);\n  }\n};\n\n\n/**\n * Returns the sum of this and the given Long.\n * @param {goog.math.Long} other Long to add to this one.\n * @return {!goog.math.Long} The sum of this and the given Long.\n */\ngoog.math.Long.prototype.add = function(other) {\n  // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\n\n  var a48 = this.high_ >>> 16;\n  var a32 = this.high_ & 0xFFFF;\n  var a16 = this.low_ >>> 16;\n  var a00 = this.low_ & 0xFFFF;\n\n  var b48 = other.high_ >>> 16;\n  var b32 = other.high_ & 0xFFFF;\n  var b16 = other.low_ >>> 16;\n  var b00 = other.low_ & 0xFFFF;\n\n  var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\n  c00 += a00 + b00;\n  c16 += c00 >>> 16;\n  c00 &= 0xFFFF;\n  c16 += a16 + b16;\n  c32 += c16 >>> 16;\n  c16 &= 0xFFFF;\n  c32 += a32 + b32;\n  c48 += c32 >>> 16;\n  c32 &= 0xFFFF;\n  c48 += a48 + b48;\n  c48 &= 0xFFFF;\n  return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);\n};\n\n\n/**\n * Returns the difference of this and the given Long.\n * @param {goog.math.Long} other Long to subtract from this.\n * @return {!goog.math.Long} The difference of this and the given Long.\n */\ngoog.math.Long.prototype.subtract = function(other) {\n  return this.add(other.negate());\n};\n\n\n/**\n * Returns the product of this and the given long.\n * @param {goog.math.Long} other Long to multiply with this.\n * @return {!goog.math.Long} The product of this and the other.\n */\ngoog.math.Long.prototype.multiply = function(other) {\n  if (this.isZero()) {\n    return goog.math.Long.ZERO;\n  } else if (other.isZero()) {\n    return goog.math.Long.ZERO;\n  }\n\n  if (this.equals(goog.math.Long.MIN_VALUE)) {\n    return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;\n  } else if (other.equals(goog.math.Long.MIN_VALUE)) {\n    return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;\n  }\n\n  if (this.isNegative()) {\n    if (other.isNegative()) {\n      return this.negate().multiply(other.negate());\n    } else {\n      return this.negate().multiply(other).negate();\n    }\n  } else if (other.isNegative()) {\n    return this.multiply(other.negate()).negate();\n  }\n\n  // If both longs are small, use float multiplication\n  if (this.lessThan(goog.math.Long.TWO_PWR_24_) &&\n    other.lessThan(goog.math.Long.TWO_PWR_24_)) {\n    return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());\n  }\n\n  // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\n  // We can skip products that would overflow.\n\n  var a48 = this.high_ >>> 16;\n  var a32 = this.high_ & 0xFFFF;\n  var a16 = this.low_ >>> 16;\n  var a00 = this.low_ & 0xFFFF;\n\n  var b48 = other.high_ >>> 16;\n  var b32 = other.high_ & 0xFFFF;\n  var b16 = other.low_ >>> 16;\n  var b00 = other.low_ & 0xFFFF;\n\n  var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\n  c00 += a00 * b00;\n  c16 += c00 >>> 16;\n  c00 &= 0xFFFF;\n  c16 += a16 * b00;\n  c32 += c16 >>> 16;\n  c16 &= 0xFFFF;\n  c16 += a00 * b16;\n  c32 += c16 >>> 16;\n  c16 &= 0xFFFF;\n  c32 += a32 * b00;\n  c48 += c32 >>> 16;\n  c32 &= 0xFFFF;\n  c32 += a16 * b16;\n  c48 += c32 >>> 16;\n  c32 &= 0xFFFF;\n  c32 += a00 * b32;\n  c48 += c32 >>> 16;\n  c32 &= 0xFFFF;\n  c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n  c48 &= 0xFFFF;\n  return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);\n};\n\n\n/**\n * Returns this Long divided by the given one.\n * @param {goog.math.Long} other Long by which to divide.\n * @return {!goog.math.Long} This Long divided by the given one.\n */\ngoog.math.Long.prototype.div = function(other) {\n  if (other.isZero()) {\n    throw Error('division by zero');\n  } else if (this.isZero()) {\n    return goog.math.Long.ZERO;\n  }\n\n  if (this.equals(goog.math.Long.MIN_VALUE)) {\n    if (other.equals(goog.math.Long.ONE) ||\n      other.equals(goog.math.Long.NEG_ONE)) {\n      return goog.math.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\n    } else if (other.equals(goog.math.Long.MIN_VALUE)) {\n      return goog.math.Long.ONE;\n    } else {\n      // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\n      var halfThis = this.shiftRight(1);\n      var approx = halfThis.div(other).shiftLeft(1);\n      if (approx.equals(goog.math.Long.ZERO)) {\n        return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;\n      } else {\n        var rem = this.subtract(other.multiply(approx));\n        var result = approx.add(rem.div(other));\n        return result;\n      }\n    }\n  } else if (other.equals(goog.math.Long.MIN_VALUE)) {\n    return goog.math.Long.ZERO;\n  }\n\n  if (this.isNegative()) {\n    if (other.isNegative()) {\n      return this.negate().div(other.negate());\n    } else {\n      return this.negate().div(other).negate();\n    }\n  } else if (other.isNegative()) {\n    return this.div(other.negate()).negate();\n  }\n\n  // Repeat the following until the remainder is less than other:  find a\n  // floating-point that approximates remainder / other *from below*, add this\n  // into the result, and subtract it from the remainder.  It is critical that\n  // the approximate value is less than or equal to the real value so that the\n  // remainder never becomes negative.\n  var res = goog.math.Long.ZERO;\n  var rem = this;\n  while (rem.greaterThanOrEqual(other)) {\n    // Approximate the result of division. This may be a little greater or\n    // smaller than the actual value.\n    var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));\n\n    // We will tweak the approximate result by changing it in the 48-th digit or\n    // the smallest non-fractional digit, whichever is larger.\n    var log2 = Math.ceil(Math.log(approx) / Math.LN2);\n    var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);\n\n    // Decrease the approximation until it is smaller than the remainder.  Note\n    // that if it is too large, the product overflows and is negative.\n    var approxRes = goog.math.Long.fromNumber(approx);\n    var approxRem = approxRes.multiply(other);\n    while (approxRem.isNegative() || approxRem.greaterThan(rem)) {\n      approx -= delta;\n      approxRes = goog.math.Long.fromNumber(approx);\n      approxRem = approxRes.multiply(other);\n    }\n\n    // We know the answer can't be zero... and actually, zero would cause\n    // infinite recursion since we would make no progress.\n    if (approxRes.isZero()) {\n      approxRes = goog.math.Long.ONE;\n    }\n\n    res = res.add(approxRes);\n    rem = rem.subtract(approxRem);\n  }\n  return res;\n};\n\n\n/**\n * Returns this Long modulo the given one.\n * @param {goog.math.Long} other Long by which to mod.\n * @return {!goog.math.Long} This Long modulo the given one.\n */\ngoog.math.Long.prototype.modulo = function(other) {\n  return this.subtract(this.div(other).multiply(other));\n};\n\n\n/** @return {!goog.math.Long} The bitwise-NOT of this value. */\ngoog.math.Long.prototype.not = function() {\n  return goog.math.Long.fromBits(~this.low_, ~this.high_);\n};\n\n\n/**\n * Returns the bitwise-AND of this Long and the given one.\n * @param {goog.math.Long} other The Long with which to AND.\n * @return {!goog.math.Long} The bitwise-AND of this and the other.\n */\ngoog.math.Long.prototype.and = function(other) {\n  return goog.math.Long.fromBits(this.low_ & other.low_,\n    this.high_ & other.high_);\n};\n\n\n/**\n * Returns the bitwise-OR of this Long and the given one.\n * @param {goog.math.Long} other The Long with which to OR.\n * @return {!goog.math.Long} The bitwise-OR of this and the other.\n */\ngoog.math.Long.prototype.or = function(other) {\n  return goog.math.Long.fromBits(this.low_ | other.low_,\n    this.high_ | other.high_);\n};\n\n\n/**\n * Returns the bitwise-XOR of this Long and the given one.\n * @param {goog.math.Long} other The Long with which to XOR.\n * @return {!goog.math.Long} The bitwise-XOR of this and the other.\n */\ngoog.math.Long.prototype.xor = function(other) {\n  return goog.math.Long.fromBits(this.low_ ^ other.low_,\n    this.high_ ^ other.high_);\n};\n\n\n/**\n * Returns this Long with bits shifted to the left by the given amount.\n * @param {number} numBits The number of bits by which to shift.\n * @return {!goog.math.Long} This shifted to the left by the given amount.\n */\ngoog.math.Long.prototype.shiftLeft = function(numBits) {\n  numBits &= 63;\n  if (numBits == 0) {\n    return this;\n  } else {\n    var low = this.low_;\n    if (numBits < 32) {\n      var high = this.high_;\n      return goog.math.Long.fromBits(\n        low << numBits,\n        (high << numBits) | (low >>> (32 - numBits)));\n    } else {\n      return goog.math.Long.fromBits(0, low << (numBits - 32));\n    }\n  }\n};\n\n\n/**\n * Returns this Long with bits shifted to the right by the given amount.\n * @param {number} numBits The number of bits by which to shift.\n * @return {!goog.math.Long} This shifted to the right by the given amount.\n */\ngoog.math.Long.prototype.shiftRight = function(numBits) {\n  numBits &= 63;\n  if (numBits == 0) {\n    return this;\n  } else {\n    var high = this.high_;\n    if (numBits < 32) {\n      var low = this.low_;\n      return goog.math.Long.fromBits(\n        (low >>> numBits) | (high << (32 - numBits)),\n        high >> numBits);\n    } else {\n      return goog.math.Long.fromBits(\n        high >> (numBits - 32),\n        high >= 0 ? 0 : -1);\n    }\n  }\n};\n\n\n/**\n * Returns this Long with bits shifted to the right by the given amount, with\n * the new top bits matching the current sign bit.\n * @param {number} numBits The number of bits by which to shift.\n * @return {!goog.math.Long} This shifted to the right by the given amount, with\n *     zeros placed into the new leading bits.\n */\ngoog.math.Long.prototype.shiftRightUnsigned = function(numBits) {\n  numBits &= 63;\n  if (numBits == 0) {\n    return this;\n  } else {\n    var high = this.high_;\n    if (numBits < 32) {\n      var low = this.low_;\n      return goog.math.Long.fromBits(\n        (low >>> numBits) | (high << (32 - numBits)),\n        high >>> numBits);\n    } else if (numBits == 32) {\n      return goog.math.Long.fromBits(high, 0);\n    } else {\n      return goog.math.Long.fromBits(high >>> (numBits - 32), 0);\n    }\n  }\n};\n\n\n\n\n})();         // End scoping function\n\nconst rsaEncrypt = toExport.rsaEncrypt;\nconst aesDecryptSync = toExport.aesDecryptSync;\nconst bytesModPow = toExport.bytesModPow;\nconst aesEncryptSync = toExport.aesEncryptSync;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utils/bin_utils.js\n");

/***/ }),

/***/ "./src/utils/crypto.js":
/*!*****************************!*\
  !*** ./src/utils/crypto.js ***!
  \*****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/*\nCryptoJS v3.1.2\ncode.google.com/p/crypto-js\n(c) 2009-2013 by Jeff Mott. All rights reserved.\ncode.google.com/p/crypto-js/wiki/License\n*/\n/**\n * CryptoJS core components.\n */\n\n\n\n\nvar CryptoJS = (function (Math, undefined) {\n  /**\n   * CryptoJS namespace.\n   */\n  var C = {};\n\n  /**\n   * Library namespace.\n   */\n  var C_lib = C.lib = {};\n\n  /**\n   * Base object for prototypal inheritance.\n   */\n  var Base = C_lib.Base = (function () {\n    function F() {}\n\n    return {\n      /**\n       * Creates a new object that inherits from this object.\n       *\n       * @param {Object} overrides Properties to copy into the new object.\n       *\n       * @return {Object} The new object.\n       *\n       * @static\n       *\n       * @example\n       *\n       *     var MyType = CryptoJS.lib.Base.extend({\n       *         field: 'value',\n       *\n       *         method: function () {\n       *         }\n       *     });\n       */\n      extend: function (overrides) {\n        // Spawn\n        F.prototype = this;\n        var subtype = new F();\n\n        // Augment\n        if (overrides) {\n          subtype.mixIn(overrides);\n        }\n\n        // Create default initializer\n        if (!subtype.hasOwnProperty('init')) {\n          subtype.init = function () {\n            subtype.$super.init.apply(this, arguments);\n          };\n        }\n\n        // Initializer's prototype is the subtype object\n        subtype.init.prototype = subtype;\n\n        // Reference supertype\n        subtype.$super = this;\n\n        return subtype;\n      },\n\n      /**\n       * Extends this object and runs the init method.\n       * Arguments to create() will be passed to init().\n       *\n       * @return {Object} The new object.\n       *\n       * @static\n       *\n       * @example\n       *\n       *     var instance = MyType.create();\n       */\n      create: function () {\n        var instance = this.extend();\n        instance.init.apply(instance, arguments);\n\n        return instance;\n      },\n\n      /**\n       * Initializes a newly created object.\n       * Override this method to add some logic when your objects are created.\n       *\n       * @example\n       *\n       *     var MyType = CryptoJS.lib.Base.extend({\n       *         init: function () {\n       *             // ...\n       *         }\n       *     });\n       */\n      init: function () {\n      },\n\n      /**\n       * Copies properties into this object.\n       *\n       * @param {Object} properties The properties to mix in.\n       *\n       * @example\n       *\n       *     MyType.mixIn({\n       *         field: 'value'\n       *     });\n       */\n      mixIn: function (properties) {\n        for (var propertyName in properties) {\n          if (properties.hasOwnProperty(propertyName)) {\n            this[propertyName] = properties[propertyName];\n          }\n        }\n\n        // IE won't copy toString using the loop above\n        if (properties.hasOwnProperty('toString')) {\n          this.toString = properties.toString;\n        }\n      },\n\n      /**\n       * Creates a copy of this object.\n       *\n       * @return {Object} The clone.\n       *\n       * @example\n       *\n       *     var clone = instance.clone();\n       */\n      clone: function () {\n        return this.init.prototype.extend(this);\n      }\n    };\n  }());\n\n  /**\n   * An array of 32-bit words.\n   *\n   * @property {Array} words The array of 32-bit words.\n   * @property {number} sigBytes The number of significant bytes in this word array.\n   */\n  var WordArray = C_lib.WordArray = Base.extend({\n    /**\n     * Initializes a newly created word array.\n     *\n     * @param {Array} words (Optional) An array of 32-bit words.\n     * @param {number} sigBytes (Optional) The number of significant bytes in the words.\n     *\n     * @example\n     *\n     *     var wordArray = CryptoJS.lib.WordArray.create();\n     *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);\n     *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);\n     */\n    init: function (words, sigBytes) {\n      words = this.words = words || [];\n\n      if (sigBytes != undefined) {\n        this.sigBytes = sigBytes;\n      } else {\n        this.sigBytes = words.length * 4;\n      }\n    },\n\n    /**\n     * Converts this word array to a string.\n     *\n     * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex\n     *\n     * @return {string} The stringified word array.\n     *\n     * @example\n     *\n     *     var string = wordArray + '';\n     *     var string = wordArray.toString();\n     *     var string = wordArray.toString(CryptoJS.enc.Utf8);\n     */\n    toString: function (encoder) {\n      return (encoder || Hex).stringify(this);\n    },\n\n    /**\n     * Concatenates a word array to this word array.\n     *\n     * @param {WordArray} wordArray The word array to append.\n     *\n     * @return {WordArray} This word array.\n     *\n     * @example\n     *\n     *     wordArray1.concat(wordArray2);\n     */\n    concat: function (wordArray) {\n      // Shortcuts\n      var thisWords = this.words;\n      var thatWords = wordArray.words;\n      var thisSigBytes = this.sigBytes;\n      var thatSigBytes = wordArray.sigBytes;\n\n      // Clamp excess bits\n      this.clamp();\n\n      // Concat\n      if (thisSigBytes % 4) {\n        // Copy one byte at a time\n        for (var i = 0; i < thatSigBytes; i++) {\n          var thatByte = (thatWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n          thisWords[(thisSigBytes + i) >>> 2] |= thatByte << (24 - ((thisSigBytes + i) % 4) * 8);\n        }\n      } else if (thatWords.length > 0xffff) {\n        // Copy one word at a time\n        for (var i = 0; i < thatSigBytes; i += 4) {\n          thisWords[(thisSigBytes + i) >>> 2] = thatWords[i >>> 2];\n        }\n      } else {\n        // Copy all words at once\n        // thisWords.push.apply(thisWords, thatWords);\n\n        // HOTFIX from: https://code.google.com/p/crypto-js/issues/detail?id=90\n        for (var i = 0; i < thatWords.length; i++) {\n          thisWords.push(thatWords[i]);\n        }\n      }\n      this.sigBytes += thatSigBytes;\n\n      // Chainable\n      return this;\n    },\n\n    /**\n     * Removes insignificant bits.\n     *\n     * @example\n     *\n     *     wordArray.clamp();\n     */\n    clamp: function () {\n      // Shortcuts\n      var words = this.words;\n      var sigBytes = this.sigBytes;\n\n      // Clamp\n      words[sigBytes >>> 2] &= 0xffffffff << (32 - (sigBytes % 4) * 8);\n      words.length = Math.ceil(sigBytes / 4);\n    },\n\n    /**\n     * Creates a copy of this word array.\n     *\n     * @return {WordArray} The clone.\n     *\n     * @example\n     *\n     *     var clone = wordArray.clone();\n     */\n    clone: function () {\n      var clone = Base.clone.call(this);\n      clone.words = this.words.slice(0);\n\n      return clone;\n    },\n\n    /**\n     * Creates a word array filled with random bytes.\n     *\n     * @param {number} nBytes The number of random bytes to generate.\n     *\n     * @return {WordArray} The random word array.\n     *\n     * @static\n     *\n     * @example\n     *\n     *     var wordArray = CryptoJS.lib.WordArray.random(16);\n     */\n    random: function (nBytes) {\n      var words = [];\n      for (var i = 0; i < nBytes; i += 4) {\n        words.push((Math.random() * 0x100000000) | 0);\n      }\n\n      return new WordArray.init(words, nBytes);\n    }\n  });\n\n  /**\n   * Encoder namespace.\n   */\n  var C_enc = C.enc = {};\n\n  /**\n   * Hex encoding strategy.\n   */\n  var Hex = C_enc.Hex = {\n    /**\n     * Converts a word array to a hex string.\n     *\n     * @param {WordArray} wordArray The word array.\n     *\n     * @return {string} The hex string.\n     *\n     * @static\n     *\n     * @example\n     *\n     *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);\n     */\n    stringify: function (wordArray) {\n      // Shortcuts\n      var words = wordArray.words;\n      var sigBytes = wordArray.sigBytes;\n\n      // Convert\n      var hexChars = [];\n      for (var i = 0; i < sigBytes; i++) {\n        var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n        hexChars.push((bite >>> 4).toString(16));\n        hexChars.push((bite & 0x0f).toString(16));\n      }\n\n      return hexChars.join('');\n    },\n\n    /**\n     * Converts a hex string to a word array.\n     *\n     * @param {string} hexStr The hex string.\n     *\n     * @return {WordArray} The word array.\n     *\n     * @static\n     *\n     * @example\n     *\n     *     var wordArray = CryptoJS.enc.Hex.parse(hexString);\n     */\n    parse: function (hexStr) {\n      // Shortcut\n      var hexStrLength = hexStr.length;\n\n      // Convert\n      var words = [];\n      for (var i = 0; i < hexStrLength; i += 2) {\n        words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << (24 - (i % 8) * 4);\n      }\n\n      return new WordArray.init(words, hexStrLength / 2);\n    }\n  };\n\n  /**\n   * Latin1 encoding strategy.\n   */\n  var Latin1 = C_enc.Latin1 = {\n    /**\n     * Converts a word array to a Latin1 string.\n     *\n     * @param {WordArray} wordArray The word array.\n     *\n     * @return {string} The Latin1 string.\n     *\n     * @static\n     *\n     * @example\n     *\n     *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);\n     */\n    stringify: function (wordArray) {\n      // Shortcuts\n      var words = wordArray.words;\n      var sigBytes = wordArray.sigBytes;\n\n      // Convert\n      var latin1Chars = [];\n      for (var i = 0; i < sigBytes; i++) {\n        var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n        latin1Chars.push(String.fromCharCode(bite));\n      }\n\n      return latin1Chars.join('');\n    },\n\n    /**\n     * Converts a Latin1 string to a word array.\n     *\n     * @param {string} latin1Str The Latin1 string.\n     *\n     * @return {WordArray} The word array.\n     *\n     * @static\n     *\n     * @example\n     *\n     *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);\n     */\n    parse: function (latin1Str) {\n      // Shortcut\n      var latin1StrLength = latin1Str.length;\n\n      // Convert\n      var words = [];\n      for (var i = 0; i < latin1StrLength; i++) {\n        words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << (24 - (i % 4) * 8);\n      }\n\n      return new WordArray.init(words, latin1StrLength);\n    }\n  };\n\n  /**\n   * UTF-8 encoding strategy.\n   */\n  var Utf8 = C_enc.Utf8 = {\n    /**\n     * Converts a word array to a UTF-8 string.\n     *\n     * @param {WordArray} wordArray The word array.\n     *\n     * @return {string} The UTF-8 string.\n     *\n     * @static\n     *\n     * @example\n     *\n     *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);\n     */\n    stringify: function (wordArray) {\n      try {\n        return decodeURIComponent(escape(Latin1.stringify(wordArray)));\n      } catch (e) {\n        throw new Error('Malformed UTF-8 data');\n      }\n    },\n\n    /**\n     * Converts a UTF-8 string to a word array.\n     *\n     * @param {string} utf8Str The UTF-8 string.\n     *\n     * @return {WordArray} The word array.\n     *\n     * @static\n     *\n     * @example\n     *\n     *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);\n     */\n    parse: function (utf8Str) {\n      return Latin1.parse(unescape(encodeURIComponent(utf8Str)));\n    }\n  };\n\n  /**\n   * Abstract buffered block algorithm template.\n   *\n   * The property blockSize must be implemented in a concrete subtype.\n   *\n   * @property {number} _minBufferSize The number of blocks that should be kept unprocessed in the buffer. Default: 0\n   */\n  var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({\n    /**\n     * Resets this block algorithm's data buffer to its initial state.\n     *\n     * @example\n     *\n     *     bufferedBlockAlgorithm.reset();\n     */\n    reset: function () {\n      // Initial values\n      this._data = new WordArray.init();\n      this._nDataBytes = 0;\n    },\n\n    /**\n     * Adds new data to this block algorithm's buffer.\n     *\n     * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.\n     *\n     * @example\n     *\n     *     bufferedBlockAlgorithm._append('data');\n     *     bufferedBlockAlgorithm._append(wordArray);\n     */\n    _append: function (data) {\n      // Convert string to WordArray, else assume WordArray already\n      if (typeof data == 'string') {\n        data = Utf8.parse(data);\n      }\n\n      // Append\n      this._data.concat(data);\n      this._nDataBytes += data.sigBytes;\n    },\n\n    /**\n     * Processes available data blocks.\n     *\n     * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.\n     *\n     * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.\n     *\n     * @return {WordArray} The processed data.\n     *\n     * @example\n     *\n     *     var processedData = bufferedBlockAlgorithm._process();\n     *     var processedData = bufferedBlockAlgorithm._process(!!'flush');\n     */\n    _process: function (doFlush) {\n      // Shortcuts\n      var data = this._data;\n      var dataWords = data.words;\n      var dataSigBytes = data.sigBytes;\n      var blockSize = this.blockSize;\n      var blockSizeBytes = blockSize * 4;\n\n      // Count blocks ready\n      var nBlocksReady = dataSigBytes / blockSizeBytes;\n      if (doFlush) {\n        // Round up to include partial blocks\n        nBlocksReady = Math.ceil(nBlocksReady);\n      } else {\n        // Round down to include only full blocks,\n        // less the number of blocks that must remain in the buffer\n        nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);\n      }\n\n      // Count words ready\n      var nWordsReady = nBlocksReady * blockSize;\n\n      // Count bytes ready\n      var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes);\n\n      // Process blocks\n      if (nWordsReady) {\n        for (var offset = 0; offset < nWordsReady; offset += blockSize) {\n          // Perform concrete-algorithm logic\n          this._doProcessBlock(dataWords, offset);\n        }\n\n        // Remove processed words\n        var processedWords = dataWords.splice(0, nWordsReady);\n        data.sigBytes -= nBytesReady;\n      }\n\n      // Return processed words\n      return new WordArray.init(processedWords, nBytesReady);\n    },\n\n    /**\n     * Creates a copy of this object.\n     *\n     * @return {Object} The clone.\n     *\n     * @example\n     *\n     *     var clone = bufferedBlockAlgorithm.clone();\n     */\n    clone: function () {\n      var clone = Base.clone.call(this);\n      clone._data = this._data.clone();\n\n      return clone;\n    },\n\n    _minBufferSize: 0\n  });\n\n  /**\n   * Abstract hasher template.\n   *\n   * @property {number} blockSize The number of 32-bit words this hasher operates on. Default: 16 (512 bits)\n   */\n  var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({\n    /**\n     * Configuration options.\n     */\n    cfg: Base.extend(),\n\n    /**\n     * Initializes a newly created hasher.\n     *\n     * @param {Object} cfg (Optional) The configuration options to use for this hash computation.\n     *\n     * @example\n     *\n     *     var hasher = CryptoJS.algo.SHA256.create();\n     */\n    init: function (cfg) {\n      // Apply config defaults\n      this.cfg = this.cfg.extend(cfg);\n\n      // Set initial values\n      this.reset();\n    },\n\n    /**\n     * Resets this hasher to its initial state.\n     *\n     * @example\n     *\n     *     hasher.reset();\n     */\n    reset: function () {\n      // Reset data buffer\n      BufferedBlockAlgorithm.reset.call(this);\n\n      // Perform concrete-hasher logic\n      this._doReset();\n    },\n\n    /**\n     * Updates this hasher with a message.\n     *\n     * @param {WordArray|string} messageUpdate The message to append.\n     *\n     * @return {Hasher} This hasher.\n     *\n     * @example\n     *\n     *     hasher.update('message');\n     *     hasher.update(wordArray);\n     */\n    update: function (messageUpdate) {\n      // Append\n      this._append(messageUpdate);\n\n      // Update the hash\n      this._process();\n\n      // Chainable\n      return this;\n    },\n\n    /**\n     * Finalizes the hash computation.\n     * Note that the finalize operation is effectively a destructive, read-once operation.\n     *\n     * @param {WordArray|string} messageUpdate (Optional) A final message update.\n     *\n     * @return {WordArray} The hash.\n     *\n     * @example\n     *\n     *     var hash = hasher.finalize();\n     *     var hash = hasher.finalize('message');\n     *     var hash = hasher.finalize(wordArray);\n     */\n    finalize: function (messageUpdate) {\n      // Final message update\n      if (messageUpdate) {\n        this._append(messageUpdate);\n      }\n\n      // Perform concrete-hasher logic\n      var hash = this._doFinalize();\n\n      return hash;\n    },\n\n    blockSize: 512/32,\n\n    /**\n     * Creates a shortcut function to a hasher's object interface.\n     *\n     * @param {Hasher} hasher The hasher to create a helper for.\n     *\n     * @return {Function} The shortcut function.\n     *\n     * @static\n     *\n     * @example\n     *\n     *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);\n     */\n    _createHelper: function (hasher) {\n      return function (message, cfg) {\n        return new hasher.init(cfg).finalize(message);\n      };\n    },\n\n    /**\n     * Creates a shortcut function to the HMAC's object interface.\n     *\n     * @param {Hasher} hasher The hasher to use in this HMAC helper.\n     *\n     * @return {Function} The shortcut function.\n     *\n     * @static\n     *\n     * @example\n     *\n     *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);\n     */\n    _createHmacHelper: function (hasher) {\n      return function (message, key) {\n        return new C_algo.HMAC.init(hasher, key).finalize(message);\n      };\n    }\n  });\n\n  /**\n   * Algorithm namespace.\n   */\n  var C_algo = C.algo = {};\n\n  return C;\n}(Math));\n\n\n\n/*\nCryptoJS v3.1.2\ncode.google.com/p/crypto-js\n(c) 2009-2013 by Jeff Mott. All rights reserved.\ncode.google.com/p/crypto-js/wiki/License\n*/\n/**\n * Cipher core components.\n */\nCryptoJS.lib.Cipher || (function (undefined) {\n  // Shortcuts\n  var C = CryptoJS;\n  var C_lib = C.lib;\n  var Base = C_lib.Base;\n  var WordArray = C_lib.WordArray;\n  var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm;\n  var C_enc = C.enc;\n  var Utf8 = C_enc.Utf8;\n  var Base64 = C_enc.Base64;\n  var C_algo = C.algo;\n  var EvpKDF = C_algo.EvpKDF;\n\n  /**\n   * Abstract base cipher template.\n   *\n   * @property {number} keySize This cipher's key size. Default: 4 (128 bits)\n   * @property {number} ivSize This cipher's IV size. Default: 4 (128 bits)\n   * @property {number} _ENC_XFORM_MODE A constant representing encryption mode.\n   * @property {number} _DEC_XFORM_MODE A constant representing decryption mode.\n   */\n  var Cipher = C_lib.Cipher = BufferedBlockAlgorithm.extend({\n    /**\n     * Configuration options.\n     *\n     * @property {WordArray} iv The IV to use for this operation.\n     */\n    cfg: Base.extend(),\n\n    /**\n     * Creates this cipher in encryption mode.\n     *\n     * @param {WordArray} key The key.\n     * @param {Object} cfg (Optional) The configuration options to use for this operation.\n     *\n     * @return {Cipher} A cipher instance.\n     *\n     * @static\n     *\n     * @example\n     *\n     *     var cipher = CryptoJS.algo.AES.createEncryptor(keyWordArray, { iv: ivWordArray });\n     */\n    createEncryptor: function (key, cfg) {\n      return this.create(this._ENC_XFORM_MODE, key, cfg);\n    },\n\n    /**\n     * Creates this cipher in decryption mode.\n     *\n     * @param {WordArray} key The key.\n     * @param {Object} cfg (Optional) The configuration options to use for this operation.\n     *\n     * @return {Cipher} A cipher instance.\n     *\n     * @static\n     *\n     * @example\n     *\n     *     var cipher = CryptoJS.algo.AES.createDecryptor(keyWordArray, { iv: ivWordArray });\n     */\n    createDecryptor: function (key, cfg) {\n      return this.create(this._DEC_XFORM_MODE, key, cfg);\n    },\n\n    /**\n     * Initializes a newly created cipher.\n     *\n     * @param {number} xformMode Either the encryption or decryption transormation mode constant.\n     * @param {WordArray} key The key.\n     * @param {Object} cfg (Optional) The configuration options to use for this operation.\n     *\n     * @example\n     *\n     *     var cipher = CryptoJS.algo.AES.create(CryptoJS.algo.AES._ENC_XFORM_MODE, keyWordArray, { iv: ivWordArray });\n     */\n    init: function (xformMode, key, cfg) {\n      // Apply config defaults\n      this.cfg = this.cfg.extend(cfg);\n\n      // Store transform mode and key\n      this._xformMode = xformMode;\n      this._key = key;\n\n      // Set initial values\n      this.reset();\n    },\n\n    /**\n     * Resets this cipher to its initial state.\n     *\n     * @example\n     *\n     *     cipher.reset();\n     */\n    reset: function () {\n      // Reset data buffer\n      BufferedBlockAlgorithm.reset.call(this);\n\n      // Perform concrete-cipher logic\n      this._doReset();\n    },\n\n    /**\n     * Adds data to be encrypted or decrypted.\n     *\n     * @param {WordArray|string} dataUpdate The data to encrypt or decrypt.\n     *\n     * @return {WordArray} The data after processing.\n     *\n     * @example\n     *\n     *     var encrypted = cipher.process('data');\n     *     var encrypted = cipher.process(wordArray);\n     */\n    process: function (dataUpdate) {\n      // Append\n      this._append(dataUpdate);\n\n      // Process available blocks\n      return this._process();\n    },\n\n    /**\n     * Finalizes the encryption or decryption process.\n     * Note that the finalize operation is effectively a destructive, read-once operation.\n     *\n     * @param {WordArray|string} dataUpdate The final data to encrypt or decrypt.\n     *\n     * @return {WordArray} The data after final processing.\n     *\n     * @example\n     *\n     *     var encrypted = cipher.finalize();\n     *     var encrypted = cipher.finalize('data');\n     *     var encrypted = cipher.finalize(wordArray);\n     */\n    finalize: function (dataUpdate) {\n      // Final data update\n      if (dataUpdate) {\n        this._append(dataUpdate);\n      }\n\n      // Perform concrete-cipher logic\n      var finalProcessedData = this._doFinalize();\n\n      return finalProcessedData;\n    },\n\n    keySize: 128/32,\n\n    ivSize: 128/32,\n\n    _ENC_XFORM_MODE: 1,\n\n    _DEC_XFORM_MODE: 2,\n\n    /**\n     * Creates shortcut functions to a cipher's object interface.\n     *\n     * @param {Cipher} cipher The cipher to create a helper for.\n     *\n     * @return {Object} An object with encrypt and decrypt shortcut functions.\n     *\n     * @static\n     *\n     * @example\n     *\n     *     var AES = CryptoJS.lib.Cipher._createHelper(CryptoJS.algo.AES);\n     */\n    _createHelper: (function () {\n      function selectCipherStrategy(key) {\n        if (typeof key == 'string') {\n          return PasswordBasedCipher;\n        } else {\n          return SerializableCipher;\n        }\n      }\n\n      return function (cipher) {\n        return {\n          encrypt: function (message, key, cfg) {\n            return selectCipherStrategy(key).encrypt(cipher, message, key, cfg);\n          },\n\n          decrypt: function (ciphertext, key, cfg) {\n            return selectCipherStrategy(key).decrypt(cipher, ciphertext, key, cfg);\n          }\n        };\n      };\n    }())\n  });\n\n  /**\n   * Abstract base stream cipher template.\n   *\n   * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 1 (32 bits)\n   */\n  var StreamCipher = C_lib.StreamCipher = Cipher.extend({\n    _doFinalize: function () {\n      // Process partial blocks\n      var finalProcessedBlocks = this._process(!!'flush');\n\n      return finalProcessedBlocks;\n    },\n\n    blockSize: 1\n  });\n\n  /**\n   * Mode namespace.\n   */\n  var C_mode = C.mode = {};\n\n  /**\n   * Abstract base block cipher mode template.\n   */\n  var BlockCipherMode = C_lib.BlockCipherMode = Base.extend({\n    /**\n     * Creates this mode for encryption.\n     *\n     * @param {Cipher} cipher A block cipher instance.\n     * @param {Array} iv The IV words.\n     *\n     * @static\n     *\n     * @example\n     *\n     *     var mode = CryptoJS.mode.CBC.createEncryptor(cipher, iv.words);\n     */\n    createEncryptor: function (cipher, iv) {\n      return this.Encryptor.create(cipher, iv);\n    },\n\n    /**\n     * Creates this mode for decryption.\n     *\n     * @param {Cipher} cipher A block cipher instance.\n     * @param {Array} iv The IV words.\n     *\n     * @static\n     *\n     * @example\n     *\n     *     var mode = CryptoJS.mode.CBC.createDecryptor(cipher, iv.words);\n     */\n    createDecryptor: function (cipher, iv) {\n      return this.Decryptor.create(cipher, iv);\n    },\n\n    /**\n     * Initializes a newly created mode.\n     *\n     * @param {Cipher} cipher A block cipher instance.\n     * @param {Array} iv The IV words.\n     *\n     * @example\n     *\n     *     var mode = CryptoJS.mode.CBC.Encryptor.create(cipher, iv.words);\n     */\n    init: function (cipher, iv) {\n      this._cipher = cipher;\n      this._iv = iv;\n    }\n  });\n\n  /**\n   * Cipher Block Chaining mode.\n   */\n  var CBC = C_mode.CBC = (function () {\n    /**\n     * Abstract base CBC mode.\n     */\n    var CBC = BlockCipherMode.extend();\n\n    /**\n     * CBC encryptor.\n     */\n    CBC.Encryptor = CBC.extend({\n      /**\n       * Processes the data block at offset.\n       *\n       * @param {Array} words The data words to operate on.\n       * @param {number} offset The offset where the block starts.\n       *\n       * @example\n       *\n       *     mode.processBlock(data.words, offset);\n       */\n      processBlock: function (words, offset) {\n        // Shortcuts\n        var cipher = this._cipher;\n        var blockSize = cipher.blockSize;\n\n        // XOR and encrypt\n        xorBlock.call(this, words, offset, blockSize);\n        cipher.encryptBlock(words, offset);\n\n        // Remember this block to use with next block\n        this._prevBlock = words.slice(offset, offset + blockSize);\n      }\n    });\n\n    /**\n     * CBC decryptor.\n     */\n    CBC.Decryptor = CBC.extend({\n      /**\n       * Processes the data block at offset.\n       *\n       * @param {Array} words The data words to operate on.\n       * @param {number} offset The offset where the block starts.\n       *\n       * @example\n       *\n       *     mode.processBlock(data.words, offset);\n       */\n      processBlock: function (words, offset) {\n        // Shortcuts\n        var cipher = this._cipher;\n        var blockSize = cipher.blockSize;\n\n        // Remember this block to use with next block\n        var thisBlock = words.slice(offset, offset + blockSize);\n\n        // Decrypt and XOR\n        cipher.decryptBlock(words, offset);\n        xorBlock.call(this, words, offset, blockSize);\n\n        // This block becomes the previous block\n        this._prevBlock = thisBlock;\n      }\n    });\n\n    function xorBlock(words, offset, blockSize) {\n      // Shortcut\n      var iv = this._iv;\n\n      // Choose mixing block\n      if (iv) {\n        var block = iv;\n\n        // Remove IV for subsequent blocks\n        this._iv = undefined;\n      } else {\n        var block = this._prevBlock;\n      }\n\n      // XOR blocks\n      for (var i = 0; i < blockSize; i++) {\n        words[offset + i] ^= block[i];\n      }\n    }\n\n    return CBC;\n  }());\n\n\n  /**\n   * Infinite Garble Extension mode.\n   */\n  var IGE = C_mode.IGE = (function () {\n    /**\n     * Abstract base IGE mode.\n     */\n    var IGE = BlockCipherMode.extend();\n\n    /**\n     * IGE encryptor.\n     */\n    IGE.Encryptor = IGE.extend({\n      /**\n       * Processes the data block at offset.\n       *\n       * @param {Array} words The data words to operate on.\n       * @param {number} offset The offset where the block starts.\n       *\n       * @example\n       *\n       *     mode.processBlock(data.words, offset);\n       */\n      processBlock: function (words, offset) {\n        // Shortcuts\n        var cipher = this._cipher;\n        var blockSize = cipher.blockSize;\n\n        if (this._ivp === undefined) {\n          this._ivp = this._iv.slice(0, blockSize);\n          this._iv2p = this._iv.slice(blockSize, blockSize + blockSize);\n        }\n\n\n        // Remember this block to use with next block\n        var nextIv2p = words.slice(offset, offset + blockSize);\n\n        // XOR with previous ciphertext\n        xorBlock(words, this._ivp, offset, blockSize);\n\n        // Block cipher\n        cipher.encryptBlock(words, offset);\n\n        // XOR with previous plaintext\n        xorBlock(words, this._iv2p, offset, blockSize);\n\n        this._ivp = words.slice(offset, offset + blockSize);\n        this._iv2p = nextIv2p;\n      }\n    });\n\n    /**\n     * IGE decryptor.\n     */\n    IGE.Decryptor = IGE.extend({\n      /**\n       * Processes the data block at offset.\n       *\n       * @param {Array} words The data words to operate on.\n       * @param {number} offset The offset where the block starts.\n       *\n       * @example\n       *\n       *     mode.processBlock(data.words, offset);\n       */\n      processBlock: function (words, offset) {\n        // Shortcuts\n        var cipher = this._cipher;\n        var blockSize = cipher.blockSize;\n\n        if (this._ivp === undefined) {\n          this._ivp = this._iv.slice(0, blockSize);\n          this._iv2p = this._iv.slice(blockSize, 2 * blockSize);\n        }\n\n        // Remember this block to use with next block\n        var nextIvp = words.slice(offset, offset + blockSize);\n\n        // XOR with previous ciphertext\n        xorBlock(words, this._iv2p, offset, blockSize);\n\n        // Block cipher\n        cipher.decryptBlock(words, offset);\n\n        // XOR with previous plaintext\n        xorBlock(words, this._ivp, offset, blockSize);\n\n        this._ivp = nextIvp;\n        this._iv2p = words.slice(offset, offset + blockSize);\n      }\n    });\n\n    function xorBlock(words, block, offset, blockSize) {\n      for (var i = 0; i < blockSize; i++) {\n        words[offset + i] ^= block[i];\n      }\n    }\n\n    return IGE;\n  }());\n\n  /**\n   * Padding namespace.\n   */\n  var C_pad = C.pad = {};\n\n  /**\n   * PKCS #5/7 padding strategy.\n   */\n  var Pkcs7 = C_pad.Pkcs7 = {\n    /**\n     * Pads data using the algorithm defined in PKCS #5/7.\n     *\n     * @param {WordArray} data The data to pad.\n     * @param {number} blockSize The multiple that the data should be padded to.\n     *\n     * @static\n     *\n     * @example\n     *\n     *     CryptoJS.pad.Pkcs7.pad(wordArray, 4);\n     */\n    pad: function (data, blockSize) {\n      // Shortcut\n      var blockSizeBytes = blockSize * 4;\n\n      // Count padding bytes\n      var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;\n\n      // Create padding word\n      var paddingWord = (nPaddingBytes << 24) | (nPaddingBytes << 16) | (nPaddingBytes << 8) | nPaddingBytes;\n\n      // Create padding\n      var paddingWords = [];\n      for (var i = 0; i < nPaddingBytes; i += 4) {\n        paddingWords.push(paddingWord);\n      }\n      var padding = WordArray.create(paddingWords, nPaddingBytes);\n\n      // Add padding\n      data.concat(padding);\n    },\n\n    /**\n     * Unpads data that had been padded using the algorithm defined in PKCS #5/7.\n     *\n     * @param {WordArray} data The data to unpad.\n     *\n     * @static\n     *\n     * @example\n     *\n     *     CryptoJS.pad.Pkcs7.unpad(wordArray);\n     */\n    unpad: function (data) {\n      // Get number of padding bytes from last byte\n      var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;\n\n      // Remove padding\n      data.sigBytes -= nPaddingBytes;\n    }\n  };\n\n  var NoPadding = C_pad.NoPadding = {\n    pad: function () {\n    },\n\n    unpad: function () {\n    }\n  };\n\n\n  /**\n   * Abstract base block cipher template.\n   *\n   * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 4 (128 bits)\n   */\n  var BlockCipher = C_lib.BlockCipher = Cipher.extend({\n    /**\n     * Configuration options.\n     *\n     * @property {Mode} mode The block mode to use. Default: CBC\n     * @property {Padding} padding The padding strategy to use. Default: Pkcs7\n     */\n    cfg: Cipher.cfg.extend({\n      mode: CBC,\n      padding: Pkcs7\n    }),\n\n    reset: function () {\n      // Reset cipher\n      Cipher.reset.call(this);\n\n      // Shortcuts\n      var cfg = this.cfg;\n      var iv = cfg.iv;\n      var mode = cfg.mode;\n\n      // Reset block mode\n      if (this._xformMode == this._ENC_XFORM_MODE) {\n        var modeCreator = mode.createEncryptor;\n      } else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {\n        var modeCreator = mode.createDecryptor;\n\n        // Keep at least one block in the buffer for unpadding\n        this._minBufferSize = 1;\n      }\n      this._mode = modeCreator.call(mode, this, iv && iv.words);\n    },\n\n    _doProcessBlock: function (words, offset) {\n      this._mode.processBlock(words, offset);\n    },\n\n    _doFinalize: function () {\n      // Shortcut\n      var padding = this.cfg.padding;\n\n      // Finalize\n      if (this._xformMode == this._ENC_XFORM_MODE) {\n        // Pad data\n        padding.pad(this._data, this.blockSize);\n\n        // Process final blocks\n        var finalProcessedBlocks = this._process(!!'flush');\n      } else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {\n        // Process final blocks\n        var finalProcessedBlocks = this._process(!!'flush');\n\n        // Unpad data\n        padding.unpad(finalProcessedBlocks);\n      }\n\n      return finalProcessedBlocks;\n    },\n\n    blockSize: 128/32\n  });\n\n  /**\n   * A collection of cipher parameters.\n   *\n   * @property {WordArray} ciphertext The raw ciphertext.\n   * @property {WordArray} key The key to this ciphertext.\n   * @property {WordArray} iv The IV used in the ciphering operation.\n   * @property {WordArray} salt The salt used with a key derivation function.\n   * @property {Cipher} algorithm The cipher algorithm.\n   * @property {Mode} mode The block mode used in the ciphering operation.\n   * @property {Padding} padding The padding scheme used in the ciphering operation.\n   * @property {number} blockSize The block size of the cipher.\n   * @property {Format} formatter The default formatting strategy to convert this cipher params object to a string.\n   */\n  var CipherParams = C_lib.CipherParams = Base.extend({\n    /**\n     * Initializes a newly created cipher params object.\n     *\n     * @param {Object} cipherParams An object with any of the possible cipher parameters.\n     *\n     * @example\n     *\n     *     var cipherParams = CryptoJS.lib.CipherParams.create({\n     *         ciphertext: ciphertextWordArray,\n     *         key: keyWordArray,\n     *         iv: ivWordArray,\n     *         salt: saltWordArray,\n     *         algorithm: CryptoJS.algo.AES,\n     *         mode: CryptoJS.mode.CBC,\n     *         padding: CryptoJS.pad.PKCS7,\n     *         blockSize: 4,\n     *         formatter: CryptoJS.format.OpenSSL\n     *     });\n     */\n    init: function (cipherParams) {\n      this.mixIn(cipherParams);\n    },\n\n    /**\n     * Converts this cipher params object to a string.\n     *\n     * @param {Format} formatter (Optional) The formatting strategy to use.\n     *\n     * @return {string} The stringified cipher params.\n     *\n     * @throws Error If neither the formatter nor the default formatter is set.\n     *\n     * @example\n     *\n     *     var string = cipherParams + '';\n     *     var string = cipherParams.toString();\n     *     var string = cipherParams.toString(CryptoJS.format.OpenSSL);\n     */\n    toString: function (formatter) {\n      return (formatter || this.formatter).stringify(this);\n    }\n  });\n\n  /**\n   * Format namespace.\n   */\n  var C_format = C.format = {};\n\n  /**\n   * OpenSSL formatting strategy.\n   */\n  var OpenSSLFormatter = C_format.OpenSSL = {\n    /**\n     * Converts a cipher params object to an OpenSSL-compatible string.\n     *\n     * @param {CipherParams} cipherParams The cipher params object.\n     *\n     * @return {string} The OpenSSL-compatible string.\n     *\n     * @static\n     *\n     * @example\n     *\n     *     var openSSLString = CryptoJS.format.OpenSSL.stringify(cipherParams);\n     */\n    stringify: function (cipherParams) {\n      // Shortcuts\n      var ciphertext = cipherParams.ciphertext;\n      var salt = cipherParams.salt;\n\n      // Format\n      if (salt) {\n        var wordArray = WordArray.create([0x53616c74, 0x65645f5f]).concat(salt).concat(ciphertext);\n      } else {\n        var wordArray = ciphertext;\n      }\n\n      return wordArray.toString(Base64);\n    },\n\n    /**\n     * Converts an OpenSSL-compatible string to a cipher params object.\n     *\n     * @param {string} openSSLStr The OpenSSL-compatible string.\n     *\n     * @return {CipherParams} The cipher params object.\n     *\n     * @static\n     *\n     * @example\n     *\n     *     var cipherParams = CryptoJS.format.OpenSSL.parse(openSSLString);\n     */\n    parse: function (openSSLStr) {\n      // Parse base64\n      var ciphertext = Base64.parse(openSSLStr);\n\n      // Shortcut\n      var ciphertextWords = ciphertext.words;\n\n      // Test for salt\n      if (ciphertextWords[0] == 0x53616c74 && ciphertextWords[1] == 0x65645f5f) {\n        // Extract salt\n        var salt = WordArray.create(ciphertextWords.slice(2, 4));\n\n        // Remove salt from ciphertext\n        ciphertextWords.splice(0, 4);\n        ciphertext.sigBytes -= 16;\n      }\n\n      return CipherParams.create({ ciphertext: ciphertext, salt: salt });\n    }\n  };\n\n  /**\n   * A cipher wrapper that returns ciphertext as a serializable cipher params object.\n   */\n  var SerializableCipher = C_lib.SerializableCipher = Base.extend({\n    /**\n     * Configuration options.\n     *\n     * @property {Formatter} format The formatting strategy to convert cipher param objects to and from a string. Default: OpenSSL\n     */\n    cfg: Base.extend({\n      format: OpenSSLFormatter\n    }),\n\n    /**\n     * Encrypts a message.\n     *\n     * @param {Cipher} cipher The cipher algorithm to use.\n     * @param {WordArray|string} message The message to encrypt.\n     * @param {WordArray} key The key.\n     * @param {Object} cfg (Optional) The configuration options to use for this operation.\n     *\n     * @return {CipherParams} A cipher params object.\n     *\n     * @static\n     *\n     * @example\n     *\n     *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key);\n     *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv });\n     *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv, format: CryptoJS.format.OpenSSL });\n     */\n    encrypt: function (cipher, message, key, cfg) {\n      // Apply config defaults\n      cfg = this.cfg.extend(cfg);\n\n      // Encrypt\n      var encryptor = cipher.createEncryptor(key, cfg);\n      var ciphertext = encryptor.finalize(message);\n\n      // Shortcut\n      var cipherCfg = encryptor.cfg;\n\n      // Create and return serializable cipher params\n      return CipherParams.create({\n        ciphertext: ciphertext,\n        key: key,\n        iv: cipherCfg.iv,\n        algorithm: cipher,\n        mode: cipherCfg.mode,\n        padding: cipherCfg.padding,\n        blockSize: cipher.blockSize,\n        formatter: cfg.format\n      });\n    },\n\n    /**\n     * Decrypts serialized ciphertext.\n     *\n     * @param {Cipher} cipher The cipher algorithm to use.\n     * @param {CipherParams|string} ciphertext The ciphertext to decrypt.\n     * @param {WordArray} key The key.\n     * @param {Object} cfg (Optional) The configuration options to use for this operation.\n     *\n     * @return {WordArray} The plaintext.\n     *\n     * @static\n     *\n     * @example\n     *\n     *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, key, { iv: iv, format: CryptoJS.format.OpenSSL });\n     *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, key, { iv: iv, format: CryptoJS.format.OpenSSL });\n     */\n    decrypt: function (cipher, ciphertext, key, cfg) {\n      // Apply config defaults\n      cfg = this.cfg.extend(cfg);\n\n      // Convert string to CipherParams\n      ciphertext = this._parse(ciphertext, cfg.format);\n\n      // Decrypt\n      var plaintext = cipher.createDecryptor(key, cfg).finalize(ciphertext.ciphertext);\n\n      return plaintext;\n    },\n\n    /**\n     * Converts serialized ciphertext to CipherParams,\n     * else assumed CipherParams already and returns ciphertext unchanged.\n     *\n     * @param {CipherParams|string} ciphertext The ciphertext.\n     * @param {Formatter} format The formatting strategy to use to parse serialized ciphertext.\n     *\n     * @return {CipherParams} The unserialized ciphertext.\n     *\n     * @static\n     *\n     * @example\n     *\n     *     var ciphertextParams = CryptoJS.lib.SerializableCipher._parse(ciphertextStringOrParams, format);\n     */\n    _parse: function (ciphertext, format) {\n      if (typeof ciphertext == 'string') {\n        return format.parse(ciphertext, this);\n      } else {\n        return ciphertext;\n      }\n    }\n  });\n\n  /**\n   * Key derivation function namespace.\n   */\n  var C_kdf = C.kdf = {};\n\n  /**\n   * OpenSSL key derivation function.\n   */\n  var OpenSSLKdf = C_kdf.OpenSSL = {\n    /**\n     * Derives a key and IV from a password.\n     *\n     * @param {string} password The password to derive from.\n     * @param {number} keySize The size in words of the key to generate.\n     * @param {number} ivSize The size in words of the IV to generate.\n     * @param {WordArray|string} salt (Optional) A 64-bit salt to use. If omitted, a salt will be generated randomly.\n     *\n     * @return {CipherParams} A cipher params object with the key, IV, and salt.\n     *\n     * @static\n     *\n     * @example\n     *\n     *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32);\n     *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32, 'saltsalt');\n     */\n    execute: function (password, keySize, ivSize, salt) {\n      // Generate random salt\n      if (!salt) {\n        salt = WordArray.random(64/8);\n      }\n\n      // Derive key and IV\n      var key = EvpKDF.create({ keySize: keySize + ivSize }).compute(password, salt);\n\n      // Separate key and IV\n      var iv = WordArray.create(key.words.slice(keySize), ivSize * 4);\n      key.sigBytes = keySize * 4;\n\n      // Return params\n      return CipherParams.create({ key: key, iv: iv, salt: salt });\n    }\n  };\n\n  /**\n   * A serializable cipher wrapper that derives the key from a password,\n   * and returns ciphertext as a serializable cipher params object.\n   */\n  var PasswordBasedCipher = C_lib.PasswordBasedCipher = SerializableCipher.extend({\n    /**\n     * Configuration options.\n     *\n     * @property {KDF} kdf The key derivation function to use to generate a key and IV from a password. Default: OpenSSL\n     */\n    cfg: SerializableCipher.cfg.extend({\n      kdf: OpenSSLKdf\n    }),\n\n    /**\n     * Encrypts a message using a password.\n     *\n     * @param {Cipher} cipher The cipher algorithm to use.\n     * @param {WordArray|string} message The message to encrypt.\n     * @param {string} password The password.\n     * @param {Object} cfg (Optional) The configuration options to use for this operation.\n     *\n     * @return {CipherParams} A cipher params object.\n     *\n     * @static\n     *\n     * @example\n     *\n     *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password');\n     *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password', { format: CryptoJS.format.OpenSSL });\n     */\n    encrypt: function (cipher, message, password, cfg) {\n      // Apply config defaults\n      cfg = this.cfg.extend(cfg);\n\n      // Derive key and other params\n      var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize);\n\n      // Add IV to config\n      cfg.iv = derivedParams.iv;\n\n      // Encrypt\n      var ciphertext = SerializableCipher.encrypt.call(this, cipher, message, derivedParams.key, cfg);\n\n      // Mix in derived params\n      ciphertext.mixIn(derivedParams);\n\n      return ciphertext;\n    },\n\n    /**\n     * Decrypts serialized ciphertext using a password.\n     *\n     * @param {Cipher} cipher The cipher algorithm to use.\n     * @param {CipherParams|string} ciphertext The ciphertext to decrypt.\n     * @param {string} password The password.\n     * @param {Object} cfg (Optional) The configuration options to use for this operation.\n     *\n     * @return {WordArray} The plaintext.\n     *\n     * @static\n     *\n     * @example\n     *\n     *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, 'password', { format: CryptoJS.format.OpenSSL });\n     *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, 'password', { format: CryptoJS.format.OpenSSL });\n     */\n    decrypt: function (cipher, ciphertext, password, cfg) {\n      // Apply config defaults\n      cfg = this.cfg.extend(cfg);\n\n      // Convert string to CipherParams\n      ciphertext = this._parse(ciphertext, cfg.format);\n\n      // Derive key and other params\n      var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, ciphertext.salt);\n\n      // Add IV to config\n      cfg.iv = derivedParams.iv;\n\n      // Decrypt\n      var plaintext = SerializableCipher.decrypt.call(this, cipher, ciphertext, derivedParams.key, cfg);\n\n      return plaintext;\n    }\n  });\n}());\n\n\n\n\n/*\nCryptoJS v3.1.2\ncode.google.com/p/crypto-js\n(c) 2009-2013 by Jeff Mott. All rights reserved.\ncode.google.com/p/crypto-js/wiki/License\n*/\n(function () {\n  // Shortcuts\n  var C = CryptoJS;\n  var C_lib = C.lib;\n  var BlockCipher = C_lib.BlockCipher;\n  var C_algo = C.algo;\n\n  // Lookup tables\n  var SBOX = [];\n  var INV_SBOX = [];\n  var SUB_MIX_0 = [];\n  var SUB_MIX_1 = [];\n  var SUB_MIX_2 = [];\n  var SUB_MIX_3 = [];\n  var INV_SUB_MIX_0 = [];\n  var INV_SUB_MIX_1 = [];\n  var INV_SUB_MIX_2 = [];\n  var INV_SUB_MIX_3 = [];\n\n  // Compute lookup tables\n  (function () {\n    // Compute double table\n    var d = [];\n    for (var i = 0; i < 256; i++) {\n      if (i < 128) {\n        d[i] = i << 1;\n      } else {\n        d[i] = (i << 1) ^ 0x11b;\n      }\n    }\n\n    // Walk GF(2^8)\n    var x = 0;\n    var xi = 0;\n    for (var i = 0; i < 256; i++) {\n      // Compute sbox\n      var sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4);\n      sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63;\n      SBOX[x] = sx;\n      INV_SBOX[sx] = x;\n\n      // Compute multiplication\n      var x2 = d[x];\n      var x4 = d[x2];\n      var x8 = d[x4];\n\n      // Compute sub bytes, mix columns tables\n      var t = (d[sx] * 0x101) ^ (sx * 0x1010100);\n      SUB_MIX_0[x] = (t << 24) | (t >>> 8);\n      SUB_MIX_1[x] = (t << 16) | (t >>> 16);\n      SUB_MIX_2[x] = (t << 8)  | (t >>> 24);\n      SUB_MIX_3[x] = t;\n\n      // Compute inv sub bytes, inv mix columns tables\n      var t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100);\n      INV_SUB_MIX_0[sx] = (t << 24) | (t >>> 8);\n      INV_SUB_MIX_1[sx] = (t << 16) | (t >>> 16);\n      INV_SUB_MIX_2[sx] = (t << 8)  | (t >>> 24);\n      INV_SUB_MIX_3[sx] = t;\n\n      // Compute next counter\n      if (!x) {\n        x = xi = 1;\n      } else {\n        x = x2 ^ d[d[d[x8 ^ x2]]];\n        xi ^= d[d[xi]];\n      }\n    }\n  }());\n\n  // Precomputed Rcon lookup\n  var RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];\n\n  /**\n   * AES block cipher algorithm.\n   */\n  var AES = C_algo.AES = BlockCipher.extend({\n    _doReset: function () {\n      // Shortcuts\n      var key = this._key;\n      var keyWords = key.words;\n      var keySize = key.sigBytes / 4;\n\n      // Compute number of rounds\n      var nRounds = this._nRounds = keySize + 6\n\n      // Compute number of key schedule rows\n      var ksRows = (nRounds + 1) * 4;\n\n      // Compute key schedule\n      var keySchedule = this._keySchedule = [];\n      for (var ksRow = 0; ksRow < ksRows; ksRow++) {\n        if (ksRow < keySize) {\n          keySchedule[ksRow] = keyWords[ksRow];\n        } else {\n          var t = keySchedule[ksRow - 1];\n\n          if (!(ksRow % keySize)) {\n            // Rot word\n            t = (t << 8) | (t >>> 24);\n\n            // Sub word\n            t = (SBOX[t >>> 24] << 24) | (SBOX[(t >>> 16) & 0xff] << 16) | (SBOX[(t >>> 8) & 0xff] << 8) | SBOX[t & 0xff];\n\n            // Mix Rcon\n            t ^= RCON[(ksRow / keySize) | 0] << 24;\n          } else if (keySize > 6 && ksRow % keySize == 4) {\n            // Sub word\n            t = (SBOX[t >>> 24] << 24) | (SBOX[(t >>> 16) & 0xff] << 16) | (SBOX[(t >>> 8) & 0xff] << 8) | SBOX[t & 0xff];\n          }\n\n          keySchedule[ksRow] = keySchedule[ksRow - keySize] ^ t;\n        }\n      }\n\n      // Compute inv key schedule\n      var invKeySchedule = this._invKeySchedule = [];\n      for (var invKsRow = 0; invKsRow < ksRows; invKsRow++) {\n        var ksRow = ksRows - invKsRow;\n\n        if (invKsRow % 4) {\n          var t = keySchedule[ksRow];\n        } else {\n          var t = keySchedule[ksRow - 4];\n        }\n\n        if (invKsRow < 4 || ksRow <= 4) {\n          invKeySchedule[invKsRow] = t;\n        } else {\n          invKeySchedule[invKsRow] = INV_SUB_MIX_0[SBOX[t >>> 24]] ^ INV_SUB_MIX_1[SBOX[(t >>> 16) & 0xff]] ^\n            INV_SUB_MIX_2[SBOX[(t >>> 8) & 0xff]] ^ INV_SUB_MIX_3[SBOX[t & 0xff]];\n        }\n      }\n    },\n\n    encryptBlock: function (M, offset) {\n      this._doCryptBlock(M, offset, this._keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX);\n    },\n\n    decryptBlock: function (M, offset) {\n      // Swap 2nd and 4th rows\n      var t = M[offset + 1];\n      M[offset + 1] = M[offset + 3];\n      M[offset + 3] = t;\n\n      this._doCryptBlock(M, offset, this._invKeySchedule, INV_SUB_MIX_0, INV_SUB_MIX_1, INV_SUB_MIX_2, INV_SUB_MIX_3, INV_SBOX);\n\n      // Inv swap 2nd and 4th rows\n      var t = M[offset + 1];\n      M[offset + 1] = M[offset + 3];\n      M[offset + 3] = t;\n    },\n\n    _doCryptBlock: function (M, offset, keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX) {\n      // Shortcut\n      var nRounds = this._nRounds;\n\n      // Get input, add round key\n      var s0 = M[offset]     ^ keySchedule[0];\n      var s1 = M[offset + 1] ^ keySchedule[1];\n      var s2 = M[offset + 2] ^ keySchedule[2];\n      var s3 = M[offset + 3] ^ keySchedule[3];\n\n      // Key schedule row counter\n      var ksRow = 4;\n\n      // Rounds\n      for (var round = 1; round < nRounds; round++) {\n        // Shift rows, sub bytes, mix columns, add round key\n        var t0 = SUB_MIX_0[s0 >>> 24] ^ SUB_MIX_1[(s1 >>> 16) & 0xff] ^ SUB_MIX_2[(s2 >>> 8) & 0xff] ^ SUB_MIX_3[s3 & 0xff] ^ keySchedule[ksRow++];\n        var t1 = SUB_MIX_0[s1 >>> 24] ^ SUB_MIX_1[(s2 >>> 16) & 0xff] ^ SUB_MIX_2[(s3 >>> 8) & 0xff] ^ SUB_MIX_3[s0 & 0xff] ^ keySchedule[ksRow++];\n        var t2 = SUB_MIX_0[s2 >>> 24] ^ SUB_MIX_1[(s3 >>> 16) & 0xff] ^ SUB_MIX_2[(s0 >>> 8) & 0xff] ^ SUB_MIX_3[s1 & 0xff] ^ keySchedule[ksRow++];\n        var t3 = SUB_MIX_0[s3 >>> 24] ^ SUB_MIX_1[(s0 >>> 16) & 0xff] ^ SUB_MIX_2[(s1 >>> 8) & 0xff] ^ SUB_MIX_3[s2 & 0xff] ^ keySchedule[ksRow++];\n\n        // Update state\n        s0 = t0;\n        s1 = t1;\n        s2 = t2;\n        s3 = t3;\n      }\n\n      // Shift rows, sub bytes, add round key\n      var t0 = ((SBOX[s0 >>> 24] << 24) | (SBOX[(s1 >>> 16) & 0xff] << 16) | (SBOX[(s2 >>> 8) & 0xff] << 8) | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++];\n      var t1 = ((SBOX[s1 >>> 24] << 24) | (SBOX[(s2 >>> 16) & 0xff] << 16) | (SBOX[(s3 >>> 8) & 0xff] << 8) | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++];\n      var t2 = ((SBOX[s2 >>> 24] << 24) | (SBOX[(s3 >>> 16) & 0xff] << 16) | (SBOX[(s0 >>> 8) & 0xff] << 8) | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++];\n      var t3 = ((SBOX[s3 >>> 24] << 24) | (SBOX[(s0 >>> 16) & 0xff] << 16) | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++];\n\n      // Set output\n      M[offset]     = t0;\n      M[offset + 1] = t1;\n      M[offset + 2] = t2;\n      M[offset + 3] = t3;\n    },\n\n    keySize: 256/32\n  });\n\n  /**\n   * Shortcut functions to the cipher's object interface.\n   *\n   * @example\n   *\n   *     var ciphertext = CryptoJS.AES.encrypt(message, key, cfg);\n   *     var plaintext  = CryptoJS.AES.decrypt(ciphertext, key, cfg);\n   */\n  C.AES = BlockCipher._createHelper(AES);\n}());\n\n\n\n/*\nCryptoJS v3.1.2\ncode.google.com/p/crypto-js\n(c) 2009-2013 by Jeff Mott. All rights reserved.\ncode.google.com/p/crypto-js/wiki/License\n*/\n(function (Math) {\n  // Shortcuts\n  var C = CryptoJS;\n  var C_lib = C.lib;\n  var WordArray = C_lib.WordArray;\n  var Hasher = C_lib.Hasher;\n  var C_algo = C.algo;\n\n  // Initialization and round constants tables\n  var H = [];\n  var K = [];\n\n  // Compute constants\n  (function () {\n    function isPrime(n) {\n      var sqrtN = Math.sqrt(n);\n      for (var factor = 2; factor <= sqrtN; factor++) {\n        if (!(n % factor)) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    function getFractionalBits(n) {\n      return ((n - (n | 0)) * 0x100000000) | 0;\n    }\n\n    var n = 2;\n    var nPrime = 0;\n    while (nPrime < 64) {\n      if (isPrime(n)) {\n        if (nPrime < 8) {\n          H[nPrime] = getFractionalBits(Math.pow(n, 1 / 2));\n        }\n        K[nPrime] = getFractionalBits(Math.pow(n, 1 / 3));\n\n        nPrime++;\n      }\n\n      n++;\n    }\n  }());\n\n  // Reusable object\n  var W = [];\n\n  /**\n   * SHA-256 hash algorithm.\n   */\n  var SHA256 = C_algo.SHA256 = Hasher.extend({\n    _doReset: function () {\n      this._hash = new WordArray.init(H.slice(0));\n    },\n\n    _doProcessBlock: function (M, offset) {\n      // Shortcut\n      var H = this._hash.words;\n\n      // Working variables\n      var a = H[0];\n      var b = H[1];\n      var c = H[2];\n      var d = H[3];\n      var e = H[4];\n      var f = H[5];\n      var g = H[6];\n      var h = H[7];\n\n      // Computation\n      for (var i = 0; i < 64; i++) {\n        if (i < 16) {\n          W[i] = M[offset + i] | 0;\n        } else {\n          var gamma0x = W[i - 15];\n          var gamma0  = ((gamma0x << 25) | (gamma0x >>> 7))  ^\n            ((gamma0x << 14) | (gamma0x >>> 18)) ^\n            (gamma0x >>> 3);\n\n          var gamma1x = W[i - 2];\n          var gamma1  = ((gamma1x << 15) | (gamma1x >>> 17)) ^\n            ((gamma1x << 13) | (gamma1x >>> 19)) ^\n            (gamma1x >>> 10);\n\n          W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];\n        }\n\n        var ch  = (e & f) ^ (~e & g);\n        var maj = (a & b) ^ (a & c) ^ (b & c);\n\n        var sigma0 = ((a << 30) | (a >>> 2)) ^ ((a << 19) | (a >>> 13)) ^ ((a << 10) | (a >>> 22));\n        var sigma1 = ((e << 26) | (e >>> 6)) ^ ((e << 21) | (e >>> 11)) ^ ((e << 7)  | (e >>> 25));\n\n        var t1 = h + sigma1 + ch + K[i] + W[i];\n        var t2 = sigma0 + maj;\n\n        h = g;\n        g = f;\n        f = e;\n        e = (d + t1) | 0;\n        d = c;\n        c = b;\n        b = a;\n        a = (t1 + t2) | 0;\n      }\n\n      // Intermediate hash value\n      H[0] = (H[0] + a) | 0;\n      H[1] = (H[1] + b) | 0;\n      H[2] = (H[2] + c) | 0;\n      H[3] = (H[3] + d) | 0;\n      H[4] = (H[4] + e) | 0;\n      H[5] = (H[5] + f) | 0;\n      H[6] = (H[6] + g) | 0;\n      H[7] = (H[7] + h) | 0;\n    },\n\n    _doFinalize: function () {\n      // Shortcuts\n      var data = this._data;\n      var dataWords = data.words;\n\n      var nBitsTotal = this._nDataBytes * 8;\n      var nBitsLeft = data.sigBytes * 8;\n\n      // Add padding\n      dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);\n      dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);\n      dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;\n      data.sigBytes = dataWords.length * 4;\n\n      // Hash final blocks\n      this._process();\n\n      // Return final computed hash\n      return this._hash;\n    },\n\n    clone: function () {\n      var clone = Hasher.clone.call(this);\n      clone._hash = this._hash.clone();\n\n      return clone;\n    }\n  });\n\n  /**\n   * Shortcut function to the hasher's object interface.\n   *\n   * @param {WordArray|string} message The message to hash.\n   *\n   * @return {WordArray} The hash.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var hash = CryptoJS.SHA256('message');\n   *     var hash = CryptoJS.SHA256(wordArray);\n   */\n  C.SHA256 = Hasher._createHelper(SHA256);\n  /**\n   * Shortcut function to the HMAC's object interface.\n   *\n   * @param {WordArray|string} message The message to hash.\n   * @param {WordArray|string} key The secret key.\n   *\n   * @return {WordArray} The HMAC.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var hmac = CryptoJS.HmacSHA256(message, key);\n   */\n  C.HmacSHA256 = Hasher._createHmacHelper(SHA256);\n}(Math));\n\n/**\n * Export rule added by Peter Savchenko\n */\n/* harmony default export */ __webpack_exports__[\"default\"] = (CryptoJS);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utils/crypto.js\n");

/***/ }),

/***/ "./src/utils/dom.js":
/*!**************************!*\
  !*** ./src/utils/dom.js ***!
  \**************************/
/*! exports provided: make, after, photoPlaceholder, scrollTo, wave */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"make\", function() { return make; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"after\", function() { return after; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"photoPlaceholder\", function() { return photoPlaceholder; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"scrollTo\", function() { return scrollTo; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"wave\", function() { return wave; });\n/* harmony import */ var _string__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./string */ \"./src/utils/string.js\");\n\n\n/**\n * Helper for making Elements with classname and attributes\n * @param  {string} tagName           - new Element tag name\n * @param  {array|string} classNames  - list or name of CSS classname(s)\n * @param  {Object} attributes        - any attributes\n * @return {HTMLElement}\n */\nfunction make(tagName, classNames = null, attributes = {}) {\n  var el = document.createElement(tagName);\n\n  if ( Array.isArray(classNames) ) {\n    el.classList.add(...classNames);\n  } else if ( classNames ) {\n    el.classList.add(classNames);\n  }\n\n  for (let attrName in attributes) {\n    el[attrName] = attributes[attrName];\n  }\n\n  return el;\n}\n\n/**\n * Insert one node right after passed\n * @param {Element} newNode\n * @param {Element} targetNode\n */\nfunction after(newNode, targetNode){\n  targetNode.parentNode.insertBefore(newNode, targetNode.nextSibling);\n}\n\nfunction photoPlaceholder(peer){\n  const colors = [\n    '#15c46d',\n    '#36a9e0',\n    '#ef4b4b',\n    '#04b7ff',\n    '#b142af',\n    '#6632b8',\n    '#3251b8',\n    '#505b74'\n  ];\n\n  const id = peer && peer.id ? peer.id.toString() : '0';\n  const decimalId = parseInt(id.substr(-1), 16); // take last id char and convert to decimal number system\n  const color = colors[Math.floor(decimalId / 2)];\n  const words = _string__WEBPACK_IMPORTED_MODULE_0__[\"title\"](peer).split(' ')\n  const abbr = (words.length === 1 ? words[0][0] : words[0][0] + words[words.length - 1][0]).toUpperCase();\n\n  return `<span class=\"photo-placeholder\" style=\"background-color: ${color}\">${abbr}</span>`\n}\n\nfunction getOffsetParent(el, stopEl){\n  let offset = 0\n  while (el && el !== stopEl){\n    offset += el.offsetTop\n\n    el = el.parentNode;\n  }\n\n  return offset;\n}\n\nfunction scrollTo(wrapper, element, duration, padding = 0, callback = null) {\n  const startingY = wrapper.scrollTop;\n  const elOffset = getOffsetParent(element, wrapper) - element.getBoundingClientRect().height - padding;\n\n\n  const diff = elOffset - startingY;\n  let start;\n\n  window.requestAnimationFrame(function step(timestamp) {\n    if (!start) start = timestamp;\n    var time = timestamp - start;\n    var percent = Math.min(time / duration, 1);\n\n    wrapper.scrollTo(0, startingY + diff * percent);\n\n    if (time < duration) {\n      window.requestAnimationFrame(step);\n    }\n  })\n\n  callback && setTimeout(callback, duration)\n}\n\nfunction wave(form, height) {\n  let html = '';\n  let max = Math.max(...form);\n  let k = height / max;\n\n  return Array.from(form).reduce((s, c, i) => {\n    if (i > 45){\n      return s;\n    }\n\n    s += `<u style=\"height: ${Math.max(c * k, 5)}px\"></u>`\n\n    return s;\n  }, '')\n\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbHMvZG9tLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vVGVsZWdyYW1qcy8uL3NyYy91dGlscy9kb20uanM/MjZhMSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBzIGZyb20gJy4vc3RyaW5nJztcblxuLyoqXG4gKiBIZWxwZXIgZm9yIG1ha2luZyBFbGVtZW50cyB3aXRoIGNsYXNzbmFtZSBhbmQgYXR0cmlidXRlc1xuICogQHBhcmFtICB7c3RyaW5nfSB0YWdOYW1lICAgICAgICAgICAtIG5ldyBFbGVtZW50IHRhZyBuYW1lXG4gKiBAcGFyYW0gIHthcnJheXxzdHJpbmd9IGNsYXNzTmFtZXMgIC0gbGlzdCBvciBuYW1lIG9mIENTUyBjbGFzc25hbWUocylcbiAqIEBwYXJhbSAge09iamVjdH0gYXR0cmlidXRlcyAgICAgICAgLSBhbnkgYXR0cmlidXRlc1xuICogQHJldHVybiB7SFRNTEVsZW1lbnR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtYWtlKHRhZ05hbWUsIGNsYXNzTmFtZXMgPSBudWxsLCBhdHRyaWJ1dGVzID0ge30pIHtcbiAgdmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0YWdOYW1lKTtcblxuICBpZiAoIEFycmF5LmlzQXJyYXkoY2xhc3NOYW1lcykgKSB7XG4gICAgZWwuY2xhc3NMaXN0LmFkZCguLi5jbGFzc05hbWVzKTtcbiAgfSBlbHNlIGlmICggY2xhc3NOYW1lcyApIHtcbiAgICBlbC5jbGFzc0xpc3QuYWRkKGNsYXNzTmFtZXMpO1xuICB9XG5cbiAgZm9yIChsZXQgYXR0ck5hbWUgaW4gYXR0cmlidXRlcykge1xuICAgIGVsW2F0dHJOYW1lXSA9IGF0dHJpYnV0ZXNbYXR0ck5hbWVdO1xuICB9XG5cbiAgcmV0dXJuIGVsO1xufVxuXG4vKipcbiAqIEluc2VydCBvbmUgbm9kZSByaWdodCBhZnRlciBwYXNzZWRcbiAqIEBwYXJhbSB7RWxlbWVudH0gbmV3Tm9kZVxuICogQHBhcmFtIHtFbGVtZW50fSB0YXJnZXROb2RlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhZnRlcihuZXdOb2RlLCB0YXJnZXROb2RlKXtcbiAgdGFyZ2V0Tm9kZS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShuZXdOb2RlLCB0YXJnZXROb2RlLm5leHRTaWJsaW5nKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBob3RvUGxhY2Vob2xkZXIocGVlcil7XG4gIGNvbnN0IGNvbG9ycyA9IFtcbiAgICAnIzE1YzQ2ZCcsXG4gICAgJyMzNmE5ZTAnLFxuICAgICcjZWY0YjRiJyxcbiAgICAnIzA0YjdmZicsXG4gICAgJyNiMTQyYWYnLFxuICAgICcjNjYzMmI4JyxcbiAgICAnIzMyNTFiOCcsXG4gICAgJyM1MDViNzQnXG4gIF07XG5cbiAgY29uc3QgaWQgPSBwZWVyICYmIHBlZXIuaWQgPyBwZWVyLmlkLnRvU3RyaW5nKCkgOiAnMCc7XG4gIGNvbnN0IGRlY2ltYWxJZCA9IHBhcnNlSW50KGlkLnN1YnN0cigtMSksIDE2KTsgLy8gdGFrZSBsYXN0IGlkIGNoYXIgYW5kIGNvbnZlcnQgdG8gZGVjaW1hbCBudW1iZXIgc3lzdGVtXG4gIGNvbnN0IGNvbG9yID0gY29sb3JzW01hdGguZmxvb3IoZGVjaW1hbElkIC8gMildO1xuICBjb25zdCB3b3JkcyA9IHMudGl0bGUocGVlcikuc3BsaXQoJyAnKVxuICBjb25zdCBhYmJyID0gKHdvcmRzLmxlbmd0aCA9PT0gMSA/IHdvcmRzWzBdWzBdIDogd29yZHNbMF1bMF0gKyB3b3Jkc1t3b3Jkcy5sZW5ndGggLSAxXVswXSkudG9VcHBlckNhc2UoKTtcblxuICByZXR1cm4gYDxzcGFuIGNsYXNzPVwicGhvdG8tcGxhY2Vob2xkZXJcIiBzdHlsZT1cImJhY2tncm91bmQtY29sb3I6ICR7Y29sb3J9XCI+JHthYmJyfTwvc3Bhbj5gXG59XG5cbmZ1bmN0aW9uIGdldE9mZnNldFBhcmVudChlbCwgc3RvcEVsKXtcbiAgbGV0IG9mZnNldCA9IDBcbiAgd2hpbGUgKGVsICYmIGVsICE9PSBzdG9wRWwpe1xuICAgIG9mZnNldCArPSBlbC5vZmZzZXRUb3BcblxuICAgIGVsID0gZWwucGFyZW50Tm9kZTtcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzY3JvbGxUbyh3cmFwcGVyLCBlbGVtZW50LCBkdXJhdGlvbiwgcGFkZGluZyA9IDAsIGNhbGxiYWNrID0gbnVsbCkge1xuICBjb25zdCBzdGFydGluZ1kgPSB3cmFwcGVyLnNjcm9sbFRvcDtcbiAgY29uc3QgZWxPZmZzZXQgPSBnZXRPZmZzZXRQYXJlbnQoZWxlbWVudCwgd3JhcHBlcikgLSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodCAtIHBhZGRpbmc7XG5cblxuICBjb25zdCBkaWZmID0gZWxPZmZzZXQgLSBzdGFydGluZ1k7XG4gIGxldCBzdGFydDtcblxuICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uIHN0ZXAodGltZXN0YW1wKSB7XG4gICAgaWYgKCFzdGFydCkgc3RhcnQgPSB0aW1lc3RhbXA7XG4gICAgdmFyIHRpbWUgPSB0aW1lc3RhbXAgLSBzdGFydDtcbiAgICB2YXIgcGVyY2VudCA9IE1hdGgubWluKHRpbWUgLyBkdXJhdGlvbiwgMSk7XG5cbiAgICB3cmFwcGVyLnNjcm9sbFRvKDAsIHN0YXJ0aW5nWSArIGRpZmYgKiBwZXJjZW50KTtcblxuICAgIGlmICh0aW1lIDwgZHVyYXRpb24pIHtcbiAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoc3RlcCk7XG4gICAgfVxuICB9KVxuXG4gIGNhbGxiYWNrICYmIHNldFRpbWVvdXQoY2FsbGJhY2ssIGR1cmF0aW9uKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gd2F2ZShmb3JtLCBoZWlnaHQpIHtcbiAgbGV0IGh0bWwgPSAnJztcbiAgbGV0IG1heCA9IE1hdGgubWF4KC4uLmZvcm0pO1xuICBsZXQgayA9IGhlaWdodCAvIG1heDtcblxuICByZXR1cm4gQXJyYXkuZnJvbShmb3JtKS5yZWR1Y2UoKHMsIGMsIGkpID0+IHtcbiAgICBpZiAoaSA+IDQ1KXtcbiAgICAgIHJldHVybiBzO1xuICAgIH1cblxuICAgIHMgKz0gYDx1IHN0eWxlPVwiaGVpZ2h0OiAke01hdGgubWF4KGMgKiBrLCA1KX1weFwiPjwvdT5gXG5cbiAgICByZXR1cm4gcztcbiAgfSwgJycpXG5cbn1cbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/utils/dom.js\n");

/***/ }),

/***/ "./src/utils/dom_elements.js":
/*!***********************************!*\
  !*** ./src/utils/dom_elements.js ***!
  \***********************************/
/*! exports provided: input, setInputInvalidState, button, setButtonLoadingState, dropdown, updateDropdownItems, authUploader */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"input\", function() { return input; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"setInputInvalidState\", function() { return setInputInvalidState; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"button\", function() { return button; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"setButtonLoadingState\", function() { return setButtonLoadingState; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"dropdown\", function() { return dropdown; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"updateDropdownItems\", function() { return updateDropdownItems; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"authUploader\", function() { return authUploader; });\n/* harmony import */ var _dom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dom */ \"./src/utils/dom.js\");\n/* harmony import */ var _keys__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./keys */ \"./src/utils/keys.js\");\n/* harmony import */ var _emoji_countries__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./emoji-countries */ \"./src/utils/emoji-countries.js\");\n/* harmony import */ var _assets_svg_cameraadd_svg_svg__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./../assets/svg/cameraadd_svg.svg */ \"./src/assets/svg/cameraadd_svg.svg\");\n/* harmony import */ var _assets_svg_cameraadd_svg_svg__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_assets_svg_cameraadd_svg_svg__WEBPACK_IMPORTED_MODULE_3__);\n\n\n\n\n\n/**\n * CSS for input element\n */\nconst INPUTS_CSS = {\n  wrapper: 't-input',\n  wrapperFocused: 't-input--focused',\n  wrapperEmpty: 't-input--empty',\n  wrapperInvalid: 't-input--invalid',\n};\n\n/**\n * Makes custom input element\n * @param {string} placeholder - input placeholder\n * @param {Element} appendTo - element to append created input\n * @param {function} onEnter - callback for Enter keydown\n * @param {string} type - type of input, 'text' by default\n * @param {string} mask - mask for input, for example 'phone' @todo move masks to constants\n * @param {function} onFill - callback fired when input value is changed\n *\n * @return {Element}\n */\nfunction input({placeholder, appendTo, onEnter, type, mask, onChange, onFocus, onBlur}) {\n  const wrapper = _dom__WEBPACK_IMPORTED_MODULE_0__[\"make\"]('div', [INPUTS_CSS.wrapper]);\n  const input = _dom__WEBPACK_IMPORTED_MODULE_0__[\"make\"]('input');\n\n  wrapper.dataset.placeholder = placeholder;\n\n  wrapper.appendChild(input);\n\n  input.type = type || 'text';\n\n  if (appendTo){\n    appendTo.appendChild(wrapper);\n  }\n\n  input.addEventListener('focus', () => {\n    wrapper.classList.add(INPUTS_CSS.wrapperFocused);\n    if (typeof onFocus === 'function'){\n      onFocus();\n    }\n  });\n\n  input.addEventListener('blur', () => {\n    wrapper.classList.remove(INPUTS_CSS.wrapperFocused);\n\n    checkInputEmptiness(input, wrapper);\n\n    if (typeof onBlur === 'function'){\n      onBlur();\n    }\n  });\n\n  wrapper.addEventListener('click', () => {\n    input.focus();\n  });\n\n  // if (mask) {\n    wrapper.addEventListener('input', (e) => {\n      let val = e.target.value;\n\n      if (typeof onChange === 'function'){\n        onChange(val);\n      }\n\n      if (mask === 'phone'){\n        if (wrapper.dataset.mask){\n            let r = [];\n            let pg = wrapper.dataset.mask.split(' ');\n            let code = pg[0];\n\n            pg.forEach(c => {\n              if (c.includes('X')){\n                r.push(c.length)\n              }\n            });\n\n            let vwc = e.target.value.replace(code, '');\n\n            var m = vwc.replace(/\\D/g, '').match(\n              new RegExp(\n                r.reduce((s, i) => s+= `(\\\\d{0,${i}})`, '')\n              )\n            );\n\n            var groups = m.splice(1)\n\n            if (vwc.replace('+', '')){\n              // var x = e.target.value.replace(/\\D/g, '').match(/(\\d{0,3})(\\d{0,3})(\\d{0,4})/);\n              e.target.value = groups.reduce((s, v) => {\n                return s + (v ? ' ' + v : '');\n              },   code )\n            }\n\n        }\n\n\n      }\n    });\n  // }\n\n  wrapper.addEventListener('keydown', (event) => {\n    if (event.keyCode === _keys__WEBPACK_IMPORTED_MODULE_1__[\"default\"].ENTER && typeof onEnter === 'function' ){\n      onEnter(input.value);\n    }\n  });\n\n  checkInputEmptiness(input, wrapper);\n\n  return wrapper;\n}\n\n/**\n * Check if input is empty and add/remove special CSS modifier\n * @param {HTMLInputElement|HTMLElement} input - input  to check\n * @param {HTMLElement} wrapper - input wrapper to add modifier\n */\nfunction checkInputEmptiness(input, wrapper) {\n  let isEmpty = input.value.trim().length === 0;\n  let hasPrefix = wrapper.dataset.prefix;\n\n  wrapper.classList.toggle(INPUTS_CSS.wrapperEmpty, isEmpty && !hasPrefix);\n}\n\nfunction setInputInvalidState(input, state = true, placeholder = 'Invalid'){\n  input.classList.toggle(INPUTS_CSS.wrapperInvalid, state);\n  input.dataset.placeholder = placeholder\n}\n\n\n/**\n * CSS for input element\n */\nconst BUTTON_CSS = {\n  wrapper: 't-button',\n  wrapperLoading: 't-button--loading',\n};\n\n/**\n * Makes button\n * @param {string} text - button text\n * @param {Element} appendTo - element to append created input\n * @param {boolean} hidden - pass true to hide button\n * @param {function} onSubmit - callback for click\n *\n * @return {Element}\n */\nfunction button({text, appendTo, hidden, onSubmit}) {\n  const wrapper = _dom__WEBPACK_IMPORTED_MODULE_0__[\"make\"]('div', [BUTTON_CSS.wrapper]);\n\n  wrapper.textContent = text;\n\n  if (appendTo){\n    appendTo.appendChild(wrapper);\n  }\n\n  if (hidden){\n    wrapper.hidden = true;\n  }\n\n  wrapper.addEventListener('click', () => {\n    if (typeof onSubmit === 'function'){\n      onSubmit(wrapper);\n    }\n  });\n\n  return wrapper;\n}\n\nfunction setButtonLoadingState(button, state = true, text = 'PLEASE WAIT...') {\n  if (state === true) {\n    button.__prev_text = button.textContent;\n    button.textContent = text;\n  } else {\n    button.textContent = button.__prev_text;\n  }\n\n  button.classList.toggle(BUTTON_CSS.wrapperLoading, state);\n\n}\n\nconst DROPDOWN_CSS = {\n  wrapper: 't-dropdown',\n  item: 't-dropdown__item',\n}\n\n/**\n * Makes custom dropdown element\n * Uses in country select\n *\n * @return {Element}\n */\nfunction dropdown({items, appendTo, onSelect}) {\n  const wrapper = _dom__WEBPACK_IMPORTED_MODULE_0__[\"make\"]('div', [DROPDOWN_CSS.wrapper]);\n\n  updateDropdownItems(wrapper, items);\n\n  wrapper.addEventListener('mousedown', (event) => {\n    let clickedItem = event.target.closest(`.${DROPDOWN_CSS.item}`)\n\n    onSelect && onSelect(clickedItem);\n  })\n\n  if (appendTo){\n    appendTo.appendChild(wrapper);\n  }\n\n  return wrapper;\n}\n\nfunction updateDropdownItems(wrapper, items, search) {\n  if (!items.length){\n    wrapper.innerHTML = '<div class=\"empty\">There is no items left</div>';\n    return;\n  }\n\n  items.forEach(([code, abbr, name, pattern]) => {\n    const item = _dom__WEBPACK_IMPORTED_MODULE_0__[\"make\"]('div', [DROPDOWN_CSS.item]);\n\n    let title = name;\n\n    if (search) {\n      title = name.replace(new RegExp(search, 'gi'), (match) => {\n        return `<span class=\"searched\">${match}</span>`;\n      });\n    }\n\n    item.innerHTML = `<i>${ abbr ? Object(_emoji_countries__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(abbr) : '🏁'}</i> <span class=\"name\">${title}</span> <span class=\"code\">+${code}</span>`;\n    item.dataset.id = code;\n    item.dataset.mask = pattern;\n\n    wrapper.appendChild(item);\n  });\n}\n\n\n/**\n * Auth uploader\n */\nconst AU_CSS = {\n  wrapper: 'au',\n  wrapperFilled: 'au--filled',\n  icon: 'au__icon',\n  image: 'au__image',\n}\n\nfunction authUploader({onChange}){\n  const wrapper = _dom__WEBPACK_IMPORTED_MODULE_0__[\"make\"]('div', AU_CSS.wrapper);\n  const icon = _dom__WEBPACK_IMPORTED_MODULE_0__[\"make\"]('div', AU_CSS.icon, { innerHTML: _assets_svg_cameraadd_svg_svg__WEBPACK_IMPORTED_MODULE_3___default.a });\n  const image = _dom__WEBPACK_IMPORTED_MODULE_0__[\"make\"]('div', AU_CSS.image);\n  const input = _dom__WEBPACK_IMPORTED_MODULE_0__[\"make\"]('input', null, {\n    type: 'file',\n    accept: 'image/*'\n  });\n\n  wrapper.onclick = () => {\n    input.click();\n  };\n\n  input.onchange = (e) => {\n    if (!e.target.files){\n      return;\n    }\n\n    const file = e.target.files[0];\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n\n    reader.onload = ( e ) => {\n      onChange(e.target.result)\n\n      image.style.backgroundImage = `url(${e.target.result})`;\n      wrapper.classList.add(AU_CSS.wrapperFilled)\n    };\n\n    e.target.value = null;\n  };\n\n  wrapper.appendChild(image);\n  wrapper.appendChild(icon);\n\n  return wrapper;\n\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utils/dom_elements.js\n");

/***/ }),

/***/ "./src/utils/emoji-countries.js":
/*!**************************************!*\
  !*** ./src/utils/emoji-countries.js ***!
  \**************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return countryCodeEmoji; });\n// country code regex\nconst CC_REGEX = /^[a-z]{2}$/i;\n\n// offset between uppercase ascii and regional indicator symbols\nconst OFFSET = 127397;\n\n/**\n * convert country code to corresponding emoji flag\n * @param {string} cc - country code string\n * @returns {string} country code emoji\n */\nfunction countryCodeEmoji(cc) {\n  if (!CC_REGEX.test(cc)) {\n    const type = typeof cc;\n    throw new TypeError(\n      `cc argument must be an ISO 3166-1 alpha-2 string, but got '${\n        type === 'string' ? cc : type\n      }' instead.`,\n    );\n  }\n\n  const chars = [...cc.toUpperCase()].map(c => c.charCodeAt() + OFFSET);\n  return String.fromCodePoint(...chars);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbHMvZW1vamktY291bnRyaWVzLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vVGVsZWdyYW1qcy8uL3NyYy91dGlscy9lbW9qaS1jb3VudHJpZXMuanM/MDNiYyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBjb3VudHJ5IGNvZGUgcmVnZXhcbmNvbnN0IENDX1JFR0VYID0gL15bYS16XXsyfSQvaTtcblxuLy8gb2Zmc2V0IGJldHdlZW4gdXBwZXJjYXNlIGFzY2lpIGFuZCByZWdpb25hbCBpbmRpY2F0b3Igc3ltYm9sc1xuY29uc3QgT0ZGU0VUID0gMTI3Mzk3O1xuXG4vKipcbiAqIGNvbnZlcnQgY291bnRyeSBjb2RlIHRvIGNvcnJlc3BvbmRpbmcgZW1vamkgZmxhZ1xuICogQHBhcmFtIHtzdHJpbmd9IGNjIC0gY291bnRyeSBjb2RlIHN0cmluZ1xuICogQHJldHVybnMge3N0cmluZ30gY291bnRyeSBjb2RlIGVtb2ppXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvdW50cnlDb2RlRW1vamkoY2MpIHtcbiAgaWYgKCFDQ19SRUdFWC50ZXN0KGNjKSkge1xuICAgIGNvbnN0IHR5cGUgPSB0eXBlb2YgY2M7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgIGBjYyBhcmd1bWVudCBtdXN0IGJlIGFuIElTTyAzMTY2LTEgYWxwaGEtMiBzdHJpbmcsIGJ1dCBnb3QgJyR7XG4gICAgICAgIHR5cGUgPT09ICdzdHJpbmcnID8gY2MgOiB0eXBlXG4gICAgICB9JyBpbnN0ZWFkLmAsXG4gICAgKTtcbiAgfVxuXG4gIGNvbnN0IGNoYXJzID0gWy4uLmNjLnRvVXBwZXJDYXNlKCldLm1hcChjID0+IGMuY2hhckNvZGVBdCgpICsgT0ZGU0VUKTtcbiAgcmV0dXJuIFN0cmluZy5mcm9tQ29kZVBvaW50KC4uLmNoYXJzKTtcbn1cbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/utils/emoji-countries.js\n");

/***/ }),

/***/ "./src/utils/keys.js":
/*!***************************!*\
  !*** ./src/utils/keys.js ***!
  \***************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  BACKSPACE: 8,\n  TAB: 9,\n  ENTER: 13,\n  SHIFT: 16,\n  CTRL: 17,\n  ALT: 18,\n  ESC: 27,\n  SPACE: 32,\n  LEFT: 37,\n  UP: 38,\n  DOWN: 40,\n  RIGHT: 39,\n  DELETE: 46,\n  META: 91,\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbHMva2V5cy5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL1RlbGVncmFtanMvLi9zcmMvdXRpbHMva2V5cy5qcz9mMjIzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IHtcbiAgQkFDS1NQQUNFOiA4LFxuICBUQUI6IDksXG4gIEVOVEVSOiAxMyxcbiAgU0hJRlQ6IDE2LFxuICBDVFJMOiAxNyxcbiAgQUxUOiAxOCxcbiAgRVNDOiAyNyxcbiAgU1BBQ0U6IDMyLFxuICBMRUZUOiAzNyxcbiAgVVA6IDM4LFxuICBET1dOOiA0MCxcbiAgUklHSFQ6IDM5LFxuICBERUxFVEU6IDQ2LFxuICBNRVRBOiA5MSxcbn1cbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/utils/keys.js\n");

/***/ }),

/***/ "./src/utils/numbers.js":
/*!******************************!*\
  !*** ./src/utils/numbers.js ***!
  \******************************/
/*! exports provided: int2uint, uintToInt, bytesToHex, b2s, bytesFromHex, bigint, bigintR, bigIntFromString, generateRandomInt128, random, longFromInts, randomBytes, convertToUint8Array, convertToByteArray, bytesCmp, bytesXor, bytesToArrayBuffer, bytesFromArrayBuffer, bytesFromBigInt, convertToArrayBuffer, bufferConcat, concat */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"int2uint\", function() { return int2uint; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"uintToInt\", function() { return uintToInt; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"bytesToHex\", function() { return bytesToHex; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b2s\", function() { return b2s; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"bytesFromHex\", function() { return bytesFromHex; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"bigint\", function() { return bigint; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"bigintR\", function() { return bigintR; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"bigIntFromString\", function() { return bigIntFromString; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"generateRandomInt128\", function() { return generateRandomInt128; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"random\", function() { return random; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"longFromInts\", function() { return longFromInts; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"randomBytes\", function() { return randomBytes; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"convertToUint8Array\", function() { return convertToUint8Array; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"convertToByteArray\", function() { return convertToByteArray; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"bytesCmp\", function() { return bytesCmp; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"bytesXor\", function() { return bytesXor; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"bytesToArrayBuffer\", function() { return bytesToArrayBuffer; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"bytesFromArrayBuffer\", function() { return bytesFromArrayBuffer; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"bytesFromBigInt\", function() { return bytesFromBigInt; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"convertToArrayBuffer\", function() { return convertToArrayBuffer; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"bufferConcat\", function() { return bufferConcat; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"concat\", function() { return concat; });\n/* harmony import */ var big_integer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! big-integer */ \"./node_modules/big-integer/BigInteger.js\");\n/* harmony import */ var big_integer__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(big_integer__WEBPACK_IMPORTED_MODULE_0__);\n\n\n/**\n * Converts int to unsigned int\n * @param {number} int\n */\nfunction int2uint(int) {\n  // return int >>> 0;\n\n  int = parseInt(int)\n  if (int < 0) {\n    int = int + 4294967296\n  }\n  return int\n}\n\n\nfunction uintToInt (val) {\n  if (val > 2147483647) {\n    val = val - 4294967296\n  }\n  return val\n}\n\nfunction bytesToHex(bytes, joiner = '') {\n  return Array.from(bytes, function(byte) {\n    return ('0' + (byte & 0xFF).toString(16)).slice(-2);\n  }).join(joiner)\n}\n\nfunction b2s(buffer, separator) {\n  return Array.from(new Uint8Array(buffer)).map(function (b) {\n    var s = b.toString(16);\n    return repeatString('0', 2 - s.length) + s;\n  }).join(separator || '');\n}\n\n\nfunction repeatString(str, n) {\n  if (str.repeat)\n    return str.repeat(n);\n  var string = \"\";\n  for (var i = 0; i < n; ++i)\n    string += str;\n  return string;\n}\n\nfunction bytesFromHex (hexString) {\n  var len = hexString.length,\n    i\n  var start = 0\n  var bytes = []\n\n  if (hexString.length % 2) {\n    bytes.push(parseInt(hexString.charAt(0), 16))\n    start++\n  }\n\n  for (i = start; i < len; i += 2) {\n    bytes.push(parseInt(hexString.substr(i, 2), 16))\n  }\n\n  return bytes\n}\n\n\nfunction bigint (num) {\n  return big_integer__WEBPACK_IMPORTED_MODULE_0___default()(num.toString(16), 16)\n}\n\nfunction bigintR (num, r) {\n  return big_integer__WEBPACK_IMPORTED_MODULE_0___default()(num, r)\n}\n\nfunction bigIntFromString(strNum) {\n  return big_integer__WEBPACK_IMPORTED_MODULE_0___default()(strNum)\n}\n\n/**\n * Return random int128\n * Used for 'nonce' generation\n * @return {number[]}\n */\nfunction generateRandomInt128() {\n  let nonce = [];\n\n  for (let i = 0; i < 16; i++) {\n    nonce.push(random(0xFF))\n  }\n\n  return nonce;\n}\n\nfunction random(maxValue) {\n  return Math.floor(Math.random() * maxValue)\n}\n\nfunction longFromInts(high, low) {\n  return bigint(high).shiftLeft(32).add(bigint(low)).toString(10)\n}\n\n\nfunction randomBytes(n) {\n  var b = new Uint8Array(n);\n  for (var i = 0; i < n; ++i)\n    b[i] = rand(0, 255);\n  return b.buffer;\n}\n\n\nfunction rand(from, to) {\n  return Math.round(Math.random() * (to - from)) + from;\n}\n\n\nfunction convertToUint8Array (bytes) {\n  if (bytes.buffer !== undefined) {\n    return bytes\n  }\n  return new Uint8Array(bytes)\n}\n\nfunction convertToByteArray (bytes) {\n  if (Array.isArray(bytes)) {\n    return bytes\n  }\n  bytes = convertToUint8Array(bytes)\n  var newBytes = []\n  for (var i = 0, len = bytes.length; i < len; i++) {\n    newBytes.push(bytes[i])\n  }\n  return newBytes\n}\n\nfunction bytesCmp (bytes1, bytes2) {\n  var len = bytes1.length\n  if (len != bytes2.length) {\n    return false\n  }\n\n  for (var i = 0; i < len; i++) {\n    if (bytes1[i] != bytes2[i]) {\n      return false\n    }\n  }\n  return true\n}\n\nfunction bytesXor (bytes1, bytes2) {\n  var len = bytes1.length\n  var bytes = []\n\n  for (var i = 0; i < len; ++i) {\n    bytes[i] = bytes1[i] ^ bytes2[i]\n  }\n\n  return bytes\n}\n\n\n\n\nfunction bytesToArrayBuffer (b) {\n  return (new Uint8Array(b)).buffer\n}\n\n/**\n * Return bytes array from buffer\n * @param {ArrayBufferLike} buffer\n * @return {number[]}\n */\nfunction bytesFromArrayBuffer (buffer) {\n  const len = buffer.byteLength;\n  const byteView = new Uint8Array(buffer);\n  let bytes = [];\n\n  for (let i = 0; i < len; ++i) {\n    bytes[i] = byteView[i]\n  }\n\n  return bytes;\n}\n\n\nfunction bytesFromBigInt (bigInt, len) {\n  var bytes = bigInt.toByteArray()\n\n  if (len && bytes.length < len) {\n    var padding = []\n    for (var i = 0, needPadding = len - bytes.length; i < needPadding; i++) {\n      padding[i] = 0\n    }\n    if (bytes instanceof ArrayBuffer) {\n      bytes = bufferConcat(padding, bytes)\n    } else {\n      bytes = padding.concat(bytes)\n    }\n  }else {\n    while (!bytes[0] && (!len || bytes.length > len)) {\n      bytes = bytes.slice(1)\n    }\n  }\n\n  return bytes\n}\n\n\nfunction convertToArrayBuffer (bytes) {\n  // Be careful with converting subarrays!!\n  if (bytes instanceof ArrayBuffer) {\n    return bytes\n  }\n  if (bytes.buffer !== undefined &&\n    bytes.buffer.byteLength == bytes.length * bytes.BYTES_PER_ELEMENT) {\n    return bytes.buffer\n  }\n  return bytesToArrayBuffer(bytes)\n}\n\nfunction bufferConcat (buffer1, buffer2) {\n  var l1 = buffer1.byteLength || buffer1.length\n  var l2 = buffer2.byteLength || buffer2.length\n  var tmp = new Uint8Array(l1 + l2)\n  tmp.set(buffer1 instanceof ArrayBuffer ? new Uint8Array(buffer1) : buffer1, 0)\n  tmp.set(buffer2 instanceof ArrayBuffer ? new Uint8Array(buffer2) : buffer2, l1)\n\n  return tmp.buffer\n}\n\nfunction concat() {\n  var buffers = Array.from(arguments), n = 0;\n  for (var i = 0; i < buffers.length; ++i)\n    n += buffers[i].byteLength;\n  var buff = new Uint8Array(n);\n  for (var i = 0, j = 0; i < buffers.length; ++i) {\n    buff.set(new Uint8Array(buffers[i]), j);\n    j += buffers[i].byteLength;\n  }\n  return buff.buffer;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utils/numbers.js\n");

/***/ }),

/***/ "./src/utils/objects.js":
/*!******************************!*\
  !*** ./src/utils/objects.js ***!
  \******************************/
/*! exports provided: isObject */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isObject\", function() { return isObject; });\nfunction isObject(value) {\n  return value !== null && typeof value === 'object';\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbHMvb2JqZWN0cy5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL1RlbGVncmFtanMvLi9zcmMvdXRpbHMvb2JqZWN0cy5qcz9hMjJhIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBpc09iamVjdCh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT09IG51bGwgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0Jztcbn1cbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/utils/objects.js\n");

/***/ }),

/***/ "./src/utils/phone.js":
/*!****************************!*\
  !*** ./src/utils/phone.js ***!
  \****************************/
/*! exports provided: isValidNumber, isValidVerificationCode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isValidNumber\", function() { return isValidNumber; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isValidVerificationCode\", function() { return isValidVerificationCode; });\n/**\n * Checks phone number for validness\n * [Simple way]\n * @todo use Google lib for correct validation of international numbrs\n * https://catamphetamine.github.io/libphonenumber-js/\n *\n * @param {string} value\n *\n * @return {boolean}\n */\nfunction isValidNumber(value) {\n  return true// /\\+[\\d ]{11}/.test(value);\n}\n\n/**\n * Checks verification code for validness\n *\n *  @param {string} code\n *\n * @return {boolean}\n */\nfunction isValidVerificationCode(code) {\n  return /\\d{5}/.test(code);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbHMvcGhvbmUuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9UZWxlZ3JhbWpzLy4vc3JjL3V0aWxzL3Bob25lLmpzPzc0MmMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDaGVja3MgcGhvbmUgbnVtYmVyIGZvciB2YWxpZG5lc3NcbiAqIFtTaW1wbGUgd2F5XVxuICogQHRvZG8gdXNlIEdvb2dsZSBsaWIgZm9yIGNvcnJlY3QgdmFsaWRhdGlvbiBvZiBpbnRlcm5hdGlvbmFsIG51bWJyc1xuICogaHR0cHM6Ly9jYXRhbXBoZXRhbWluZS5naXRodWIuaW8vbGlicGhvbmVudW1iZXItanMvXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzVmFsaWROdW1iZXIodmFsdWUpIHtcbiAgcmV0dXJuIHRydWUvLyAvXFwrW1xcZCBdezExfS8udGVzdCh2YWx1ZSk7XG59XG5cbi8qKlxuICogQ2hlY2tzIHZlcmlmaWNhdGlvbiBjb2RlIGZvciB2YWxpZG5lc3NcbiAqXG4gKiAgQHBhcmFtIHtzdHJpbmd9IGNvZGVcbiAqXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNWYWxpZFZlcmlmaWNhdGlvbkNvZGUoY29kZSkge1xuICByZXR1cm4gL1xcZHs1fS8udGVzdChjb2RlKTtcbn1cbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/utils/phone.js\n");

/***/ }),

/***/ "./src/utils/rusha.js":
/*!****************************!*\
  !*** ./src/utils/rusha.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/*\n * Rusha, a JavaScript implementation of the Secure Hash Algorithm, SHA-1,\n * as defined in FIPS PUB 180-1, tuned for high performance with large inputs.\n * (http://github.com/srijs/rusha)\n *\n * Inspired by Paul Johnstons implementation (http://pajhome.org.uk/crypt/md5).\n *\n * Copyright (c) 2013 Sam Rijs (http://awesam.de).\n * Released under the terms of the MIT license as follows:\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n * IN THE SOFTWARE.\n */\n(function (global) {\n  // If we'e running in Node.JS, export a module.\n  if (true) {\n    module.exports = Rusha;\n  }\n  // If we're running in a DOM context, export\n  // the Rusha object to toplevel.\n  if (typeof global !== 'undefined') {\n    global.Rusha = Rusha;\n  }\n  // If we're running in a webworker, accept\n  // messages containing a jobid and a buffer\n  // or blob object, and return the hash result.\n  if (typeof FileReaderSync !== 'undefined') {\n    var reader = new FileReaderSync(), hasher = new Rusha(4 * 1024 * 1024);\n    self.onmessage = function onMessage(event) {\n      var hash, data = event.data.data;\n      if (data instanceof Blob) {\n        try {\n          data = reader.readAsBinaryString(data);\n        } catch (e) {\n          self.postMessage({\n            id: event.data.id,\n            error: e.name\n          });\n          return;\n        }\n      }\n      hash = hasher.digest(data);\n      self.postMessage({\n        id: event.data.id,\n        hash: hash\n      });\n    };\n  }\n  var util = {\n    getDataType: function (data) {\n      if (typeof data === 'string') {\n        return 'string';\n      }\n      if (data instanceof Array) {\n        return 'array';\n      }\n      if (typeof global !== 'undefined' && global.Buffer && global.Buffer.isBuffer(data)) {\n        return 'buffer';\n      }\n      if (data instanceof ArrayBuffer) {\n        return 'arraybuffer';\n      }\n      if (data.buffer instanceof ArrayBuffer) {\n        return 'view';\n      }\n      throw new Error('Unsupported data type.');\n    }\n  };\n  // The Rusha object is a wrapper around the low-level RushaCore.\n  // It provides means of converting different inputs to the\n  // format accepted by RushaCore as well as other utility methods.\n  function Rusha(chunkSize) {\n    'use strict';\n    // Private object structure.\n    var self$2 = { fill: 0 };\n    // Calculate the length of buffer that the sha1 routine uses\n    // including the padding.\n    var padlen = function (len) {\n      for (len += 9; len % 64 > 0; len += 1);\n      return len;\n    };\n    var padZeroes = function (bin, len) {\n      for (var i = len >> 2; i < bin.length; i++)\n        bin[i] = 0;\n    };\n    var padData = function (bin, chunkLen, msgLen) {\n      bin[chunkLen >> 2] |= 128 << 24 - (chunkLen % 4 << 3);\n      bin[((chunkLen >> 2) + 2 & ~15) + 15] = msgLen << 3;\n    };\n    // Convert a binary string and write it to the heap.\n    // A binary string is expected to only contain char codes < 256.\n    var convStr = function (H8, H32, start, len, off) {\n      var str = this, i, om = off % 4, lm = len % 4, j = len - lm;\n      if (j > 0) {\n        switch (om) {\n          case 0:\n            H8[off + 3 | 0] = str.charCodeAt(start);\n          case 1:\n            H8[off + 2 | 0] = str.charCodeAt(start + 1);\n          case 2:\n            H8[off + 1 | 0] = str.charCodeAt(start + 2);\n          case 3:\n            H8[off | 0] = str.charCodeAt(start + 3);\n        }\n      }\n      for (i = om; i < j; i = i + 4 | 0) {\n        H32[off + i >> 2] = str.charCodeAt(start + i) << 24 | str.charCodeAt(start + i + 1) << 16 | str.charCodeAt(start + i + 2) << 8 | str.charCodeAt(start + i + 3);\n      }\n      switch (lm) {\n        case 3:\n          H8[off + j + 1 | 0] = str.charCodeAt(start + j + 2);\n        case 2:\n          H8[off + j + 2 | 0] = str.charCodeAt(start + j + 1);\n        case 1:\n          H8[off + j + 3 | 0] = str.charCodeAt(start + j);\n      }\n    };\n    // Convert a buffer or array and write it to the heap.\n    // The buffer or array is expected to only contain elements < 256.\n    var convBuf = function (H8, H32, start, len, off) {\n      var buf = this, i, om = off % 4, lm = len % 4, j = len - lm;\n      if (j > 0) {\n        switch (om) {\n          case 0:\n            H8[off + 3 | 0] = buf[start];\n          case 1:\n            H8[off + 2 | 0] = buf[start + 1];\n          case 2:\n            H8[off + 1 | 0] = buf[start + 2];\n          case 3:\n            H8[off | 0] = buf[start + 3];\n        }\n      }\n      for (i = 4 - om; i < j; i = i += 4 | 0) {\n        H32[off + i >> 2] = buf[start + i] << 24 | buf[start + i + 1] << 16 | buf[start + i + 2] << 8 | buf[start + i + 3];\n      }\n      switch (lm) {\n        case 3:\n          H8[off + j + 1 | 0] = buf[start + j + 2];\n        case 2:\n          H8[off + j + 2 | 0] = buf[start + j + 1];\n        case 1:\n          H8[off + j + 3 | 0] = buf[start + j];\n      }\n    };\n    var convFn = function (data) {\n      switch (util.getDataType(data)) {\n        case 'string':\n          return convStr.bind(data);\n        case 'array':\n          return convBuf.bind(data);\n        case 'buffer':\n          return convBuf.bind(data);\n        case 'arraybuffer':\n          return convBuf.bind(new Uint8Array(data));\n        case 'view':\n          return convBuf.bind(new Uint8Array(data.buffer));\n      }\n    };\n    var slice = function (data, offset) {\n      switch (util.getDataType(data)) {\n        case 'string':\n          return data.slice(offset);\n        case 'array':\n          return data.slice(offset);\n        case 'buffer':\n          return data.slice(offset);\n        case 'arraybuffer':\n          return data.slice(offset);\n        case 'view':\n          return data.buffer.slice(offset);\n      }\n    };\n    // Convert an ArrayBuffer into its hexadecimal string representation.\n    var hex = function (arrayBuffer) {\n      var i, x, hex_tab = '0123456789abcdef', res = [], binarray = new Uint8Array(arrayBuffer);\n      for (i = 0; i < binarray.length; i++) {\n        x = binarray[i];\n        res[i] = hex_tab.charAt(x >> 4 & 15) + hex_tab.charAt(x >> 0 & 15);\n      }\n      return res.join('');\n    };\n    var ceilHeapSize = function (v) {\n      // The asm.js spec says:\n      // The heap object's byteLength must be either\n      // 2^n for n in [12, 24) or 2^24 * n for n ≥ 1.\n      // Also, byteLengths smaller than 2^16 are deprecated.\n      var p;\n      // If v is smaller than 2^16, the smallest possible solution\n      // is 2^16.\n      if (v <= 65536)\n        return 65536;\n      // If v < 2^24, we round up to 2^n,\n      // otherwise we round up to 2^24 * n.\n      if (v < 16777216) {\n        for (p = 1; p < v; p = p << 1);\n      } else {\n        for (p = 16777216; p < v; p += 16777216);\n      }\n      return p;\n    };\n    // Initialize the internal data structures to a new capacity.\n    var init = function (size) {\n      if (size % 64 > 0) {\n        throw new Error('Chunk size must be a multiple of 128 bit');\n      }\n      self$2.maxChunkLen = size;\n      self$2.padMaxChunkLen = padlen(size);\n      // The size of the heap is the sum of:\n      // 1. The padded input message size\n      // 2. The extended space the algorithm needs (320 byte)\n      // 3. The 160 bit state the algoritm uses\n      self$2.heap = new ArrayBuffer(ceilHeapSize(self$2.padMaxChunkLen + 320 + 20));\n      self$2.h32 = new Int32Array(self$2.heap);\n      self$2.h8 = new Int8Array(self$2.heap);\n      self$2.core = RushaCore({\n        Int32Array: Int32Array,\n        DataView: DataView\n      }, {}, self$2.heap);\n      self$2.buffer = null;\n    };\n    // Iinitializethe datastructures according\n    // to a chunk siyze.\n    init(chunkSize || 64 * 1024);\n    var initState = function (heap, padMsgLen) {\n      var io = new Int32Array(heap, padMsgLen + 320, 5);\n      io[0] = 1732584193;\n      io[1] = -271733879;\n      io[2] = -1732584194;\n      io[3] = 271733878;\n      io[4] = -1009589776;\n    };\n    var padChunk = function (chunkLen, msgLen) {\n      var padChunkLen = padlen(chunkLen);\n      var view = new Int32Array(self$2.heap, 0, padChunkLen >> 2);\n      padZeroes(view, chunkLen);\n      padData(view, chunkLen, msgLen);\n      return padChunkLen;\n    };\n    // Write data to the heap.\n    var write = function (data, chunkOffset, chunkLen) {\n      convFn(data)(self$2.h8, self$2.h32, chunkOffset, chunkLen, 0);\n    };\n    // Initialize and call the RushaCore,\n    // assuming an input buffer of length len * 4.\n    var coreCall = function (data, chunkOffset, chunkLen, msgLen, finalize) {\n      var padChunkLen = chunkLen;\n      if (finalize) {\n        padChunkLen = padChunk(chunkLen, msgLen);\n      }\n      write(data, chunkOffset, chunkLen);\n      self$2.core.hash(padChunkLen, self$2.padMaxChunkLen);\n    };\n    var getRawDigest = function (heap, padMaxChunkLen) {\n      var io = new Int32Array(heap, padMaxChunkLen + 320, 5);\n      var out = new Int32Array(5);\n      var arr = new DataView(out.buffer);\n      arr.setInt32(0, io[0], false);\n      arr.setInt32(4, io[1], false);\n      arr.setInt32(8, io[2], false);\n      arr.setInt32(12, io[3], false);\n      arr.setInt32(16, io[4], false);\n      return out;\n    };\n    // Calculate the hash digest as an array of 5 32bit integers.\n    var rawDigest = this.rawDigest = function (str) {\n      var msgLen = str.byteLength || str.length;\n      initState(self$2.heap, self$2.padMaxChunkLen);\n      var chunkOffset = 0, chunkLen = self$2.maxChunkLen, last;\n      for (chunkOffset = 0; msgLen > chunkOffset + chunkLen; chunkOffset += chunkLen) {\n        coreCall(str, chunkOffset, chunkLen, msgLen, false);\n      }\n      coreCall(str, chunkOffset, msgLen - chunkOffset, msgLen, true);\n      return getRawDigest(self$2.heap, self$2.padMaxChunkLen);\n    };\n    // The digest and digestFrom* interface returns the hash digest\n    // as a hex string.\n    this.digest = this.digestFromString = this.digestFromBuffer = this.digestFromArrayBuffer = function (str) {\n      return hex(rawDigest(str).buffer);\n    };\n  }\n  ;\n  // The low-level RushCore module provides the heart of Rusha,\n  // a high-speed sha1 implementation working on an Int32Array heap.\n  // At first glance, the implementation seems complicated, however\n  // with the SHA1 spec at hand, it is obvious this almost a textbook\n  // implementation that has a few functions hand-inlined and a few loops\n  // hand-unrolled.\n  function RushaCore(stdlib, foreign, heap) {\n    'use asm';\n    var H = new stdlib.Int32Array(heap);\n    function hash(k, x) {\n      // k in bytes\n      k = k | 0;\n      x = x | 0;\n      var i = 0, j = 0, y0 = 0, z0 = 0, y1 = 0, z1 = 0, y2 = 0, z2 = 0, y3 = 0, z3 = 0, y4 = 0, z4 = 0, t0 = 0, t1 = 0;\n      y0 = H[x + 320 >> 2] | 0;\n      y1 = H[x + 324 >> 2] | 0;\n      y2 = H[x + 328 >> 2] | 0;\n      y3 = H[x + 332 >> 2] | 0;\n      y4 = H[x + 336 >> 2] | 0;\n      for (i = 0; (i | 0) < (k | 0); i = i + 64 | 0) {\n        z0 = y0;\n        z1 = y1;\n        z2 = y2;\n        z3 = y3;\n        z4 = y4;\n        for (j = 0; (j | 0) < 64; j = j + 4 | 0) {\n          t1 = H[i + j >> 2] | 0;\n          t0 = ((y0 << 5 | y0 >>> 27) + (y1 & y2 | ~y1 & y3) | 0) + ((t1 + y4 | 0) + 1518500249 | 0) | 0;\n          y4 = y3;\n          y3 = y2;\n          y2 = y1 << 30 | y1 >>> 2;\n          y1 = y0;\n          y0 = t0;\n          ;\n          H[k + j >> 2] = t1;\n        }\n        for (j = k + 64 | 0; (j | 0) < (k + 80 | 0); j = j + 4 | 0) {\n          t1 = (H[j - 12 >> 2] ^ H[j - 32 >> 2] ^ H[j - 56 >> 2] ^ H[j - 64 >> 2]) << 1 | (H[j - 12 >> 2] ^ H[j - 32 >> 2] ^ H[j - 56 >> 2] ^ H[j - 64 >> 2]) >>> 31;\n          t0 = ((y0 << 5 | y0 >>> 27) + (y1 & y2 | ~y1 & y3) | 0) + ((t1 + y4 | 0) + 1518500249 | 0) | 0;\n          y4 = y3;\n          y3 = y2;\n          y2 = y1 << 30 | y1 >>> 2;\n          y1 = y0;\n          y0 = t0;\n          ;\n          H[j >> 2] = t1;\n        }\n        for (j = k + 80 | 0; (j | 0) < (k + 160 | 0); j = j + 4 | 0) {\n          t1 = (H[j - 12 >> 2] ^ H[j - 32 >> 2] ^ H[j - 56 >> 2] ^ H[j - 64 >> 2]) << 1 | (H[j - 12 >> 2] ^ H[j - 32 >> 2] ^ H[j - 56 >> 2] ^ H[j - 64 >> 2]) >>> 31;\n          t0 = ((y0 << 5 | y0 >>> 27) + (y1 ^ y2 ^ y3) | 0) + ((t1 + y4 | 0) + 1859775393 | 0) | 0;\n          y4 = y3;\n          y3 = y2;\n          y2 = y1 << 30 | y1 >>> 2;\n          y1 = y0;\n          y0 = t0;\n          ;\n          H[j >> 2] = t1;\n        }\n        for (j = k + 160 | 0; (j | 0) < (k + 240 | 0); j = j + 4 | 0) {\n          t1 = (H[j - 12 >> 2] ^ H[j - 32 >> 2] ^ H[j - 56 >> 2] ^ H[j - 64 >> 2]) << 1 | (H[j - 12 >> 2] ^ H[j - 32 >> 2] ^ H[j - 56 >> 2] ^ H[j - 64 >> 2]) >>> 31;\n          t0 = ((y0 << 5 | y0 >>> 27) + (y1 & y2 | y1 & y3 | y2 & y3) | 0) + ((t1 + y4 | 0) - 1894007588 | 0) | 0;\n          y4 = y3;\n          y3 = y2;\n          y2 = y1 << 30 | y1 >>> 2;\n          y1 = y0;\n          y0 = t0;\n          ;\n          H[j >> 2] = t1;\n        }\n        for (j = k + 240 | 0; (j | 0) < (k + 320 | 0); j = j + 4 | 0) {\n          t1 = (H[j - 12 >> 2] ^ H[j - 32 >> 2] ^ H[j - 56 >> 2] ^ H[j - 64 >> 2]) << 1 | (H[j - 12 >> 2] ^ H[j - 32 >> 2] ^ H[j - 56 >> 2] ^ H[j - 64 >> 2]) >>> 31;\n          t0 = ((y0 << 5 | y0 >>> 27) + (y1 ^ y2 ^ y3) | 0) + ((t1 + y4 | 0) - 899497514 | 0) | 0;\n          y4 = y3;\n          y3 = y2;\n          y2 = y1 << 30 | y1 >>> 2;\n          y1 = y0;\n          y0 = t0;\n          ;\n          H[j >> 2] = t1;\n        }\n        y0 = y0 + z0 | 0;\n        y1 = y1 + z1 | 0;\n        y2 = y2 + z2 | 0;\n        y3 = y3 + z3 | 0;\n        y4 = y4 + z4 | 0;\n      }\n      H[x + 320 >> 2] = y0;\n      H[x + 324 >> 2] = y1;\n      H[x + 328 >> 2] = y2;\n      H[x + 332 >> 2] = y3;\n      H[x + 336 >> 2] = y4;\n    }\n    return { hash: hash };\n  }\n}(this));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utils/rusha.js\n");

/***/ }),

/***/ "./src/utils/secure-random.js":
/*!************************************!*\
  !*** ./src/utils/secure-random.js ***!
  \************************************/
/*! exports provided: fillWithRandomBytes */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fillWithRandomBytes\", function() { return fillWithRandomBytes; });\n// Random number generator - requires a PRNG backend, e.g. prng4.js\n\n// For best results, put code like\n// <body onClick='rng_seed_time();' onKeyPress='rng_seed_time();'>\n// in your main HTML document.\n\nvar rng_state;\nvar rng_pool;\nvar rng_pptr;\n\n// Pool size must be a multiple of 4 and greater than 32.\n// An array of bytes the size of the pool will be passed to init()\nvar rng_psize = 256;\n\n/**\n * @todo call rng_seed_time by document onclick or keypress\n */\n\n// Mix in a 32-bit integer into the pool\nfunction rng_seed_int(x) {\n  rng_pool[rng_pptr++] ^= x & 255;\n  rng_pool[rng_pptr++] ^= (x >> 8) & 255;\n  rng_pool[rng_pptr++] ^= (x >> 16) & 255;\n  rng_pool[rng_pptr++] ^= (x >> 24) & 255;\n  if(rng_pptr >= rng_psize) rng_pptr -= rng_psize;\n}\n\n// Mix in the current time (w/milliseconds) into the pool\nfunction rng_seed_time() {\n  rng_seed_int(new Date().getTime());\n}\n\n// Initialize the pool with junk if needed.\nif(rng_pool == null) {\n  rng_pool = new Array();\n  rng_pptr = 0;\n  var global = typeof window !== 'undefined' ? window : undefined;\n  var t;\n  if (global && global.crypto && global.crypto.getRandomValues) {\n    // Use webcrypto if available\n    var ua = new Uint8Array(32);\n    global.crypto.getRandomValues(ua);\n    for(t = 0; t < 32; ++t)\n      rng_pool[rng_pptr++] = ua[t];\n  }\n  if(navigator.appName == \"Netscape\" && navigator.appVersion < \"5\" && global && global.crypto) {\n    // Extract entropy (256 bits) from NS4 RNG if available\n    var z = global.crypto.random(32);\n    for(t = 0; t < z.length; ++t)\n      rng_pool[rng_pptr++] = z.charCodeAt(t) & 255;\n  }\n  while(rng_pptr < rng_psize) {  // extract some randomness from Math.random()\n    t = Math.floor(65536 * Math.random());\n    rng_pool[rng_pptr++] = t >>> 8;\n    rng_pool[rng_pptr++] = t & 255;\n  }\n  rng_pptr = 0;\n  rng_seed_time();\n  //rng_seed_int(window.screenX);\n  //rng_seed_int(window.screenY);\n}\n\nfunction rng_get_byte() {\n  if(rng_state == null) {\n    rng_seed_time();\n    rng_state = prng_newstate();\n    rng_state.init(rng_pool);\n    for(rng_pptr = 0; rng_pptr < rng_pool.length; ++rng_pptr)\n      rng_pool[rng_pptr] = 0;\n    rng_pptr = 0;\n    //rng_pool = null;\n  }\n  // TODO: allow reseeding after first request\n  return rng_state.next();\n}\n\nfunction rng_get_bytes(ba) {\n  var i;\n  for(i = 0; i < ba.length; ++i) ba[i] = rng_get_byte();\n}\n\n\n// SecureRandom.prototype.nextBytes = rng_get_bytes;\n\nconst fillWithRandomBytes = rng_get_bytes;\n\n// prng4.js - uses Arcfour as a PRNG\n\nfunction Arcfour() {\n  this.i = 0;\n  this.j = 0;\n  this.S = new Array();\n}\n\n// Initialize arcfour context from key, an array of ints, each from [0..255]\nfunction ARC4init(key) {\n  var i, j, t;\n  for(i = 0; i < 256; ++i)\n    this.S[i] = i;\n  j = 0;\n  for(i = 0; i < 256; ++i) {\n    j = (j + this.S[i] + key[i % key.length]) & 255;\n    t = this.S[i];\n    this.S[i] = this.S[j];\n    this.S[j] = t;\n  }\n  this.i = 0;\n  this.j = 0;\n}\n\nfunction ARC4next() {\n  var t;\n  this.i = (this.i + 1) & 255;\n  this.j = (this.j + this.S[this.i]) & 255;\n  t = this.S[this.i];\n  this.S[this.i] = this.S[this.j];\n  this.S[this.j] = t;\n  return this.S[(t + this.S[this.i]) & 255];\n}\n\nArcfour.prototype.init = ARC4init;\nArcfour.prototype.next = ARC4next;\n\n// Plug in your RNG constructor here\nfunction prng_newstate() {\n  return new Arcfour();\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbHMvc2VjdXJlLXJhbmRvbS5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL1RlbGVncmFtanMvLi9zcmMvdXRpbHMvc2VjdXJlLXJhbmRvbS5qcz85NzZhIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFJhbmRvbSBudW1iZXIgZ2VuZXJhdG9yIC0gcmVxdWlyZXMgYSBQUk5HIGJhY2tlbmQsIGUuZy4gcHJuZzQuanNcblxuLy8gRm9yIGJlc3QgcmVzdWx0cywgcHV0IGNvZGUgbGlrZVxuLy8gPGJvZHkgb25DbGljaz0ncm5nX3NlZWRfdGltZSgpOycgb25LZXlQcmVzcz0ncm5nX3NlZWRfdGltZSgpOyc+XG4vLyBpbiB5b3VyIG1haW4gSFRNTCBkb2N1bWVudC5cblxudmFyIHJuZ19zdGF0ZTtcbnZhciBybmdfcG9vbDtcbnZhciBybmdfcHB0cjtcblxuLy8gUG9vbCBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiA0IGFuZCBncmVhdGVyIHRoYW4gMzIuXG4vLyBBbiBhcnJheSBvZiBieXRlcyB0aGUgc2l6ZSBvZiB0aGUgcG9vbCB3aWxsIGJlIHBhc3NlZCB0byBpbml0KClcbnZhciBybmdfcHNpemUgPSAyNTY7XG5cbi8qKlxuICogQHRvZG8gY2FsbCBybmdfc2VlZF90aW1lIGJ5IGRvY3VtZW50IG9uY2xpY2sgb3Iga2V5cHJlc3NcbiAqL1xuXG4vLyBNaXggaW4gYSAzMi1iaXQgaW50ZWdlciBpbnRvIHRoZSBwb29sXG5mdW5jdGlvbiBybmdfc2VlZF9pbnQoeCkge1xuICBybmdfcG9vbFtybmdfcHB0cisrXSBePSB4ICYgMjU1O1xuICBybmdfcG9vbFtybmdfcHB0cisrXSBePSAoeCA+PiA4KSAmIDI1NTtcbiAgcm5nX3Bvb2xbcm5nX3BwdHIrK10gXj0gKHggPj4gMTYpICYgMjU1O1xuICBybmdfcG9vbFtybmdfcHB0cisrXSBePSAoeCA+PiAyNCkgJiAyNTU7XG4gIGlmKHJuZ19wcHRyID49IHJuZ19wc2l6ZSkgcm5nX3BwdHIgLT0gcm5nX3BzaXplO1xufVxuXG4vLyBNaXggaW4gdGhlIGN1cnJlbnQgdGltZSAody9taWxsaXNlY29uZHMpIGludG8gdGhlIHBvb2xcbmZ1bmN0aW9uIHJuZ19zZWVkX3RpbWUoKSB7XG4gIHJuZ19zZWVkX2ludChuZXcgRGF0ZSgpLmdldFRpbWUoKSk7XG59XG5cbi8vIEluaXRpYWxpemUgdGhlIHBvb2wgd2l0aCBqdW5rIGlmIG5lZWRlZC5cbmlmKHJuZ19wb29sID09IG51bGwpIHtcbiAgcm5nX3Bvb2wgPSBuZXcgQXJyYXkoKTtcbiAgcm5nX3BwdHIgPSAwO1xuICB2YXIgZ2xvYmFsID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiB0aGlzO1xuICB2YXIgdDtcbiAgaWYgKGdsb2JhbCAmJiBnbG9iYWwuY3J5cHRvICYmIGdsb2JhbC5jcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKSB7XG4gICAgLy8gVXNlIHdlYmNyeXB0byBpZiBhdmFpbGFibGVcbiAgICB2YXIgdWEgPSBuZXcgVWludDhBcnJheSgzMik7XG4gICAgZ2xvYmFsLmNyeXB0by5nZXRSYW5kb21WYWx1ZXModWEpO1xuICAgIGZvcih0ID0gMDsgdCA8IDMyOyArK3QpXG4gICAgICBybmdfcG9vbFtybmdfcHB0cisrXSA9IHVhW3RdO1xuICB9XG4gIGlmKG5hdmlnYXRvci5hcHBOYW1lID09IFwiTmV0c2NhcGVcIiAmJiBuYXZpZ2F0b3IuYXBwVmVyc2lvbiA8IFwiNVwiICYmIGdsb2JhbCAmJiBnbG9iYWwuY3J5cHRvKSB7XG4gICAgLy8gRXh0cmFjdCBlbnRyb3B5ICgyNTYgYml0cykgZnJvbSBOUzQgUk5HIGlmIGF2YWlsYWJsZVxuICAgIHZhciB6ID0gZ2xvYmFsLmNyeXB0by5yYW5kb20oMzIpO1xuICAgIGZvcih0ID0gMDsgdCA8IHoubGVuZ3RoOyArK3QpXG4gICAgICBybmdfcG9vbFtybmdfcHB0cisrXSA9IHouY2hhckNvZGVBdCh0KSAmIDI1NTtcbiAgfVxuICB3aGlsZShybmdfcHB0ciA8IHJuZ19wc2l6ZSkgeyAgLy8gZXh0cmFjdCBzb21lIHJhbmRvbW5lc3MgZnJvbSBNYXRoLnJhbmRvbSgpXG4gICAgdCA9IE1hdGguZmxvb3IoNjU1MzYgKiBNYXRoLnJhbmRvbSgpKTtcbiAgICBybmdfcG9vbFtybmdfcHB0cisrXSA9IHQgPj4+IDg7XG4gICAgcm5nX3Bvb2xbcm5nX3BwdHIrK10gPSB0ICYgMjU1O1xuICB9XG4gIHJuZ19wcHRyID0gMDtcbiAgcm5nX3NlZWRfdGltZSgpO1xuICAvL3JuZ19zZWVkX2ludCh3aW5kb3cuc2NyZWVuWCk7XG4gIC8vcm5nX3NlZWRfaW50KHdpbmRvdy5zY3JlZW5ZKTtcbn1cblxuZnVuY3Rpb24gcm5nX2dldF9ieXRlKCkge1xuICBpZihybmdfc3RhdGUgPT0gbnVsbCkge1xuICAgIHJuZ19zZWVkX3RpbWUoKTtcbiAgICBybmdfc3RhdGUgPSBwcm5nX25ld3N0YXRlKCk7XG4gICAgcm5nX3N0YXRlLmluaXQocm5nX3Bvb2wpO1xuICAgIGZvcihybmdfcHB0ciA9IDA7IHJuZ19wcHRyIDwgcm5nX3Bvb2wubGVuZ3RoOyArK3JuZ19wcHRyKVxuICAgICAgcm5nX3Bvb2xbcm5nX3BwdHJdID0gMDtcbiAgICBybmdfcHB0ciA9IDA7XG4gICAgLy9ybmdfcG9vbCA9IG51bGw7XG4gIH1cbiAgLy8gVE9ETzogYWxsb3cgcmVzZWVkaW5nIGFmdGVyIGZpcnN0IHJlcXVlc3RcbiAgcmV0dXJuIHJuZ19zdGF0ZS5uZXh0KCk7XG59XG5cbmZ1bmN0aW9uIHJuZ19nZXRfYnl0ZXMoYmEpIHtcbiAgdmFyIGk7XG4gIGZvcihpID0gMDsgaSA8IGJhLmxlbmd0aDsgKytpKSBiYVtpXSA9IHJuZ19nZXRfYnl0ZSgpO1xufVxuXG5cbi8vIFNlY3VyZVJhbmRvbS5wcm90b3R5cGUubmV4dEJ5dGVzID0gcm5nX2dldF9ieXRlcztcblxuZXhwb3J0IGNvbnN0IGZpbGxXaXRoUmFuZG9tQnl0ZXMgPSBybmdfZ2V0X2J5dGVzO1xuXG4vLyBwcm5nNC5qcyAtIHVzZXMgQXJjZm91ciBhcyBhIFBSTkdcblxuZnVuY3Rpb24gQXJjZm91cigpIHtcbiAgdGhpcy5pID0gMDtcbiAgdGhpcy5qID0gMDtcbiAgdGhpcy5TID0gbmV3IEFycmF5KCk7XG59XG5cbi8vIEluaXRpYWxpemUgYXJjZm91ciBjb250ZXh0IGZyb20ga2V5LCBhbiBhcnJheSBvZiBpbnRzLCBlYWNoIGZyb20gWzAuLjI1NV1cbmZ1bmN0aW9uIEFSQzRpbml0KGtleSkge1xuICB2YXIgaSwgaiwgdDtcbiAgZm9yKGkgPSAwOyBpIDwgMjU2OyArK2kpXG4gICAgdGhpcy5TW2ldID0gaTtcbiAgaiA9IDA7XG4gIGZvcihpID0gMDsgaSA8IDI1NjsgKytpKSB7XG4gICAgaiA9IChqICsgdGhpcy5TW2ldICsga2V5W2kgJSBrZXkubGVuZ3RoXSkgJiAyNTU7XG4gICAgdCA9IHRoaXMuU1tpXTtcbiAgICB0aGlzLlNbaV0gPSB0aGlzLlNbal07XG4gICAgdGhpcy5TW2pdID0gdDtcbiAgfVxuICB0aGlzLmkgPSAwO1xuICB0aGlzLmogPSAwO1xufVxuXG5mdW5jdGlvbiBBUkM0bmV4dCgpIHtcbiAgdmFyIHQ7XG4gIHRoaXMuaSA9ICh0aGlzLmkgKyAxKSAmIDI1NTtcbiAgdGhpcy5qID0gKHRoaXMuaiArIHRoaXMuU1t0aGlzLmldKSAmIDI1NTtcbiAgdCA9IHRoaXMuU1t0aGlzLmldO1xuICB0aGlzLlNbdGhpcy5pXSA9IHRoaXMuU1t0aGlzLmpdO1xuICB0aGlzLlNbdGhpcy5qXSA9IHQ7XG4gIHJldHVybiB0aGlzLlNbKHQgKyB0aGlzLlNbdGhpcy5pXSkgJiAyNTVdO1xufVxuXG5BcmNmb3VyLnByb3RvdHlwZS5pbml0ID0gQVJDNGluaXQ7XG5BcmNmb3VyLnByb3RvdHlwZS5uZXh0ID0gQVJDNG5leHQ7XG5cbi8vIFBsdWcgaW4geW91ciBSTkcgY29uc3RydWN0b3IgaGVyZVxuZnVuY3Rpb24gcHJuZ19uZXdzdGF0ZSgpIHtcbiAgcmV0dXJuIG5ldyBBcmNmb3VyKCk7XG59XG5cbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/utils/secure-random.js\n");

/***/ }),

/***/ "./src/utils/sha1.js":
/*!***************************!*\
  !*** ./src/utils/sha1.js ***!
  \***************************/
/*! exports provided: default, sha1Hex */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return sha1; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"sha1Hex\", function() { return sha1Hex; });\n/* harmony import */ var _rusha__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./rusha */ \"./src/utils/rusha.js\");\n/* harmony import */ var _rusha__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_rusha__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _numbers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./numbers */ \"./src/utils/numbers.js\");\n\n\n\n/**\n * Singleton-like cache for Rusha\n */\nlet rushaInstance;\n\n/**\n *  Compute SHA-1 hash summ\n * @param bytes\n * @return {ArrayBufferLike}\n */\nfunction sha1HashSync (bytes) {\n  rushaInstance = rushaInstance || new _rusha__WEBPACK_IMPORTED_MODULE_0___default.a(1024 * 1024);\n\n  let hashBytes = rushaInstance.rawDigest(bytes).buffer;\n\n  return hashBytes\n}\n\n/**\n * Computes SHA-1 and return bytes\n * @param bytes\n * @return {number[]}\n * @deprecated\n */\nfunction sha1(bytes) {\n  // console.warn('DEPRECATED SHA1 usage')\n  // console.trace();\n  return Object(_numbers__WEBPACK_IMPORTED_MODULE_1__[\"bytesFromArrayBuffer\"])(sha1HashSync(bytes))\n}\n\n\n/**\n * Computes SHA-1 and return bytes\n * @param bytes\n * @return {number[]}\n * @deprecated\n */\nfunction sha1Hex(bytes) {\n  // console.warn('DEPRECATED SHA1 usage')\n  // console.trace();\n  return sha1HashSync(bytes)\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbHMvc2hhMS5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL1RlbGVncmFtanMvLi9zcmMvdXRpbHMvc2hhMS5qcz8wMzZlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSdXNoYSBmcm9tIFwiLi9ydXNoYVwiO1xuaW1wb3J0IHsgYnl0ZXNGcm9tQXJyYXlCdWZmZXIgfSBmcm9tICcuL251bWJlcnMnO1xuXG4vKipcbiAqIFNpbmdsZXRvbi1saWtlIGNhY2hlIGZvciBSdXNoYVxuICovXG5sZXQgcnVzaGFJbnN0YW5jZTtcblxuLyoqXG4gKiAgQ29tcHV0ZSBTSEEtMSBoYXNoIHN1bW1cbiAqIEBwYXJhbSBieXRlc1xuICogQHJldHVybiB7QXJyYXlCdWZmZXJMaWtlfVxuICovXG5mdW5jdGlvbiBzaGExSGFzaFN5bmMgKGJ5dGVzKSB7XG4gIHJ1c2hhSW5zdGFuY2UgPSBydXNoYUluc3RhbmNlIHx8IG5ldyBSdXNoYSgxMDI0ICogMTAyNCk7XG5cbiAgbGV0IGhhc2hCeXRlcyA9IHJ1c2hhSW5zdGFuY2UucmF3RGlnZXN0KGJ5dGVzKS5idWZmZXI7XG5cbiAgcmV0dXJuIGhhc2hCeXRlc1xufVxuXG4vKipcbiAqIENvbXB1dGVzIFNIQS0xIGFuZCByZXR1cm4gYnl0ZXNcbiAqIEBwYXJhbSBieXRlc1xuICogQHJldHVybiB7bnVtYmVyW119XG4gKiBAZGVwcmVjYXRlZFxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzaGExKGJ5dGVzKSB7XG4gIC8vIGNvbnNvbGUud2FybignREVQUkVDQVRFRCBTSEExIHVzYWdlJylcbiAgLy8gY29uc29sZS50cmFjZSgpO1xuICByZXR1cm4gYnl0ZXNGcm9tQXJyYXlCdWZmZXIoc2hhMUhhc2hTeW5jKGJ5dGVzKSlcbn1cblxuXG4vKipcbiAqIENvbXB1dGVzIFNIQS0xIGFuZCByZXR1cm4gYnl0ZXNcbiAqIEBwYXJhbSBieXRlc1xuICogQHJldHVybiB7bnVtYmVyW119XG4gKiBAZGVwcmVjYXRlZFxuICovXG5leHBvcnQgZnVuY3Rpb24gc2hhMUhleChieXRlcykge1xuICAvLyBjb25zb2xlLndhcm4oJ0RFUFJFQ0FURUQgU0hBMSB1c2FnZScpXG4gIC8vIGNvbnNvbGUudHJhY2UoKTtcbiAgcmV0dXJuIHNoYTFIYXNoU3luYyhieXRlcylcbn1cbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/utils/sha1.js\n");

/***/ }),

/***/ "./src/utils/sha256.js":
/*!*****************************!*\
  !*** ./src/utils/sha256.js ***!
  \*****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return sha256; });\n/* harmony import */ var _crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./crypto */ \"./src/utils/crypto.js\");\n/* harmony import */ var _numbers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./numbers */ \"./src/utils/numbers.js\");\n\n\n\nfunction sha256HashSync (bytes) {\n  // console.log(dT(), 'SHA-2 hash start', bytes.byteLength || bytes.length)\n  var hashWords = _crypto__WEBPACK_IMPORTED_MODULE_0__[\"default\"].SHA256(bytesToWords(bytes))\n  // console.log(dT(), 'SHA-2 hash finish')\n\n  var hashBytes = bytesFromWords(hashWords)\n\n  return hashBytes\n}\n\nfunction bytesToWords (bytes) {\n  if (bytes instanceof ArrayBuffer) {\n    bytes = new Uint8Array(bytes)\n  }\n  var len = bytes.length\n  var words = []\n  var i\n  for (i = 0; i < len; i++) {\n    words[i >>> 2] |= bytes[i] << (24 - (i % 4) * 8)\n  }\n\n  return new _crypto__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lib.WordArray.init(words, len)\n}\n\nfunction bytesFromWords (wordArray) {\n  var words = wordArray.words\n  var sigBytes = wordArray.sigBytes\n  var bytes = []\n\n  for (var i = 0; i < sigBytes; i++) {\n    bytes.push((words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff)\n  }\n\n  return bytes\n}\n\n\n/**\n * Computes SHA-256 and return bytes\n * @param bytes\n * @return {number[]}\n */\nfunction sha256(bytes) {\n  return sha256HashSync(bytes)\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbHMvc2hhMjU2LmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vVGVsZWdyYW1qcy8uL3NyYy91dGlscy9zaGEyNTYuanM/ZmVlZiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQ3J5cHRvSlMgZnJvbSBcIi4vY3J5cHRvXCI7XG5pbXBvcnQge2J5dGVzRnJvbUFycmF5QnVmZmVyfSBmcm9tIFwiLi9udW1iZXJzXCI7XG5cbmZ1bmN0aW9uIHNoYTI1Nkhhc2hTeW5jIChieXRlcykge1xuICAvLyBjb25zb2xlLmxvZyhkVCgpLCAnU0hBLTIgaGFzaCBzdGFydCcsIGJ5dGVzLmJ5dGVMZW5ndGggfHwgYnl0ZXMubGVuZ3RoKVxuICB2YXIgaGFzaFdvcmRzID0gQ3J5cHRvSlMuU0hBMjU2KGJ5dGVzVG9Xb3JkcyhieXRlcykpXG4gIC8vIGNvbnNvbGUubG9nKGRUKCksICdTSEEtMiBoYXNoIGZpbmlzaCcpXG5cbiAgdmFyIGhhc2hCeXRlcyA9IGJ5dGVzRnJvbVdvcmRzKGhhc2hXb3JkcylcblxuICByZXR1cm4gaGFzaEJ5dGVzXG59XG5cbmZ1bmN0aW9uIGJ5dGVzVG9Xb3JkcyAoYnl0ZXMpIHtcbiAgaWYgKGJ5dGVzIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHtcbiAgICBieXRlcyA9IG5ldyBVaW50OEFycmF5KGJ5dGVzKVxuICB9XG4gIHZhciBsZW4gPSBieXRlcy5sZW5ndGhcbiAgdmFyIHdvcmRzID0gW11cbiAgdmFyIGlcbiAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgd29yZHNbaSA+Pj4gMl0gfD0gYnl0ZXNbaV0gPDwgKDI0IC0gKGkgJSA0KSAqIDgpXG4gIH1cblxuICByZXR1cm4gbmV3IENyeXB0b0pTLmxpYi5Xb3JkQXJyYXkuaW5pdCh3b3JkcywgbGVuKVxufVxuXG5mdW5jdGlvbiBieXRlc0Zyb21Xb3JkcyAod29yZEFycmF5KSB7XG4gIHZhciB3b3JkcyA9IHdvcmRBcnJheS53b3Jkc1xuICB2YXIgc2lnQnl0ZXMgPSB3b3JkQXJyYXkuc2lnQnl0ZXNcbiAgdmFyIGJ5dGVzID0gW11cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHNpZ0J5dGVzOyBpKyspIHtcbiAgICBieXRlcy5wdXNoKCh3b3Jkc1tpID4+PiAyXSA+Pj4gKDI0IC0gKGkgJSA0KSAqIDgpKSAmIDB4ZmYpXG4gIH1cblxuICByZXR1cm4gYnl0ZXNcbn1cblxuXG4vKipcbiAqIENvbXB1dGVzIFNIQS0yNTYgYW5kIHJldHVybiBieXRlc1xuICogQHBhcmFtIGJ5dGVzXG4gKiBAcmV0dXJuIHtudW1iZXJbXX1cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2hhMjU2KGJ5dGVzKSB7XG4gIHJldHVybiBzaGEyNTZIYXNoU3luYyhieXRlcylcbn1cbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/utils/sha256.js\n");

/***/ }),

/***/ "./src/utils/string.js":
/*!*****************************!*\
  !*** ./src/utils/string.js ***!
  \*****************************/
/*! exports provided: trim, name, title, time, shortTime, duration, nl2br, escape */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"trim\", function() { return trim; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"name\", function() { return name; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"title\", function() { return title; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"time\", function() { return time; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"shortTime\", function() { return shortTime; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"duration\", function() { return duration; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"nl2br\", function() { return nl2br; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"escape\", function() { return escape; });\nfunction trim (s, max = 50){\n  return s.substring(0, max)\n}\n\n/**\n * @param user\n * @return {string|*}\n */\nfunction name(user = {}) {\n  if ( user.first_name ){\n    return user.first_name;\n  }\n\n  if (user.last_name ){\n    return user.last_name;\n  }\n\n  return '';\n}\n\n\n/**\n * Compose chat title\n * @param user\n * @return {string}\n */\nfunction title(user = {}) {\n  let comp = [];\n\n  if ( user.title ){\n    comp.push(user.title);\n  } else {\n    if ( user.first_name ){\n      comp.push(user.first_name);\n    }\n\n    if ( user.last_name ){\n      comp.push(user.last_name);\n    }\n  }\n\n\n\n  return comp.join(' ');\n}\n\n\nfunction time(ts){\n  const date = new Date(ts * 1000);\n  const now = new Date();\n  const diffDays = Math.floor((now - date) / (1000 * 60 * 60 * 24));\n\n  if (diffDays > 7){\n    return doubleDigit(date.getDate()) + '.' + doubleDigit(date.getMonth()) + '.' + (new String(date.getFullYear())).substring(2);\n  } else if (diffDays >= 1) {\n    return ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'][date.getDay()];\n  } else {\n    return doubleDigit(date.getHours()) + ':' + doubleDigit(date.getMinutes());\n  }\n}\n\nfunction shortTime(ts){\n  const date = new Date(ts * 1000);\n\n  return doubleDigit(date.getHours()) + ':' + doubleDigit(date.getMinutes());\n}\n\n/**\n * Formats number to 2 chars, add leading zero if need\n * @param {number} number\n * @return {string}\n */\nfunction doubleDigit(number) {\n  return number < 10 ? '0' + number : number;\n}\n\nfunction duration(d) {\n  if (d < 60){\n    return doubleDigit(0) + ':' + doubleDigit(d);\n  } else {\n    return doubleDigit(Math.floor(d / 60)) + ':' + doubleDigit(d % 60);\n  }\n}\n\nfunction nl2br(str, is_xhtml){\n  if (typeof str === 'undefined' || str === null) {\n    return '';\n  }\n  var breakTag = (is_xhtml || typeof is_xhtml === 'undefined') ? '<br />' : '<br>';\n  return (str + '').replace(/([^>\\r\\n]?)(\\r\\n|\\n\\r|\\r|\\n)/g, '$1' + breakTag + '$2');\n\n}\n\n\n/**\n * Encodes HTML special characters (examples: &, <, >)\n * @param {String} string - string to encode\n * @return {String} - encoded string\n */\nfunction escape(string) {\n  return string\n    .replace(/&/g, '&amp;')\n    .replace(/\"/g, '&quot;')\n    .replace(/'/g, '&#39;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;');\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbHMvc3RyaW5nLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vVGVsZWdyYW1qcy8uL3NyYy91dGlscy9zdHJpbmcuanM/N2Y0NiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gdHJpbSAocywgbWF4ID0gNTApe1xuICByZXR1cm4gcy5zdWJzdHJpbmcoMCwgbWF4KVxufVxuXG4vKipcbiAqIEBwYXJhbSB1c2VyXG4gKiBAcmV0dXJuIHtzdHJpbmd8Kn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG5hbWUodXNlciA9IHt9KSB7XG4gIGlmICggdXNlci5maXJzdF9uYW1lICl7XG4gICAgcmV0dXJuIHVzZXIuZmlyc3RfbmFtZTtcbiAgfVxuXG4gIGlmICh1c2VyLmxhc3RfbmFtZSApe1xuICAgIHJldHVybiB1c2VyLmxhc3RfbmFtZTtcbiAgfVxuXG4gIHJldHVybiAnJztcbn1cblxuXG4vKipcbiAqIENvbXBvc2UgY2hhdCB0aXRsZVxuICogQHBhcmFtIHVzZXJcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRpdGxlKHVzZXIgPSB7fSkge1xuICBsZXQgY29tcCA9IFtdO1xuXG4gIGlmICggdXNlci50aXRsZSApe1xuICAgIGNvbXAucHVzaCh1c2VyLnRpdGxlKTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoIHVzZXIuZmlyc3RfbmFtZSApe1xuICAgICAgY29tcC5wdXNoKHVzZXIuZmlyc3RfbmFtZSk7XG4gICAgfVxuXG4gICAgaWYgKCB1c2VyLmxhc3RfbmFtZSApe1xuICAgICAgY29tcC5wdXNoKHVzZXIubGFzdF9uYW1lKTtcbiAgICB9XG4gIH1cblxuXG5cbiAgcmV0dXJuIGNvbXAuam9pbignICcpO1xufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiB0aW1lKHRzKXtcbiAgY29uc3QgZGF0ZSA9IG5ldyBEYXRlKHRzICogMTAwMCk7XG4gIGNvbnN0IG5vdyA9IG5ldyBEYXRlKCk7XG4gIGNvbnN0IGRpZmZEYXlzID0gTWF0aC5mbG9vcigobm93IC0gZGF0ZSkgLyAoMTAwMCAqIDYwICogNjAgKiAyNCkpO1xuXG4gIGlmIChkaWZmRGF5cyA+IDcpe1xuICAgIHJldHVybiBkb3VibGVEaWdpdChkYXRlLmdldERhdGUoKSkgKyAnLicgKyBkb3VibGVEaWdpdChkYXRlLmdldE1vbnRoKCkpICsgJy4nICsgKG5ldyBTdHJpbmcoZGF0ZS5nZXRGdWxsWWVhcigpKSkuc3Vic3RyaW5nKDIpO1xuICB9IGVsc2UgaWYgKGRpZmZEYXlzID49IDEpIHtcbiAgICByZXR1cm4gWydNb24nLCAnVHVlJywgJ1dlZCcsICdUaHUnLCAnRnJpJywgJ1NhdCcsICdTdW4nXVtkYXRlLmdldERheSgpXTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZG91YmxlRGlnaXQoZGF0ZS5nZXRIb3VycygpKSArICc6JyArIGRvdWJsZURpZ2l0KGRhdGUuZ2V0TWludXRlcygpKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gc2hvcnRUaW1lKHRzKXtcbiAgY29uc3QgZGF0ZSA9IG5ldyBEYXRlKHRzICogMTAwMCk7XG5cbiAgcmV0dXJuIGRvdWJsZURpZ2l0KGRhdGUuZ2V0SG91cnMoKSkgKyAnOicgKyBkb3VibGVEaWdpdChkYXRlLmdldE1pbnV0ZXMoKSk7XG59XG5cbi8qKlxuICogRm9ybWF0cyBudW1iZXIgdG8gMiBjaGFycywgYWRkIGxlYWRpbmcgemVybyBpZiBuZWVkXG4gKiBAcGFyYW0ge251bWJlcn0gbnVtYmVyXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGRvdWJsZURpZ2l0KG51bWJlcikge1xuICByZXR1cm4gbnVtYmVyIDwgMTAgPyAnMCcgKyBudW1iZXIgOiBudW1iZXI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkdXJhdGlvbihkKSB7XG4gIGlmIChkIDwgNjApe1xuICAgIHJldHVybiBkb3VibGVEaWdpdCgwKSArICc6JyArIGRvdWJsZURpZ2l0KGQpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBkb3VibGVEaWdpdChNYXRoLmZsb29yKGQgLyA2MCkpICsgJzonICsgZG91YmxlRGlnaXQoZCAlIDYwKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gbmwyYnIoc3RyLCBpc194aHRtbCl7XG4gIGlmICh0eXBlb2Ygc3RyID09PSAndW5kZWZpbmVkJyB8fCBzdHIgPT09IG51bGwpIHtcbiAgICByZXR1cm4gJyc7XG4gIH1cbiAgdmFyIGJyZWFrVGFnID0gKGlzX3hodG1sIHx8IHR5cGVvZiBpc194aHRtbCA9PT0gJ3VuZGVmaW5lZCcpID8gJzxiciAvPicgOiAnPGJyPic7XG4gIHJldHVybiAoc3RyICsgJycpLnJlcGxhY2UoLyhbXj5cXHJcXG5dPykoXFxyXFxufFxcblxccnxcXHJ8XFxuKS9nLCAnJDEnICsgYnJlYWtUYWcgKyAnJDInKTtcblxufVxuXG5cbi8qKlxuICogRW5jb2RlcyBIVE1MIHNwZWNpYWwgY2hhcmFjdGVycyAoZXhhbXBsZXM6ICYsIDwsID4pXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyaW5nIC0gc3RyaW5nIHRvIGVuY29kZVxuICogQHJldHVybiB7U3RyaW5nfSAtIGVuY29kZWQgc3RyaW5nXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBlc2NhcGUoc3RyaW5nKSB7XG4gIHJldHVybiBzdHJpbmdcbiAgICAucmVwbGFjZSgvJi9nLCAnJmFtcDsnKVxuICAgIC5yZXBsYWNlKC9cIi9nLCAnJnF1b3Q7JylcbiAgICAucmVwbGFjZSgvJy9nLCAnJiMzOTsnKVxuICAgIC5yZXBsYWNlKC88L2csICcmbHQ7JylcbiAgICAucmVwbGFjZSgvPi9nLCAnJmd0OycpO1xufVxuXG5cbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/utils/string.js\n");

/***/ })

/******/ })["default"];
});